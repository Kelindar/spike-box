<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Spike.Runtime</name>
    </assembly>
    <members>
        <member name="T:Spike.Collections.ConcurrentPriorityQueue`2">
            <summary>Provides a thread-safe priority queue data structure.</summary>
            <typeparam name="TKey">Specifies the type of keys used to prioritize values.</typeparam>
            <typeparam name="TValue">Specifies the type of elements in the queue.</typeparam>
        </member>
        <member name="T:Spike.Collections.IPriorityQueue`2">
            <summary>
            Represents a contract for a priority queue.
            </summary>
            <typeparam name="TPriority">Type of the queue-item prioirty.</typeparam>
            <typeparam name="TValue">Type of the queue-item value.</typeparam>
        </member>
        <member name="M:Spike.Collections.IPriorityQueue`2.Enqueue(`0,`1)">
            <summary>
            Enqueues a new item to the queue.
            </summary>
            <param name="priority">The priority of the item.</param>
            <param name="value">The item value.</param>
        </member>
        <member name="M:Spike.Collections.IPriorityQueue`2.TryDequeue(Spike.Collections.HeapItem{`0,`1}@)">
            <summary>
            Attempts to dequeue an element from the queue.
            </summary>
            <param name="result">The dequeued element.</param>
            <returns>Whether the dequeue was successful or not.</returns>
        </member>
        <member name="M:Spike.Collections.IPriorityQueue`2.TryPeek(Spike.Collections.HeapItem{`0,`1}@)">
            <summary>
            Attempts to peek an element from the queue.
            </summary>
            <param name="result">The peeked element.</param>
            <returns>Whether the peek operation was successful or not.</returns>
        </member>
        <member name="P:Spike.Collections.IPriorityQueue`2.IsEmpty">
            <summary>
            Gets whether the queue is empty or not.
            </summary>
        </member>
        <member name="M:Spike.Collections.ConcurrentPriorityQueue`2.#ctor">
            <summary>Initializes a new instance of the ConcurrentPriorityQueue class.</summary>
        </member>
        <member name="M:Spike.Collections.ConcurrentPriorityQueue`2.#ctor(System.Collections.Generic.IEnumerable{Spike.Collections.HeapItem{`0,`1}})">
            <summary>Initializes a new instance of the ConcurrentPriorityQueue class that contains elements copied from the specified collection.</summary>
            <param name="collection">The collection whose elements are copied to the new ConcurrentPriorityQueue.</param>
        </member>
        <member name="M:Spike.Collections.ConcurrentPriorityQueue`2.Enqueue(`0,`1)">
            <summary>Adds the key/value pair to the priority queue.</summary>
            <param name="priority">The priority of the item to be added.</param>
            <param name="value">The item to be added.</param>
        </member>
        <member name="M:Spike.Collections.ConcurrentPriorityQueue`2.Enqueue(Spike.Collections.HeapItem{`0,`1})">
            <summary>Adds the key/value pair to the priority queue.</summary>
            <param name="item">The key/value pair to be added to the queue.</param>
        </member>
        <member name="M:Spike.Collections.ConcurrentPriorityQueue`2.TryDequeue(Spike.Collections.HeapItem{`0,`1}@)">
            <summary>Attempts to remove and return the next prioritized item in the queue.</summary>
            <param name="result">
            When this method returns, if the operation was successful, result contains the object removed. If
            no object was available to be removed, the value is unspecified.
            </param>
            <returns>
            true if an element was removed and returned from the queue succesfully; otherwise, false.
            </returns>
        </member>
        <member name="M:Spike.Collections.ConcurrentPriorityQueue`2.TryPeek(Spike.Collections.HeapItem{`0,`1}@)">
            <summary>Attempts to return the next prioritized item in the queue.</summary>
            <param name="result">
            When this method returns, if the operation was successful, result contains the object.
            The queue was not modified by the operation.
            </param>
            <returns>
            true if an element was returned from the queue succesfully; otherwise, false.
            </returns>
        </member>
        <member name="M:Spike.Collections.ConcurrentPriorityQueue`2.Clear">
            <summary>Empties the queue.</summary>
        </member>
        <member name="M:Spike.Collections.ConcurrentPriorityQueue`2.CopyTo(Spike.Collections.HeapItem{`0,`1}[],System.Int32)">
            <summary>Copies the elements of the collection to an array, starting at a particular array index.</summary>
            <param name="array">
            The one-dimensional array that is the destination of the elements copied from the queue.
            </param>
            <param name="index">
            The zero-based index in array at which copying begins.
            </param>
            <remarks>The elements will not be copied to the array in any guaranteed order.</remarks>
        </member>
        <member name="M:Spike.Collections.ConcurrentPriorityQueue`2.ToArray">
            <summary>Copies the elements stored in the queue to a new array.</summary>
            <returns>A new array containing a snapshot of elements copied from the queue.</returns>
        </member>
        <member name="M:Spike.Collections.ConcurrentPriorityQueue`2.System#Collections#Concurrent#IProducerConsumerCollection{Spike#Collections#HeapItem{TKey@TValue}}#TryAdd(Spike.Collections.HeapItem{`0,`1})">
            <summary>Attempts to add an item in the queue.</summary>
            <param name="item">The key/value pair to be added.</param>
            <returns>
            true if the pair was added; otherwise, false.
            </returns>
        </member>
        <member name="M:Spike.Collections.ConcurrentPriorityQueue`2.System#Collections#Concurrent#IProducerConsumerCollection{Spike#Collections#HeapItem{TKey@TValue}}#TryTake(Spike.Collections.HeapItem{`0,`1}@)">
            <summary>Attempts to remove and return the next prioritized item in the queue.</summary>
            <param name="item">
            When this method returns, if the operation was successful, result contains the object removed. If
            no object was available to be removed, the value is unspecified.
            </param>
            <returns>
            true if an element was removed and returned from the queue succesfully; otherwise, false.
            </returns>
        </member>
        <member name="M:Spike.Collections.ConcurrentPriorityQueue`2.GetEnumerator">
            <summary>Returns an enumerator that iterates through the collection.</summary>
            <returns>An enumerator for the contents of the queue.</returns>
            <remarks>
            The enumeration represents a moment-in-time snapshot of the contents of the queue. It does not
            reflect any updates to the collection after GetEnumerator was called. The enumerator is safe to
            use concurrently with reads from and writes to the queue.
            </remarks>
        </member>
        <member name="M:Spike.Collections.ConcurrentPriorityQueue`2.System#Collections#IEnumerable#GetEnumerator">
            <summary>Returns an enumerator that iterates through a collection.</summary>
            <returns>An IEnumerator that can be used to iterate through the collection.</returns>
        </member>
        <member name="M:Spike.Collections.ConcurrentPriorityQueue`2.System#Collections#ICollection#CopyTo(System.Array,System.Int32)">
            <summary>Copies the elements of the collection to an array, starting at a particular array index.</summary>
            <param name="array">
            The one-dimensional array that is the destination of the elements copied from the queue.
            </param>
            <param name="index">
            The zero-based index in array at which copying begins.
            </param>
        </member>
        <member name="P:Spike.Collections.ConcurrentPriorityQueue`2.IsEmpty">
            <summary>Gets whether the queue is empty.</summary>
        </member>
        <member name="P:Spike.Collections.ConcurrentPriorityQueue`2.Count">
            <summary>Gets the number of elements contained in the queue.</summary>
        </member>
        <member name="P:Spike.Collections.ConcurrentPriorityQueue`2.System#Collections#ICollection#IsSynchronized">
            <summary>
            Gets a value indicating whether access to the ICollection is synchronized with the SyncRoot.
            </summary>
        </member>
        <member name="P:Spike.Collections.ConcurrentPriorityQueue`2.System#Collections#ICollection#SyncRoot">
            <summary>
            Gets an object that can be used to synchronize access to the collection.
            </summary>
        </member>
        <member name="T:Spike.Collections.ConcurrentPriorityQueue`2.MinBinaryHeap">
            <summary>Implements a binary heap that prioritizes smaller values.</summary>
        </member>
        <member name="M:Spike.Collections.ConcurrentPriorityQueue`2.MinBinaryHeap.#ctor">
            <summary>Initializes an empty heap.</summary>
        </member>
        <member name="M:Spike.Collections.ConcurrentPriorityQueue`2.MinBinaryHeap.#ctor(Spike.Collections.ConcurrentPriorityQueue{`0,`1}.MinBinaryHeap)">
            <summary>Initializes a heap as a copy of another heap instance.</summary>
            <param name="heapToCopy">The heap to copy.</param>
            <remarks>Key/Value values are not deep cloned.</remarks>
        </member>
        <member name="M:Spike.Collections.ConcurrentPriorityQueue`2.MinBinaryHeap.Clear">
            <summary>Empties the heap.</summary>
        </member>
        <member name="M:Spike.Collections.ConcurrentPriorityQueue`2.MinBinaryHeap.Insert(`0,`1)">
            <summary>Adds an item to the heap.</summary>
        </member>
        <member name="M:Spike.Collections.ConcurrentPriorityQueue`2.MinBinaryHeap.Insert(Spike.Collections.HeapItem{`0,`1})">
            <summary>Adds an item to the heap.</summary>
        </member>
        <member name="M:Spike.Collections.ConcurrentPriorityQueue`2.MinBinaryHeap.Peek">
            <summary>Returns the entry at the top of the heap.</summary>
        </member>
        <member name="M:Spike.Collections.ConcurrentPriorityQueue`2.MinBinaryHeap.Remove">
            <summary>Removes the entry at the top of the heap.</summary>
        </member>
        <member name="P:Spike.Collections.ConcurrentPriorityQueue`2.MinBinaryHeap.Count">
            <summary>Gets the number of objects stored in the heap.</summary>
        </member>
        <member name="T:Spike.Collections.PriorityQueue`2">
            <summary>
            Stable (insertion-order preserving for equal-priority elements) PriorityQueue implementation.
            </summary>
            <typeparam name="TPriority">Type of the queue-item prioirty.</typeparam>
            <typeparam name="TValue">Type of the queue-item value.</typeparam>
        </member>
        <member name="M:Spike.Collections.PriorityQueue`2.Enqueue(`0,`1)">
            <summary>
            Enqueues a new item to the queue.
            </summary>
            <param name="priority">The priority of the item.</param>
            <param name="value">The item value.</param>
        </member>
        <member name="M:Spike.Collections.PriorityQueue`2.Dequeue">
            <summary>
            Attempts to dequeue an element from the queue.
            </summary>
            <returns>The dequeued element.</returns>
        </member>
        <member name="M:Spike.Collections.PriorityQueue`2.Peek">
            <summary>
            Attempts to peek an element from the queue.
            </summary>
            <returns>The peeked element.</returns>
        </member>
        <member name="M:Spike.Collections.PriorityQueue`2.TryDequeue(Spike.Collections.HeapItem{`0,`1}@)">
            <summary>
            Attempts to dequeue an element from the queue.
            </summary>
            <param name="result">The dequeued element.</param>
            <returns>Whether the dequeue was successful or not.</returns>
        </member>
        <member name="M:Spike.Collections.PriorityQueue`2.TryPeek(Spike.Collections.HeapItem{`0,`1}@)">
            <summary>
            Attempts to peek an element from the queue.
            </summary>
            <param name="result">The peeked element.</param>
            <returns>Whether the peek operation was successful or not.</returns>
        </member>
        <member name="P:Spike.Collections.PriorityQueue`2.IsEmpty">
            <summary>
            Gets whether the queue is empty or not.
            </summary>
        </member>
        <member name="T:Spike.Collections.HeapItem`2">
            <summary>
            Represents a key-value pair item on the heap.
            </summary>
            <typeparam name="TKey">The type of the key on the heap.</typeparam>
            <typeparam name="TValue">The type of the value on the heap.</typeparam>
        </member>
        <member name="F:Spike.Collections.HeapItem`2.Key">
            <summary>
            Gets or sets the key of this item.
            </summary>
        </member>
        <member name="F:Spike.Collections.HeapItem`2.Value">
            <summary>
            Gets or sets the value of this item.
            </summary>
        </member>
        <member name="M:Spike.Collections.HeapItem`2.#ctor(`0,`1)">
            <summary>
            Constructs a key-value pair item on the heap.
            </summary>
            <param name="key">The key of this item.</param>
            <param name="value">The value of this item.</param>
        </member>
        <member name="M:Spike.Collections.HeapItem`2.System#IComparable{Spike#Collections#HeapItem{TKey@TValue}}#CompareTo(Spike.Collections.HeapItem{`0,`1})">
            <summary>
            Compares this item to another heap item.
            </summary>
            <param name="rhs">The heap item to compare to.</param>
            <returns>The comparison result.</returns>
        </member>
        <member name="T:Spike.Collections.IHeap`1">
            <summary>
            Represents a contract for a heap collection.
            </summary>
            <typeparam name="T">The type of the item on the heap.</typeparam>
        </member>
        <member name="M:Spike.Collections.IHeap`1.Add(`0)">
            <summary>
            Add an element <c>item</c> to the heap.
            </summary>
        </member>
        <member name="M:Spike.Collections.IHeap`1.BuildHead">
            <summary>
            Builds the heap.
            </summary>
        </member>
        <member name="M:Spike.Collections.IHeap`1.Clear">
            <summary>
            Delete all elements from the heap.
            </summary>
        </member>
        <member name="M:Spike.Collections.IHeap`1.ExtractFirst">
            <summary>
            Return top element, removing it from the heap.
            </summary>
        </member>
        <member name="M:Spike.Collections.IHeap`1.Peek">
            <summary>
            Return top element, leaving it on the heap.
            </summary>
        </member>
        <member name="P:Spike.Collections.IHeap`1.Count">
            <summary>
            Returns the number of elements in the heap.
            </summary>
        </member>
        <member name="P:Spike.Collections.IHeap`1.IsEmpty">
            <summary>
            Return whether the heap is empty.
            </summary>
        </member>
        <member name="T:Spike.Collections.ImmutableStack`1">
            <summary>
            Represents an immutable stack.
            </summary>
            <typeparam name="T">The type of the item on this stack.</typeparam>
        </member>
        <member name="M:Spike.Collections.ImmutableStack`1.Push(`0)">
            <summary>
            Pushes a new item to the immutable stack.
            </summary>
            <param name="item">A new item to add to the stack.</param>
            <returns>Returns a new immutable stack.</returns>
        </member>
        <member name="M:Spike.Collections.ImmutableStack`1.#ctor(`0)">
            <summary>
            Constructs a new instance of an immutable stack.
            </summary>
            <param name="start">The starting item on the stack.</param>
        </member>
        <member name="M:Spike.Collections.ImmutableStack`1.#ctor(`0,Spike.Collections.ImmutableStack{`0})">
            <summary>
            Constructs a new instance of an immutable stack.
            </summary>
            <param name="topItem">The top item on the stack.</param>
            <param name="remainder">The remainder stack.</param>
        </member>
        <member name="M:Spike.Collections.ImmutableStack`1.GetEnumerator">
            <summary>
            Gets the enumerator for this stack.
            </summary>
            <returns>Returns the enumerator for this stack.</returns>
        </member>
        <member name="M:Spike.Collections.ImmutableStack`1.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Gets the enumerator for this stack.
            </summary>
            <returns>Returns the enumerator for this stack.</returns>
        </member>
        <member name="P:Spike.Collections.ImmutableStack`1.TopItem">
            <summary>
            Gets the top item on the stack.
            </summary>
        </member>
        <member name="P:Spike.Collections.ImmutableStack`1.Remainder">
            <summary>
            Gets the remainder on the immutable stack.
            </summary>
        </member>
        <member name="T:Spike.Collections.NamedGroup`1">
            <summary>
            Represnts a named group of objects.
            </summary>
        </member>
        <member name="M:Spike.Collections.NamedGroup`1.#ctor(System.String,System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Constructs a new instance of a named group.
            </summary>
            <param name="name">The name of the group</param>
            <param name="items">The items in the group.</param>
        </member>
        <member name="F:Spike.Collections.NamedGroup`1.Name">
            <summary>
            Gets the name of the group.
            </summary>
        </member>
        <member name="F:Spike.Collections.NamedGroup`1.Items">
            <summary>
            Gets the items of the group.
            </summary>
        </member>
        <member name="T:Spike.Diagnostics.Snapshot">
            <summary>
            Represents a captured network flow.
            </summary>
        </member>
        <member name="F:Spike.Diagnostics.Snapshot.Time">
            <summary>
            Gets timestamp of the snapshot
            </summary>
        </member>
        <member name="F:Spike.Diagnostics.Snapshot.Channel">
            <summary>
            Gets channel identifier.
            </summary>
        </member>
        <member name="F:Spike.Diagnostics.Snapshot.ThreadId">
            <summary>
            Gets thread id of the snapshot.
            </summary>
        </member>
        <member name="F:Spike.Diagnostics.Snapshot.Method">
            <summary>
            Gets currently executed method.
            </summary>
        </member>
        <member name="F:Spike.Diagnostics.Snapshot.Stack">
            <summary>
            Gets current stack trace.
            </summary>
        </member>
        <member name="F:Spike.Diagnostics.Snapshot.Name">
            <summary>
            Gets the target buffer name.
            </summary>
        </member>
        <member name="F:Spike.Diagnostics.Snapshot.Description">
            <summary>
            Gets the description of the payload.
            </summary>
        </member>
        <member name="F:Spike.Diagnostics.Snapshot.Data">
            <summary>
            Gets captured data buffer.
            </summary>
        </member>
        <member name="F:Spike.Diagnostics.Snapshot.IsProcessing">
            <summary>
            Gets the target buffer name.
            </summary>
        </member>
        <member name="F:Spike.Diagnostics.Snapshot.IsDecoding">
            <summary>
            Gets whether this is a decoding pipeline.
            </summary>
        </member>
        <member name="F:Spike.Diagnostics.Snapshot.Pipeline">
            <summary>
            Gets the pipeline used.
            </summary>
        </member>
        <member name="F:Spike.Diagnostics.Snapshot.Empty">
            <summary>
            An empty buffer.
            </summary>
        </member>
        <member name="M:Spike.Diagnostics.Snapshot.Take(System.String,System.String)">
            <summary>
            Take a new snapshot.
            </summary>
        </member>
        <member name="M:Spike.Diagnostics.Snapshot.Trace(System.String,Spike.Channel,Spike.Network.ProcessingContext,System.Boolean)">
            <summary>
            Take a new snapshot.
            </summary>
        </member>
        <member name="M:Spike.Diagnostics.Snapshot.Take(System.String,System.String,Spike.Channel,Spike.Network.ProcessingContext,System.Boolean,System.Byte[])">
            <summary>
            Take a new snapshot.
            </summary>
        </member>
        <member name="M:Spike.Diagnostics.Snapshot.Take(System.String,System.String,Spike.Channel,Spike.Network.ProcessingContext,System.Boolean,System.Byte[],System.Int32)">
            <summary>
            Take a new snapshot.
            </summary>
        </member>
        <member name="M:Spike.Diagnostics.Snapshot.Take(System.String,System.String,Spike.Channel,Spike.Network.ProcessingContext,System.Boolean,System.Byte[],System.Int32,System.Int32)">
            <summary>
            Take a new snapshot.
            </summary>
        </member>
        <member name="M:Spike.Diagnostics.Snapshot.Take(System.String,System.String,Spike.Channel,Spike.Network.ProcessingContext,System.Boolean,System.IO.MemoryStream)">
            <summary>
            Take a new snapshot.
            </summary>
        </member>
        <member name="M:Spike.Diagnostics.Snapshot.Take(System.String,System.String,Spike.Channel,Spike.Network.ProcessingContext,System.Boolean,System.Byte*,System.Int32)">
            <summary>
            Take a new snapshot.
            </summary>
        </member>
        <member name="M:Spike.Diagnostics.Snapshot.Trace(System.String,Spike.Channel)">
            <summary>
            Take a new snapshot.
            </summary>
        </member>
        <member name="M:Spike.Diagnostics.Snapshot.Take(System.String,System.String,Spike.Channel,System.Byte[])">
            <summary>
            Take a new snapshot.
            </summary>
        </member>
        <member name="M:Spike.Diagnostics.Snapshot.Take(System.String,System.String,Spike.Channel,System.Byte[],System.Int32)">
            <summary>
            Take a new snapshot.
            </summary>
        </member>
        <member name="M:Spike.Diagnostics.Snapshot.Take(System.String,System.String,Spike.Channel,System.Byte[],System.Int32,System.Int32)">
            <summary>
            Take a new snapshot.
            </summary>
        </member>
        <member name="M:Spike.Diagnostics.Snapshot.Take(System.String,System.String,Spike.Channel,System.IO.MemoryStream)">
            <summary>
            Take a new snapshot.
            </summary>
        </member>
        <member name="M:Spike.Diagnostics.Snapshot.Take(System.String,System.String,Spike.Channel,System.Byte*,System.Int32)">
            <summary>
            Take a new snapshot.
            </summary>
        </member>
        <member name="M:Spike.Diagnostics.Snapshot.CopyData(System.IO.MemoryStream)">
            <summary>
            Does a copy of a buffer to a separate byte array.
            </summary>
        </member>
        <member name="M:Spike.Diagnostics.Snapshot.CopyData(System.Byte[])">
            <summary>
            Does a copy of a buffer to a separate byte array.
            </summary>
        </member>
        <member name="M:Spike.Diagnostics.Snapshot.CopyData(System.Byte[],System.Int32)">
            <summary>
            Does a copy of a buffer to a separate byte array.
            </summary>
        </member>
        <member name="M:Spike.Diagnostics.Snapshot.CopyData(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Does a copy of a buffer to a separate byte array.
            </summary>
        </member>
        <member name="M:Spike.Diagnostics.Snapshot.CopyData(System.Byte*,System.Int32)">
            <summary>
            Does a copy of a buffer to a separate byte array.
            </summary>
        </member>
        <member name="M:Spike.Diagnostics.Snapshot.WriteTo(System.IO.Stream)">
            <summary>
            Writes the snapshot to the stream.
            </summary>
            <param name="stream">Stream to write the snapshot to.</param>
        </member>
        <member name="F:Spike.Diagnostics.Snapshot.Buffer">
            <summary>
            Internal format buffer.
            </summary>
        </member>
        <member name="M:Spike.Diagnostics.Snapshot.Write(System.IO.Stream,System.Byte[])">
            <summary>
            Writes a byte array
            </summary>
        </member>
        <member name="M:Spike.Diagnostics.Snapshot.Write(System.IO.Stream,System.Int16)">
            <summary>
            Writes a 2-byte signed integer value to the underlying stream.
            </summary>
        </member>
        <member name="M:Spike.Diagnostics.Snapshot.Write(System.IO.Stream,System.Boolean)">
            <summary>
            Writes a 2-byte signed integer value to the underlying stream.
            </summary>
        </member>
        <member name="M:Spike.Diagnostics.Snapshot.Write(System.IO.Stream,System.Int32)">
            <summary>
            Writes a 4-byte signed integer value to the underlying stream.
            </summary>
        </member>
        <member name="M:Spike.Diagnostics.Snapshot.Write(System.IO.Stream,System.DateTime)">
            <summary>
            Writes a DateTime to a sequence of bytes to the underlying stream
            </summary>
        </member>
        <member name="M:Spike.Diagnostics.Snapshot.Write(System.IO.Stream,System.String)">
            <summary>
            Writes a fixed-length big-endian unicode string value to the underlying stream. To fit (size), the string content is either truncated or padded with null characters.
            </summary>
        </member>
        <member name="M:Spike.Diagnostics.SystemInfo.GetTotalPhysicalMemory">
            <summary>
            A portable way to get total physical memory.
            </summary>
        </member>
        <member name="M:Spike.Diagnostics.SystemInfo.GetTotalPhysicalMemoryMono">
            <summary>
            Get total physical memory for Mono
            </summary>
        </member>
        <member name="M:Spike.Diagnostics.SystemInfo.GetTotalPhysicalMemoryWin32">
            <summary>
            Get total physical memory for Win32
            </summary>
        </member>
        <member name="M:Spike.Diagnostics.SystemInfo.GlobalMemoryStatusEx(Spike.Diagnostics.SystemInfo.MEMORYSTATUSEX)">
            <summary>
            Win32 call that attempts to get physical memory.
            </summary>
        </member>
        <member name="P:Spike.Diagnostics.SystemInfo.TotalPhysicalMemory">
            <summary>
            Gets the total amount of physical memory installed on the machine.
            </summary>
        </member>
        <member name="P:Spike.Diagnostics.SystemInfo.Is64BitOperatingSystem">
            <summary>
            Gets a value indicating whether this architecture is 64 bit.
            </summary>
        </member>
        <member name="P:Spike.Diagnostics.SystemInfo.MachineName">
            <summary>
            Gets the machine name.
            </summary>
        </member>
        <member name="P:Spike.Diagnostics.SystemInfo.DomainName">
            <summary>
            Gets the domain name.
            </summary>
        </member>
        <member name="P:Spike.Diagnostics.SystemInfo.NetworkInterfaces">
            <summary>
            Gets the list of all network interfaces.
            </summary>
        </member>
        <member name="P:Spike.Diagnostics.SystemInfo.PhysicalAddresses">
            <summary>
            Gets the list of all MAC addresses of this machine.
            </summary>
        </member>
        <member name="P:Spike.Diagnostics.SystemInfo.ProcessorCount">
            <summary>
            Gets the amount of processors on this system.
            </summary>
        </member>
        <member name="T:Spike.Diagnostics.SystemInfo.MEMORYSTATUSEX">
            <summary>
            Structure for Win32 call
            </summary>
        </member>
        <member name="T:Spike.Text.Base64Decoder">
            <summary>
            Represents a base64 decoder.
            </summary>
        </member>
        <member name="M:Spike.Text.Base64Decoder.#ctor">
            <summary>
            Creates a new instance of an object.
            </summary>
        </member>
        <member name="M:Spike.Text.Base64Decoder.GetCharCount(System.Byte[],System.Int32,System.Int32)">
            <summary>
            When overridden in a derived class, calculates the number of characters produced
            by decoding a sequence of bytes from the specified byte array.
            </summary>
            <param name="bytes">The byte array containing the sequence of bytes to decode.</param>
            <param name="index">The index of the first byte to decode.</param>
            <param name="count">The number of bytes to decode.</param>
            <returns>The number of characters produced by decoding the specified sequence of bytes and any bytes in the internal buffer.</returns>
        </member>
        <member name="M:Spike.Text.Base64Decoder.GetChars(System.Byte[],System.Int32,System.Int32,System.Char[],System.Int32)">
            <summary>
            When overridden in a derived class, decodes a sequence of bytes starting
            at the specified byte pointer and any bytes in the internal buffer into a
            set of characters that are stored starting at the specified character pointer.
            A parameter indicates whether to clear the internal state of the decoder
            after the conversion.
            </summary>
            <param name="bytes">The byte array containing the sequence of bytes to decode.</param>
            <param name="byteIndex">The index of the first byte to decode.</param>
            <param name="byteCount"> The number of bytes to decode.</param>
            <param name="chars">The character array to contain the resulting set of characters.</param>
            <param name="charIndex">The index at which to start writing the resulting set of characters.</param>
            <returns>The actual number of characters written into chars.</returns>
        </member>
        <member name="T:Spike.Text.Base64Encoder">
            <summary>
            Represents a base64 encoder.
            </summary>
        </member>
        <member name="M:Spike.Text.Base64Encoder.#ctor">
            <summary>
            Creates a new instance of an object.
            </summary>
        </member>
        <member name="M:Spike.Text.Base64Encoder.GetByteCount(System.Char[],System.Int32,System.Int32,System.Boolean)">
            <summary>
            When overridden in a derived class, calculates the number of bytes produced
            by encoding a set of characters from the specified character array. A parameter
            indicates whether to clear the internal state of the encoder after the calculation.
            </summary>
            <param name="chars">The character array containing the set of characters to encode.</param>
            <param name="index">The index of the first character to encode.</param>
            <param name="count">The number of characters to encode.</param>
            <param name="flush">true to simulate clearing the internal state of the encoder after the calculation; otherwise, false.</param>
            <returns>
            The number of bytes produced by encoding the specified characters and any
            characters in the internal buffer.
            </returns>
        </member>
        <member name="M:Spike.Text.Base64Encoder.GetBytes(System.Char[],System.Int32,System.Int32,System.Byte[],System.Int32,System.Boolean)">
            <summary>
            When overridden in a derived class, encodes a set of characters from the
            specified character array and any characters in the internal buffer into
            the specified byte array. A parameter indicates whether to clear the internal
            state of the encoder after the conversion.
            </summary>
            <param name="chars">The character array containing the set of characters to encode.</param>
            <param name="charIndex">The index of the first character to encode.</param>
            <param name="charCount">The number of characters to encode.</param>
            <param name="bytes">The byte array to contain the resulting sequence of bytes.</param>
            <param name="byteIndex">The index at which to start writing the resulting sequence of bytes.</param>
            <param name="flush">true to clear the internal state of the encoder after the conversion; otherwise, false.</param>
            <returns>The actual number of bytes written into bytes.</returns>
        </member>
        <member name="T:Spike.Text.Base64Encoding">
            <summary>
            Represents a standard UTF8 Base64 encoding.
            </summary>
        </member>
        <member name="M:Spike.Text.Base64Encoding.GetByteCount(System.Char[],System.Int32,System.Int32)">
            <summary>
            When overridden in a derived class, calculates the number of bytes produced
            by encoding a set of characters from the specified character array. A parameter
            indicates whether to clear the internal state of the encoder after the calculation.
            </summary>
            <param name="chars">The character array containing the set of characters to encode.</param>
            <param name="index">The index of the first character to encode.</param>
            <param name="count">The number of characters to encode.</param>
            <returns>
            The number of bytes produced by encoding the specified characters and any
            characters in the internal buffer.
            </returns>
        </member>
        <member name="M:Spike.Text.Base64Encoding.GetBytes(System.Char[],System.Int32,System.Int32,System.Byte[],System.Int32)">
            <summary>
            When overridden in a derived class, encodes a set of characters from the
            specified character array and any characters in the internal buffer into
            the specified byte array. A parameter indicates whether to clear the internal
            state of the encoder after the conversion.
            </summary>
            <param name="chars">The character array containing the set of characters to encode.</param>
            <param name="charIndex">The index of the first character to encode.</param>
            <param name="charCount">The number of characters to encode.</param>
            <param name="bytes">The byte array to contain the resulting sequence of bytes.</param>
            <param name="byteIndex">The index at which to start writing the resulting sequence of bytes.</param>
            <returns>The actual number of bytes written into bytes.</returns>
        </member>
        <member name="M:Spike.Text.Base64Encoding.GetCharCount(System.Byte[],System.Int32,System.Int32)">
            <summary>
            When overridden in a derived class, calculates the number of characters produced
            by decoding a sequence of bytes from the specified byte array.
            </summary>
            <param name="bytes">The byte array containing the sequence of bytes to decode.</param>
            <param name="index">The index of the first byte to decode.</param>
            <param name="count">The number of bytes to decode.</param>
            <returns>The number of characters produced by decoding the specified sequence of bytes and any bytes in the internal buffer.</returns>
        </member>
        <member name="M:Spike.Text.Base64Encoding.GetChars(System.Byte[],System.Int32,System.Int32,System.Char[],System.Int32)">
            <summary>
            When overridden in a derived class, decodes a sequence of bytes starting
            at the specified byte pointer and any bytes in the internal buffer into a
            set of characters that are stored starting at the specified character pointer.
            A parameter indicates whether to clear the internal state of the decoder
            after the conversion.
            </summary>
            <param name="bytes">The byte array containing the sequence of bytes to decode.</param>
            <param name="byteIndex">The index of the first byte to decode.</param>
            <param name="byteCount"> The number of bytes to decode.</param>
            <param name="chars">The character array to contain the resulting set of characters.</param>
            <param name="charIndex">The index at which to start writing the resulting set of characters.</param>
            <returns>The actual number of characters written into chars.</returns>
        </member>
        <member name="M:Spike.Text.Base64Encoding.GetMaxByteCount(System.Int32)">
            <summary>
            When overridden in a derived class, calculates the maximum number of bytes
            produced by encoding the specified number of characters.
            </summary>
            <param name="charCount">The number of characters to encode.</param>
            <returns>The maximum number of bytes produced by encoding the specified number of
            characters.</returns>
        </member>
        <member name="M:Spike.Text.Base64Encoding.GetMaxCharCount(System.Int32)">
            <summary>
            When overridden in a derived class, calculates the maximum number of characters
            produced by decoding the specified number of bytes.
            </summary>
            <param name="byteCount">The number of bytes to decode.</param>
            <returns>The maximum number of characters produced by decoding the specified number
            of bytes.</returns>
        </member>
        <member name="T:Spike.Text.HexDecoder">
            <summary>
            Represents a hexadecimal decoder.
            </summary>
        </member>
        <member name="M:Spike.Text.HexDecoder.#ctor">
            <summary>
            Creates a new instance of an object.
            </summary>
        </member>
        <member name="M:Spike.Text.HexDecoder.GetCharCount(System.Byte[],System.Int32,System.Int32)">
            <summary>
            When overridden in a derived class, calculates the number of characters produced
            by decoding a sequence of bytes from the specified byte array.
            </summary>
            <param name="bytes">The byte array containing the sequence of bytes to decode.</param>
            <param name="index">The index of the first byte to decode.</param>
            <param name="count">The number of bytes to decode.</param>
            <returns>The number of characters produced by decoding the specified sequence of bytes and any bytes in the internal buffer.</returns>
        </member>
        <member name="M:Spike.Text.HexDecoder.GetChars(System.Byte[],System.Int32,System.Int32,System.Char[],System.Int32)">
            <summary>
            When overridden in a derived class, decodes a sequence of bytes starting
            at the specified byte pointer and any bytes in the internal buffer into a
            set of characters that are stored starting at the specified character pointer.
            A parameter indicates whether to clear the internal state of the decoder
            after the conversion.
            </summary>
            <param name="bytes">The byte array containing the sequence of bytes to decode.</param>
            <param name="byteIndex">The index of the first byte to decode.</param>
            <param name="byteCount"> The number of bytes to decode.</param>
            <param name="chars">The character array to contain the resulting set of characters.</param>
            <param name="charIndex">The index at which to start writing the resulting set of characters.</param>
            <returns>The actual number of characters written into chars.</returns>
        </member>
        <member name="T:Spike.Text.HexEncoder">
            <summary>
            Represents a hexadecimal encoder.
            </summary>
        </member>
        <member name="M:Spike.Text.HexEncoder.#ctor">
            <summary>
            Creates a new instance of an object.
            </summary>
        </member>
        <member name="M:Spike.Text.HexEncoder.GetByteCount(System.Char[],System.Int32,System.Int32,System.Boolean)">
            <summary>
            When overridden in a derived class, calculates the number of bytes produced
            by encoding a set of characters from the specified character array. A parameter
            indicates whether to clear the internal state of the encoder after the calculation.
            </summary>
            <param name="chars">The character array containing the set of characters to encode.</param>
            <param name="index">The index of the first character to encode.</param>
            <param name="count">The number of characters to encode.</param>
            <param name="flush">true to simulate clearing the internal state of the encoder after the calculation; otherwise, false.</param>
            <returns>
            The number of bytes produced by encoding the specified characters and any
            characters in the internal buffer.
            </returns>
        </member>
        <member name="M:Spike.Text.HexEncoder.GetBytes(System.Char[],System.Int32,System.Int32,System.Byte[],System.Int32,System.Boolean)">
            <summary>
            When overridden in a derived class, encodes a set of characters from the
            specified character array and any characters in the internal buffer into
            the specified byte array. A parameter indicates whether to clear the internal
            state of the encoder after the conversion.
            </summary>
            <param name="chars">The character array containing the set of characters to encode.</param>
            <param name="charIndex">The index of the first character to encode.</param>
            <param name="charCount">The number of characters to encode.</param>
            <param name="bytes">The byte array to contain the resulting sequence of bytes.</param>
            <param name="byteIndex">The index at which to start writing the resulting sequence of bytes.</param>
            <param name="flush">true to clear the internal state of the encoder after the conversion; otherwise, false.</param>
            <returns>The actual number of bytes written into bytes.</returns>
        </member>
        <member name="T:Spike.Text.HexEncoding">
            <summary>
            Represents a hexadecimal encoding.
            </summary>
        </member>
        <member name="M:Spike.Text.HexEncoding.GetByteCount(System.Char[],System.Int32,System.Int32)">
            <summary>
            When overridden in a derived class, calculates the number of bytes produced
            by encoding a set of characters from the specified character array. A parameter
            indicates whether to clear the internal state of the encoder after the calculation.
            </summary>
            <param name="chars">The character array containing the set of characters to encode.</param>
            <param name="index">The index of the first character to encode.</param>
            <param name="count">The number of characters to encode.</param>
            <returns>
            The number of bytes produced by encoding the specified characters and any
            characters in the internal buffer.
            </returns>
        </member>
        <member name="M:Spike.Text.HexEncoding.GetBytes(System.Char[],System.Int32,System.Int32,System.Byte[],System.Int32)">
            <summary>
            When overridden in a derived class, encodes a set of characters from the
            specified character array and any characters in the internal buffer into
            the specified byte array. A parameter indicates whether to clear the internal
            state of the encoder after the conversion.
            </summary>
            <param name="chars">The character array containing the set of characters to encode.</param>
            <param name="charIndex">The index of the first character to encode.</param>
            <param name="charCount">The number of characters to encode.</param>
            <param name="bytes">The byte array to contain the resulting sequence of bytes.</param>
            <param name="byteIndex">The index at which to start writing the resulting sequence of bytes.</param>
            <returns>The actual number of bytes written into bytes.</returns>
        </member>
        <member name="M:Spike.Text.HexEncoding.GetCharCount(System.Byte[],System.Int32,System.Int32)">
            <summary>
            When overridden in a derived class, calculates the number of characters produced
            by decoding a sequence of bytes from the specified byte array.
            </summary>
            <param name="bytes">The byte array containing the sequence of bytes to decode.</param>
            <param name="index">The index of the first byte to decode.</param>
            <param name="count">The number of bytes to decode.</param>
            <returns>The number of characters produced by decoding the specified sequence of bytes and any bytes in the internal buffer.</returns>
        </member>
        <member name="M:Spike.Text.HexEncoding.GetChars(System.Byte[],System.Int32,System.Int32,System.Char[],System.Int32)">
            <summary>
            When overridden in a derived class, decodes a sequence of bytes starting
            at the specified byte pointer and any bytes in the internal buffer into a
            set of characters that are stored starting at the specified character pointer.
            A parameter indicates whether to clear the internal state of the decoder
            after the conversion.
            </summary>
            <param name="bytes">The byte array containing the sequence of bytes to decode.</param>
            <param name="byteIndex">The index of the first byte to decode.</param>
            <param name="byteCount"> The number of bytes to decode.</param>
            <param name="chars">The character array to contain the resulting set of characters.</param>
            <param name="charIndex">The index at which to start writing the resulting set of characters.</param>
            <returns>The actual number of characters written into chars.</returns>
        </member>
        <member name="M:Spike.Text.HexEncoding.GetMaxByteCount(System.Int32)">
            <summary>
            When overridden in a derived class, calculates the maximum number of bytes
            produced by encoding the specified number of characters.
            </summary>
            <param name="charCount">The number of characters to encode.</param>
            <returns>The maximum number of bytes produced by encoding the specified number of
            characters.</returns>
        </member>
        <member name="M:Spike.Text.HexEncoding.GetMaxCharCount(System.Int32)">
            <summary>
            When overridden in a derived class, calculates the maximum number of characters
            produced by decoding the specified number of bytes.
            </summary>
            <param name="byteCount">The number of bytes to decode.</param>
            <returns>The maximum number of characters produced by decoding the specified number
            of bytes.</returns>
        </member>
        <member name="T:Spike.Text.TextEncoding">
            <summary>
            Represents static accessors for various text encodings.
            </summary>
        </member>
        <member name="M:Spike.Text.TextEncoding.GetEncoding(System.String)">
            <summary>
            Gets an encoding by the name.
            </summary>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="P:Spike.Text.TextEncoding.Base64">
            <summary>
            Gets a base64 encoding that represent binary data in an ASCII string format by translating it into a radix-64 representation.
            </summary>
        </member>
        <member name="P:Spike.Text.TextEncoding.Hex">
            <summary>
            Gets a hexadecimal encoding.
            </summary>
        </member>
        <member name="P:Spike.Text.TextEncoding.ASCII">
            <summary>
            Gets an encoding for the ASCII (7-bit) character set.
            </summary>
        </member>
        <member name="P:Spike.Text.TextEncoding.BigEndianUnicode">
            <summary>
            Gets an encoding for the UTF-16 format that uses the big endian byte order.
            </summary>
        </member>
        <member name="P:Spike.Text.TextEncoding.Default">
            <summary>
            Gets an encoding for the operating system's current ANSI code page.
            </summary>
        </member>
        <member name="P:Spike.Text.TextEncoding.Unicode">
            <summary>
            Gets an encoding for the UTF-16 format using the little endian byte order.
            </summary>
        </member>
        <member name="P:Spike.Text.TextEncoding.UTF32">
            <summary>
            Gets an encoding for the UTF-32 format using the little endian byte order.
            </summary>
        </member>
        <member name="P:Spike.Text.TextEncoding.UTF7">
            <summary>
            Gets an encoding for the UTF-7 format.
            </summary>
        </member>
        <member name="P:Spike.Text.TextEncoding.UTF8">
            <summary>
            Gets an encoding for the UTF-8 format.
            </summary>
        </member>
        <member name="T:Spike.Hubs.PubHubScheduleCallback">
            <summary>
            Represents a callback that is scheduled on a constant interval within a <see cref="T:Spike.Hubs.PubHub"/>
            instance. The event will stop if <see cref="T:Spike.Hubs.PubHub"/> is disposed.
            </summary>
            <param name="hub">The hub instance.</param>
        </member>
        <member name="T:Spike.Hubs.PubHub">
            <summary>
            Represents a simple publish-subscribe hub. It allso supports scheduling as it contains a timer
            which is automatically invoked every cycle.
            </summary>
        </member>
        <member name="T:Spike.Hubs.Hub">
            <summary>
            Represents a hub that allows grouped communication for a set of clients.
            </summary>
        </member>
        <member name="T:Spike.DisposableObject">
            <summary>
            Represents an object that implements IDisposable contract.
            </summary>
        </member>
        <member name="M:Spike.DisposableObject.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or
            resetting unmanaged resources.
            </summary>
        </member>
        <member name="M:Spike.DisposableObject.Dispose(System.Boolean)">
            <summary>
            Releases the unmanaged resources used by the ByteSTream class and optionally releases the managed resources.
            </summary>
            <param name="disposing"> 
            If set to true, release both managed and unmanaged resources, othewise release only unmanaged resources.
            </param>
        </member>
        <member name="M:Spike.DisposableObject.Finalize">
            <summary>
            Finalizer for the recyclable object.
            </summary>
        </member>
        <member name="T:Spike.Hubs.IHub">
            <summary>
            Represents a hub that allows grouped communication for a set of clients.
            </summary>
        </member>
        <member name="M:Spike.Hubs.IHub.Subscribe(Spike.IClient,System.String)">
            <summary>
            Subscribes (adds) a member to this <see cref="T:Spike.Hubs.IHub"/> instance.
            </summary>
            <param name="client">The client to add to this hub.</param>
            <param name="subscribeKey">The subscribe key provided by the client.</param>
            <returns>The status which determines whether the operation was successful or not.</returns>
        </member>
        <member name="M:Spike.Hubs.IHub.Unsubscribe(Spike.IClient,System.String)">
            <summary>
            Unsubscribes (removes) a member from this <see cref="T:Spike.Hubs.IHub"/> instance.
            </summary>
            <param name="client">The client to remove from this hub.</param>
            <param name="subscribeKey">The subscribe key provided by the client.</param>
            <returns>The status which determines whether the operation was successful or not.</returns>
        </member>
        <member name="M:Spike.Hubs.IHub.Publish(Spike.IClient,System.String,System.String)">
            <summary>
            Publishes a message to this hub.
            </summary>
            <param name="client">The client which attempts to publish. Can be null.</param>
            <param name="message">The message to publish.</param>
            <param name="publishKey">The publish key provided by the client.</param>
            <returns>The status which determines whether the operation was successful or not.</returns>
        </member>
        <member name="P:Spike.Hubs.IHub.Name">
            <summary>
            Gets the name of this hub.
            </summary>
        </member>
        <member name="P:Spike.Hubs.IHub.Clients">
            <summary>
            Gets all the subscribers of this hub.
            </summary>
        </member>
        <member name="F:Spike.Hubs.Hub.Members">
            <summary>
            Internal concurrent list that contains the clients.
            </summary>
        </member>
        <member name="M:Spike.Hubs.Hub.#ctor">
            <summary>
            Constructs a new instance of a <see cref="T:Spike.Hubs.Hub"/> class. The instance will be locked with a 
            default randomly generated publish key.
            </summary>
        </member>
        <member name="M:Spike.Hubs.Hub.#ctor(System.String)">
            <summary>
            Constructs a new instance of a <see cref="T:Spike.Hubs.Hub"/> class. The instance will be locked with a 
            default randomly generated publish key.
            </summary>
            <param name="name">The name of the hub.</param>
        </member>
        <member name="M:Spike.Hubs.Hub.#ctor(System.String,System.Boolean)">
            <summary>
            Constructs a new instance of a <see cref="T:Spike.Hubs.Hub"/> class. The instance will be locked with a 
            default randomly generated publish key.
            </summary>
            <param name="autoRegister">Whether the hub should be automatically registered in the provider or not.</param>
            <param name="name">The name of the hub.</param>
        </member>
        <member name="M:Spike.Hubs.Hub.#ctor(System.String,System.String,System.String)">
            <summary>
            Constructs a new instance of a <see cref="T:Spike.Hubs.Hub"/> class. 
            </summary>
            <param name="name">The name of the hub.</param>
            <param name="defaultPublishKey">The default publish key to apply to this hub.</param>
            <param name="defaultSubscribeKey">The default subscribe key to apply to this hub.</param>
        </member>
        <member name="M:Spike.Hubs.Hub.#ctor(System.String,System.String)">
            <summary>
            Constructs a new instance of a <see cref="T:Spike.Hubs.Hub"/> class.
            </summary>
            <param name="name">The name of the hub.</param>
            <param name="defaultPublishKey">The default publish key to apply to this hub.</param>
        </member>
        <member name="M:Spike.Hubs.Hub.#ctor(System.String,System.String,System.Boolean)">
            <summary>
            Constructs a new instance of a <see cref="T:Spike.Hubs.Hub"/> class.
            </summary>
            <param name="name">The name of the hub.</param>
            <param name="defaultPublishKey">The default publish key to apply to this hub.</param>
            <param name="autoRegister">Whether the hub should be automatically registered in the provider or not.</param>
        </member>
        <member name="M:Spike.Hubs.Hub.#ctor(System.String,System.String,System.String,System.Boolean)">
            <summary>
            Constructs a new instance of a <see cref="T:Spike.Hubs.Hub"/> class.
            </summary>
            <param name="name">The name of the hub.</param>
            <param name="defaultPublishKey">The default publish key to apply to this hub.</param>
            <param name="defaultSubscribeKey">The default subscribe key to apply to this hub.</param>
            <param name="autoRegister">Whether the hub should be automatically registered in the provider or not.</param>
        </member>
        <member name="M:Spike.Hubs.Hub.GenerateKey">
            <summary>
            Generates a random key.
            </summary>
            <returns>A random 8 character long key.</returns>
        </member>
        <member name="M:Spike.Hubs.Hub.OnAfterConstruct">
            <summary>
            Invoked when a new instance of a <see cref="T:Spike.Hubs.Hub"/> is constructed.
            </summary>
        </member>
        <member name="M:Spike.Hubs.Hub.InvokeClientSubscribe(Spike.IClient)">
            <summary>
            Invokes an event.
            </summary>
            <param name="client">The target client.</param>
        </member>
        <member name="M:Spike.Hubs.Hub.InvokeClientUnsubscribe(Spike.IClient)">
            <summary>
            Invokes an event.
            </summary>
            <param name="client">The target client.</param>
        </member>
        <member name="M:Spike.Hubs.Hub.Subscribe(Spike.IClient,System.String)">
            <summary>
            Subscribes (adds) a member to this <see cref="T:Spike.Hubs.IHub"/> instance.
            </summary>
            <param name="client">The client to add to this hub.</param>
            <param name="subscribeKey">The subscribe key provided by the client.</param>
            <returns>The status code which determines whether the operation was successful or not.</returns>
        </member>
        <member name="M:Spike.Hubs.Hub.Unsubscribe(Spike.IClient,System.String)">
            <summary>
            Unsubscribes (removes) a member from this <see cref="T:Spike.Hubs.IHub"/> instance.
            </summary>
            <param name="client">The client to remove from this hub.</param>
            <param name="subscribeKey">The subscribe key provided by the client.</param>
            <returns>The status code which determines whether the operation was successful or not.</returns>
        </member>
        <member name="M:Spike.Hubs.Hub.Publish(Spike.IClient,System.String,System.Object)">
            <summary>
            Publishes a message to this hub.
            </summary>
            <param name="client">The client which attempts to publish. Can be null.</param>
            <param name="message">The message to publish.</param>
            <param name="publishKey">The publish key provided by the client.</param>
            <returns>The status which determines whether the operation was successful or not.</returns>
        </member>
        <member name="M:Spike.Hubs.Hub.Publish(System.String,System.Object)">
            <summary>
            Publishes a message to this hub.
            </summary>
            <param name="message">The message to publish.</param>
            <param name="publishKey">The publish key provided by the client.</param>
            <returns>The status which determines whether the operation was successful or not.</returns>
        </member>
        <member name="M:Spike.Hubs.Hub.Publish(System.Object)">
            <summary>
            Publishes a message to this hub with a null value publish key.
            </summary>
            <param name="message">The message to publish.</param>
            <returns>The status which determines whether the operation was successful or not.</returns>
        </member>
        <member name="M:Spike.Hubs.Hub.Publish(Spike.IClient,System.String,System.String)">
            <summary>
            Publishes a message to this hub.
            </summary>
            <param name="client">The client which attempts to publish. Can be null.</param>
            <param name="message">The message to publish.</param>
            <param name="publishKey">The publish key provided by the client.</param>
            <returns>The status which determines whether the operation was successful or not.</returns>
        </member>
        <member name="M:Spike.Hubs.Hub.Publish(System.String,System.String)">
            <summary>
            Publishes a message to this hub.
            </summary>
            <param name="message">The message to publish.</param>
            <param name="publishKey">The publish key provided by the client.</param>
            <returns>The status which determines whether the operation was successful or not.</returns>
        </member>
        <member name="M:Spike.Hubs.Hub.Publish(System.String)">
            <summary>
            Publishes a message to this hub with a null value publish key.
            </summary>
            <param name="message">The message to publish.</param>
            <returns>The status which determines whether the operation was successful or not.</returns>
        </member>
        <member name="M:Spike.Hubs.Hub.PublishTo(Spike.IClient,System.String,System.Object,Spike.IClient[])">
            <summary>
            Publishes a message to particular clients.
            </summary>
            <param name="client">The client which attempts to publish. Can be null.</param>
            <param name="message">The message to publish.</param>
            <param name="publishKey">The publish key provided by the client.</param>
            <param name="targets">The clients to publish the message to.</param>
            <returns>The status which determines whether the operation was successful or not.</returns>
        </member>
        <member name="M:Spike.Hubs.Hub.PublishTo(System.String,System.Object,Spike.IClient[])">
            <summary>
            Publishes a message to particular clients.
            </summary>
            <param name="message">The message to publish.</param>
            <param name="publishKey">The publish key provided by the client.</param>
            <param name="targets">The clients to publish the message to.</param>
            <returns>The status which determines whether the operation was successful or not.</returns>
        </member>
        <member name="M:Spike.Hubs.Hub.PublishTo(System.Object,Spike.IClient[])">
            <summary>
            Publishes a message to particular clients with a null value publish key.
            </summary>
            <param name="message">The message to publish.</param>
            <param name="targets">The clients to publish the message to.</param>
            <returns>The status which determines whether the operation was successful or not.</returns>
        </member>
        <member name="M:Spike.Hubs.Hub.PublishTo(Spike.IClient,System.String,System.String,Spike.IClient[])">
            <summary>
            Publishes a message to particular clients.
            </summary>
            <param name="client">The client which attempts to publish. Can be null.</param>
            <param name="message">The message to publish.</param>
            <param name="publishKey">The publish key provided by the client.</param>
            <param name="targets">The clients to publish the message to.</param>
            <returns>The status which determines whether the operation was successful or not.</returns>
        </member>
        <member name="M:Spike.Hubs.Hub.PublishTo(System.String,System.String,Spike.IClient[])">
            <summary>
            Publishes a message to particular clients.
            </summary>
            <param name="message">The message to publish.</param>
            <param name="publishKey">The publish key provided by the client.</param>
            <param name="targets">The clients to publish the message to.</param>
            <returns>The status which determines whether the operation was successful or not.</returns>
        </member>
        <member name="M:Spike.Hubs.Hub.PublishTo(System.String,Spike.IClient[])">
            <summary>
            Publishes a message particular clients hub with a null value publish key.
            </summary>
            <param name="message">The message to publish.</param>
            <param name="targets">The clients to publish the message to.</param>
            <returns>The status which determines whether the operation was successful or not.</returns>
        </member>
        <member name="M:Spike.Hubs.Hub.SendEvent(Spike.IClient,System.String,System.String,Spike.IClient[])">
            <summary>
            Sends an event from a particular client to a set of clients.
            </summary>
            <param name="from">The owner client of the message.</param>
            <param name="targets">The target clients.</param>
            <param name="publishKey">The publish key used.</param>
            <param name="message">The message to publish.</param>
        </member>
        <member name="M:Spike.Hubs.Hub.SendEvent(System.String,System.String,Spike.IClient[])">
            <summary>
            Sends an event to a set of clients.
            </summary>
            <param name="targets">The target clients.</param>
            <param name="publishKey">The publish key used.</param>
            <param name="message">The message to publish.</param>
        </member>
        <member name="M:Spike.Hubs.Hub.OnMessageSerialize(System.Object)">
            <summary>
            Serializes a message as a string. Default implementation serializes in JSON format.
            </summary>
            <param name="message">The message object to publish.</param>
            <returns>Serialized object.</returns>
        </member>
        <member name="M:Spike.Hubs.Hub.OnClientSubscribe(Spike.IClient,System.String)">
            <summary>
            Invoked when a client attempts to join this hub.
            </summary>
            <param name="client">The client to add to this hub.</param>
            <param name="subscribeKey">The subscribe key provided by the client.</param>
            <returns>Whether the client should be allowed to join or not.</returns>
        </member>
        <member name="M:Spike.Hubs.Hub.OnClientUnsubscribe(Spike.IClient,System.String)">
            <summary>
            Invoked when a client attempts to leave this hub.
            </summary>
            <param name="client">The client to remove from this hub.</param>
            <param name="subscribeKey">The subscribe key provided by the client.</param>
            <returns>Whether the client should be allowed to leave or not.</returns>
        </member>
        <member name="M:Spike.Hubs.Hub.OnPublish(Spike.IClient,System.String,System.Object)">
            <summary>
            Invoked when a client attempts to leave this hub.
            </summary>
            <param name="client">The client to remove from this hub.</param>
            <param name="publishKey">The publish key provided by the client.</param>
            <param name="message">The message to publish.</param>
            <returns>Whether the client should be allowed to leave or not.</returns>
        </member>
        <member name="M:Spike.Hubs.Hub.GetSubscribers(System.String)">
            <summary>
            Gets the subscribers for a specified publish key.
            </summary>
            <param name="publishKey">The publish key to get the subscribers for.</param>
            <returns>The enumerable list of subscribers for the given publish key.</returns>
        </member>
        <member name="M:Spike.Hubs.Hub.OnClientDisconnect(Spike.ClientDisconnectEventArgs)">
            <summary>
            Occurs when a client is disconnected.
            </summary>
            <param name="e">Disconnected event arguments.</param>
        </member>
        <member name="M:Spike.Hubs.Hub.GetTerminationPolicy">
            <summary>
            Gets the termination policy for this <see cref="T:Spike.Hubs.Hub"/> instance.
            </summary>
            <returns>The termination policy.</returns>
        </member>
        <member name="M:Spike.Hubs.Hub.CheckTermination">
            <summary>
            Checks the termination policy
            </summary>
        </member>
        <member name="M:Spike.Hubs.Hub.Dispose(System.Boolean)">
            <summary>
            Releases the unmanaged resources used by the ByteSTream class and optionally releases the managed resources.
            </summary>
            <param name="disposing">If set to true, release both managed and unmanaged resources, othewise release only unmanaged resources. </param>
        </member>
        <member name="E:Spike.Hubs.Hub.ClientSubscribe">
            <summary>
            Occurs when a client have subscribed to this <see cref="T:Spike.Hubs.IHub"/>.
            </summary>
        </member>
        <member name="E:Spike.Hubs.Hub.ClientUnsubscribe">
            <summary>
            Occurs when a client have unsubscribed from this <see cref="T:Spike.Hubs.IHub"/>.
            </summary>
        </member>
        <member name="P:Spike.Hubs.Hub.Name">
            <summary>
            Name of the hub.
            </summary>
        </member>
        <member name="P:Spike.Hubs.Hub.DefaultPublishKey">
            <summary>
            Gets or sets the default publish key that should be used to publish messages in this channel.
            </summary>
        </member>
        <member name="P:Spike.Hubs.Hub.DefaultSubscribeKey">
            <summary>
            Gets or sets the default subscribe key that should be used to subscribe to the messages in this channel.
            </summary>
        </member>
        <member name="P:Spike.Hubs.Hub.Timeout">
            <summary>
            Gets or sets the timeout which should be used to dispose the hub. This only applies if a <see cref="T:Spike.Hubs.HubTerminationPolicy"/>
            is set to Timeout.
            </summary>
        </member>
        <member name="P:Spike.Hubs.Hub.Clients">
            <summary>
            Gets all the members in this hub.
            </summary>
        </member>
        <member name="F:Spike.Hubs.PubHub.Policy">
            <summary>
            The termination policy to apply to the hub instance.
            </summary>
        </member>
        <member name="M:Spike.Hubs.PubHub.#ctor(System.String,System.String,Spike.Hubs.HubTerminationPolicy)">
            <summary>
            Constructs a new instance of a <see cref="T:Spike.Hubs.PubHub"/> class.
            </summary>
            <param name="name">The name of the hub.</param>
            <param name="defaultPublishKey">The default publish key to apply to this hub.</param>
            <param name="policy">The termination policy to apply.</param>
        </member>
        <member name="M:Spike.Hubs.PubHub.#ctor(System.String,System.String,System.String,Spike.Hubs.HubTerminationPolicy)">
            <summary>
            Constructs a new instance of a <see cref="T:Spike.Hubs.Hub"/> class.
            </summary>
            <param name="name">The name of the hub.</param>
            <param name="defaultPublishKey">The default publish key to apply to this hub.</param>
            <param name="defaultSubscribeKey">The default subscribe key to apply to this hub.</param>
            <param name="policy">The termination policy to apply.</param>
        </member>
        <member name="M:Spike.Hubs.PubHub.Schedule(System.TimeSpan,Spike.Hubs.PubHubScheduleCallback)">
            <summary>
            Schedules an execution of the callback within <see cref="T:Spike.Hubs.PubHub"/> context
            on a specified interval.
            </summary>
            <param name="interval">The interval to schedule the execution on.</param>
            <param name="callback">The callback to execute on the specified interval.</param>
            <returns>The timer used for scheduling.</returns>
        </member>
        <member name="M:Spike.Hubs.PubHub.ScheduleStop">
            <summary>
            Stops the schedule if one is currently being executed and dereferences
            the underlying <see cref="T:Spike.Timer"/>.
            </summary>
        </member>
        <member name="M:Spike.Hubs.PubHub.OnTick">
            <summary>
            Occurs on every scheduled tick.
            </summary>
        </member>
        <member name="M:Spike.Hubs.PubHub.GetTerminationPolicy">
            <summary>
            Gets the termination policy for this <see cref="T:Spike.Hubs.Hub"/> instance.
            </summary>
            <returns>The termination policy.</returns>
        </member>
        <member name="M:Spike.Hubs.PubHub.Dispose(System.Boolean)">
            <summary>
            Occurs when the instance of <see cref="T:Spike.Hubs.PubHub"/> is being disposed.
            </summary>
            <param name="disposing">Whether it is disposing or finalizing.</param>
        </member>
        <member name="T:Spike.Hubs.HubStatus">
            <summary>
            Represents an enumeraot of hub status codes. Those status codes are similar to HTTP codes for
            easier understanding.
            </summary>
        </member>
        <member name="F:Spike.Hubs.HubStatus.Success">
            <summary>
            The request has been fulfilled successfully.
            </summary>
        </member>
        <member name="F:Spike.Hubs.HubStatus.BadRequest">
            <summary>
            The request could not be understood by the server due to malformed syntax. The client should not 
            repeat the request without modifications.
            </summary>
        </member>
        <member name="F:Spike.Hubs.HubStatus.Unauthorized">
            <summary>
            The request requires user authentication. The response must provide a valid publish or subscribe key.
            </summary>
        </member>
        <member name="F:Spike.Hubs.HubStatus.NotFound">
            <summary>
            The server has not found anything matching the hub name
            </summary>
        </member>
        <member name="F:Spike.Hubs.HubStatus.Error">
            <summary>
            The server encountered an unexpected condition which prevented it from fulfilling the request.
            </summary>
        </member>
        <member name="F:Spike.Hubs.HubStatus.NotImplemented">
            <summary>
            The server does not support the functionality required to fulfill the request. 
            </summary>
        </member>
        <member name="T:Spike.Hubs.HubConfigAttribute">
            <summary>
            Represents a configuration of the hub.
            </summary>
        </member>
        <member name="M:Spike.Hubs.HubConfigAttribute.#ctor(Spike.Hubs.HubActivationPolicy)">
            <summary>
            Constructs a new <see cref="T:Spike.Hubs.HubConfigAttribute"/>.
            </summary>
            <param name="activationPolicy">Specifies an instanciation/activation policy for the hub.</param>
        </member>
        <member name="M:Spike.Hubs.HubConfigAttribute.#ctor(Spike.Hubs.HubTerminationPolicy)">
            <summary>
            Constructs a new <see cref="T:Spike.Hubs.HubConfigAttribute"/>.
            </summary>
            <param name="terminationPolicy">Specifies a termination/disposal policy for the hub.</param>
        </member>
        <member name="M:Spike.Hubs.HubConfigAttribute.#ctor(Spike.Hubs.HubActivationPolicy,Spike.Hubs.HubTerminationPolicy)">
            <summary>
            Constructs a new <see cref="T:Spike.Hubs.HubConfigAttribute"/>.
            </summary>
            <param name="activationPolicy">Specifies an instanciation/activation policy for the hub.</param>
            <param name="terminationPolicy">Specifies a termination/disposal policy for the hub.</param>
        </member>
        <member name="P:Spike.Hubs.HubConfigAttribute.ActivationPolicy">
            <summary>
            Gets an instanciation/activation policy for the hub.
            </summary>
        </member>
        <member name="P:Spike.Hubs.HubConfigAttribute.TerminationPolicy">
            <summary>
            Gets an termination/disposal policy for the hub.
            </summary>
        </member>
        <member name="T:Spike.Hubs.HubActivationPolicy">
            <summary>
            Represents an instanciation/activation policy for the hub.
            </summary>
        </member>
        <member name="F:Spike.Hubs.HubActivationPolicy.Disabled">
            <summary>
            Specifies that the runtime should not attempt to instanciate the hub automatically.
            </summary>
        </member>
        <member name="F:Spike.Hubs.HubActivationPolicy.AutoInstanciate">
            <summary>
            Specifies that the runtime should attempt to automatically instanciate the hub.
            </summary>
        </member>
        <member name="T:Spike.Hubs.HubTerminationPolicy">
            <summary>
            Represents an termination/disposal policy for the hub.
            </summary>
        </member>
        <member name="F:Spike.Hubs.HubTerminationPolicy.Disabled">
            <summary>
            Specifies that the runtime should not attempt to terminate the hub automatically.
            </summary>
        </member>
        <member name="F:Spike.Hubs.HubTerminationPolicy.DisposeEmpty">
            <summary>
            Specifies that the runtime should attempt to automatically terminate the hub if it's empty.
            </summary>
        </member>
        <member name="F:Spike.Hubs.HubTerminationPolicy.Timeout">
            <summary>
            Specifies that the runtime should attempt to automatically terminate the hub if it stays empty
            for a specified amount of time.
            </summary>
        </member>
        <member name="T:Spike.Hubs.HubClientEventHandler">
            <summary>
            An event handler that represents an event occured for a particular client within a given <see cref="T:Spike.Hubs.IHub"/>.
            </summary>
            <param name="sender">The hub that sends the event.</param>
            <param name="client">The client target of the event.</param>
        </member>
        <member name="T:Spike.Hubs.HubHandlers">
            <summary>
            Represents a hub that allows grouped communication for a set of clients.
            </summary>
        </member>
        <member name="M:Spike.Hubs.HubHandlers.Initialize">
            <summary>
            Wires-up the events when the server starts
            </summary>
        </member>
        <member name="M:Spike.Hubs.HubHandlers.OnHubPublish(Spike.IClient,Spike.Network.HubPublishRequest)">
            <summary>
            Occurs when the remote client attempts to publish to a hub.
            </summary>
            <param name="client">The remote client.</param>
            <param name="packet">The packet with the request.</param>
        </member>
        <member name="M:Spike.Hubs.HubHandlers.OnHubSubscribe(Spike.IClient,Spike.Network.HubSubscribeRequest)">
            <summary>
            Occurs when the remote client attempts to subscribe to a hub.
            </summary>
            <param name="client">The remote client.</param>
            <param name="packet">The packet with the request.</param>
        </member>
        <member name="M:Spike.Hubs.HubHandlers.OnHubUnsubscribe(Spike.IClient,Spike.Network.HubUnsubscribeRequest)">
            <summary>
            Occurs when the remote client attempts to unsubscribe from a hub.
            </summary>
            <param name="client">The remote client.</param>
            <param name="packet">The packet with the request.</param>
        </member>
        <member name="M:Spike.Hubs.HubHandlers.SendHubSubscribeInform(Spike.IClient,Spike.Hubs.HubStatus)">
            <summary>
            Sends a hub status code response to the remote client.
            </summary>
            <param name="client">The destination client.</param>
            <param name="status">The status code.</param>
        </member>
        <member name="M:Spike.Hubs.HubHandlers.SendHubUnsubscribeInform(Spike.IClient,Spike.Hubs.HubStatus)">
            <summary>
            Sends a hub status code response to the remote client.
            </summary>
            <param name="client">The destination client.</param>
            <param name="status">The status code.</param>
        </member>
        <member name="M:Spike.Hubs.HubHandlers.SendHubPublishInform(Spike.IClient,Spike.Hubs.HubStatus)">
            <summary>
            Sends a hub status code response to the remote client.
            </summary>
            <param name="client">The destination client.</param>
            <param name="status">The status code.</param>
        </member>
        <member name="T:Spike.Text.Json.Bson.BsonObjectId">
            <summary>
            Represents a BSON Oid (object id).
            </summary>
        </member>
        <member name="M:Spike.Text.Json.Bson.BsonObjectId.#ctor(System.Byte[])">
            <summary>
            Initializes a new instance of the <see cref="T:Spike.Text.Json.Bson.BsonObjectId"/> class.
            </summary>
            <param name="value">The Oid value.</param>
        </member>
        <member name="P:Spike.Text.Json.Bson.BsonObjectId.Value">
            <summary>
            Gets or sets the value of the Oid.
            </summary>
            <value>The value of the Oid.</value>
        </member>
        <member name="T:Spike.Text.Json.Bson.BsonReader">
            <summary>
            Represents a reader that provides fast, non-cached, forward-only access to serialized Json data.
            </summary>
        </member>
        <member name="T:Spike.Text.Json.JsonReader">
            <summary>
            Represents a reader that provides fast, non-cached, forward-only access to serialized Json data.
            </summary>
        </member>
        <member name="M:Spike.Text.Json.JsonReader.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Spike.Text.Json.JsonReader"/> class with the specified <see cref="T:System.IO.TextReader"/>.
            </summary>
        </member>
        <member name="M:Spike.Text.Json.JsonReader.Read">
            <summary>
            Reads the next JSON token from the stream.
            </summary>
            <returns>true if the next token was read successfully; false if there are no more tokens to read.</returns>
        </member>
        <member name="M:Spike.Text.Json.JsonReader.ReadAsInt32">
            <summary>
            Reads the next JSON token from the stream as a <see cref="T:System.Nullable`1"/>.
            </summary>
            <returns>A <see cref="T:System.Nullable`1"/>. This method will return <c>null</c> at the end of an array.</returns>
        </member>
        <member name="M:Spike.Text.Json.JsonReader.ReadAsBytes">
            <summary>
            Reads the next JSON token from the stream as a <see cref="T:Byte[]"/>.
            </summary>
            <returns>A <see cref="T:Byte[]"/> or a null reference if the next JSON token is null. This method will return <c>null</c> at the end of an array.</returns>
        </member>
        <member name="M:Spike.Text.Json.JsonReader.ReadAsDecimal">
            <summary>
            Reads the next JSON token from the stream as a <see cref="T:System.Nullable`1"/>.
            </summary>
            <returns>A <see cref="T:System.Nullable`1"/>. This method will return <c>null</c> at the end of an array.</returns>
        </member>
        <member name="M:Spike.Text.Json.JsonReader.ReadAsDateTimeOffset">
            <summary>
            Reads the next JSON token from the stream as a <see cref="T:System.Nullable`1"/>.
            </summary>
            <returns>A <see cref="T:System.Nullable`1"/>. This method will return <c>null</c> at the end of an array.</returns>
        </member>
        <member name="M:Spike.Text.Json.JsonReader.Skip">
            <summary>
            Skips the children of the current token.
            </summary>
        </member>
        <member name="M:Spike.Text.Json.JsonReader.SetToken(Spike.Text.Json.JsonToken)">
            <summary>
            Sets the current token.
            </summary>
            <param name="newToken">The new token.</param>
        </member>
        <member name="M:Spike.Text.Json.JsonReader.SetToken(Spike.Text.Json.JsonToken,System.Object)">
            <summary>
            Sets the current token and value.
            </summary>
            <param name="newToken">The new token.</param>
            <param name="value">The value.</param>
        </member>
        <member name="M:Spike.Text.Json.JsonReader.SetStateBasedOnCurrent">
            <summary>
            Sets the state based on current token type.
            </summary>
        </member>
        <member name="M:Spike.Text.Json.JsonReader.System#IDisposable#Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="M:Spike.Text.Json.JsonReader.Dispose(System.Boolean)">
            <summary>
            Releases unmanaged and - optionally - managed resources
            </summary>
            <param name="disposing"><c>true</c> to release both managed and unmanaged resources; <c>false</c> to release only unmanaged resources.</param>
        </member>
        <member name="M:Spike.Text.Json.JsonReader.Close">
            <summary>
            Changes the <see cref="T:Spike.Text.Json.JsonReader.State"/> to Closed. 
            </summary>
        </member>
        <member name="P:Spike.Text.Json.JsonReader.CurrentState">
            <summary>
            Gets the current reader state.
            </summary>
            <value>The current reader state.</value>
        </member>
        <member name="P:Spike.Text.Json.JsonReader.CloseInput">
            <summary>
            Gets or sets a value indicating whether the underlying stream or
            <see cref="T:System.IO.TextReader"/> should be closed when the reader is closed.
            </summary>
            <value>
            true to close the underlying stream or <see cref="T:System.IO.TextReader"/> when
            the reader is closed; otherwise false. The default is true.
            </value>
        </member>
        <member name="P:Spike.Text.Json.JsonReader.QuoteChar">
            <summary>
            Gets the quotation mark character used to enclose the value of a string.
            </summary>
        </member>
        <member name="P:Spike.Text.Json.JsonReader.TokenType">
            <summary>
            Gets the type of the current Json token. 
            </summary>
        </member>
        <member name="P:Spike.Text.Json.JsonReader.Value">
            <summary>
            Gets the text value of the current Json token.
            </summary>
        </member>
        <member name="P:Spike.Text.Json.JsonReader.ValueType">
            <summary>
            Gets The Common Language Runtime (CLR) type for the current Json token.
            </summary>
        </member>
        <member name="P:Spike.Text.Json.JsonReader.Depth">
            <summary>
            Gets the depth of the current token in the JSON document.
            </summary>
            <value>The depth of the current token in the JSON document.</value>
        </member>
        <member name="P:Spike.Text.Json.JsonReader.Culture">
            <summary>
            Gets or sets the culture used when reading JSON. Defaults to <see cref="P:System.Globalization.CultureInfo.InvariantCulture"/>.
            </summary>
        </member>
        <member name="T:Spike.Text.Json.JsonReader.State">
            <summary>
            Specifies the state of the reader.
            </summary>
        </member>
        <member name="F:Spike.Text.Json.JsonReader.State.Start">
            <summary>
            The Read method has not been called.
            </summary>
        </member>
        <member name="F:Spike.Text.Json.JsonReader.State.Complete">
            <summary>
            The end of the file has been reached successfully.
            </summary>
        </member>
        <member name="F:Spike.Text.Json.JsonReader.State.Property">
            <summary>
            Reader is at a property.
            </summary>
        </member>
        <member name="F:Spike.Text.Json.JsonReader.State.ObjectStart">
            <summary>
            Reader is at the start of an object.
            </summary>
        </member>
        <member name="F:Spike.Text.Json.JsonReader.State.Object">
            <summary>
            Reader is in an object.
            </summary>
        </member>
        <member name="F:Spike.Text.Json.JsonReader.State.ArrayStart">
            <summary>
            Reader is at the start of an array.
            </summary>
        </member>
        <member name="F:Spike.Text.Json.JsonReader.State.Array">
            <summary>
            Reader is in an array.
            </summary>
        </member>
        <member name="F:Spike.Text.Json.JsonReader.State.Closed">
            <summary>
            The Close method has been called.
            </summary>
        </member>
        <member name="F:Spike.Text.Json.JsonReader.State.PostValue">
            <summary>
            Reader has just read a value.
            </summary>
        </member>
        <member name="F:Spike.Text.Json.JsonReader.State.ConstructorStart">
            <summary>
            Reader is at the start of a constructor.
            </summary>
        </member>
        <member name="F:Spike.Text.Json.JsonReader.State.Constructor">
            <summary>
            Reader in a constructor.
            </summary>
        </member>
        <member name="F:Spike.Text.Json.JsonReader.State.Error">
            <summary>
            An error occurred that prevents the read operation from continuing.
            </summary>
        </member>
        <member name="F:Spike.Text.Json.JsonReader.State.Finished">
            <summary>
            The end of the file has been reached successfully.
            </summary>
        </member>
        <member name="M:Spike.Text.Json.Bson.BsonReader.#ctor(System.IO.Stream)">
            <summary>
            Initializes a new instance of the <see cref="T:Spike.Text.Json.Bson.BsonReader"/> class.
            </summary>
            <param name="stream">The stream.</param>
        </member>
        <member name="M:Spike.Text.Json.Bson.BsonReader.#ctor(System.IO.BinaryReader)">
            <summary>
            Initializes a new instance of the <see cref="T:Spike.Text.Json.Bson.BsonReader"/> class.
            </summary>
            <param name="reader">The reader.</param>
        </member>
        <member name="M:Spike.Text.Json.Bson.BsonReader.#ctor(System.IO.Stream,System.Boolean,System.DateTimeKind)">
            <summary>
            Initializes a new instance of the <see cref="T:Spike.Text.Json.Bson.BsonReader"/> class.
            </summary>
            <param name="stream">The stream.</param>
            <param name="readRootValueAsArray">if set to <c>true</c> the root object will be read as a JSON array.</param>
            <param name="dateTimeKindHandling">The <see cref="T:System.DateTimeKind"/> used when reading <see cref="T:System.DateTime"/> values from BSON.</param>
        </member>
        <member name="M:Spike.Text.Json.Bson.BsonReader.#ctor(System.IO.BinaryReader,System.Boolean,System.DateTimeKind)">
            <summary>
            Initializes a new instance of the <see cref="T:Spike.Text.Json.Bson.BsonReader"/> class.
            </summary>
            <param name="reader">The reader.</param>
            <param name="readRootValueAsArray">if set to <c>true</c> the root object will be read as a JSON array.</param>
            <param name="dateTimeKindHandling">The <see cref="T:System.DateTimeKind"/> used when reading <see cref="T:System.DateTime"/> values from BSON.</param>
        </member>
        <member name="M:Spike.Text.Json.Bson.BsonReader.ReadAsBytes">
            <summary>
            Reads the next JSON token from the stream as a <see cref="T:Byte[]"/>.
            </summary>
            <returns>
            A <see cref="T:Byte[]"/> or a null reference if the next JSON token is null. This method will return <c>null</c> at the end of an array.
            </returns>
        </member>
        <member name="M:Spike.Text.Json.Bson.BsonReader.ReadAsDecimal">
            <summary>
            Reads the next JSON token from the stream as a <see cref="T:System.Nullable`1"/>.
            </summary>
            <returns>A <see cref="T:System.Nullable`1"/>. This method will return <c>null</c> at the end of an array.</returns>
        </member>
        <member name="M:Spike.Text.Json.Bson.BsonReader.ReadAsInt32">
            <summary>
            Reads the next JSON token from the stream as a <see cref="T:System.Nullable`1"/>.
            </summary>
            <returns>A <see cref="T:System.Nullable`1"/>. This method will return <c>null</c> at the end of an array.</returns>
        </member>
        <member name="M:Spike.Text.Json.Bson.BsonReader.ReadAsDateTimeOffset">
            <summary>
            Reads the next JSON token from the stream as a <see cref="T:System.Nullable`1"/>.
            </summary>
            <returns>
            A <see cref="T:System.Nullable`1"/>. This method will return <c>null</c> at the end of an array.
            </returns>
        </member>
        <member name="M:Spike.Text.Json.Bson.BsonReader.Read">
            <summary>
            Reads the next JSON token from the stream.
            </summary>
            <returns>
            true if the next token was read successfully; false if there are no more tokens to read.
            </returns>
        </member>
        <member name="M:Spike.Text.Json.Bson.BsonReader.Close">
            <summary>
            Changes the <see cref="T:Spike.Text.Json.JsonReader.State"/> to Closed.
            </summary>
        </member>
        <member name="P:Spike.Text.Json.Bson.BsonReader.JsonNet35BinaryCompatibility">
            <summary>
            Gets or sets a value indicating whether binary data reading should compatible with incorrect Json.NET 3.5 written binary.
            </summary>
            <value>
            	<c>true</c> if binary data reading will be compatible with incorrect Json.NET 3.5 written binary; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Spike.Text.Json.Bson.BsonReader.ReadRootValueAsArray">
            <summary>
            Gets or sets a value indicating whether the root object will be read as a JSON array.
            </summary>
            <value>
            	<c>true</c> if the root object will be read as a JSON array; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Spike.Text.Json.Bson.BsonReader.DateTimeKindHandling">
            <summary>
            Gets or sets the <see cref="T:System.DateTimeKind"/> used when reading <see cref="T:System.DateTime"/> values from BSON.
            </summary>
            <value>The <see cref="T:System.DateTimeKind"/> used when reading <see cref="T:System.DateTime"/> values from BSON.</value>
        </member>
        <member name="T:Spike.Text.Json.Bson.BsonWriter">
            <summary>
            Represents a writer that provides a fast, non-cached, forward-only way of generating Json data.
            </summary>
        </member>
        <member name="T:Spike.Text.Json.JsonWriter">
            <summary>
            Represents a writer that provides a fast, non-cached, forward-only way of generating Json data.
            </summary>
        </member>
        <member name="M:Spike.Text.Json.JsonWriter.#ctor">
            <summary>
            Creates an instance of the <c>JsonWriter</c> class. 
            </summary>
        </member>
        <member name="M:Spike.Text.Json.JsonWriter.Flush">
            <summary>
            Flushes whatever is in the buffer to the underlying streams and also flushes the underlying stream.
            </summary>
        </member>
        <member name="M:Spike.Text.Json.JsonWriter.Close">
            <summary>
            Closes this stream and the underlying stream.
            </summary>
        </member>
        <member name="M:Spike.Text.Json.JsonWriter.WriteStartObject">
            <summary>
            Writes the beginning of a Json object.
            </summary>
        </member>
        <member name="M:Spike.Text.Json.JsonWriter.WriteEndObject">
            <summary>
            Writes the end of a Json object.
            </summary>
        </member>
        <member name="M:Spike.Text.Json.JsonWriter.WriteStartArray">
            <summary>
            Writes the beginning of a Json array.
            </summary>
        </member>
        <member name="M:Spike.Text.Json.JsonWriter.WriteEndArray">
            <summary>
            Writes the end of an array.
            </summary>
        </member>
        <member name="M:Spike.Text.Json.JsonWriter.WriteStartConstructor(System.String)">
            <summary>
            Writes the start of a constructor with the given name.
            </summary>
            <param name="name">The name of the constructor.</param>
        </member>
        <member name="M:Spike.Text.Json.JsonWriter.WriteEndConstructor">
            <summary>
            Writes the end constructor.
            </summary>
        </member>
        <member name="M:Spike.Text.Json.JsonWriter.WritePropertyName(System.String)">
            <summary>
            Writes the property name of a name/value pair on a Json object.
            </summary>
            <param name="name">The name of the property.</param>
        </member>
        <member name="M:Spike.Text.Json.JsonWriter.WriteEnd">
            <summary>
            Writes the end of the current Json object or array.
            </summary>
        </member>
        <member name="M:Spike.Text.Json.JsonWriter.WriteToken(Spike.Text.Json.JsonReader)">
            <summary>
            Writes the current <see cref="T:Spike.Text.Json.JsonReader"/> token.
            </summary>
            <param name="reader">The <see cref="T:Spike.Text.Json.JsonReader"/> to read the token from.</param>
        </member>
        <member name="M:Spike.Text.Json.JsonWriter.WriteEnd(Spike.Text.Json.JsonToken)">
            <summary>
            Writes the specified end token.
            </summary>
            <param name="token">The end token to write.</param>
        </member>
        <member name="M:Spike.Text.Json.JsonWriter.WriteIndent">
            <summary>
            Writes indent characters.
            </summary>
        </member>
        <member name="M:Spike.Text.Json.JsonWriter.WriteValueDelimiter">
            <summary>
            Writes the JSON value delimiter.
            </summary>
        </member>
        <member name="M:Spike.Text.Json.JsonWriter.WriteIndentSpace">
            <summary>
            Writes an indent space.
            </summary>
        </member>
        <member name="M:Spike.Text.Json.JsonWriter.WriteNull">
            <summary>
            Writes a null value.
            </summary>
        </member>
        <member name="M:Spike.Text.Json.JsonWriter.WriteUndefined">
            <summary>
            Writes an undefined value.
            </summary>
        </member>
        <member name="M:Spike.Text.Json.JsonWriter.WriteRaw(System.String)">
            <summary>
            Writes raw JSON without changing the writer's state.
            </summary>
            <param name="json">The raw JSON to write.</param>
        </member>
        <member name="M:Spike.Text.Json.JsonWriter.WriteRawValue(System.String)">
            <summary>
            Writes raw JSON where a value is expected and updates the writer's state.
            </summary>
            <param name="json">The raw JSON to write.</param>
        </member>
        <member name="M:Spike.Text.Json.JsonWriter.WriteValue(System.String)">
            <summary>
            Writes a <see cref="T:System.String"/> value.
            </summary>
            <param name="value">The <see cref="T:System.String"/> value to write.</param>
        </member>
        <member name="M:Spike.Text.Json.JsonWriter.WriteValue(System.Int32)">
            <summary>
            Writes a <see cref="T:System.Int32"/> value.
            </summary>
            <param name="value">The <see cref="T:System.Int32"/> value to write.</param>
        </member>
        <member name="M:Spike.Text.Json.JsonWriter.WriteValue(System.UInt32)">
            <summary>
            Writes a <see cref="T:System.UInt32"/> value.
            </summary>
            <param name="value">The <see cref="T:System.UInt32"/> value to write.</param>
        </member>
        <member name="M:Spike.Text.Json.JsonWriter.WriteValue(System.Int64)">
            <summary>
            Writes a <see cref="T:System.Int64"/> value.
            </summary>
            <param name="value">The <see cref="T:System.Int64"/> value to write.</param>
        </member>
        <member name="M:Spike.Text.Json.JsonWriter.WriteValue(System.UInt64)">
            <summary>
            Writes a <see cref="T:System.UInt64"/> value.
            </summary>
            <param name="value">The <see cref="T:System.UInt64"/> value to write.</param>
        </member>
        <member name="M:Spike.Text.Json.JsonWriter.WriteValue(System.Single)">
            <summary>
            Writes a <see cref="T:System.Single"/> value.
            </summary>
            <param name="value">The <see cref="T:System.Single"/> value to write.</param>
        </member>
        <member name="M:Spike.Text.Json.JsonWriter.WriteValue(System.Double)">
            <summary>
            Writes a <see cref="T:System.Double"/> value.
            </summary>
            <param name="value">The <see cref="T:System.Double"/> value to write.</param>
        </member>
        <member name="M:Spike.Text.Json.JsonWriter.WriteValue(System.Boolean)">
            <summary>
            Writes a <see cref="T:System.Boolean"/> value.
            </summary>
            <param name="value">The <see cref="T:System.Boolean"/> value to write.</param>
        </member>
        <member name="M:Spike.Text.Json.JsonWriter.WriteValue(System.Int16)">
            <summary>
            Writes a <see cref="T:System.Int16"/> value.
            </summary>
            <param name="value">The <see cref="T:System.Int16"/> value to write.</param>
        </member>
        <member name="M:Spike.Text.Json.JsonWriter.WriteValue(System.UInt16)">
            <summary>
            Writes a <see cref="T:System.UInt16"/> value.
            </summary>
            <param name="value">The <see cref="T:System.UInt16"/> value to write.</param>
        </member>
        <member name="M:Spike.Text.Json.JsonWriter.WriteValue(System.Char)">
            <summary>
            Writes a <see cref="T:System.Char"/> value.
            </summary>
            <param name="value">The <see cref="T:System.Char"/> value to write.</param>
        </member>
        <member name="M:Spike.Text.Json.JsonWriter.WriteValue(System.Byte)">
            <summary>
            Writes a <see cref="T:System.Byte"/> value.
            </summary>
            <param name="value">The <see cref="T:System.Byte"/> value to write.</param>
        </member>
        <member name="M:Spike.Text.Json.JsonWriter.WriteValue(System.SByte)">
            <summary>
            Writes a <see cref="T:System.SByte"/> value.
            </summary>
            <param name="value">The <see cref="T:System.SByte"/> value to write.</param>
        </member>
        <member name="M:Spike.Text.Json.JsonWriter.WriteValue(System.Decimal)">
            <summary>
            Writes a <see cref="T:System.Decimal"/> value.
            </summary>
            <param name="value">The <see cref="T:System.Decimal"/> value to write.</param>
        </member>
        <member name="M:Spike.Text.Json.JsonWriter.WriteValue(System.DateTime)">
            <summary>
            Writes a <see cref="T:System.DateTime"/> value.
            </summary>
            <param name="value">The <see cref="T:System.DateTime"/> value to write.</param>
        </member>
        <member name="M:Spike.Text.Json.JsonWriter.WriteValue(System.DateTimeOffset)">
            <summary>
            Writes a <see cref="T:System.DateTimeOffset"/> value.
            </summary>
            <param name="value">The <see cref="T:System.DateTimeOffset"/> value to write.</param>
        </member>
        <member name="M:Spike.Text.Json.JsonWriter.WriteValue(System.Guid)">
            <summary>
            Writes a <see cref="T:System.Guid"/> value.
            </summary>
            <param name="value">The <see cref="T:System.Guid"/> value to write.</param>
        </member>
        <member name="M:Spike.Text.Json.JsonWriter.WriteValue(System.TimeSpan)">
            <summary>
            Writes a <see cref="T:System.TimeSpan"/> value.
            </summary>
            <param name="value">The <see cref="T:System.TimeSpan"/> value to write.</param>
        </member>
        <member name="M:Spike.Text.Json.JsonWriter.WriteValue(System.Nullable{System.Int32})">
            <summary>
            Writes a <see cref="T:System.Nullable`1"/> value.
            </summary>
            <param name="value">The <see cref="T:System.Nullable`1"/> value to write.</param>
        </member>
        <member name="M:Spike.Text.Json.JsonWriter.WriteValue(System.Nullable{System.UInt32})">
            <summary>
            Writes a <see cref="T:System.Nullable`1"/> value.
            </summary>
            <param name="value">The <see cref="T:System.Nullable`1"/> value to write.</param>
        </member>
        <member name="M:Spike.Text.Json.JsonWriter.WriteValue(System.Nullable{System.Int64})">
            <summary>
            Writes a <see cref="T:System.Nullable`1"/> value.
            </summary>
            <param name="value">The <see cref="T:System.Nullable`1"/> value to write.</param>
        </member>
        <member name="M:Spike.Text.Json.JsonWriter.WriteValue(System.Nullable{System.UInt64})">
            <summary>
            Writes a <see cref="T:System.Nullable`1"/> value.
            </summary>
            <param name="value">The <see cref="T:System.Nullable`1"/> value to write.</param>
        </member>
        <member name="M:Spike.Text.Json.JsonWriter.WriteValue(System.Nullable{System.Single})">
            <summary>
            Writes a <see cref="T:System.Nullable`1"/> value.
            </summary>
            <param name="value">The <see cref="T:System.Nullable`1"/> value to write.</param>
        </member>
        <member name="M:Spike.Text.Json.JsonWriter.WriteValue(System.Nullable{System.Double})">
            <summary>
            Writes a <see cref="T:System.Nullable`1"/> value.
            </summary>
            <param name="value">The <see cref="T:System.Nullable`1"/> value to write.</param>
        </member>
        <member name="M:Spike.Text.Json.JsonWriter.WriteValue(System.Nullable{System.Boolean})">
            <summary>
            Writes a <see cref="T:System.Nullable`1"/> value.
            </summary>
            <param name="value">The <see cref="T:System.Nullable`1"/> value to write.</param>
        </member>
        <member name="M:Spike.Text.Json.JsonWriter.WriteValue(System.Nullable{System.Int16})">
            <summary>
            Writes a <see cref="T:System.Nullable`1"/> value.
            </summary>
            <param name="value">The <see cref="T:System.Nullable`1"/> value to write.</param>
        </member>
        <member name="M:Spike.Text.Json.JsonWriter.WriteValue(System.Nullable{System.UInt16})">
            <summary>
            Writes a <see cref="T:System.Nullable`1"/> value.
            </summary>
            <param name="value">The <see cref="T:System.Nullable`1"/> value to write.</param>
        </member>
        <member name="M:Spike.Text.Json.JsonWriter.WriteValue(System.Nullable{System.Char})">
            <summary>
            Writes a <see cref="T:System.Nullable`1"/> value.
            </summary>
            <param name="value">The <see cref="T:System.Nullable`1"/> value to write.</param>
        </member>
        <member name="M:Spike.Text.Json.JsonWriter.WriteValue(System.Nullable{System.Byte})">
            <summary>
            Writes a <see cref="T:System.Nullable`1"/> value.
            </summary>
            <param name="value">The <see cref="T:System.Nullable`1"/> value to write.</param>
        </member>
        <member name="M:Spike.Text.Json.JsonWriter.WriteValue(System.Nullable{System.SByte})">
            <summary>
            Writes a <see cref="T:System.Nullable`1"/> value.
            </summary>
            <param name="value">The <see cref="T:System.Nullable`1"/> value to write.</param>
        </member>
        <member name="M:Spike.Text.Json.JsonWriter.WriteValue(System.Nullable{System.Decimal})">
            <summary>
            Writes a <see cref="T:System.Nullable`1"/> value.
            </summary>
            <param name="value">The <see cref="T:System.Nullable`1"/> value to write.</param>
        </member>
        <member name="M:Spike.Text.Json.JsonWriter.WriteValue(System.Nullable{System.DateTime})">
            <summary>
            Writes a <see cref="T:System.Nullable`1"/> value.
            </summary>
            <param name="value">The <see cref="T:System.Nullable`1"/> value to write.</param>
        </member>
        <member name="M:Spike.Text.Json.JsonWriter.WriteValue(System.Nullable{System.DateTimeOffset})">
            <summary>
            Writes a <see cref="T:System.Nullable`1"/> value.
            </summary>
            <param name="value">The <see cref="T:System.Nullable`1"/> value to write.</param>
        </member>
        <member name="M:Spike.Text.Json.JsonWriter.WriteValue(System.Nullable{System.Guid})">
            <summary>
            Writes a <see cref="T:System.Nullable`1"/> value.
            </summary>
            <param name="value">The <see cref="T:System.Nullable`1"/> value to write.</param>
        </member>
        <member name="M:Spike.Text.Json.JsonWriter.WriteValue(System.Nullable{System.TimeSpan})">
            <summary>
            Writes a <see cref="T:System.Nullable`1"/> value.
            </summary>
            <param name="value">The <see cref="T:System.Nullable`1"/> value to write.</param>
        </member>
        <member name="M:Spike.Text.Json.JsonWriter.WriteValue(System.Byte[])">
            <summary>
            Writes a <see cref="T:Byte[]"/> value.
            </summary>
            <param name="value">The <see cref="T:Byte[]"/> value to write.</param>
        </member>
        <member name="M:Spike.Text.Json.JsonWriter.WriteValue(System.Uri)">
            <summary>
            Writes a <see cref="T:System.Uri"/> value.
            </summary>
            <param name="value">The <see cref="T:System.Uri"/> value to write.</param>
        </member>
        <member name="M:Spike.Text.Json.JsonWriter.WriteValue(System.Object)">
            <summary>
            Writes a <see cref="T:System.Object"/> value.
            An error will raised if the value cannot be written as a single JSON token.
            </summary>
            <param name="value">The <see cref="T:System.Object"/> value to write.</param>
        </member>
        <member name="M:Spike.Text.Json.JsonWriter.WriteComment(System.String)">
            <summary>
            Writes out a comment <code>/*...*/</code> containing the specified text. 
            </summary>
            <param name="text">Text to place inside the comment.</param>
        </member>
        <member name="M:Spike.Text.Json.JsonWriter.WriteWhitespace(System.String)">
            <summary>
            Writes out the given white space.
            </summary>
            <param name="ws">The string of white space characters.</param>
        </member>
        <member name="P:Spike.Text.Json.JsonWriter.CloseOutput">
            <summary>
            Gets or sets a value indicating whether the underlying stream or
            <see cref="T:System.IO.TextReader"/> should be closed when the writer is closed.
            </summary>
            <value>
            true to close the underlying stream or <see cref="T:System.IO.TextReader"/> when
            the writer is closed; otherwise false. The default is true.
            </value>
        </member>
        <member name="P:Spike.Text.Json.JsonWriter.Top">
            <summary>
            Gets the top.
            </summary>
            <value>The top.</value>
        </member>
        <member name="P:Spike.Text.Json.JsonWriter.WriteState">
            <summary>
            Gets the state of the writer.
            </summary>
        </member>
        <member name="P:Spike.Text.Json.JsonWriter.Formatting">
            <summary>
            Indicates how the output is formatted.
            </summary>
        </member>
        <member name="M:Spike.Text.Json.Bson.BsonWriter.#ctor(System.IO.Stream)">
            <summary>
            Initializes a new instance of the <see cref="T:Spike.Text.Json.Bson.BsonWriter"/> class.
            </summary>
            <param name="stream">The stream.</param>
        </member>
        <member name="M:Spike.Text.Json.Bson.BsonWriter.#ctor(System.IO.BinaryWriter)">
            <summary>
            Initializes a new instance of the <see cref="T:Spike.Text.Json.Bson.BsonWriter"/> class.
            </summary>
            <param name="writer">The writer.</param>
        </member>
        <member name="M:Spike.Text.Json.Bson.BsonWriter.Flush">
            <summary>
            Flushes whatever is in the buffer to the underlying streams and also flushes the underlying stream.
            </summary>
        </member>
        <member name="M:Spike.Text.Json.Bson.BsonWriter.WriteEnd(Spike.Text.Json.JsonToken)">
            <summary>
            Writes the end.
            </summary>
            <param name="token">The token.</param>
        </member>
        <member name="M:Spike.Text.Json.Bson.BsonWriter.WriteComment(System.String)">
            <summary>
            Writes out a comment <code>/*...*/</code> containing the specified text.
            </summary>
            <param name="text">Text to place inside the comment.</param>
        </member>
        <member name="M:Spike.Text.Json.Bson.BsonWriter.WriteStartConstructor(System.String)">
            <summary>
            Writes the start of a constructor with the given name.
            </summary>
            <param name="name">The name of the constructor.</param>
        </member>
        <member name="M:Spike.Text.Json.Bson.BsonWriter.WriteRaw(System.String)">
            <summary>
            Writes raw JSON.
            </summary>
            <param name="json">The raw JSON to write.</param>
        </member>
        <member name="M:Spike.Text.Json.Bson.BsonWriter.WriteRawValue(System.String)">
            <summary>
            Writes raw JSON where a value is expected and updates the writer's state.
            </summary>
            <param name="json">The raw JSON to write.</param>
        </member>
        <member name="M:Spike.Text.Json.Bson.BsonWriter.WriteStartArray">
            <summary>
            Writes the beginning of a Json array.
            </summary>
        </member>
        <member name="M:Spike.Text.Json.Bson.BsonWriter.WriteStartObject">
            <summary>
            Writes the beginning of a Json object.
            </summary>
        </member>
        <member name="M:Spike.Text.Json.Bson.BsonWriter.WritePropertyName(System.String)">
            <summary>
            Writes the property name of a name/value pair on a Json object.
            </summary>
            <param name="name">The name of the property.</param>
        </member>
        <member name="M:Spike.Text.Json.Bson.BsonWriter.Close">
            <summary>
            Closes this stream and the underlying stream.
            </summary>
        </member>
        <member name="M:Spike.Text.Json.Bson.BsonWriter.WriteNull">
            <summary>
            Writes a null value.
            </summary>
        </member>
        <member name="M:Spike.Text.Json.Bson.BsonWriter.WriteUndefined">
            <summary>
            Writes an undefined value.
            </summary>
        </member>
        <member name="M:Spike.Text.Json.Bson.BsonWriter.WriteValue(System.String)">
            <summary>
            Writes a <see cref="T:System.String"/> value.
            </summary>
            <param name="value">The <see cref="T:System.String"/> value to write.</param>
        </member>
        <member name="M:Spike.Text.Json.Bson.BsonWriter.WriteValue(System.Int32)">
            <summary>
            Writes a <see cref="T:System.Int32"/> value.
            </summary>
            <param name="value">The <see cref="T:System.Int32"/> value to write.</param>
        </member>
        <member name="M:Spike.Text.Json.Bson.BsonWriter.WriteValue(System.UInt32)">
            <summary>
            Writes a <see cref="T:System.UInt32"/> value.
            </summary>
            <param name="value">The <see cref="T:System.UInt32"/> value to write.</param>
        </member>
        <member name="M:Spike.Text.Json.Bson.BsonWriter.WriteValue(System.Int64)">
            <summary>
            Writes a <see cref="T:System.Int64"/> value.
            </summary>
            <param name="value">The <see cref="T:System.Int64"/> value to write.</param>
        </member>
        <member name="M:Spike.Text.Json.Bson.BsonWriter.WriteValue(System.UInt64)">
            <summary>
            Writes a <see cref="T:System.UInt64"/> value.
            </summary>
            <param name="value">The <see cref="T:System.UInt64"/> value to write.</param>
        </member>
        <member name="M:Spike.Text.Json.Bson.BsonWriter.WriteValue(System.Single)">
            <summary>
            Writes a <see cref="T:System.Single"/> value.
            </summary>
            <param name="value">The <see cref="T:System.Single"/> value to write.</param>
        </member>
        <member name="M:Spike.Text.Json.Bson.BsonWriter.WriteValue(System.Double)">
            <summary>
            Writes a <see cref="T:System.Double"/> value.
            </summary>
            <param name="value">The <see cref="T:System.Double"/> value to write.</param>
        </member>
        <member name="M:Spike.Text.Json.Bson.BsonWriter.WriteValue(System.Boolean)">
            <summary>
            Writes a <see cref="T:System.Boolean"/> value.
            </summary>
            <param name="value">The <see cref="T:System.Boolean"/> value to write.</param>
        </member>
        <member name="M:Spike.Text.Json.Bson.BsonWriter.WriteValue(System.Int16)">
            <summary>
            Writes a <see cref="T:System.Int16"/> value.
            </summary>
            <param name="value">The <see cref="T:System.Int16"/> value to write.</param>
        </member>
        <member name="M:Spike.Text.Json.Bson.BsonWriter.WriteValue(System.UInt16)">
            <summary>
            Writes a <see cref="T:System.UInt16"/> value.
            </summary>
            <param name="value">The <see cref="T:System.UInt16"/> value to write.</param>
        </member>
        <member name="M:Spike.Text.Json.Bson.BsonWriter.WriteValue(System.Char)">
            <summary>
            Writes a <see cref="T:System.Char"/> value.
            </summary>
            <param name="value">The <see cref="T:System.Char"/> value to write.</param>
        </member>
        <member name="M:Spike.Text.Json.Bson.BsonWriter.WriteValue(System.Byte)">
            <summary>
            Writes a <see cref="T:System.Byte"/> value.
            </summary>
            <param name="value">The <see cref="T:System.Byte"/> value to write.</param>
        </member>
        <member name="M:Spike.Text.Json.Bson.BsonWriter.WriteValue(System.SByte)">
            <summary>
            Writes a <see cref="T:System.SByte"/> value.
            </summary>
            <param name="value">The <see cref="T:System.SByte"/> value to write.</param>
        </member>
        <member name="M:Spike.Text.Json.Bson.BsonWriter.WriteValue(System.Decimal)">
            <summary>
            Writes a <see cref="T:System.Decimal"/> value.
            </summary>
            <param name="value">The <see cref="T:System.Decimal"/> value to write.</param>
        </member>
        <member name="M:Spike.Text.Json.Bson.BsonWriter.WriteValue(System.DateTime)">
            <summary>
            Writes a <see cref="T:System.DateTime"/> value.
            </summary>
            <param name="value">The <see cref="T:System.DateTime"/> value to write.</param>
        </member>
        <member name="M:Spike.Text.Json.Bson.BsonWriter.WriteValue(System.DateTimeOffset)">
            <summary>
            Writes a <see cref="T:System.DateTimeOffset"/> value.
            </summary>
            <param name="value">The <see cref="T:System.DateTimeOffset"/> value to write.</param>
        </member>
        <member name="M:Spike.Text.Json.Bson.BsonWriter.WriteValue(System.Byte[])">
            <summary>
            Writes a <see cref="T:Byte[]"/> value.
            </summary>
            <param name="value">The <see cref="T:Byte[]"/> value to write.</param>
        </member>
        <member name="M:Spike.Text.Json.Bson.BsonWriter.WriteValue(System.Guid)">
            <summary>
            Writes a <see cref="T:System.Guid"/> value.
            </summary>
            <param name="value">The <see cref="T:System.Guid"/> value to write.</param>
        </member>
        <member name="M:Spike.Text.Json.Bson.BsonWriter.WriteValue(System.TimeSpan)">
            <summary>
            Writes a <see cref="T:System.TimeSpan"/> value.
            </summary>
            <param name="value">The <see cref="T:System.TimeSpan"/> value to write.</param>
        </member>
        <member name="M:Spike.Text.Json.Bson.BsonWriter.WriteValue(System.Uri)">
            <summary>
            Writes a <see cref="T:System.Uri"/> value.
            </summary>
            <param name="value">The <see cref="T:System.Uri"/> value to write.</param>
        </member>
        <member name="M:Spike.Text.Json.Bson.BsonWriter.WriteObjectId(System.Byte[])">
            <summary>
            Writes a <see cref="T:Byte[]"/> value that represents a BSON object id.
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:Spike.Text.Json.Bson.BsonWriter.WriteRegex(System.String,System.String)">
            <summary>
            Writes a BSON regex.
            </summary>
            <param name="pattern">The regex pattern.</param>
            <param name="options">The regex options.</param>
        </member>
        <member name="P:Spike.Text.Json.Bson.BsonWriter.DateTimeKindHandling">
            <summary>
            Gets or sets the <see cref="T:System.DateTimeKind"/> used when writing <see cref="T:System.DateTime"/> values to BSON.
            When set to <see cref="F:System.DateTimeKind.Unspecified"/> no conversion will occur.
            </summary>
            <value>The <see cref="T:System.DateTimeKind"/> used when writing <see cref="T:System.DateTime"/> values to BSON.</value>
        </member>
        <member name="T:Spike.Text.Json.ConstructorHandling">
            <summary>
            Specifies how constructors are used when initializing objects during deserialization by the <see cref="T:Spike.Text.Json.JsonSerializer"/>.
            </summary>
        </member>
        <member name="F:Spike.Text.Json.ConstructorHandling.Default">
            <summary>
            First attempt to use the public default constructor then fall back to single paramatized constructor.
            </summary>
        </member>
        <member name="F:Spike.Text.Json.ConstructorHandling.AllowNonPublicDefaultConstructor">
            <summary>
            Allow Json.NET to use a non-public default constructor.
            </summary>
        </member>
        <member name="T:Spike.Text.Json.Converters.BinaryConverter">
            <summary>
            Converts a binary value to and from a base 64 string value.
            </summary>
        </member>
        <member name="T:Spike.Text.Json.JsonConverter">
            <summary>
            Converts an object to and from JSON.
            </summary>
        </member>
        <member name="M:Spike.Text.Json.JsonConverter.WriteJson(Spike.Text.Json.JsonWriter,System.Object,Spike.Text.Json.JsonSerializer)">
            <summary>
            Writes the JSON representation of the object.
            </summary>
            <param name="writer">The <see cref="T:Spike.Text.Json.JsonWriter"/> to write to.</param>
            <param name="value">The value.</param>
            <param name="serializer">The calling serializer.</param>
        </member>
        <member name="M:Spike.Text.Json.JsonConverter.ReadJson(Spike.Text.Json.JsonReader,System.Type,System.Object,Spike.Text.Json.JsonSerializer)">
            <summary>
            Reads the JSON representation of the object.
            </summary>
            <param name="reader">The <see cref="T:Spike.Text.Json.JsonReader"/> to read from.</param>
            <param name="objectType">Type of the object.</param>
            <param name="existingValue">The existing value of object being read.</param>
            <param name="serializer">The calling serializer.</param>
            <returns>The object value.</returns>
        </member>
        <member name="M:Spike.Text.Json.JsonConverter.CanConvert(System.Type)">
            <summary>
            Determines whether this instance can convert the specified object type.
            </summary>
            <param name="objectType">Type of the object.</param>
            <returns>
            	<c>true</c> if this instance can convert the specified object type; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Spike.Text.Json.JsonConverter.GetSchema">
            <summary>
            Gets the <see cref="T:Spike.Text.Json.Schema.JsonSchema"/> of the JSON produced by the JsonConverter.
            </summary>
            <returns>The <see cref="T:Spike.Text.Json.Schema.JsonSchema"/> of the JSON produced by the JsonConverter.</returns>
        </member>
        <member name="P:Spike.Text.Json.JsonConverter.CanRead">
            <summary>
            Gets a value indicating whether this <see cref="T:Spike.Text.Json.JsonConverter"/> can read JSON.
            </summary>
            <value><c>true</c> if this <see cref="T:Spike.Text.Json.JsonConverter"/> can read JSON; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Spike.Text.Json.JsonConverter.CanWrite">
            <summary>
            Gets a value indicating whether this <see cref="T:Spike.Text.Json.JsonConverter"/> can write JSON.
            </summary>
            <value><c>true</c> if this <see cref="T:Spike.Text.Json.JsonConverter"/> can write JSON; otherwise, <c>false</c>.</value>
        </member>
        <member name="M:Spike.Text.Json.Converters.BinaryConverter.WriteJson(Spike.Text.Json.JsonWriter,System.Object,Spike.Text.Json.JsonSerializer)">
            <summary>
            Writes the JSON representation of the object.
            </summary>
            <param name="writer">The <see cref="T:Spike.Text.Json.JsonWriter"/> to write to.</param>
            <param name="value">The value.</param>
            <param name="serializer">The calling serializer.</param>
        </member>
        <member name="M:Spike.Text.Json.Converters.BinaryConverter.ReadJson(Spike.Text.Json.JsonReader,System.Type,System.Object,Spike.Text.Json.JsonSerializer)">
            <summary>
            Reads the JSON representation of the object.
            </summary>
            <param name="reader">The <see cref="T:Spike.Text.Json.JsonReader"/> to read from.</param>
            <param name="objectType">Type of the object.</param>
            <param name="existingValue">The existing value of object being read.</param>
            <param name="serializer">The calling serializer.</param>
            <returns>The object value.</returns>
        </member>
        <member name="M:Spike.Text.Json.Converters.BinaryConverter.CanConvert(System.Type)">
            <summary>
            Determines whether this instance can convert the specified object type.
            </summary>
            <param name="objectType">Type of the object.</param>
            <returns>
            	<c>true</c> if this instance can convert the specified object type; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="T:Spike.Text.Json.Converters.BsonObjectIdConverter">
            <summary>
            Converts a <see cref="T:Spike.Text.Json.Bson.BsonObjectId"/> to and from JSON and BSON.
            </summary>
        </member>
        <member name="M:Spike.Text.Json.Converters.BsonObjectIdConverter.WriteJson(Spike.Text.Json.JsonWriter,System.Object,Spike.Text.Json.JsonSerializer)">
            <summary>
            Writes the JSON representation of the object.
            </summary>
            <param name="writer">The <see cref="T:Spike.Text.Json.JsonWriter"/> to write to.</param>
            <param name="value">The value.</param>
            <param name="serializer">The calling serializer.</param>
        </member>
        <member name="M:Spike.Text.Json.Converters.BsonObjectIdConverter.ReadJson(Spike.Text.Json.JsonReader,System.Type,System.Object,Spike.Text.Json.JsonSerializer)">
            <summary>
            Reads the JSON representation of the object.
            </summary>
            <param name="reader">The <see cref="T:Spike.Text.Json.JsonReader"/> to read from.</param>
            <param name="objectType">Type of the object.</param>
            <param name="existingValue">The existing value of object being read.</param>
            <param name="serializer">The calling serializer.</param>
            <returns>The object value.</returns>
        </member>
        <member name="M:Spike.Text.Json.Converters.BsonObjectIdConverter.CanConvert(System.Type)">
            <summary>
            Determines whether this instance can convert the specified object type.
            </summary>
            <param name="objectType">Type of the object.</param>
            <returns>
            	<c>true</c> if this instance can convert the specified object type; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="T:Spike.Text.Json.Converters.CustomCreationConverter`1">
            <summary>
            Create a custom object
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:Spike.Text.Json.Converters.CustomCreationConverter`1.WriteJson(Spike.Text.Json.JsonWriter,System.Object,Spike.Text.Json.JsonSerializer)">
            <summary>
            Writes the JSON representation of the object.
            </summary>
            <param name="writer">The <see cref="T:Spike.Text.Json.JsonWriter"/> to write to.</param>
            <param name="value">The value.</param>
            <param name="serializer">The calling serializer.</param>
        </member>
        <member name="M:Spike.Text.Json.Converters.CustomCreationConverter`1.ReadJson(Spike.Text.Json.JsonReader,System.Type,System.Object,Spike.Text.Json.JsonSerializer)">
            <summary>
            Reads the JSON representation of the object.
            </summary>
            <param name="reader">The <see cref="T:Spike.Text.Json.JsonReader"/> to read from.</param>
            <param name="objectType">Type of the object.</param>
            <param name="existingValue">The existing value of object being read.</param>
            <param name="serializer">The calling serializer.</param>
            <returns>The object value.</returns>
        </member>
        <member name="M:Spike.Text.Json.Converters.CustomCreationConverter`1.Create(System.Type)">
            <summary>
            Creates an object which will then be populated by the serializer.
            </summary>
            <param name="objectType">Type of the object.</param>
            <returns></returns>
        </member>
        <member name="M:Spike.Text.Json.Converters.CustomCreationConverter`1.CanConvert(System.Type)">
            <summary>
            Determines whether this instance can convert the specified object type.
            </summary>
            <param name="objectType">Type of the object.</param>
            <returns>
            	<c>true</c> if this instance can convert the specified object type; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="P:Spike.Text.Json.Converters.CustomCreationConverter`1.CanWrite">
            <summary>
            Gets a value indicating whether this <see cref="T:Spike.Text.Json.JsonConverter"/> can write JSON.
            </summary>
            <value>
            	<c>true</c> if this <see cref="T:Spike.Text.Json.JsonConverter"/> can write JSON; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="T:Spike.Text.Json.Converters.DataSetConverter">
            <summary>
            Converts a <see cref="T:System.Data.DataSet"/> to and from JSON.
            </summary>
        </member>
        <member name="M:Spike.Text.Json.Converters.DataSetConverter.WriteJson(Spike.Text.Json.JsonWriter,System.Object,Spike.Text.Json.JsonSerializer)">
            <summary>
            Writes the JSON representation of the object.
            </summary>
            <param name="writer">The <see cref="T:Spike.Text.Json.JsonWriter"/> to write to.</param>
            <param name="value">The value.</param>
            <param name="serializer">The calling serializer.</param>
        </member>
        <member name="M:Spike.Text.Json.Converters.DataSetConverter.ReadJson(Spike.Text.Json.JsonReader,System.Type,System.Object,Spike.Text.Json.JsonSerializer)">
            <summary>
            Reads the JSON representation of the object.
            </summary>
            <param name="reader">The <see cref="T:Spike.Text.Json.JsonReader"/> to read from.</param>
            <param name="objectType">Type of the object.</param>
            <param name="existingValue">The existing value of object being read.</param>
            <param name="serializer">The calling serializer.</param>
            <returns>The object value.</returns>
        </member>
        <member name="M:Spike.Text.Json.Converters.DataSetConverter.CanConvert(System.Type)">
            <summary>
            Determines whether this instance can convert the specified value type.
            </summary>
            <param name="valueType">Type of the value.</param>
            <returns>
            	<c>true</c> if this instance can convert the specified value type; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="T:Spike.Text.Json.Converters.DataTableConverter">
            <summary>
            Converts a <see cref="T:System.Data.DataTable"/> to and from JSON.
            </summary>
        </member>
        <member name="M:Spike.Text.Json.Converters.DataTableConverter.WriteJson(Spike.Text.Json.JsonWriter,System.Object,Spike.Text.Json.JsonSerializer)">
            <summary>
            Writes the JSON representation of the object.
            </summary>
            <param name="writer">The <see cref="T:Spike.Text.Json.JsonWriter"/> to write to.</param>
            <param name="value">The value.</param>
            <param name="serializer">The calling serializer.</param>
        </member>
        <member name="M:Spike.Text.Json.Converters.DataTableConverter.ReadJson(Spike.Text.Json.JsonReader,System.Type,System.Object,Spike.Text.Json.JsonSerializer)">
            <summary>
            Reads the JSON representation of the object.
            </summary>
            <param name="reader">The <see cref="T:Spike.Text.Json.JsonReader"/> to read from.</param>
            <param name="objectType">Type of the object.</param>
            <param name="existingValue">The existing value of object being read.</param>
            <param name="serializer">The calling serializer.</param>
            <returns>The object value.</returns>
        </member>
        <member name="M:Spike.Text.Json.Converters.DataTableConverter.CanConvert(System.Type)">
            <summary>
            Determines whether this instance can convert the specified value type.
            </summary>
            <param name="valueType">Type of the value.</param>
            <returns>
            	<c>true</c> if this instance can convert the specified value type; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="T:Spike.Text.Json.Converters.DateTimeConverterBase">
            <summary>
            Provides a base class for converting a <see cref="T:System.DateTime"/> to and from JSON.
            </summary>
        </member>
        <member name="M:Spike.Text.Json.Converters.DateTimeConverterBase.CanConvert(System.Type)">
            <summary>
            Determines whether this instance can convert the specified object type.
            </summary>
            <param name="objectType">Type of the object.</param>
            <returns>
            	<c>true</c> if this instance can convert the specified object type; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="T:Spike.Text.Json.Converters.EntityKeyMemberConverter">
            <summary>
            Converts an Entity Framework EntityKey to and from JSON.
            </summary>
        </member>
        <member name="M:Spike.Text.Json.Converters.EntityKeyMemberConverter.WriteJson(Spike.Text.Json.JsonWriter,System.Object,Spike.Text.Json.JsonSerializer)">
            <summary>
            Writes the JSON representation of the object.
            </summary>
            <param name="writer">The <see cref="T:Spike.Text.Json.JsonWriter"/> to write to.</param>
            <param name="value">The value.</param>
            <param name="serializer">The calling serializer.</param>
        </member>
        <member name="M:Spike.Text.Json.Converters.EntityKeyMemberConverter.ReadJson(Spike.Text.Json.JsonReader,System.Type,System.Object,Spike.Text.Json.JsonSerializer)">
            <summary>
            Reads the JSON representation of the object.
            </summary>
            <param name="reader">The <see cref="T:Spike.Text.Json.JsonReader"/> to read from.</param>
            <param name="objectType">Type of the object.</param>
            <param name="existingValue">The existing value of object being read.</param>
            <param name="serializer">The calling serializer.</param>
            <returns>The object value.</returns>
        </member>
        <member name="M:Spike.Text.Json.Converters.EntityKeyMemberConverter.CanConvert(System.Type)">
            <summary>
            Determines whether this instance can convert the specified object type.
            </summary>
            <param name="objectType">Type of the object.</param>
            <returns>
            	<c>true</c> if this instance can convert the specified object type; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="T:Spike.Text.Json.Converters.ExpandoObjectConverter">
            <summary>
            Converts an ExpandoObject to and from JSON.
            </summary>
        </member>
        <member name="M:Spike.Text.Json.Converters.ExpandoObjectConverter.WriteJson(Spike.Text.Json.JsonWriter,System.Object,Spike.Text.Json.JsonSerializer)">
            <summary>
            Writes the JSON representation of the object.
            </summary>
            <param name="writer">The <see cref="T:Spike.Text.Json.JsonWriter"/> to write to.</param>
            <param name="value">The value.</param>
            <param name="serializer">The calling serializer.</param>
        </member>
        <member name="M:Spike.Text.Json.Converters.ExpandoObjectConverter.ReadJson(Spike.Text.Json.JsonReader,System.Type,System.Object,Spike.Text.Json.JsonSerializer)">
            <summary>
            Reads the JSON representation of the object.
            </summary>
            <param name="reader">The <see cref="T:Spike.Text.Json.JsonReader"/> to read from.</param>
            <param name="objectType">Type of the object.</param>
            <param name="existingValue">The existing value of object being read.</param>
            <param name="serializer">The calling serializer.</param>
            <returns>The object value.</returns>
        </member>
        <member name="M:Spike.Text.Json.Converters.ExpandoObjectConverter.CanConvert(System.Type)">
            <summary>
            Determines whether this instance can convert the specified object type.
            </summary>
            <param name="objectType">Type of the object.</param>
            <returns>
            	<c>true</c> if this instance can convert the specified object type; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="P:Spike.Text.Json.Converters.ExpandoObjectConverter.CanWrite">
            <summary>
            Gets a value indicating whether this <see cref="T:Spike.Text.Json.JsonConverter"/> can write JSON.
            </summary>
            <value>
            	<c>true</c> if this <see cref="T:Spike.Text.Json.JsonConverter"/> can write JSON; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="T:Spike.Text.Json.Converters.IsoDateTimeConverter">
            <summary>
            Converts a <see cref="T:System.DateTime"/> to and from the ISO 8601 date format (e.g. 2008-04-12T12:53Z).
            </summary>
        </member>
        <member name="M:Spike.Text.Json.Converters.IsoDateTimeConverter.WriteJson(Spike.Text.Json.JsonWriter,System.Object,Spike.Text.Json.JsonSerializer)">
            <summary>
            Writes the JSON representation of the object.
            </summary>
            <param name="writer">The <see cref="T:Spike.Text.Json.JsonWriter"/> to write to.</param>
            <param name="value">The value.</param>
            <param name="serializer">The calling serializer.</param>
        </member>
        <member name="M:Spike.Text.Json.Converters.IsoDateTimeConverter.ReadJson(Spike.Text.Json.JsonReader,System.Type,System.Object,Spike.Text.Json.JsonSerializer)">
            <summary>
            Reads the JSON representation of the object.
            </summary>
            <param name="reader">The <see cref="T:Spike.Text.Json.JsonReader"/> to read from.</param>
            <param name="objectType">Type of the object.</param>
            <param name="existingValue">The existing value of object being read.</param>
            <param name="serializer">The calling serializer.</param>
            <returns>The object value.</returns>
        </member>
        <member name="P:Spike.Text.Json.Converters.IsoDateTimeConverter.DateTimeStyles">
            <summary>
            Gets or sets the date time styles used when converting a date to and from JSON.
            </summary>
            <value>The date time styles used when converting a date to and from JSON.</value>
        </member>
        <member name="P:Spike.Text.Json.Converters.IsoDateTimeConverter.DateTimeFormat">
            <summary>
            Gets or sets the date time format used when converting a date to and from JSON.
            </summary>
            <value>The date time format used when converting a date to and from JSON.</value>
        </member>
        <member name="P:Spike.Text.Json.Converters.IsoDateTimeConverter.Culture">
            <summary>
            Gets or sets the culture used when converting a date to and from JSON.
            </summary>
            <value>The culture used when converting a date to and from JSON.</value>
        </member>
        <member name="T:Spike.Text.Json.Converters.JavaScriptDateTimeConverter">
            <summary>
            Converts a <see cref="T:System.DateTime"/> to and from a JavaScript date constructor (e.g. new Date(52231943)).
            </summary>
        </member>
        <member name="M:Spike.Text.Json.Converters.JavaScriptDateTimeConverter.WriteJson(Spike.Text.Json.JsonWriter,System.Object,Spike.Text.Json.JsonSerializer)">
            <summary>
            Writes the JSON representation of the object.
            </summary>
            <param name="writer">The <see cref="T:Spike.Text.Json.JsonWriter"/> to write to.</param>
            <param name="value">The value.</param>
            <param name="serializer">The calling serializer.</param>
        </member>
        <member name="M:Spike.Text.Json.Converters.JavaScriptDateTimeConverter.ReadJson(Spike.Text.Json.JsonReader,System.Type,System.Object,Spike.Text.Json.JsonSerializer)">
            <summary>
            Reads the JSON representation of the object.
            </summary>
            <param name="reader">The <see cref="T:Spike.Text.Json.JsonReader"/> to read from.</param>
            <param name="objectType">Type of the object.</param>
            <param name="existingValue">The existing property value of the JSON that is being converted.</param>
            <param name="serializer">The calling serializer.</param>
            <returns>The object value.</returns>
        </member>
        <member name="T:Spike.Text.Json.Converters.JsonDateTimeSerializationMode">
            <summary>
            Specifies whether a DateTime object represents a local time, a Coordinated Universal Time (UTC), or is not specified as either local time or UTC.
            </summary>
        </member>
        <member name="F:Spike.Text.Json.Converters.JsonDateTimeSerializationMode.Local">
            <summary>
            The time represented is local time.
            </summary>
        </member>
        <member name="F:Spike.Text.Json.Converters.JsonDateTimeSerializationMode.Utc">
            <summary>
            The time represented is UTC.
            </summary>
        </member>
        <member name="F:Spike.Text.Json.Converters.JsonDateTimeSerializationMode.Unspecified">
            <summary>
            The time represented is not specified as either local time or Coordinated Universal Time (UTC).
            </summary>
        </member>
        <member name="F:Spike.Text.Json.Converters.JsonDateTimeSerializationMode.RoundtripKind">
            <summary>
            Preserves the DateTimeKind field of a date when a DateTime object is converted to a string and the string is then converted back to a DateTime object.
            </summary>
        </member>
        <member name="T:Spike.Text.Json.Converters.KeyValuePairConverter">
            <summary>
            Converts a <see cref="T:System.Collections.Generic.KeyValuePair`2"/> to and from JSON.
            </summary>
        </member>
        <member name="M:Spike.Text.Json.Converters.KeyValuePairConverter.WriteJson(Spike.Text.Json.JsonWriter,System.Object,Spike.Text.Json.JsonSerializer)">
            <summary>
            Writes the JSON representation of the object.
            </summary>
            <param name="writer">The <see cref="T:Spike.Text.Json.JsonWriter"/> to write to.</param>
            <param name="value">The value.</param>
            <param name="serializer">The calling serializer.</param>
        </member>
        <member name="M:Spike.Text.Json.Converters.KeyValuePairConverter.ReadJson(Spike.Text.Json.JsonReader,System.Type,System.Object,Spike.Text.Json.JsonSerializer)">
            <summary>
            Reads the JSON representation of the object.
            </summary>
            <param name="reader">The <see cref="T:Spike.Text.Json.JsonReader"/> to read from.</param>
            <param name="objectType">Type of the object.</param>
            <param name="existingValue">The existing value of object being read.</param>
            <param name="serializer">The calling serializer.</param>
            <returns>The object value.</returns>
        </member>
        <member name="M:Spike.Text.Json.Converters.KeyValuePairConverter.CanConvert(System.Type)">
            <summary>
            Determines whether this instance can convert the specified object type.
            </summary>
            <param name="objectType">Type of the object.</param>
            <returns>
            	<c>true</c> if this instance can convert the specified object type; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="T:Spike.Text.Json.Converters.RegexConverter">
            <summary>
            Converts a <see cref="T:System.Text.RegularExpressions.Regex"/> to and from JSON and BSON.
            </summary>
        </member>
        <member name="M:Spike.Text.Json.Converters.RegexConverter.WriteJson(Spike.Text.Json.JsonWriter,System.Object,Spike.Text.Json.JsonSerializer)">
            <summary>
            Writes the JSON representation of the object.
            </summary>
            <param name="writer">The <see cref="T:Spike.Text.Json.JsonWriter"/> to write to.</param>
            <param name="value">The value.</param>
            <param name="serializer">The calling serializer.</param>
        </member>
        <member name="M:Spike.Text.Json.Converters.RegexConverter.ReadJson(Spike.Text.Json.JsonReader,System.Type,System.Object,Spike.Text.Json.JsonSerializer)">
            <summary>
            Reads the JSON representation of the object.
            </summary>
            <param name="reader">The <see cref="T:Spike.Text.Json.JsonReader"/> to read from.</param>
            <param name="objectType">Type of the object.</param>
            <param name="existingValue">The existing value of object being read.</param>
            <param name="serializer">The calling serializer.</param>
            <returns>The object value.</returns>
        </member>
        <member name="M:Spike.Text.Json.Converters.RegexConverter.CanConvert(System.Type)">
            <summary>
            Determines whether this instance can convert the specified object type.
            </summary>
            <param name="objectType">Type of the object.</param>
            <returns>
            	<c>true</c> if this instance can convert the specified object type; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="T:Spike.Text.Json.Converters.StringEnumConverter">
            <summary>
            Converts an <see cref="T:System.Enum"/> to and from its name string value.
            </summary>
            <summary>
            Converts an <see cref="T:System.Enum"/> to and from its name string value.
            </summary>
        </member>
        <member name="M:Spike.Text.Json.Converters.StringEnumConverter.WriteJson(Spike.Text.Json.JsonWriter,System.Object,Spike.Text.Json.JsonSerializer)">
            <summary>
            Writes the JSON representation of the object.
            </summary>
            <param name="writer">The <see cref="T:Spike.Text.Json.JsonWriter"/> to write to.</param>
            <param name="value">The value.</param>
            <param name="serializer">The calling serializer.</param>
        </member>
        <member name="M:Spike.Text.Json.Converters.StringEnumConverter.ReadJson(Spike.Text.Json.JsonReader,System.Type,System.Object,Spike.Text.Json.JsonSerializer)">
            <summary>
            Reads the JSON representation of the object.
            </summary>
            <param name="reader">The <see cref="T:Spike.Text.Json.JsonReader"/> to read from.</param>
            <param name="objectType">Type of the object.</param>
            <param name="existingValue">The existing value of object being read.</param>
            <param name="serializer">The calling serializer.</param>
            <returns>The object value.</returns>
        </member>
        <member name="M:Spike.Text.Json.Converters.StringEnumConverter.GetEnumNameMap(System.Type)">
            <summary>
            A cached representation of the Enum string representation to respect per Enum field name.
            </summary>
            <param name="t">The type of the Enum.</param>
            <returns>A map of enum field name to either the field name, or the configured enum member name.</returns>
        </member>
        <member name="M:Spike.Text.Json.Converters.StringEnumConverter.CanConvert(System.Type)">
            <summary>
            Determines whether this instance can convert the specified object type.
            </summary>
            <param name="objectType">Type of the object.</param>
            <returns>
            <c>true</c> if this instance can convert the specified object type; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="P:Spike.Text.Json.Converters.StringEnumConverter.CamelCaseText">
            <summary>
            Gets or sets a value indicating whether the written enum text should be camel case.
            </summary>
            <value><c>true</c> if the written enum text will be camel case; otherwise, <c>false</c>.</value>
        </member>
        <member name="T:Spike.Text.Json.Converters.VersionConverter">
            <summary>
            Converts a <see cref="T:System.Version"/> to and from a string (e.g. "1.2.3.4").
            </summary>
        </member>
        <member name="M:Spike.Text.Json.Converters.VersionConverter.WriteJson(Spike.Text.Json.JsonWriter,System.Object,Spike.Text.Json.JsonSerializer)">
            <summary>
            Writes the JSON representation of the object.
            </summary>
            <param name="writer">The <see cref="T:Spike.Text.Json.JsonWriter"/> to write to.</param>
            <param name="value">The value.</param>
            <param name="serializer">The calling serializer.</param>
        </member>
        <member name="M:Spike.Text.Json.Converters.VersionConverter.ReadJson(Spike.Text.Json.JsonReader,System.Type,System.Object,Spike.Text.Json.JsonSerializer)">
            <summary>
            Reads the JSON representation of the object.
            </summary>
            <param name="reader">The <see cref="T:Spike.Text.Json.JsonReader"/> to read from.</param>
            <param name="objectType">Type of the object.</param>
            <param name="existingValue">The existing property value of the JSON that is being converted.</param>
            <param name="serializer">The calling serializer.</param>
            <returns>The object value.</returns>
        </member>
        <member name="M:Spike.Text.Json.Converters.VersionConverter.CanConvert(System.Type)">
            <summary>
            Determines whether this instance can convert the specified object type.
            </summary>
            <param name="objectType">Type of the object.</param>
            <returns>
            	<c>true</c> if this instance can convert the specified object type; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="T:Spike.Text.Json.Converters.XmlNodeConverter">
            <summary>
            Converts XML to and from JSON.
            </summary>
        </member>
        <member name="M:Spike.Text.Json.Converters.XmlNodeConverter.WriteJson(Spike.Text.Json.JsonWriter,System.Object,Spike.Text.Json.JsonSerializer)">
            <summary>
            Writes the JSON representation of the object.
            </summary>
            <param name="writer">The <see cref="T:Spike.Text.Json.JsonWriter"/> to write to.</param>
            <param name="serializer">The calling serializer.</param>
            <param name="value">The value.</param>
        </member>
        <member name="M:Spike.Text.Json.Converters.XmlNodeConverter.ReadJson(Spike.Text.Json.JsonReader,System.Type,System.Object,Spike.Text.Json.JsonSerializer)">
            <summary>
            Reads the JSON representation of the object.
            </summary>
            <param name="reader">The <see cref="T:Spike.Text.Json.JsonReader"/> to read from.</param>
            <param name="objectType">Type of the object.</param>
            <param name="existingValue">The existing value of object being read.</param>
            <param name="serializer">The calling serializer.</param>
            <returns>The object value.</returns>
        </member>
        <member name="M:Spike.Text.Json.Converters.XmlNodeConverter.IsNamespaceAttribute(System.String,System.String@)">
            <summary>
            Checks if the attributeName is a namespace attribute.
            </summary>
            <param name="attributeName">Attribute name to test.</param>
            <param name="prefix">The attribute name prefix if it has one, otherwise an empty string.</param>
            <returns>True if attribute name is for a namespace attribute, otherwise false.</returns>
        </member>
        <member name="M:Spike.Text.Json.Converters.XmlNodeConverter.CanConvert(System.Type)">
            <summary>
            Determines whether this instance can convert the specified value type.
            </summary>
            <param name="valueType">Type of the value.</param>
            <returns>
            	<c>true</c> if this instance can convert the specified value type; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="P:Spike.Text.Json.Converters.XmlNodeConverter.DeserializeRootElementName">
            <summary>
            Gets or sets the name of the root element to insert when deserializing to XML if the JSON structure has produces multiple root elements.
            </summary>
            <value>The name of the deserialize root element.</value>
        </member>
        <member name="P:Spike.Text.Json.Converters.XmlNodeConverter.WriteArrayAttribute">
            <summary>
            Gets or sets a flag to indicate whether to write the Json.NET array attribute.
            This attribute helps preserve arrays when converting the written XML back to JSON.
            </summary>
            <value><c>true</c> if the array attibute is written to the XML; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Spike.Text.Json.Converters.XmlNodeConverter.OmitRootObject">
            <summary>
            Gets or sets a value indicating whether to write the root JSON object.
            </summary>
            <value><c>true</c> if the JSON root object is omitted; otherwise, <c>false</c>.</value>
        </member>
        <member name="T:Spike.Text.Json.DefaultValueHandling">
            <summary>
            Specifies default value handling options for the <see cref="T:Spike.Text.Json.JsonSerializer"/>.
            </summary>
        </member>
        <member name="F:Spike.Text.Json.DefaultValueHandling.Include">
            <summary>
            Include members where the member value is the same as the member's default value when serializing objects.
            Included members are written to JSON. Has no effect when deserializing.
            </summary>
        </member>
        <member name="F:Spike.Text.Json.DefaultValueHandling.Ignore">
            <summary>
            Ignore members where the member value is the same as the member's default value when serializing objects
            so that is is not written to JSON, and ignores setting members when the JSON value equals the member's default value.
            </summary>
        </member>
        <member name="F:Spike.Text.Json.DefaultValueHandling.Populate">
            <summary>
            Members with a default value but no JSON will be set to their default value when deserializing.
            </summary>
        </member>
        <member name="F:Spike.Text.Json.DefaultValueHandling.IgnoreAndPopulate">
            <summary>
            Ignore members where the member value is the same as the member's default value when serializing objects
            and sets members to their default value when deserializing.
            </summary>
        </member>
        <member name="T:Spike.Text.Json.IJsonLineInfo">
            <summary>
            Provides an interface to enable a class to return line and position information.
            </summary>
        </member>
        <member name="M:Spike.Text.Json.IJsonLineInfo.HasLineInfo">
            <summary>
            Gets a value indicating whether the class can return line information.
            </summary>
            <returns>
            	<c>true</c> if LineNumber and LinePosition can be provided; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="P:Spike.Text.Json.IJsonLineInfo.LineNumber">
            <summary>
            Gets the current line number.
            </summary>
            <value>The current line number or 0 if no line information is available (for example, HasLineInfo returns false).</value>
        </member>
        <member name="P:Spike.Text.Json.IJsonLineInfo.LinePosition">
            <summary>
            Gets the current line position.
            </summary>
            <value>The current line position or 0 if no line information is available (for example, HasLineInfo returns false).</value>
        </member>
        <member name="T:Spike.Text.Json.JsonArrayAttribute">
            <summary>
            Instructs the <see cref="T:Spike.Text.Json.JsonSerializer"/> how to serialize the collection.
            </summary>
        </member>
        <member name="T:Spike.Text.Json.JsonContainerAttribute">
            <summary>
            Instructs the <see cref="T:Spike.Text.Json.JsonSerializer"/> how to serialize the object.
            </summary>
        </member>
        <member name="M:Spike.Text.Json.JsonContainerAttribute.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Spike.Text.Json.JsonContainerAttribute"/> class.
            </summary>
        </member>
        <member name="M:Spike.Text.Json.JsonContainerAttribute.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Spike.Text.Json.JsonContainerAttribute"/> class with the specified container Id.
            </summary>
            <param name="id">The container Id.</param>
        </member>
        <member name="P:Spike.Text.Json.JsonContainerAttribute.Id">
            <summary>
            Gets or sets the id.
            </summary>
            <value>The id.</value>
        </member>
        <member name="P:Spike.Text.Json.JsonContainerAttribute.Title">
            <summary>
            Gets or sets the title.
            </summary>
            <value>The title.</value>
        </member>
        <member name="P:Spike.Text.Json.JsonContainerAttribute.Description">
            <summary>
            Gets or sets the description.
            </summary>
            <value>The description.</value>
        </member>
        <member name="P:Spike.Text.Json.JsonContainerAttribute.IsReference">
            <summary>
            Gets or sets a value that indicates whether to preserve object reference data.
            </summary>
            <value>
            	<c>true</c> to keep object reference; otherwise, <c>false</c>. The default is <c>false</c>.
            </value>
        </member>
        <member name="M:Spike.Text.Json.JsonArrayAttribute.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Spike.Text.Json.JsonArrayAttribute"/> class.
            </summary>
        </member>
        <member name="M:Spike.Text.Json.JsonArrayAttribute.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Spike.Text.Json.JsonObjectAttribute"/> class with a flag indicating whether the array can contain null items
            </summary>
            <param name="allowNullItems">A flag indicating whether the array can contain null items.</param>
        </member>
        <member name="M:Spike.Text.Json.JsonArrayAttribute.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Spike.Text.Json.JsonArrayAttribute"/> class with the specified container Id.
            </summary>
            <param name="id">The container Id.</param>
        </member>
        <member name="P:Spike.Text.Json.JsonArrayAttribute.AllowNullItems">
            <summary>
            Gets or sets a value indicating whether null items are allowed in the collection.
            </summary>
            <value><c>true</c> if null items are allowed in the collection; otherwise, <c>false</c>.</value>
        </member>
        <member name="T:Spike.Text.Json.JsonConstructorAttribute">
            <summary>
            Instructs the <see cref="T:Spike.Text.Json.JsonSerializer"/> to use the specified constructor when deserializing that object.
            </summary>
        </member>
        <member name="T:Spike.Text.Json.JsonConvert">
            <summary>
            Provides methods for converting between common language runtime types and JSON types.
            </summary>
        </member>
        <member name="F:Spike.Text.Json.JsonConvert.True">
            <summary>
            Represents JavaScript's boolean value true as a string. This field is read-only.
            </summary>
        </member>
        <member name="F:Spike.Text.Json.JsonConvert.False">
            <summary>
            Represents JavaScript's boolean value false as a string. This field is read-only.
            </summary>
        </member>
        <member name="F:Spike.Text.Json.JsonConvert.Null">
            <summary>
            Represents JavaScript's null as a string. This field is read-only.
            </summary>
        </member>
        <member name="F:Spike.Text.Json.JsonConvert.Undefined">
            <summary>
            Represents JavaScript's undefined as a string. This field is read-only.
            </summary>
        </member>
        <member name="F:Spike.Text.Json.JsonConvert.PositiveInfinity">
            <summary>
            Represents JavaScript's positive infinity as a string. This field is read-only.
            </summary>
        </member>
        <member name="F:Spike.Text.Json.JsonConvert.NegativeInfinity">
            <summary>
            Represents JavaScript's negative infinity as a string. This field is read-only.
            </summary>
        </member>
        <member name="F:Spike.Text.Json.JsonConvert.NaN">
            <summary>
            Represents JavaScript's NaN as a string. This field is read-only.
            </summary>
        </member>
        <member name="M:Spike.Text.Json.JsonConvert.ToString(System.DateTime)">
            <summary>
            Converts the <see cref="T:System.DateTime"/> to its JSON string representation.
            </summary>
            <param name="value">The value to convert.</param>
            <returns>A JSON string representation of the <see cref="T:System.DateTime"/>.</returns>
        </member>
        <member name="M:Spike.Text.Json.JsonConvert.ToString(System.DateTimeOffset)">
            <summary>
            Converts the <see cref="T:System.DateTimeOffset"/> to its JSON string representation.
            </summary>
            <param name="value">The value to convert.</param>
            <returns>A JSON string representation of the <see cref="T:System.DateTimeOffset"/>.</returns>
        </member>
        <member name="M:Spike.Text.Json.JsonConvert.ToString(System.Boolean)">
            <summary>
            Converts the <see cref="T:System.Boolean"/> to its JSON string representation.
            </summary>
            <param name="value">The value to convert.</param>
            <returns>A JSON string representation of the <see cref="T:System.Boolean"/>.</returns>
        </member>
        <member name="M:Spike.Text.Json.JsonConvert.ToString(System.Char)">
            <summary>
            Converts the <see cref="T:System.Char"/> to its JSON string representation.
            </summary>
            <param name="value">The value to convert.</param>
            <returns>A JSON string representation of the <see cref="T:System.Char"/>.</returns>
        </member>
        <member name="M:Spike.Text.Json.JsonConvert.ToString(System.Enum)">
            <summary>
            Converts the <see cref="T:System.Enum"/> to its JSON string representation.
            </summary>
            <param name="value">The value to convert.</param>
            <returns>A JSON string representation of the <see cref="T:System.Enum"/>.</returns>
        </member>
        <member name="M:Spike.Text.Json.JsonConvert.ToString(System.Int32)">
            <summary>
            Converts the <see cref="T:System.Int32"/> to its JSON string representation.
            </summary>
            <param name="value">The value to convert.</param>
            <returns>A JSON string representation of the <see cref="T:System.Int32"/>.</returns>
        </member>
        <member name="M:Spike.Text.Json.JsonConvert.ToString(System.Int16)">
            <summary>
            Converts the <see cref="T:System.Int16"/> to its JSON string representation.
            </summary>
            <param name="value">The value to convert.</param>
            <returns>A JSON string representation of the <see cref="T:System.Int16"/>.</returns>
        </member>
        <member name="M:Spike.Text.Json.JsonConvert.ToString(System.UInt16)">
            <summary>
            Converts the <see cref="T:System.UInt16"/> to its JSON string representation.
            </summary>
            <param name="value">The value to convert.</param>
            <returns>A JSON string representation of the <see cref="T:System.UInt16"/>.</returns>
        </member>
        <member name="M:Spike.Text.Json.JsonConvert.ToString(System.UInt32)">
            <summary>
            Converts the <see cref="T:System.UInt32"/> to its JSON string representation.
            </summary>
            <param name="value">The value to convert.</param>
            <returns>A JSON string representation of the <see cref="T:System.UInt32"/>.</returns>
        </member>
        <member name="M:Spike.Text.Json.JsonConvert.ToString(System.Int64)">
            <summary>
            Converts the <see cref="T:System.Int64"/>  to its JSON string representation.
            </summary>
            <param name="value">The value to convert.</param>
            <returns>A JSON string representation of the <see cref="T:System.Int64"/>.</returns>
        </member>
        <member name="M:Spike.Text.Json.JsonConvert.ToString(System.UInt64)">
            <summary>
            Converts the <see cref="T:System.UInt64"/> to its JSON string representation.
            </summary>
            <param name="value">The value to convert.</param>
            <returns>A JSON string representation of the <see cref="T:System.UInt64"/>.</returns>
        </member>
        <member name="M:Spike.Text.Json.JsonConvert.ToString(System.Single)">
            <summary>
            Converts the <see cref="T:System.Single"/> to its JSON string representation.
            </summary>
            <param name="value">The value to convert.</param>
            <returns>A JSON string representation of the <see cref="T:System.Single"/>.</returns>
        </member>
        <member name="M:Spike.Text.Json.JsonConvert.ToString(System.Double)">
            <summary>
            Converts the <see cref="T:System.Double"/> to its JSON string representation.
            </summary>
            <param name="value">The value to convert.</param>
            <returns>A JSON string representation of the <see cref="T:System.Double"/>.</returns>
        </member>
        <member name="M:Spike.Text.Json.JsonConvert.ToString(System.Byte)">
            <summary>
            Converts the <see cref="T:System.Byte"/> to its JSON string representation.
            </summary>
            <param name="value">The value to convert.</param>
            <returns>A JSON string representation of the <see cref="T:System.Byte"/>.</returns>
        </member>
        <member name="M:Spike.Text.Json.JsonConvert.ToString(System.SByte)">
            <summary>
            Converts the <see cref="T:System.SByte"/> to its JSON string representation.
            </summary>
            <param name="value">The value to convert.</param>
            <returns>A JSON string representation of the <see cref="T:System.SByte"/>.</returns>
        </member>
        <member name="M:Spike.Text.Json.JsonConvert.ToString(System.Decimal)">
            <summary>
            Converts the <see cref="T:System.Decimal"/> to its JSON string representation.
            </summary>
            <param name="value">The value to convert.</param>
            <returns>A JSON string representation of the <see cref="T:System.SByte"/>.</returns>
        </member>
        <member name="M:Spike.Text.Json.JsonConvert.ToString(System.Guid)">
            <summary>
            Converts the <see cref="T:System.Guid"/> to its JSON string representation.
            </summary>
            <param name="value">The value to convert.</param>
            <returns>A JSON string representation of the <see cref="T:System.Guid"/>.</returns>
        </member>
        <member name="M:Spike.Text.Json.JsonConvert.ToString(System.TimeSpan)">
            <summary>
            Converts the <see cref="T:System.TimeSpan"/> to its JSON string representation.
            </summary>
            <param name="value">The value to convert.</param>
            <returns>A JSON string representation of the <see cref="T:System.TimeSpan"/>.</returns>
        </member>
        <member name="M:Spike.Text.Json.JsonConvert.ToString(System.Uri)">
            <summary>
            Converts the <see cref="T:System.Uri"/> to its JSON string representation.
            </summary>
            <param name="value">The value to convert.</param>
            <returns>A JSON string representation of the <see cref="T:System.Uri"/>.</returns>
        </member>
        <member name="M:Spike.Text.Json.JsonConvert.ToString(System.String)">
            <summary>
            Converts the <see cref="T:System.String"/> to its JSON string representation.
            </summary>
            <param name="value">The value to convert.</param>
            <returns>A JSON string representation of the <see cref="T:System.String"/>.</returns>
        </member>
        <member name="M:Spike.Text.Json.JsonConvert.ToString(System.String,System.Char)">
            <summary>
            Converts the <see cref="T:System.String"/> to its JSON string representation.
            </summary>
            <param name="value">The value to convert.</param>
            <param name="delimter">The string delimiter character.</param>
            <returns>A JSON string representation of the <see cref="T:System.String"/>.</returns>
        </member>
        <member name="M:Spike.Text.Json.JsonConvert.ToString(System.Object)">
            <summary>
            Converts the <see cref="T:System.Object"/> to its JSON string representation.
            </summary>
            <param name="value">The value to convert.</param>
            <returns>A JSON string representation of the <see cref="T:System.Object"/>.</returns>
        </member>
        <member name="M:Spike.Text.Json.JsonConvert.SerializeObject(System.Object)">
            <summary>
            Serializes the specified object to a JSON string.
            </summary>
            <param name="value">The object to serialize.</param>
            <returns>A JSON string representation of the object.</returns>
        </member>
        <member name="M:Spike.Text.Json.JsonConvert.SerializeObject(System.Object,Spike.Text.Json.Formatting)">
            <summary>
            Serializes the specified object to a JSON string.
            </summary>
            <param name="value">The object to serialize.</param>
            <param name="formatting">Indicates how the output is formatted.</param>
            <returns>
            A JSON string representation of the object.
            </returns>
        </member>
        <member name="M:Spike.Text.Json.JsonConvert.SerializeObject(System.Object,Spike.Text.Json.JsonConverter[])">
            <summary>
            Serializes the specified object to a JSON string using a collection of <see cref="T:Spike.Text.Json.JsonConverter"/>.
            </summary>
            <param name="value">The object to serialize.</param>
            <param name="converters">A collection converters used while serializing.</param>
            <returns>A JSON string representation of the object.</returns>
        </member>
        <member name="M:Spike.Text.Json.JsonConvert.SerializeObject(System.Object,Spike.Text.Json.Formatting,Spike.Text.Json.JsonConverter[])">
            <summary>
            Serializes the specified object to a JSON string using a collection of <see cref="T:Spike.Text.Json.JsonConverter"/>.
            </summary>
            <param name="value">The object to serialize.</param>
            <param name="formatting">Indicates how the output is formatted.</param>
            <param name="converters">A collection converters used while serializing.</param>
            <returns>A JSON string representation of the object.</returns>
        </member>
        <member name="M:Spike.Text.Json.JsonConvert.SerializeObject(System.Object,Spike.Text.Json.Formatting,Spike.Text.Json.JsonSerializerSettings)">
            <summary>
            Serializes the specified object to a JSON string using a collection of <see cref="T:Spike.Text.Json.JsonConverter"/>.
            </summary>
            <param name="value">The object to serialize.</param>
            <param name="formatting">Indicates how the output is formatted.</param>
            <param name="settings">The <see cref="T:Spike.Text.Json.JsonSerializerSettings"/> used to serialize the object.
            If this is null, default serialization settings will be is used.</param>
            <returns>
            A JSON string representation of the object.
            </returns>
        </member>
        <member name="M:Spike.Text.Json.JsonConvert.DeserializeObject(System.String)">
            <summary>
            Deserializes the JSON to a .NET object.
            </summary>
            <param name="value">The JSON to deserialize.</param>
            <returns>The deserialized object from the Json string.</returns>
        </member>
        <member name="M:Spike.Text.Json.JsonConvert.DeserializeObject(System.String,Spike.Text.Json.JsonSerializerSettings)">
            <summary>
            Deserializes the JSON to a .NET object.
            </summary>
            <param name="value">The JSON to deserialize.</param>
            <param name="settings">
            The <see cref="T:Spike.Text.Json.JsonSerializerSettings"/> used to deserialize the object.
            If this is null, default serialization settings will be is used.
            </param>
            <returns>The deserialized object from the JSON string.</returns>
        </member>
        <member name="M:Spike.Text.Json.JsonConvert.DeserializeObject(System.String,System.Type)">
            <summary>
            Deserializes the JSON to the specified .NET type.
            </summary>
            <param name="value">The JSON to deserialize.</param>
            <param name="type">The <see cref="T:System.Type"/> of object being deserialized.</param>
            <returns>The deserialized object from the Json string.</returns>
        </member>
        <member name="M:Spike.Text.Json.JsonConvert.DeserializeObject``1(System.String)">
            <summary>
            Deserializes the JSON to the specified .NET type.
            </summary>
            <typeparam name="T">The type of the object to deserialize to.</typeparam>
            <param name="value">The JSON to deserialize.</param>
            <returns>The deserialized object from the Json string.</returns>
        </member>
        <member name="M:Spike.Text.Json.JsonConvert.DeserializeAnonymousType``1(System.String,``0)">
            <summary>
            Deserializes the JSON to the given anonymous type.
            </summary>
            <typeparam name="T">
            The anonymous type to deserialize to. This can't be specified
            traditionally and must be infered from the anonymous type passed
            as a parameter.
            </typeparam>
            <param name="value">The JSON to deserialize.</param>
            <param name="anonymousTypeObject">The anonymous type object.</param>
            <returns>The deserialized anonymous type from the JSON string.</returns>
        </member>
        <member name="M:Spike.Text.Json.JsonConvert.DeserializeObject``1(System.String,Spike.Text.Json.JsonConverter[])">
            <summary>
            Deserializes the JSON to the specified .NET type.
            </summary>
            <typeparam name="T">The type of the object to deserialize to.</typeparam>
            <param name="value">The JSON to deserialize.</param>
            <param name="converters">Converters to use while deserializing.</param>
            <returns>The deserialized object from the JSON string.</returns>
        </member>
        <member name="M:Spike.Text.Json.JsonConvert.DeserializeObject``1(System.String,Spike.Text.Json.JsonSerializerSettings)">
            <summary>
            Deserializes the JSON to the specified .NET type.
            </summary>
            <typeparam name="T">The type of the object to deserialize to.</typeparam>
            <param name="value">The object to deserialize.</param>
            <param name="settings">
            The <see cref="T:Spike.Text.Json.JsonSerializerSettings"/> used to deserialize the object.
            If this is null, default serialization settings will be is used.
            </param>
            <returns>The deserialized object from the JSON string.</returns>
        </member>
        <member name="M:Spike.Text.Json.JsonConvert.DeserializeObject(System.String,System.Type,Spike.Text.Json.JsonConverter[])">
            <summary>
            Deserializes the JSON to the specified .NET type.
            </summary>
            <param name="value">The JSON to deserialize.</param>
            <param name="type">The type of the object to deserialize.</param>
            <param name="converters">Converters to use while deserializing.</param>
            <returns>The deserialized object from the JSON string.</returns>
        </member>
        <member name="M:Spike.Text.Json.JsonConvert.DeserializeObject(System.String,System.Type,Spike.Text.Json.JsonSerializerSettings)">
            <summary>
            Deserializes the JSON to the specified .NET type.
            </summary>
            <param name="value">The JSON to deserialize.</param>
            <param name="type">The type of the object to deserialize to.</param>
            <param name="settings">
            The <see cref="T:Spike.Text.Json.JsonSerializerSettings"/> used to deserialize the object.
            If this is null, default serialization settings will be is used.
            </param>
            <returns>The deserialized object from the JSON string.</returns>
        </member>
        <member name="M:Spike.Text.Json.JsonConvert.PopulateObject(System.String,System.Object)">
            <summary>
            Populates the object with values from the JSON string.
            </summary>
            <param name="value">The JSON to populate values from.</param>
            <param name="target">The target object to populate values onto.</param>
        </member>
        <member name="M:Spike.Text.Json.JsonConvert.PopulateObject(System.String,System.Object,Spike.Text.Json.JsonSerializerSettings)">
            <summary>
            Populates the object with values from the JSON string.
            </summary>
            <param name="value">The JSON to populate values from.</param>
            <param name="target">The target object to populate values onto.</param>
            <param name="settings">
            The <see cref="T:Spike.Text.Json.JsonSerializerSettings"/> used to deserialize the object.
            If this is null, default serialization settings will be is used.
            </param>
        </member>
        <member name="M:Spike.Text.Json.JsonConvert.SerializeXmlNode(System.Xml.XmlNode)">
            <summary>
            Serializes the XML node to a JSON string.
            </summary>
            <param name="node">The node to serialize.</param>
            <returns>A JSON string of the XmlNode.</returns>
        </member>
        <member name="M:Spike.Text.Json.JsonConvert.SerializeXmlNode(System.Xml.XmlNode,Spike.Text.Json.Formatting)">
            <summary>
            Serializes the XML node to a JSON string.
            </summary>
            <param name="node">The node to serialize.</param>
            <param name="formatting">Indicates how the output is formatted.</param>
            <returns>A JSON string of the XmlNode.</returns>
        </member>
        <member name="M:Spike.Text.Json.JsonConvert.SerializeXmlNode(System.Xml.XmlNode,Spike.Text.Json.Formatting,System.Boolean)">
            <summary>
            Serializes the XML node to a JSON string.
            </summary>
            <param name="node">The node to serialize.</param>
            <param name="formatting">Indicates how the output is formatted.</param>
            <param name="omitRootObject">Omits writing the root object.</param>
            <returns>A JSON string of the XmlNode.</returns>
        </member>
        <member name="M:Spike.Text.Json.JsonConvert.DeserializeXmlNode(System.String)">
            <summary>
            Deserializes the XmlNode from a JSON string.
            </summary>
            <param name="value">The JSON string.</param>
            <returns>The deserialized XmlNode</returns>
        </member>
        <member name="M:Spike.Text.Json.JsonConvert.DeserializeXmlNode(System.String,System.String)">
            <summary>
            Deserializes the XmlNode from a JSON string nested in a root elment.
            </summary>
            <param name="value">The JSON string.</param>
            <param name="deserializeRootElementName">The name of the root element to append when deserializing.</param>
            <returns>The deserialized XmlNode</returns>
        </member>
        <member name="M:Spike.Text.Json.JsonConvert.DeserializeXmlNode(System.String,System.String,System.Boolean)">
            <summary>
            Deserializes the XmlNode from a JSON string nested in a root elment.
            </summary>
            <param name="value">The JSON string.</param>
            <param name="deserializeRootElementName">The name of the root element to append when deserializing.</param>
            <param name="writeArrayAttribute">
            A flag to indicate whether to write the Json.NET array attribute.
            This attribute helps preserve arrays when converting the written XML back to JSON.
            </param>
            <returns>The deserialized XmlNode</returns>
        </member>
        <member name="M:Spike.Text.Json.JsonConvert.SerializeXNode(System.Xml.Linq.XObject)">
            <summary>
            Serializes the <see cref="T:System.Xml.Linq.XNode"/> to a JSON string.
            </summary>
            <param name="node">The node to convert to JSON.</param>
            <returns>A JSON string of the XNode.</returns>
        </member>
        <member name="M:Spike.Text.Json.JsonConvert.SerializeXNode(System.Xml.Linq.XObject,Spike.Text.Json.Formatting)">
            <summary>
            Serializes the <see cref="T:System.Xml.Linq.XNode"/> to a JSON string.
            </summary>
            <param name="node">The node to convert to JSON.</param>
            <param name="formatting">Indicates how the output is formatted.</param>
            <returns>A JSON string of the XNode.</returns>
        </member>
        <member name="M:Spike.Text.Json.JsonConvert.SerializeXNode(System.Xml.Linq.XObject,Spike.Text.Json.Formatting,System.Boolean)">
            <summary>
            Serializes the <see cref="T:System.Xml.Linq.XNode"/> to a JSON string.
            </summary>
            <param name="node">The node to serialize.</param>
            <param name="formatting">Indicates how the output is formatted.</param>
            <param name="omitRootObject">Omits writing the root object.</param>
            <returns>A JSON string of the XNode.</returns>
        </member>
        <member name="M:Spike.Text.Json.JsonConvert.DeserializeXNode(System.String)">
            <summary>
            Deserializes the <see cref="T:System.Xml.Linq.XNode"/> from a JSON string.
            </summary>
            <param name="value">The JSON string.</param>
            <returns>The deserialized XNode</returns>
        </member>
        <member name="M:Spike.Text.Json.JsonConvert.DeserializeXNode(System.String,System.String)">
            <summary>
            Deserializes the <see cref="T:System.Xml.Linq.XNode"/> from a JSON string nested in a root elment.
            </summary>
            <param name="value">The JSON string.</param>
            <param name="deserializeRootElementName">The name of the root element to append when deserializing.</param>
            <returns>The deserialized XNode</returns>
        </member>
        <member name="M:Spike.Text.Json.JsonConvert.DeserializeXNode(System.String,System.String,System.Boolean)">
            <summary>
            Deserializes the <see cref="T:System.Xml.Linq.XNode"/> from a JSON string nested in a root elment.
            </summary>
            <param name="value">The JSON string.</param>
            <param name="deserializeRootElementName">The name of the root element to append when deserializing.</param>
            <param name="writeArrayAttribute">
            A flag to indicate whether to write the Json.NET array attribute.
            This attribute helps preserve arrays when converting the written XML back to JSON.
            </param>
            <returns>The deserialized XNode</returns>
        </member>
        <member name="T:Spike.Text.Json.JsonConverterAttribute">
            <summary>
            Instructs the <see cref="T:Spike.Text.Json.JsonSerializer"/> to use the specified <see cref="T:Spike.Text.Json.JsonConverter"/> when serializing the member or class.
            </summary>
        </member>
        <member name="M:Spike.Text.Json.JsonConverterAttribute.#ctor(System.Type)">
            <summary>
            Initializes a new instance of the <see cref="T:Spike.Text.Json.JsonConverterAttribute"/> class.
            </summary>
            <param name="converterType">Type of the converter.</param>
        </member>
        <member name="P:Spike.Text.Json.JsonConverterAttribute.ConverterType">
            <summary>
            Gets the type of the converter.
            </summary>
            <value>The type of the converter.</value>
        </member>
        <member name="T:Spike.Text.Json.JsonConverterCollection">
            <summary>
            Represents a collection of <see cref="T:Spike.Text.Json.JsonConverter"/>.
            </summary>
        </member>
        <member name="T:Spike.Text.Json.JsonIgnoreAttribute">
            <summary>
            Instructs the <see cref="T:Spike.Text.Json.JsonSerializer"/> not to serialize the public field or public read/write property value.
            </summary>
        </member>
        <member name="T:Spike.Text.Json.JsonObjectAttribute">
            <summary>
            Instructs the <see cref="T:Spike.Text.Json.JsonSerializer"/> how to serialize the object.
            </summary>
        </member>
        <member name="M:Spike.Text.Json.JsonObjectAttribute.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Spike.Text.Json.JsonObjectAttribute"/> class.
            </summary>
        </member>
        <member name="M:Spike.Text.Json.JsonObjectAttribute.#ctor(Spike.Text.Json.MemberSerialization)">
            <summary>
            Initializes a new instance of the <see cref="T:Spike.Text.Json.JsonObjectAttribute"/> class with the specified member serialization.
            </summary>
            <param name="memberSerialization">The member serialization.</param>
        </member>
        <member name="M:Spike.Text.Json.JsonObjectAttribute.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Spike.Text.Json.JsonObjectAttribute"/> class with the specified container Id.
            </summary>
            <param name="id">The container Id.</param>
        </member>
        <member name="P:Spike.Text.Json.JsonObjectAttribute.MemberSerialization">
            <summary>
            Gets or sets the member serialization.
            </summary>
            <value>The member serialization.</value>
        </member>
        <member name="T:Spike.Text.Json.JsonPropertyAttribute">
            <summary>
            Instructs the <see cref="T:Spike.Text.Json.JsonSerializer"/> to always serialize the member with the specified name.
            </summary>
        </member>
        <member name="M:Spike.Text.Json.JsonPropertyAttribute.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Spike.Text.Json.JsonPropertyAttribute"/> class.
            </summary>
        </member>
        <member name="M:Spike.Text.Json.JsonPropertyAttribute.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Spike.Text.Json.JsonPropertyAttribute"/> class with the specified name.
            </summary>
            <param name="propertyName">Name of the property.</param>
        </member>
        <member name="P:Spike.Text.Json.JsonPropertyAttribute.NullValueHandling">
            <summary>
            Gets or sets the null value handling used when serializing this property.
            </summary>
            <value>The null value handling.</value>
        </member>
        <member name="P:Spike.Text.Json.JsonPropertyAttribute.DefaultValueHandling">
            <summary>
            Gets or sets the default value handling used when serializing this property.
            </summary>
            <value>The default value handling.</value>
        </member>
        <member name="P:Spike.Text.Json.JsonPropertyAttribute.ReferenceLoopHandling">
            <summary>
            Gets or sets the reference loop handling used when serializing this property.
            </summary>
            <value>The reference loop handling.</value>
        </member>
        <member name="P:Spike.Text.Json.JsonPropertyAttribute.ObjectCreationHandling">
            <summary>
            Gets or sets the object creation handling used when deserializing this property.
            </summary>
            <value>The object creation handling.</value>
        </member>
        <member name="P:Spike.Text.Json.JsonPropertyAttribute.TypeNameHandling">
            <summary>
            Gets or sets the type name handling used when serializing this property.
            </summary>
            <value>The type name handling.</value>
        </member>
        <member name="P:Spike.Text.Json.JsonPropertyAttribute.IsReference">
            <summary>
            Gets or sets whether this property's value is serialized as a reference.
            </summary>
            <value>Whether this property's value is serialized as a reference.</value>
        </member>
        <member name="P:Spike.Text.Json.JsonPropertyAttribute.Order">
            <summary>
            Gets or sets the order of serialization and deserialization of a member.
            </summary>
            <value>The numeric order of serialization or deserialization.</value>
        </member>
        <member name="P:Spike.Text.Json.JsonPropertyAttribute.PropertyName">
            <summary>
            Gets or sets the name of the property.
            </summary>
            <value>The name of the property.</value>
        </member>
        <member name="P:Spike.Text.Json.JsonPropertyAttribute.Required">
            <summary>
            Gets or sets a value indicating whether this property is required.
            </summary>
            <value>
            	A value indicating whether this property is required.
            </value>
        </member>
        <member name="T:Spike.Text.Json.JsonReaderException">
            <summary>
            The exception thrown when an error occurs while reading Json text.
            </summary>
        </member>
        <member name="M:Spike.Text.Json.JsonReaderException.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Spike.Text.Json.JsonReaderException"/> class.
            </summary>
        </member>
        <member name="M:Spike.Text.Json.JsonReaderException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Spike.Text.Json.JsonReaderException"/> class
            with a specified error message.
            </summary>
            <param name="message">The error message that explains the reason for the exception.</param>
        </member>
        <member name="M:Spike.Text.Json.JsonReaderException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:Spike.Text.Json.JsonReaderException"/> class
            with a specified error message and a reference to the inner exception that is the cause of this exception.
            </summary>
            <param name="message">The error message that explains the reason for the exception.</param>
            <param name="innerException">The exception that is the cause of the current exception, or a null reference (Nothing in Visual Basic) if no inner exception is specified.</param>
        </member>
        <member name="M:Spike.Text.Json.JsonReaderException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:Spike.Text.Json.JsonReaderException"/> class.
            </summary>
            <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo"/> that holds the serialized object data about the exception being thrown.</param>
            <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext"/> that contains contextual information about the source or destination.</param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="info"/> parameter is null. </exception>
            <exception cref="T:System.Runtime.Serialization.SerializationException">The class name is null or <see cref="P:System.Exception.HResult"/> is zero (0). </exception>
        </member>
        <member name="P:Spike.Text.Json.JsonReaderException.LineNumber">
            <summary>
            Gets the line number indicating where the error occurred.
            </summary>
            <value>The line number indicating where the error occurred.</value>
        </member>
        <member name="P:Spike.Text.Json.JsonReaderException.LinePosition">
            <summary>
            Gets the line position indicating where the error occurred.
            </summary>
            <value>The line position indicating where the error occurred.</value>
        </member>
        <member name="T:Spike.Text.Json.JsonSerializationException">
            <summary>
            The exception thrown when an error occurs during Json serialization or deserialization.
            </summary>
        </member>
        <member name="M:Spike.Text.Json.JsonSerializationException.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Spike.Text.Json.JsonSerializationException"/> class.
            </summary>
        </member>
        <member name="M:Spike.Text.Json.JsonSerializationException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Spike.Text.Json.JsonSerializationException"/> class
            with a specified error message.
            </summary>
            <param name="message">The error message that explains the reason for the exception.</param>
        </member>
        <member name="M:Spike.Text.Json.JsonSerializationException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:Spike.Text.Json.JsonSerializationException"/> class
            with a specified error message and a reference to the inner exception that is the cause of this exception.
            </summary>
            <param name="message">The error message that explains the reason for the exception.</param>
            <param name="innerException">The exception that is the cause of the current exception, or a null reference (Nothing in Visual Basic) if no inner exception is specified.</param>
        </member>
        <member name="M:Spike.Text.Json.JsonSerializationException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:Spike.Text.Json.JsonSerializationException"/> class.
            </summary>
            <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo"/> that holds the serialized object data about the exception being thrown.</param>
            <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext"/> that contains contextual information about the source or destination.</param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="info"/> parameter is null. </exception>
            <exception cref="T:System.Runtime.Serialization.SerializationException">The class name is null or <see cref="P:System.Exception.HResult"/> is zero (0). </exception>
        </member>
        <member name="T:Spike.Text.Json.JsonSerializer">
            <summary>
            Serializes and deserializes objects into and from the JSON format.
            The <see cref="T:Spike.Text.Json.JsonSerializer"/> enables you to control how objects are encoded into JSON.
            </summary>
        </member>
        <member name="M:Spike.Text.Json.JsonSerializer.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Spike.Text.Json.JsonSerializer"/> class.
            </summary>
        </member>
        <member name="M:Spike.Text.Json.JsonSerializer.Create(Spike.Text.Json.JsonSerializerSettings)">
            <summary>
            Creates a new <see cref="T:Spike.Text.Json.JsonSerializer"/> instance using the specified <see cref="T:Spike.Text.Json.JsonSerializerSettings"/>.
            </summary>
            <param name="settings">The settings to be applied to the <see cref="T:Spike.Text.Json.JsonSerializer"/>.</param>
            <returns>A new <see cref="T:Spike.Text.Json.JsonSerializer"/> instance using the specified <see cref="T:Spike.Text.Json.JsonSerializerSettings"/>.</returns>
        </member>
        <member name="M:Spike.Text.Json.JsonSerializer.Populate(System.IO.TextReader,System.Object)">
            <summary>
            Populates the JSON values onto the target object.
            </summary>
            <param name="reader">The <see cref="T:System.IO.TextReader"/> that contains the JSON structure to reader values from.</param>
            <param name="target">The target object to populate values onto.</param>
        </member>
        <member name="M:Spike.Text.Json.JsonSerializer.Populate(Spike.Text.Json.JsonReader,System.Object)">
            <summary>
            Populates the JSON values onto the target object.
            </summary>
            <param name="reader">The <see cref="T:Spike.Text.Json.JsonReader"/> that contains the JSON structure to reader values from.</param>
            <param name="target">The target object to populate values onto.</param>
        </member>
        <member name="M:Spike.Text.Json.JsonSerializer.Deserialize(Spike.Text.Json.JsonReader)">
            <summary>
            Deserializes the Json structure contained by the specified <see cref="T:Spike.Text.Json.JsonReader"/>.
            </summary>
            <param name="reader">The <see cref="T:Spike.Text.Json.JsonReader"/> that contains the JSON structure to deserialize.</param>
            <returns>The <see cref="T:System.Object"/> being deserialized.</returns>
        </member>
        <member name="M:Spike.Text.Json.JsonSerializer.Deserialize(System.IO.TextReader,System.Type)">
            <summary>
            Deserializes the Json structure contained by the specified <see cref="T:System.IO.StringReader"/>
            into an instance of the specified type.
            </summary>
            <param name="reader">The <see cref="T:System.IO.TextReader"/> containing the object.</param>
            <param name="objectType">The <see cref="T:System.Type"/> of object being deserialized.</param>
            <returns>The instance of <paramref name="objectType"/> being deserialized.</returns>
        </member>
        <member name="M:Spike.Text.Json.JsonSerializer.Deserialize``1(Spike.Text.Json.JsonReader)">
            <summary>
            Deserializes the Json structure contained by the specified <see cref="T:Spike.Text.Json.JsonReader"/>
            into an instance of the specified type.
            </summary>
            <param name="reader">The <see cref="T:Spike.Text.Json.JsonReader"/> containing the object.</param>
            <typeparam name="T">The type of the object to deserialize.</typeparam>
            <returns>The instance of <typeparamref name="T"/> being deserialized.</returns>
        </member>
        <member name="M:Spike.Text.Json.JsonSerializer.Deserialize(Spike.Text.Json.JsonReader,System.Type)">
            <summary>
            Deserializes the Json structure contained by the specified <see cref="T:Spike.Text.Json.JsonReader"/>
            into an instance of the specified type.
            </summary>
            <param name="reader">The <see cref="T:Spike.Text.Json.JsonReader"/> containing the object.</param>
            <param name="objectType">The <see cref="T:System.Type"/> of object being deserialized.</param>
            <returns>The instance of <paramref name="objectType"/> being deserialized.</returns>
        </member>
        <member name="M:Spike.Text.Json.JsonSerializer.Serialize(System.IO.TextWriter,System.Object)">
            <summary>
            Serializes the specified <see cref="T:System.Object"/> and writes the Json structure
            to a <c>Stream</c> using the specified <see cref="T:System.IO.TextWriter"/>. 
            </summary>
            <param name="textWriter">The <see cref="T:System.IO.TextWriter"/> used to write the Json structure.</param>
            <param name="value">The <see cref="T:System.Object"/> to serialize.</param>
        </member>
        <member name="M:Spike.Text.Json.JsonSerializer.Serialize(Spike.Text.Json.JsonWriter,System.Object)">
            <summary>
            Serializes the specified <see cref="T:System.Object"/> and writes the Json structure
            to a <c>Stream</c> using the specified <see cref="T:Spike.Text.Json.JsonWriter"/>. 
            </summary>
            <param name="jsonWriter">The <see cref="T:Spike.Text.Json.JsonWriter"/> used to write the Json structure.</param>
            <param name="value">The <see cref="T:System.Object"/> to serialize.</param>
        </member>
        <member name="E:Spike.Text.Json.JsonSerializer.Error">
            <summary>
            Occurs when the <see cref="T:Spike.Text.Json.JsonSerializer"/> errors during serialization and deserialization.
            </summary>
        </member>
        <member name="P:Spike.Text.Json.JsonSerializer.ReferenceResolver">
            <summary>
            Gets or sets the <see cref="T:Spike.Text.Json.Serialization.IReferenceResolver"/> used by the serializer when resolving references.
            </summary>
        </member>
        <member name="P:Spike.Text.Json.JsonSerializer.Binder">
            <summary>
            Gets or sets the <see cref="T:System.Runtime.Serialization.SerializationBinder"/> used by the serializer when resolving type names.
            </summary>
        </member>
        <member name="P:Spike.Text.Json.JsonSerializer.TypeNameHandling">
            <summary>
            Gets or sets how type name writing and reading is handled by the serializer.
            </summary>
        </member>
        <member name="P:Spike.Text.Json.JsonSerializer.TypeNameAssemblyFormat">
            <summary>
            Gets or sets how a type name assembly is written and resolved by the serializer.
            </summary>
            <value>The type name assembly format.</value>
        </member>
        <member name="P:Spike.Text.Json.JsonSerializer.PreserveReferencesHandling">
            <summary>
            Gets or sets how object references are preserved by the serializer.
            </summary>
        </member>
        <member name="P:Spike.Text.Json.JsonSerializer.ReferenceLoopHandling">
            <summary>
            Get or set how reference loops (e.g. a class referencing itself) is handled.
            </summary>
        </member>
        <member name="P:Spike.Text.Json.JsonSerializer.MissingMemberHandling">
            <summary>
            Get or set how missing members (e.g. JSON contains a property that isn't a member on the object) are handled during deserialization.
            </summary>
        </member>
        <member name="P:Spike.Text.Json.JsonSerializer.NullValueHandling">
            <summary>
            Get or set how null values are handled during serialization and deserialization.
            </summary>
        </member>
        <member name="P:Spike.Text.Json.JsonSerializer.DefaultValueHandling">
            <summary>
            Get or set how null default are handled during serialization and deserialization.
            </summary>
        </member>
        <member name="P:Spike.Text.Json.JsonSerializer.ObjectCreationHandling">
            <summary>
            Gets or sets how objects are created during deserialization.
            </summary>
            <value>The object creation handling.</value>
        </member>
        <member name="P:Spike.Text.Json.JsonSerializer.ConstructorHandling">
            <summary>
            Gets or sets how constructors are used during deserialization.
            </summary>
            <value>The constructor handling.</value>
        </member>
        <member name="P:Spike.Text.Json.JsonSerializer.Converters">
            <summary>
            Gets a collection <see cref="T:Spike.Text.Json.JsonConverter"/> that will be used during serialization.
            </summary>
            <value>Collection <see cref="T:Spike.Text.Json.JsonConverter"/> that will be used during serialization.</value>
        </member>
        <member name="P:Spike.Text.Json.JsonSerializer.ContractResolver">
            <summary>
            Gets or sets the contract resolver used by the serializer when
            serializing .NET objects to JSON and vice versa.
            </summary>
        </member>
        <member name="P:Spike.Text.Json.JsonSerializer.Context">
            <summary>
            Gets or sets the <see cref="T:System.Runtime.Serialization.StreamingContext"/> used by the serializer when invoking serialization callback methods.
            </summary>
            <value>The context.</value>
        </member>
        <member name="T:Spike.Text.Json.JsonSerializerSettings">
            <summary>
            Specifies the settings on a <see cref="T:Spike.Text.Json.JsonSerializer"/> object.
            </summary>
        </member>
        <member name="M:Spike.Text.Json.JsonSerializerSettings.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Spike.Text.Json.JsonSerializerSettings"/> class.
            </summary>
        </member>
        <member name="P:Spike.Text.Json.JsonSerializerSettings.ReferenceLoopHandling">
            <summary>
            Gets or sets how reference loops (e.g. a class referencing itself) is handled.
            </summary>
            <value>Reference loop handling.</value>
        </member>
        <member name="P:Spike.Text.Json.JsonSerializerSettings.MissingMemberHandling">
            <summary>
            Gets or sets how missing members (e.g. JSON contains a property that isn't a member on the object) are handled during deserialization.
            </summary>
            <value>Missing member handling.</value>
        </member>
        <member name="P:Spike.Text.Json.JsonSerializerSettings.ObjectCreationHandling">
            <summary>
            Gets or sets how objects are created during deserialization.
            </summary>
            <value>The object creation handling.</value>
        </member>
        <member name="P:Spike.Text.Json.JsonSerializerSettings.NullValueHandling">
            <summary>
            Gets or sets how null values are handled during serialization and deserialization.
            </summary>
            <value>Null value handling.</value>
        </member>
        <member name="P:Spike.Text.Json.JsonSerializerSettings.DefaultValueHandling">
            <summary>
            Gets or sets how null default are handled during serialization and deserialization.
            </summary>
            <value>The default value handling.</value>
        </member>
        <member name="P:Spike.Text.Json.JsonSerializerSettings.Converters">
            <summary>
            Gets or sets a collection <see cref="T:Spike.Text.Json.JsonConverter"/> that will be used during serialization.
            </summary>
            <value>The converters.</value>
        </member>
        <member name="P:Spike.Text.Json.JsonSerializerSettings.PreserveReferencesHandling">
            <summary>
            Gets or sets how object references are preserved by the serializer.
            </summary>
            <value>The preserve references handling.</value>
        </member>
        <member name="P:Spike.Text.Json.JsonSerializerSettings.TypeNameHandling">
            <summary>
            Gets or sets how type name writing and reading is handled by the serializer.
            </summary>
            <value>The type name handling.</value>
        </member>
        <member name="P:Spike.Text.Json.JsonSerializerSettings.TypeNameAssemblyFormat">
            <summary>
            Gets or sets how a type name assembly is written and resolved by the serializer.
            </summary>
            <value>The type name assembly format.</value>
        </member>
        <member name="P:Spike.Text.Json.JsonSerializerSettings.ConstructorHandling">
            <summary>
            Gets or sets how constructors are used during deserialization.
            </summary>
            <value>The constructor handling.</value>
        </member>
        <member name="P:Spike.Text.Json.JsonSerializerSettings.ContractResolver">
            <summary>
            Gets or sets the contract resolver used by the serializer when
            serializing .NET objects to JSON and vice versa.
            </summary>
            <value>The contract resolver.</value>
        </member>
        <member name="P:Spike.Text.Json.JsonSerializerSettings.ReferenceResolver">
            <summary>
            Gets or sets the <see cref="T:Spike.Text.Json.Serialization.IReferenceResolver"/> used by the serializer when resolving references.
            </summary>
            <value>The reference resolver.</value>
        </member>
        <member name="P:Spike.Text.Json.JsonSerializerSettings.Binder">
            <summary>
            Gets or sets the <see cref="T:System.Runtime.Serialization.SerializationBinder"/> used by the serializer when resolving type names.
            </summary>
            <value>The binder.</value>
        </member>
        <member name="P:Spike.Text.Json.JsonSerializerSettings.Error">
            <summary>
            Gets or sets the error handler called during serialization and deserialization.
            </summary>
            <value>The error handler called during serialization and deserialization.</value>
        </member>
        <member name="P:Spike.Text.Json.JsonSerializerSettings.Context">
            <summary>
            Gets or sets the <see cref="T:System.Runtime.Serialization.StreamingContext"/> used by the serializer when invoking serialization callback methods.
            </summary>
            <value>The context.</value>
        </member>
        <member name="T:Spike.Text.Json.JsonTextReader">
            <summary>
            Represents a reader that provides fast, non-cached, forward-only access to serialized Json data.
            </summary>
        </member>
        <member name="M:Spike.Text.Json.JsonTextReader.#ctor(System.IO.TextReader)">
            <summary>
            Initializes a new instance of the <see cref="T:Spike.Text.Json.JsonReader"/> class with the specified <see cref="T:System.IO.TextReader"/>.
            </summary>
            <param name="reader">The <c>TextReader</c> containing the XML data to read.</param>
        </member>
        <member name="M:Spike.Text.Json.JsonTextReader.Read">
            <summary>
            Reads the next JSON token from the stream.
            </summary>
            <returns>
            true if the next token was read successfully; false if there are no more tokens to read.
            </returns>
        </member>
        <member name="M:Spike.Text.Json.JsonTextReader.ReadAsBytes">
            <summary>
            Reads the next JSON token from the stream as a <see cref="T:Byte[]"/>.
            </summary>
            <returns>
            A <see cref="T:Byte[]"/> or a null reference if the next JSON token is null. This method will return <c>null</c> at the end of an array.
            </returns>
        </member>
        <member name="M:Spike.Text.Json.JsonTextReader.ReadAsDecimal">
            <summary>
            Reads the next JSON token from the stream as a <see cref="T:System.Nullable`1"/>.
            </summary>
            <returns>A <see cref="T:System.Nullable`1"/>. This method will return <c>null</c> at the end of an array.</returns>
        </member>
        <member name="M:Spike.Text.Json.JsonTextReader.ReadAsInt32">
            <summary>
            Reads the next JSON token from the stream as a <see cref="T:System.Nullable`1"/>.
            </summary>
            <returns>A <see cref="T:System.Nullable`1"/>. This method will return <c>null</c> at the end of an array.</returns>
        </member>
        <member name="M:Spike.Text.Json.JsonTextReader.ReadAsDateTimeOffset">
            <summary>
            Reads the next JSON token from the stream as a <see cref="T:System.Nullable`1"/>.
            </summary>
            <returns>A <see cref="T:System.DateTimeOffset"/>. This method will return <c>null</c> at the end of an array.</returns>
        </member>
        <member name="M:Spike.Text.Json.JsonTextReader.Close">
            <summary>
            Changes the state to closed. 
            </summary>
        </member>
        <member name="M:Spike.Text.Json.JsonTextReader.HasLineInfo">
            <summary>
            Gets a value indicating whether the class can return line information.
            </summary>
            <returns>
            	<c>true</c> if LineNumber and LinePosition can be provided; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="P:Spike.Text.Json.JsonTextReader.LineNumber">
            <summary>
            Gets the current line number.
            </summary>
            <value>
            The current line number or 0 if no line information is available (for example, HasLineInfo returns false).
            </value>
        </member>
        <member name="P:Spike.Text.Json.JsonTextReader.LinePosition">
            <summary>
            Gets the current line position.
            </summary>
            <value>
            The current line position or 0 if no line information is available (for example, HasLineInfo returns false).
            </value>
        </member>
        <member name="T:Spike.Text.Json.JsonTextWriter">
            <summary>
            Represents a writer that provides a fast, non-cached, forward-only way of generating Json data.
            </summary>
        </member>
        <member name="M:Spike.Text.Json.JsonTextWriter.#ctor(System.IO.TextWriter)">
            <summary>
            Creates an instance of the <c>JsonWriter</c> class using the specified <see cref="T:System.IO.TextWriter"/>. 
            </summary>
            <param name="textWriter">The <c>TextWriter</c> to write to.</param>
        </member>
        <member name="M:Spike.Text.Json.JsonTextWriter.Flush">
            <summary>
            Flushes whatever is in the buffer to the underlying streams and also flushes the underlying stream.
            </summary>
        </member>
        <member name="M:Spike.Text.Json.JsonTextWriter.Close">
            <summary>
            Closes this stream and the underlying stream.
            </summary>
        </member>
        <member name="M:Spike.Text.Json.JsonTextWriter.WriteStartObject">
            <summary>
            Writes the beginning of a Json object.
            </summary>
        </member>
        <member name="M:Spike.Text.Json.JsonTextWriter.WriteStartArray">
            <summary>
            Writes the beginning of a Json array.
            </summary>
        </member>
        <member name="M:Spike.Text.Json.JsonTextWriter.WriteStartConstructor(System.String)">
            <summary>
            Writes the start of a constructor with the given name.
            </summary>
            <param name="name">The name of the constructor.</param>
        </member>
        <member name="M:Spike.Text.Json.JsonTextWriter.WriteEnd(Spike.Text.Json.JsonToken)">
            <summary>
            Writes the specified end token.
            </summary>
            <param name="token">The end token to write.</param>
        </member>
        <member name="M:Spike.Text.Json.JsonTextWriter.WritePropertyName(System.String)">
            <summary>
            Writes the property name of a name/value pair on a Json object.
            </summary>
            <param name="name">The name of the property.</param>
        </member>
        <member name="M:Spike.Text.Json.JsonTextWriter.WriteIndent">
            <summary>
            Writes indent characters.
            </summary>
        </member>
        <member name="M:Spike.Text.Json.JsonTextWriter.WriteValueDelimiter">
            <summary>
            Writes the JSON value delimiter.
            </summary>
        </member>
        <member name="M:Spike.Text.Json.JsonTextWriter.WriteIndentSpace">
            <summary>
            Writes an indent space.
            </summary>
        </member>
        <member name="M:Spike.Text.Json.JsonTextWriter.WriteNull">
            <summary>
            Writes a null value.
            </summary>
        </member>
        <member name="M:Spike.Text.Json.JsonTextWriter.WriteUndefined">
            <summary>
            Writes an undefined value.
            </summary>
        </member>
        <member name="M:Spike.Text.Json.JsonTextWriter.WriteRaw(System.String)">
            <summary>
            Writes raw JSON.
            </summary>
            <param name="json">The raw JSON to write.</param>
        </member>
        <member name="M:Spike.Text.Json.JsonTextWriter.WriteValue(System.String)">
            <summary>
            Writes a <see cref="T:System.String"/> value.
            </summary>
            <param name="value">The <see cref="T:System.String"/> value to write.</param>
        </member>
        <member name="M:Spike.Text.Json.JsonTextWriter.WriteValue(System.Int32)">
            <summary>
            Writes a <see cref="T:System.Int32"/> value.
            </summary>
            <param name="value">The <see cref="T:System.Int32"/> value to write.</param>
        </member>
        <member name="M:Spike.Text.Json.JsonTextWriter.WriteValue(System.UInt32)">
            <summary>
            Writes a <see cref="T:System.UInt32"/> value.
            </summary>
            <param name="value">The <see cref="T:System.UInt32"/> value to write.</param>
        </member>
        <member name="M:Spike.Text.Json.JsonTextWriter.WriteValue(System.Int64)">
            <summary>
            Writes a <see cref="T:System.Int64"/> value.
            </summary>
            <param name="value">The <see cref="T:System.Int64"/> value to write.</param>
        </member>
        <member name="M:Spike.Text.Json.JsonTextWriter.WriteValue(System.UInt64)">
            <summary>
            Writes a <see cref="T:System.UInt64"/> value.
            </summary>
            <param name="value">The <see cref="T:System.UInt64"/> value to write.</param>
        </member>
        <member name="M:Spike.Text.Json.JsonTextWriter.WriteValue(System.Single)">
            <summary>
            Writes a <see cref="T:System.Single"/> value.
            </summary>
            <param name="value">The <see cref="T:System.Single"/> value to write.</param>
        </member>
        <member name="M:Spike.Text.Json.JsonTextWriter.WriteValue(System.Double)">
            <summary>
            Writes a <see cref="T:System.Double"/> value.
            </summary>
            <param name="value">The <see cref="T:System.Double"/> value to write.</param>
        </member>
        <member name="M:Spike.Text.Json.JsonTextWriter.WriteValue(System.Boolean)">
            <summary>
            Writes a <see cref="T:System.Boolean"/> value.
            </summary>
            <param name="value">The <see cref="T:System.Boolean"/> value to write.</param>
        </member>
        <member name="M:Spike.Text.Json.JsonTextWriter.WriteValue(System.Int16)">
            <summary>
            Writes a <see cref="T:System.Int16"/> value.
            </summary>
            <param name="value">The <see cref="T:System.Int16"/> value to write.</param>
        </member>
        <member name="M:Spike.Text.Json.JsonTextWriter.WriteValue(System.UInt16)">
            <summary>
            Writes a <see cref="T:System.UInt16"/> value.
            </summary>
            <param name="value">The <see cref="T:System.UInt16"/> value to write.</param>
        </member>
        <member name="M:Spike.Text.Json.JsonTextWriter.WriteValue(System.Char)">
            <summary>
            Writes a <see cref="T:System.Char"/> value.
            </summary>
            <param name="value">The <see cref="T:System.Char"/> value to write.</param>
        </member>
        <member name="M:Spike.Text.Json.JsonTextWriter.WriteValue(System.Byte)">
            <summary>
            Writes a <see cref="T:System.Byte"/> value.
            </summary>
            <param name="value">The <see cref="T:System.Byte"/> value to write.</param>
        </member>
        <member name="M:Spike.Text.Json.JsonTextWriter.WriteValue(System.SByte)">
            <summary>
            Writes a <see cref="T:System.SByte"/> value.
            </summary>
            <param name="value">The <see cref="T:System.SByte"/> value to write.</param>
        </member>
        <member name="M:Spike.Text.Json.JsonTextWriter.WriteValue(System.Decimal)">
            <summary>
            Writes a <see cref="T:System.Decimal"/> value.
            </summary>
            <param name="value">The <see cref="T:System.Decimal"/> value to write.</param>
        </member>
        <member name="M:Spike.Text.Json.JsonTextWriter.WriteValue(System.DateTime)">
            <summary>
            Writes a <see cref="T:System.DateTime"/> value.
            </summary>
            <param name="value">The <see cref="T:System.DateTime"/> value to write.</param>
        </member>
        <member name="M:Spike.Text.Json.JsonTextWriter.WriteValue(System.Byte[])">
            <summary>
            Writes a <see cref="T:Byte[]"/> value.
            </summary>
            <param name="value">The <see cref="T:Byte[]"/> value to write.</param>
        </member>
        <member name="M:Spike.Text.Json.JsonTextWriter.WriteValue(System.DateTimeOffset)">
            <summary>
            Writes a <see cref="T:System.DateTimeOffset"/> value.
            </summary>
            <param name="value">The <see cref="T:System.DateTimeOffset"/> value to write.</param>
        </member>
        <member name="M:Spike.Text.Json.JsonTextWriter.WriteValue(System.Guid)">
            <summary>
            Writes a <see cref="T:System.Guid"/> value.
            </summary>
            <param name="value">The <see cref="T:System.Guid"/> value to write.</param>
        </member>
        <member name="M:Spike.Text.Json.JsonTextWriter.WriteValue(System.TimeSpan)">
            <summary>
            Writes a <see cref="T:System.TimeSpan"/> value.
            </summary>
            <param name="value">The <see cref="T:System.TimeSpan"/> value to write.</param>
        </member>
        <member name="M:Spike.Text.Json.JsonTextWriter.WriteValue(System.Uri)">
            <summary>
            Writes a <see cref="T:System.Uri"/> value.
            </summary>
            <param name="value">The <see cref="T:System.Uri"/> value to write.</param>
        </member>
        <member name="M:Spike.Text.Json.JsonTextWriter.WriteComment(System.String)">
            <summary>
            Writes out a comment <code>/*...*/</code> containing the specified text. 
            </summary>
            <param name="text">Text to place inside the comment.</param>
        </member>
        <member name="M:Spike.Text.Json.JsonTextWriter.WriteWhitespace(System.String)">
            <summary>
            Writes out the given white space.
            </summary>
            <param name="ws">The string of white space characters.</param>
        </member>
        <member name="P:Spike.Text.Json.JsonTextWriter.Indentation">
            <summary>
            Gets or sets how many IndentChars to write for each level in the hierarchy when <see cref="T:Spike.Text.Json.Formatting"/> is set to <c>Formatting.Indented</c>.
            </summary>
        </member>
        <member name="P:Spike.Text.Json.JsonTextWriter.QuoteChar">
            <summary>
            Gets or sets which character to use to quote attribute values.
            </summary>
        </member>
        <member name="P:Spike.Text.Json.JsonTextWriter.IndentChar">
            <summary>
            Gets or sets which character to use for indenting when <see cref="T:Spike.Text.Json.Formatting"/> is set to <c>Formatting.Indented</c>.
            </summary>
        </member>
        <member name="P:Spike.Text.Json.JsonTextWriter.QuoteName">
            <summary>
            Gets or sets a value indicating whether object names will be surrounded with quotes.
            </summary>
        </member>
        <member name="T:Spike.Text.Json.JsonToken">
            <summary>
            Specifies the type of Json token.
            </summary>
        </member>
        <member name="F:Spike.Text.Json.JsonToken.None">
            <summary>
            This is returned by the <see cref="T:Spike.Text.Json.JsonReader"/> if a <see cref="M:Spike.Text.Json.JsonReader.Read"/> method has not been called. 
            </summary>
        </member>
        <member name="F:Spike.Text.Json.JsonToken.StartObject">
            <summary>
            An object start token.
            </summary>
        </member>
        <member name="F:Spike.Text.Json.JsonToken.StartArray">
            <summary>
            An array start token.
            </summary>
        </member>
        <member name="F:Spike.Text.Json.JsonToken.StartConstructor">
            <summary>
            A constructor start token.
            </summary>
        </member>
        <member name="F:Spike.Text.Json.JsonToken.PropertyName">
            <summary>
            An object property name.
            </summary>
        </member>
        <member name="F:Spike.Text.Json.JsonToken.Comment">
            <summary>
            A comment.
            </summary>
        </member>
        <member name="F:Spike.Text.Json.JsonToken.Raw">
            <summary>
            Raw JSON.
            </summary>
        </member>
        <member name="F:Spike.Text.Json.JsonToken.Integer">
            <summary>
            An integer.
            </summary>
        </member>
        <member name="F:Spike.Text.Json.JsonToken.Float">
            <summary>
            A float.
            </summary>
        </member>
        <member name="F:Spike.Text.Json.JsonToken.String">
            <summary>
            A string.
            </summary>
        </member>
        <member name="F:Spike.Text.Json.JsonToken.Boolean">
            <summary>
            A boolean.
            </summary>
        </member>
        <member name="F:Spike.Text.Json.JsonToken.Null">
            <summary>
            A null token.
            </summary>
        </member>
        <member name="F:Spike.Text.Json.JsonToken.Undefined">
            <summary>
            An undefined token.
            </summary>
        </member>
        <member name="F:Spike.Text.Json.JsonToken.EndObject">
            <summary>
            An object end token.
            </summary>
        </member>
        <member name="F:Spike.Text.Json.JsonToken.EndArray">
            <summary>
            An array end token.
            </summary>
        </member>
        <member name="F:Spike.Text.Json.JsonToken.EndConstructor">
            <summary>
            A constructor end token.
            </summary>
        </member>
        <member name="F:Spike.Text.Json.JsonToken.Date">
            <summary>
            A Date.
            </summary>
        </member>
        <member name="F:Spike.Text.Json.JsonToken.Bytes">
            <summary>
            Byte data.
            </summary>
        </member>
        <member name="T:Spike.Text.Json.JsonValidatingReader">
            <summary>
            Represents a reader that provides <see cref="T:Spike.Text.Json.Schema.JsonSchema"/> validation.
            </summary>
        </member>
        <member name="M:Spike.Text.Json.JsonValidatingReader.#ctor(Spike.Text.Json.JsonReader)">
            <summary>
            Initializes a new instance of the <see cref="T:Spike.Text.Json.JsonValidatingReader"/> class that
            validates the content returned from the given <see cref="T:Spike.Text.Json.JsonReader"/>.
            </summary>
            <param name="reader">The <see cref="T:Spike.Text.Json.JsonReader"/> to read from while validating.</param>
        </member>
        <member name="M:Spike.Text.Json.JsonValidatingReader.ReadAsInt32">
            <summary>
            Reads the next JSON token from the stream as a <see cref="T:System.Nullable`1"/>.
            </summary>
            <returns>A <see cref="T:System.Nullable`1"/>.</returns>
        </member>
        <member name="M:Spike.Text.Json.JsonValidatingReader.ReadAsBytes">
            <summary>
            Reads the next JSON token from the stream as a <see cref="T:Byte[]"/>.
            </summary>
            <returns>
            A <see cref="T:Byte[]"/> or a null reference if the next JSON token is null.
            </returns>
        </member>
        <member name="M:Spike.Text.Json.JsonValidatingReader.ReadAsDecimal">
            <summary>
            Reads the next JSON token from the stream as a <see cref="T:System.Nullable`1"/>.
            </summary>
            <returns>A <see cref="T:System.Nullable`1"/>.</returns>
        </member>
        <member name="M:Spike.Text.Json.JsonValidatingReader.ReadAsDateTimeOffset">
            <summary>
            Reads the next JSON token from the stream as a <see cref="T:System.Nullable`1"/>.
            </summary>
            <returns>A <see cref="T:System.Nullable`1"/>.</returns>
        </member>
        <member name="M:Spike.Text.Json.JsonValidatingReader.Read">
            <summary>
            Reads the next JSON token from the stream.
            </summary>
            <returns>
            true if the next token was read successfully; false if there are no more tokens to read.
            </returns>
        </member>
        <member name="E:Spike.Text.Json.JsonValidatingReader.ValidationEventHandler">
            <summary>
            Sets an event handler for receiving schema validation errors.
            </summary>
        </member>
        <member name="P:Spike.Text.Json.JsonValidatingReader.Value">
            <summary>
            Gets the text value of the current Json token.
            </summary>
            <value></value>
        </member>
        <member name="P:Spike.Text.Json.JsonValidatingReader.Depth">
            <summary>
            Gets the depth of the current token in the JSON document.
            </summary>
            <value>The depth of the current token in the JSON document.</value>
        </member>
        <member name="P:Spike.Text.Json.JsonValidatingReader.QuoteChar">
            <summary>
            Gets the quotation mark character used to enclose the value of a string.
            </summary>
            <value></value>
        </member>
        <member name="P:Spike.Text.Json.JsonValidatingReader.TokenType">
            <summary>
            Gets the type of the current Json token.
            </summary>
            <value></value>
        </member>
        <member name="P:Spike.Text.Json.JsonValidatingReader.ValueType">
            <summary>
            Gets the Common Language Runtime (CLR) type for the current Json token.
            </summary>
            <value></value>
        </member>
        <member name="P:Spike.Text.Json.JsonValidatingReader.Schema">
            <summary>
            Gets or sets the schema.
            </summary>
            <value>The schema.</value>
        </member>
        <member name="P:Spike.Text.Json.JsonValidatingReader.Reader">
            <summary>
            Gets the <see cref="T:Spike.Text.Json.JsonReader"/> used to construct this <see cref="T:Spike.Text.Json.JsonValidatingReader"/>.
            </summary>
            <value>The <see cref="T:Spike.Text.Json.JsonReader"/> specified in the constructor.</value>
        </member>
        <member name="T:Spike.Text.Json.WriteState">
            <summary>
            Specifies the state of the <see cref="T:Spike.Text.Json.JsonWriter"/>.
            </summary>
        </member>
        <member name="F:Spike.Text.Json.WriteState.Error">
            <summary>
            An exception has been thrown, which has left the <see cref="T:Spike.Text.Json.JsonWriter"/> in an invalid state.
            You may call the <see cref="M:Spike.Text.Json.JsonWriter.Close"/> method to put the <see cref="T:Spike.Text.Json.JsonWriter"/> in the <c>Closed</c> state.
            Any other <see cref="T:Spike.Text.Json.JsonWriter"/> method calls results in an <see cref="T:System.InvalidOperationException"/> being thrown. 
            </summary>
        </member>
        <member name="F:Spike.Text.Json.WriteState.Closed">
            <summary>
            The <see cref="M:Spike.Text.Json.JsonWriter.Close"/> method has been called. 
            </summary>
        </member>
        <member name="F:Spike.Text.Json.WriteState.Object">
            <summary>
            An object is being written. 
            </summary>
        </member>
        <member name="F:Spike.Text.Json.WriteState.Array">
            <summary>
            A array is being written.
            </summary>
        </member>
        <member name="F:Spike.Text.Json.WriteState.Constructor">
            <summary>
            A constructor is being written.
            </summary>
        </member>
        <member name="F:Spike.Text.Json.WriteState.Property">
            <summary>
            A property is being written.
            </summary>
        </member>
        <member name="F:Spike.Text.Json.WriteState.Start">
            <summary>
            A write method has not been called.
            </summary>
        </member>
        <member name="T:Spike.Text.Json.Formatting">
            <summary>
            Specifies formatting options for the <see cref="T:Spike.Text.Json.JsonTextWriter"/>.
            </summary>
        </member>
        <member name="F:Spike.Text.Json.Formatting.None">
            <summary>
            No special formatting is applied. This is the default.
            </summary>
        </member>
        <member name="F:Spike.Text.Json.Formatting.Indented">
            <summary>
            Causes child objects to be indented according to the <see cref="P:Spike.Text.Json.JsonTextWriter.Indentation"/> and <see cref="P:Spike.Text.Json.JsonTextWriter.IndentChar"/> settings.
            </summary>
        </member>
        <member name="T:Spike.Text.Json.JsonWriterException">
            <summary>
            The exception thrown when an error occurs while reading Json text.
            </summary>
        </member>
        <member name="M:Spike.Text.Json.JsonWriterException.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Spike.Text.Json.JsonWriterException"/> class.
            </summary>
        </member>
        <member name="M:Spike.Text.Json.JsonWriterException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Spike.Text.Json.JsonWriterException"/> class
            with a specified error message.
            </summary>
            <param name="message">The error message that explains the reason for the exception.</param>
        </member>
        <member name="M:Spike.Text.Json.JsonWriterException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:Spike.Text.Json.JsonWriterException"/> class
            with a specified error message and a reference to the inner exception that is the cause of this exception.
            </summary>
            <param name="message">The error message that explains the reason for the exception.</param>
            <param name="innerException">The exception that is the cause of the current exception, or a null reference (Nothing in Visual Basic) if no inner exception is specified.</param>
        </member>
        <member name="M:Spike.Text.Json.JsonWriterException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:Spike.Text.Json.JsonWriterException"/> class.
            </summary>
            <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo"/> that holds the serialized object data about the exception being thrown.</param>
            <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext"/> that contains contextual information about the source or destination.</param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="info"/> parameter is null. </exception>
            <exception cref="T:System.Runtime.Serialization.SerializationException">The class name is null or <see cref="P:System.Exception.HResult"/> is zero (0). </exception>
        </member>
        <member name="T:Spike.Text.Json.Linq.Extensions">
            <summary>
            Contains the LINQ to JSON extension methods.
            </summary>
        </member>
        <member name="M:Spike.Text.Json.Linq.Extensions.Ancestors``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Returns a collection of tokens that contains the ancestors of every token in the source collection.
            </summary>
            <typeparam name="T">The type of the objects in source, constrained to <see cref="T:Spike.Text.Json.Linq.JToken"/>.</typeparam>
            <param name="source">An <see cref="T:System.Collections.Generic.IEnumerable`1"/> of <see cref="T:Spike.Text.Json.Linq.JToken"/> that contains the source collection.</param>
            <returns>An <see cref="T:System.Collections.Generic.IEnumerable`1"/> of <see cref="T:Spike.Text.Json.Linq.JToken"/> that contains the ancestors of every node in the source collection.</returns>
        </member>
        <member name="M:Spike.Text.Json.Linq.Extensions.Descendants``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Returns a collection of tokens that contains the descendants of every token in the source collection.
            </summary>
            <typeparam name="T">The type of the objects in source, constrained to <see cref="T:Spike.Text.Json.Linq.JContainer"/>.</typeparam>
            <param name="source">An <see cref="T:System.Collections.Generic.IEnumerable`1"/> of <see cref="T:Spike.Text.Json.Linq.JToken"/> that contains the source collection.</param>
            <returns>An <see cref="T:System.Collections.Generic.IEnumerable`1"/> of <see cref="T:Spike.Text.Json.Linq.JToken"/> that contains the descendants of every node in the source collection.</returns>
        </member>
        <member name="M:Spike.Text.Json.Linq.Extensions.Properties(System.Collections.Generic.IEnumerable{Spike.Text.Json.Linq.JObject})">
            <summary>
            Returns a collection of child properties of every object in the source collection.
            </summary>
            <param name="source">An <see cref="T:System.Collections.Generic.IEnumerable`1"/> of <see cref="T:Spike.Text.Json.Linq.JObject"/> that contains the source collection.</param>
            <returns>An <see cref="T:System.Collections.Generic.IEnumerable`1"/> of <see cref="T:Spike.Text.Json.Linq.JProperty"/> that contains the properties of every object in the source collection.</returns>
        </member>
        <member name="M:Spike.Text.Json.Linq.Extensions.Values(System.Collections.Generic.IEnumerable{Spike.Text.Json.Linq.JToken},System.Object)">
            <summary>
            Returns a collection of child values of every object in the source collection with the given key.
            </summary>
            <param name="source">An <see cref="T:System.Collections.Generic.IEnumerable`1"/> of <see cref="T:Spike.Text.Json.Linq.JToken"/> that contains the source collection.</param>
            <param name="key">The token key.</param>
            <returns>An <see cref="T:System.Collections.Generic.IEnumerable`1"/> of <see cref="T:Spike.Text.Json.Linq.JToken"/> that contains the values of every node in the source collection with the given key.</returns>
        </member>
        <member name="M:Spike.Text.Json.Linq.Extensions.Values(System.Collections.Generic.IEnumerable{Spike.Text.Json.Linq.JToken})">
            <summary>
            Returns a collection of child values of every object in the source collection.
            </summary>
            <param name="source">An <see cref="T:System.Collections.Generic.IEnumerable`1"/> of <see cref="T:Spike.Text.Json.Linq.JToken"/> that contains the source collection.</param>
            <returns>An <see cref="T:System.Collections.Generic.IEnumerable`1"/> of <see cref="T:Spike.Text.Json.Linq.JToken"/> that contains the values of every node in the source collection.</returns>
        </member>
        <member name="M:Spike.Text.Json.Linq.Extensions.Values``1(System.Collections.Generic.IEnumerable{Spike.Text.Json.Linq.JToken},System.Object)">
            <summary>
            Returns a collection of converted child values of every object in the source collection with the given key.
            </summary>
            <typeparam name="U">The type to convert the values to.</typeparam>
            <param name="source">An <see cref="T:System.Collections.Generic.IEnumerable`1"/> of <see cref="T:Spike.Text.Json.Linq.JToken"/> that contains the source collection.</param>
            <param name="key">The token key.</param>
            <returns>An <see cref="T:System.Collections.Generic.IEnumerable`1"/> that contains the converted values of every node in the source collection with the given key.</returns>
        </member>
        <member name="M:Spike.Text.Json.Linq.Extensions.Values``1(System.Collections.Generic.IEnumerable{Spike.Text.Json.Linq.JToken})">
            <summary>
            Returns a collection of converted child values of every object in the source collection.
            </summary>
            <typeparam name="U">The type to convert the values to.</typeparam>
            <param name="source">An <see cref="T:System.Collections.Generic.IEnumerable`1"/> of <see cref="T:Spike.Text.Json.Linq.JToken"/> that contains the source collection.</param>
            <returns>An <see cref="T:System.Collections.Generic.IEnumerable`1"/> that contains the converted values of every node in the source collection.</returns>
        </member>
        <member name="M:Spike.Text.Json.Linq.Extensions.Value``1(System.Collections.Generic.IEnumerable{Spike.Text.Json.Linq.JToken})">
            <summary>
            Converts the value.
            </summary>
            <typeparam name="U">The type to convert the value to.</typeparam>
            <param name="value">A <see cref="T:Spike.Text.Json.Linq.JToken"/> cast as a <see cref="T:System.Collections.Generic.IEnumerable`1"/> of <see cref="T:Spike.Text.Json.Linq.JToken"/>.</param>
            <returns>A converted value.</returns>
        </member>
        <member name="M:Spike.Text.Json.Linq.Extensions.Value``2(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Converts the value.
            </summary>
            <typeparam name="T">The source collection type.</typeparam>
            <typeparam name="U">The type to convert the value to.</typeparam>
            <param name="value">A <see cref="T:Spike.Text.Json.Linq.JToken"/> cast as a <see cref="T:System.Collections.Generic.IEnumerable`1"/> of <see cref="T:Spike.Text.Json.Linq.JToken"/>.</param>
            <returns>A converted value.</returns>
        </member>
        <member name="M:Spike.Text.Json.Linq.Extensions.Children``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Returns a collection of child tokens of every array in the source collection.
            </summary>
            <typeparam name="T">The source collection type.</typeparam>
            <param name="source">An <see cref="T:System.Collections.Generic.IEnumerable`1"/> of <see cref="T:Spike.Text.Json.Linq.JToken"/> that contains the source collection.</param>
            <returns>An <see cref="T:System.Collections.Generic.IEnumerable`1"/> of <see cref="T:Spike.Text.Json.Linq.JToken"/> that contains the values of every node in the source collection.</returns>
        </member>
        <member name="M:Spike.Text.Json.Linq.Extensions.Children``2(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Returns a collection of converted child tokens of every array in the source collection.
            </summary>
            <param name="source">An <see cref="T:System.Collections.Generic.IEnumerable`1"/> of <see cref="T:Spike.Text.Json.Linq.JToken"/> that contains the source collection.</param>
            <typeparam name="U">The type to convert the values to.</typeparam>
            <typeparam name="T">The source collection type.</typeparam>
            <returns>An <see cref="T:System.Collections.Generic.IEnumerable`1"/> that contains the converted values of every node in the source collection.</returns>
        </member>
        <member name="M:Spike.Text.Json.Linq.Extensions.AsJEnumerable(System.Collections.Generic.IEnumerable{Spike.Text.Json.Linq.JToken})">
            <summary>
            Returns the input typed as <see cref="T:Spike.Text.Json.Linq.IJEnumerable`1"/>.
            </summary>
            <param name="source">An <see cref="T:System.Collections.Generic.IEnumerable`1"/> of <see cref="T:Spike.Text.Json.Linq.JToken"/> that contains the source collection.</param>
            <returns>The input typed as <see cref="T:Spike.Text.Json.Linq.IJEnumerable`1"/>.</returns>
        </member>
        <member name="M:Spike.Text.Json.Linq.Extensions.AsJEnumerable``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Returns the input typed as <see cref="T:Spike.Text.Json.Linq.IJEnumerable`1"/>.
            </summary>
            <typeparam name="T">The source collection type.</typeparam>
            <param name="source">An <see cref="T:System.Collections.Generic.IEnumerable`1"/> of <see cref="T:Spike.Text.Json.Linq.JToken"/> that contains the source collection.</param>
            <returns>The input typed as <see cref="T:Spike.Text.Json.Linq.IJEnumerable`1"/>.</returns>
        </member>
        <member name="T:Spike.Text.Json.Linq.IJEnumerable`1">
            <summary>
            Represents a collection of <see cref="T:Spike.Text.Json.Linq.JToken"/> objects.
            </summary>
            <typeparam name="T">The type of token</typeparam>
        </member>
        <member name="P:Spike.Text.Json.Linq.IJEnumerable`1.Item(System.Object)">
            <summary>
            Gets the <see cref="T:Spike.Text.Json.Linq.IJEnumerable`1"/> with the specified key.
            </summary>
            <value></value>
        </member>
        <member name="T:Spike.Text.Json.Linq.JArray">
            <summary>
            Represents a JSON array.
            </summary>
        </member>
        <member name="T:Spike.Text.Json.Linq.JContainer">
            <summary>
            Represents a token that can contain other tokens.
            </summary>
        </member>
        <member name="T:Spike.Text.Json.Linq.JToken">
            <summary>
            Represents an abstract JSON token.
            </summary>
        </member>
        <member name="M:Spike.Text.Json.Linq.JToken.DeepEquals(Spike.Text.Json.Linq.JToken,Spike.Text.Json.Linq.JToken)">
            <summary>
            Compares the values of two tokens, including the values of all descendant tokens.
            </summary>
            <param name="t1">The first <see cref="T:Spike.Text.Json.Linq.JToken"/> to compare.</param>
            <param name="t2">The second <see cref="T:Spike.Text.Json.Linq.JToken"/> to compare.</param>
            <returns>true if the tokens are equal; otherwise false.</returns>
        </member>
        <member name="M:Spike.Text.Json.Linq.JToken.AddAfterSelf(System.Object)">
            <summary>
            Adds the specified content immediately after this token.
            </summary>
            <param name="content">A content object that contains simple content or a collection of content objects to be added after this token.</param>
        </member>
        <member name="M:Spike.Text.Json.Linq.JToken.AddBeforeSelf(System.Object)">
            <summary>
            Adds the specified content immediately before this token.
            </summary>
            <param name="content">A content object that contains simple content or a collection of content objects to be added before this token.</param>
        </member>
        <member name="M:Spike.Text.Json.Linq.JToken.Ancestors">
            <summary>
            Returns a collection of the ancestor tokens of this token.
            </summary>
            <returns>A collection of the ancestor tokens of this token.</returns>
        </member>
        <member name="M:Spike.Text.Json.Linq.JToken.AfterSelf">
            <summary>
            Returns a collection of the sibling tokens after this token, in document order.
            </summary>
            <returns>A collection of the sibling tokens after this tokens, in document order.</returns>
        </member>
        <member name="M:Spike.Text.Json.Linq.JToken.BeforeSelf">
            <summary>
            Returns a collection of the sibling tokens before this token, in document order.
            </summary>
            <returns>A collection of the sibling tokens before this token, in document order.</returns>
        </member>
        <member name="M:Spike.Text.Json.Linq.JToken.Value``1(System.Object)">
            <summary>
            Gets the <see cref="T:Spike.Text.Json.Linq.JToken"/> with the specified key converted to the specified type.
            </summary>
            <typeparam name="T">The type to convert the token to.</typeparam>
            <param name="key">The token key.</param>
            <returns>The converted token value.</returns>
        </member>
        <member name="M:Spike.Text.Json.Linq.JToken.Children">
            <summary>
            Returns a collection of the child tokens of this token, in document order.
            </summary>
            <returns>An <see cref="T:System.Collections.Generic.IEnumerable`1"/> of <see cref="T:Spike.Text.Json.Linq.JToken"/> containing the child tokens of this <see cref="T:Spike.Text.Json.Linq.JToken"/>, in document order.</returns>
        </member>
        <member name="M:Spike.Text.Json.Linq.JToken.Children``1">
            <summary>
            Returns a collection of the child tokens of this token, in document order, filtered by the specified type.
            </summary>
            <typeparam name="T">The type to filter the child tokens on.</typeparam>
            <returns>A <see cref="T:Spike.Text.Json.Linq.JEnumerable`1"/> containing the child tokens of this <see cref="T:Spike.Text.Json.Linq.JToken"/>, in document order.</returns>
        </member>
        <member name="M:Spike.Text.Json.Linq.JToken.Values``1">
            <summary>
            Returns a collection of the child values of this token, in document order.
            </summary>
            <typeparam name="T">The type to convert the values to.</typeparam>
            <returns>A <see cref="T:System.Collections.Generic.IEnumerable`1"/> containing the child values of this <see cref="T:Spike.Text.Json.Linq.JToken"/>, in document order.</returns>
        </member>
        <member name="M:Spike.Text.Json.Linq.JToken.Remove">
            <summary>
            Removes this token from its parent.
            </summary>
        </member>
        <member name="M:Spike.Text.Json.Linq.JToken.Replace(Spike.Text.Json.Linq.JToken)">
            <summary>
            Replaces this token with the specified token.
            </summary>
            <param name="value">The value.</param>
        </member>
        <member name="M:Spike.Text.Json.Linq.JToken.WriteTo(Spike.Text.Json.JsonWriter,Spike.Text.Json.JsonConverter[])">
            <summary>
            Writes this token to a <see cref="T:Spike.Text.Json.JsonWriter"/>.
            </summary>
            <param name="writer">A <see cref="T:Spike.Text.Json.JsonWriter"/> into which this method will write.</param>
            <param name="converters">A collection of <see cref="T:Spike.Text.Json.JsonConverter"/> which will be used when writing the token.</param>
        </member>
        <member name="M:Spike.Text.Json.Linq.JToken.ToString">
            <summary>
            Returns the indented JSON for this token.
            </summary>
            <returns>
            The indented JSON for this token.
            </returns>
        </member>
        <member name="M:Spike.Text.Json.Linq.JToken.ToString(Spike.Text.Json.Formatting,Spike.Text.Json.JsonConverter[])">
            <summary>
            Returns the JSON for this token using the given formatting and converters.
            </summary>
            <param name="formatting">Indicates how the output is formatted.</param>
            <param name="converters">A collection of <see cref="T:Spike.Text.Json.JsonConverter"/> which will be used when writing the token.</param>
            <returns>The JSON for this token using the given formatting and converters.</returns>
        </member>
        <member name="M:Spike.Text.Json.Linq.JToken.op_Explicit(Spike.Text.Json.Linq.JToken)~System.Boolean">
            <summary>
            Performs an explicit conversion from <see cref="T:Spike.Text.Json.Linq.JToken"/> to <see cref="T:System.Boolean"/>.
            </summary>
            <param name="value">The value.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="M:Spike.Text.Json.Linq.JToken.op_Explicit(Spike.Text.Json.Linq.JToken)~System.DateTimeOffset">
            <summary>
            Performs an explicit conversion from <see cref="T:Spike.Text.Json.Linq.JToken"/> to <see cref="T:System.DateTimeOffset"/>.
            </summary>
            <param name="value">The value.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="M:Spike.Text.Json.Linq.JToken.op_Explicit(Spike.Text.Json.Linq.JToken)~System.Nullable{System.Boolean}">
            <summary>
            Performs an explicit conversion from <see cref="T:Spike.Text.Json.Linq.JToken"/> to <see cref="T:System.Nullable`1"/>.
            </summary>
            <param name="value">The value.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="M:Spike.Text.Json.Linq.JToken.op_Explicit(Spike.Text.Json.Linq.JToken)~System.Int64">
            <summary>
            Performs an explicit conversion from <see cref="T:Spike.Text.Json.Linq.JToken"/> to <see cref="T:System.Int64"/>.
            </summary>
            <param name="value">The value.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="M:Spike.Text.Json.Linq.JToken.op_Explicit(Spike.Text.Json.Linq.JToken)~System.Nullable{System.DateTime}">
            <summary>
            Performs an explicit conversion from <see cref="T:Spike.Text.Json.Linq.JToken"/> to <see cref="T:System.Nullable`1"/>.
            </summary>
            <param name="value">The value.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="M:Spike.Text.Json.Linq.JToken.op_Explicit(Spike.Text.Json.Linq.JToken)~System.Nullable{System.DateTimeOffset}">
            <summary>
            Performs an explicit conversion from <see cref="T:Spike.Text.Json.Linq.JToken"/> to <see cref="T:System.Nullable`1"/>.
            </summary>
            <param name="value">The value.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="M:Spike.Text.Json.Linq.JToken.op_Explicit(Spike.Text.Json.Linq.JToken)~System.Nullable{System.Decimal}">
            <summary>
            Performs an explicit conversion from <see cref="T:Spike.Text.Json.Linq.JToken"/> to <see cref="T:System.Nullable`1"/>.
            </summary>
            <param name="value">The value.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="M:Spike.Text.Json.Linq.JToken.op_Explicit(Spike.Text.Json.Linq.JToken)~System.Nullable{System.Double}">
            <summary>
            Performs an explicit conversion from <see cref="T:Spike.Text.Json.Linq.JToken"/> to <see cref="T:System.Nullable`1"/>.
            </summary>
            <param name="value">The value.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="M:Spike.Text.Json.Linq.JToken.op_Explicit(Spike.Text.Json.Linq.JToken)~System.Int32">
            <summary>
            Performs an explicit conversion from <see cref="T:Spike.Text.Json.Linq.JToken"/> to <see cref="T:System.Int32"/>.
            </summary>
            <param name="value">The value.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="M:Spike.Text.Json.Linq.JToken.op_Explicit(Spike.Text.Json.Linq.JToken)~System.Int16">
            <summary>
            Performs an explicit conversion from <see cref="T:Spike.Text.Json.Linq.JToken"/> to <see cref="T:System.Int16"/>.
            </summary>
            <param name="value">The value.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="M:Spike.Text.Json.Linq.JToken.op_Explicit(Spike.Text.Json.Linq.JToken)~System.UInt16">
            <summary>
            Performs an explicit conversion from <see cref="T:Spike.Text.Json.Linq.JToken"/> to <see cref="T:System.UInt16"/>.
            </summary>
            <param name="value">The value.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="M:Spike.Text.Json.Linq.JToken.op_Explicit(Spike.Text.Json.Linq.JToken)~System.Nullable{System.Int32}">
            <summary>
            Performs an explicit conversion from <see cref="T:Spike.Text.Json.Linq.JToken"/> to <see cref="T:System.Nullable`1"/>.
            </summary>
            <param name="value">The value.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="M:Spike.Text.Json.Linq.JToken.op_Explicit(Spike.Text.Json.Linq.JToken)~System.Nullable{System.Int16}">
            <summary>
            Performs an explicit conversion from <see cref="T:Spike.Text.Json.Linq.JToken"/> to <see cref="T:System.Nullable`1"/>.
            </summary>
            <param name="value">The value.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="M:Spike.Text.Json.Linq.JToken.op_Explicit(Spike.Text.Json.Linq.JToken)~System.Nullable{System.UInt16}">
            <summary>
            Performs an explicit conversion from <see cref="T:Spike.Text.Json.Linq.JToken"/> to <see cref="T:System.Nullable`1"/>.
            </summary>
            <param name="value">The value.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="M:Spike.Text.Json.Linq.JToken.op_Explicit(Spike.Text.Json.Linq.JToken)~System.DateTime">
            <summary>
            Performs an explicit conversion from <see cref="T:Spike.Text.Json.Linq.JToken"/> to <see cref="T:System.DateTime"/>.
            </summary>
            <param name="value">The value.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="M:Spike.Text.Json.Linq.JToken.op_Explicit(Spike.Text.Json.Linq.JToken)~System.Nullable{System.Int64}">
            <summary>
            Performs an explicit conversion from <see cref="T:Spike.Text.Json.Linq.JToken"/> to <see cref="T:System.Nullable`1"/>.
            </summary>
            <param name="value">The value.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="M:Spike.Text.Json.Linq.JToken.op_Explicit(Spike.Text.Json.Linq.JToken)~System.Nullable{System.Single}">
            <summary>
            Performs an explicit conversion from <see cref="T:Spike.Text.Json.Linq.JToken"/> to <see cref="T:System.Nullable`1"/>.
            </summary>
            <param name="value">The value.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="M:Spike.Text.Json.Linq.JToken.op_Explicit(Spike.Text.Json.Linq.JToken)~System.Decimal">
            <summary>
            Performs an explicit conversion from <see cref="T:Spike.Text.Json.Linq.JToken"/> to <see cref="T:System.Decimal"/>.
            </summary>
            <param name="value">The value.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="M:Spike.Text.Json.Linq.JToken.op_Explicit(Spike.Text.Json.Linq.JToken)~System.Nullable{System.UInt32}">
            <summary>
            Performs an explicit conversion from <see cref="T:Spike.Text.Json.Linq.JToken"/> to <see cref="T:System.Nullable`1"/>.
            </summary>
            <param name="value">The value.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="M:Spike.Text.Json.Linq.JToken.op_Explicit(Spike.Text.Json.Linq.JToken)~System.Nullable{System.UInt64}">
            <summary>
            Performs an explicit conversion from <see cref="T:Spike.Text.Json.Linq.JToken"/> to <see cref="T:System.Nullable`1"/>.
            </summary>
            <param name="value">The value.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="M:Spike.Text.Json.Linq.JToken.op_Explicit(Spike.Text.Json.Linq.JToken)~System.Double">
            <summary>
            Performs an explicit conversion from <see cref="T:Spike.Text.Json.Linq.JToken"/> to <see cref="T:System.Double"/>.
            </summary>
            <param name="value">The value.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="M:Spike.Text.Json.Linq.JToken.op_Explicit(Spike.Text.Json.Linq.JToken)~System.Single">
            <summary>
            Performs an explicit conversion from <see cref="T:Spike.Text.Json.Linq.JToken"/> to <see cref="T:System.Single"/>.
            </summary>
            <param name="value">The value.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="M:Spike.Text.Json.Linq.JToken.op_Explicit(Spike.Text.Json.Linq.JToken)~System.String">
            <summary>
            Performs an explicit conversion from <see cref="T:Spike.Text.Json.Linq.JToken"/> to <see cref="T:System.String"/>.
            </summary>
            <param name="value">The value.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="M:Spike.Text.Json.Linq.JToken.op_Explicit(Spike.Text.Json.Linq.JToken)~System.UInt32">
            <summary>
            Performs an explicit conversion from <see cref="T:Spike.Text.Json.Linq.JToken"/> to <see cref="T:System.UInt32"/>.
            </summary>
            <param name="value">The value.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="M:Spike.Text.Json.Linq.JToken.op_Explicit(Spike.Text.Json.Linq.JToken)~System.UInt64">
            <summary>
            Performs an explicit conversion from <see cref="T:Spike.Text.Json.Linq.JToken"/> to <see cref="T:System.UInt64"/>.
            </summary>
            <param name="value">The value.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="M:Spike.Text.Json.Linq.JToken.op_Explicit(Spike.Text.Json.Linq.JToken)~System.Byte[]">
            <summary>
            Performs an explicit conversion from <see cref="T:Spike.Text.Json.Linq.JToken"/> to <see cref="T:System.Byte[]"/>.
            </summary>
            <param name="value">The value.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="M:Spike.Text.Json.Linq.JToken.op_Implicit(System.Boolean)~Spike.Text.Json.Linq.JToken">
            <summary>
            Performs an implicit conversion from <see cref="T:System.Boolean"/> to <see cref="T:Spike.Text.Json.Linq.JToken"/>.
            </summary>
            <param name="value">The value to create a <see cref="T:Spike.Text.Json.Linq.JValue"/> from.</param>
            <returns>The <see cref="T:Spike.Text.Json.Linq.JValue"/> initialized with the specified value.</returns>
        </member>
        <member name="M:Spike.Text.Json.Linq.JToken.op_Implicit(System.DateTimeOffset)~Spike.Text.Json.Linq.JToken">
            <summary>
            Performs an implicit conversion from <see cref="T:System.DateTimeOffset"/> to <see cref="T:Spike.Text.Json.Linq.JToken"/>.
            </summary>
            <param name="value">The value to create a <see cref="T:Spike.Text.Json.Linq.JValue"/> from.</param>
            <returns>The <see cref="T:Spike.Text.Json.Linq.JValue"/> initialized with the specified value.</returns>
        </member>
        <member name="M:Spike.Text.Json.Linq.JToken.op_Implicit(System.Nullable{System.Boolean})~Spike.Text.Json.Linq.JToken">
            <summary>
            Performs an implicit conversion from <see cref="T:System.Nullable`1"/> to <see cref="T:Spike.Text.Json.Linq.JToken"/>.
            </summary>
            <param name="value">The value to create a <see cref="T:Spike.Text.Json.Linq.JValue"/> from.</param>
            <returns>The <see cref="T:Spike.Text.Json.Linq.JValue"/> initialized with the specified value.</returns>
        </member>
        <member name="M:Spike.Text.Json.Linq.JToken.op_Implicit(System.Int64)~Spike.Text.Json.Linq.JToken">
            <summary>
            Performs an implicit conversion from <see cref="T:System.Nullable`1"/> to <see cref="T:Spike.Text.Json.Linq.JToken"/>.
            </summary>
            <param name="value">The value to create a <see cref="T:Spike.Text.Json.Linq.JValue"/> from.</param>
            <returns>The <see cref="T:Spike.Text.Json.Linq.JValue"/> initialized with the specified value.</returns>
        </member>
        <member name="M:Spike.Text.Json.Linq.JToken.op_Implicit(System.Nullable{System.DateTime})~Spike.Text.Json.Linq.JToken">
            <summary>
            Performs an implicit conversion from <see cref="T:System.Nullable`1"/> to <see cref="T:Spike.Text.Json.Linq.JToken"/>.
            </summary>
            <param name="value">The value to create a <see cref="T:Spike.Text.Json.Linq.JValue"/> from.</param>
            <returns>The <see cref="T:Spike.Text.Json.Linq.JValue"/> initialized with the specified value.</returns>
        </member>
        <member name="M:Spike.Text.Json.Linq.JToken.op_Implicit(System.Nullable{System.DateTimeOffset})~Spike.Text.Json.Linq.JToken">
            <summary>
            Performs an implicit conversion from <see cref="T:System.Nullable`1"/> to <see cref="T:Spike.Text.Json.Linq.JToken"/>.
            </summary>
            <param name="value">The value to create a <see cref="T:Spike.Text.Json.Linq.JValue"/> from.</param>
            <returns>The <see cref="T:Spike.Text.Json.Linq.JValue"/> initialized with the specified value.</returns>
        </member>
        <member name="M:Spike.Text.Json.Linq.JToken.op_Implicit(System.Nullable{System.Decimal})~Spike.Text.Json.Linq.JToken">
            <summary>
            Performs an implicit conversion from <see cref="T:System.Nullable`1"/> to <see cref="T:Spike.Text.Json.Linq.JToken"/>.
            </summary>
            <param name="value">The value to create a <see cref="T:Spike.Text.Json.Linq.JValue"/> from.</param>
            <returns>The <see cref="T:Spike.Text.Json.Linq.JValue"/> initialized with the specified value.</returns>
        </member>
        <member name="M:Spike.Text.Json.Linq.JToken.op_Implicit(System.Nullable{System.Double})~Spike.Text.Json.Linq.JToken">
            <summary>
            Performs an implicit conversion from <see cref="T:System.Nullable`1"/> to <see cref="T:Spike.Text.Json.Linq.JToken"/>.
            </summary>
            <param name="value">The value to create a <see cref="T:Spike.Text.Json.Linq.JValue"/> from.</param>
            <returns>The <see cref="T:Spike.Text.Json.Linq.JValue"/> initialized with the specified value.</returns>
        </member>
        <member name="M:Spike.Text.Json.Linq.JToken.op_Implicit(System.Int16)~Spike.Text.Json.Linq.JToken">
            <summary>
            Performs an implicit conversion from <see cref="T:System.Int16"/> to <see cref="T:Spike.Text.Json.Linq.JToken"/>.
            </summary>
            <param name="value">The value to create a <see cref="T:Spike.Text.Json.Linq.JValue"/> from.</param>
            <returns>The <see cref="T:Spike.Text.Json.Linq.JValue"/> initialized with the specified value.</returns>
        </member>
        <member name="M:Spike.Text.Json.Linq.JToken.op_Implicit(System.UInt16)~Spike.Text.Json.Linq.JToken">
            <summary>
            Performs an implicit conversion from <see cref="T:System.UInt16"/> to <see cref="T:Spike.Text.Json.Linq.JToken"/>.
            </summary>
            <param name="value">The value to create a <see cref="T:Spike.Text.Json.Linq.JValue"/> from.</param>
            <returns>The <see cref="T:Spike.Text.Json.Linq.JValue"/> initialized with the specified value.</returns>
        </member>
        <member name="M:Spike.Text.Json.Linq.JToken.op_Implicit(System.Int32)~Spike.Text.Json.Linq.JToken">
            <summary>
            Performs an implicit conversion from <see cref="T:System.Int32"/> to <see cref="T:Spike.Text.Json.Linq.JToken"/>.
            </summary>
            <param name="value">The value to create a <see cref="T:Spike.Text.Json.Linq.JValue"/> from.</param>
            <returns>The <see cref="T:Spike.Text.Json.Linq.JValue"/> initialized with the specified value.</returns>
        </member>
        <member name="M:Spike.Text.Json.Linq.JToken.op_Implicit(System.Nullable{System.Int32})~Spike.Text.Json.Linq.JToken">
            <summary>
            Performs an implicit conversion from <see cref="T:System.Nullable`1"/> to <see cref="T:Spike.Text.Json.Linq.JToken"/>.
            </summary>
            <param name="value">The value to create a <see cref="T:Spike.Text.Json.Linq.JValue"/> from.</param>
            <returns>The <see cref="T:Spike.Text.Json.Linq.JValue"/> initialized with the specified value.</returns>
        </member>
        <member name="M:Spike.Text.Json.Linq.JToken.op_Implicit(System.DateTime)~Spike.Text.Json.Linq.JToken">
            <summary>
            Performs an implicit conversion from <see cref="T:System.DateTime"/> to <see cref="T:Spike.Text.Json.Linq.JToken"/>.
            </summary>
            <param name="value">The value to create a <see cref="T:Spike.Text.Json.Linq.JValue"/> from.</param>
            <returns>The <see cref="T:Spike.Text.Json.Linq.JValue"/> initialized with the specified value.</returns>
        </member>
        <member name="M:Spike.Text.Json.Linq.JToken.op_Implicit(System.Nullable{System.Int64})~Spike.Text.Json.Linq.JToken">
            <summary>
            Performs an implicit conversion from <see cref="T:System.Nullable`1"/> to <see cref="T:Spike.Text.Json.Linq.JToken"/>.
            </summary>
            <param name="value">The value to create a <see cref="T:Spike.Text.Json.Linq.JValue"/> from.</param>
            <returns>The <see cref="T:Spike.Text.Json.Linq.JValue"/> initialized with the specified value.</returns>
        </member>
        <member name="M:Spike.Text.Json.Linq.JToken.op_Implicit(System.Nullable{System.Single})~Spike.Text.Json.Linq.JToken">
            <summary>
            Performs an implicit conversion from <see cref="T:System.Nullable`1"/> to <see cref="T:Spike.Text.Json.Linq.JToken"/>.
            </summary>
            <param name="value">The value to create a <see cref="T:Spike.Text.Json.Linq.JValue"/> from.</param>
            <returns>The <see cref="T:Spike.Text.Json.Linq.JValue"/> initialized with the specified value.</returns>
        </member>
        <member name="M:Spike.Text.Json.Linq.JToken.op_Implicit(System.Decimal)~Spike.Text.Json.Linq.JToken">
            <summary>
            Performs an implicit conversion from <see cref="T:System.Decimal"/> to <see cref="T:Spike.Text.Json.Linq.JToken"/>.
            </summary>
            <param name="value">The value to create a <see cref="T:Spike.Text.Json.Linq.JValue"/> from.</param>
            <returns>The <see cref="T:Spike.Text.Json.Linq.JValue"/> initialized with the specified value.</returns>
        </member>
        <member name="M:Spike.Text.Json.Linq.JToken.op_Implicit(System.Nullable{System.Int16})~Spike.Text.Json.Linq.JToken">
            <summary>
            Performs an implicit conversion from <see cref="T:System.Nullable`1"/> to <see cref="T:Spike.Text.Json.Linq.JToken"/>.
            </summary>
            <param name="value">The value to create a <see cref="T:Spike.Text.Json.Linq.JValue"/> from.</param>
            <returns>The <see cref="T:Spike.Text.Json.Linq.JValue"/> initialized with the specified value.</returns>
        </member>
        <member name="M:Spike.Text.Json.Linq.JToken.op_Implicit(System.Nullable{System.UInt16})~Spike.Text.Json.Linq.JToken">
            <summary>
            Performs an implicit conversion from <see cref="T:System.Nullable`1"/> to <see cref="T:Spike.Text.Json.Linq.JToken"/>.
            </summary>
            <param name="value">The value to create a <see cref="T:Spike.Text.Json.Linq.JValue"/> from.</param>
            <returns>The <see cref="T:Spike.Text.Json.Linq.JValue"/> initialized with the specified value.</returns>
        </member>
        <member name="M:Spike.Text.Json.Linq.JToken.op_Implicit(System.Nullable{System.UInt32})~Spike.Text.Json.Linq.JToken">
            <summary>
            Performs an implicit conversion from <see cref="T:System.Nullable`1"/> to <see cref="T:Spike.Text.Json.Linq.JToken"/>.
            </summary>
            <param name="value">The value to create a <see cref="T:Spike.Text.Json.Linq.JValue"/> from.</param>
            <returns>The <see cref="T:Spike.Text.Json.Linq.JValue"/> initialized with the specified value.</returns>
        </member>
        <member name="M:Spike.Text.Json.Linq.JToken.op_Implicit(System.Nullable{System.UInt64})~Spike.Text.Json.Linq.JToken">
            <summary>
            Performs an implicit conversion from <see cref="T:System.Nullable`1"/> to <see cref="T:Spike.Text.Json.Linq.JToken"/>.
            </summary>
            <param name="value">The value to create a <see cref="T:Spike.Text.Json.Linq.JValue"/> from.</param>
            <returns>The <see cref="T:Spike.Text.Json.Linq.JValue"/> initialized with the specified value.</returns>
        </member>
        <member name="M:Spike.Text.Json.Linq.JToken.op_Implicit(System.Double)~Spike.Text.Json.Linq.JToken">
            <summary>
            Performs an implicit conversion from <see cref="T:System.Double"/> to <see cref="T:Spike.Text.Json.Linq.JToken"/>.
            </summary>
            <param name="value">The value to create a <see cref="T:Spike.Text.Json.Linq.JValue"/> from.</param>
            <returns>The <see cref="T:Spike.Text.Json.Linq.JValue"/> initialized with the specified value.</returns>
        </member>
        <member name="M:Spike.Text.Json.Linq.JToken.op_Implicit(System.Single)~Spike.Text.Json.Linq.JToken">
            <summary>
            Performs an implicit conversion from <see cref="T:System.Single"/> to <see cref="T:Spike.Text.Json.Linq.JToken"/>.
            </summary>
            <param name="value">The value to create a <see cref="T:Spike.Text.Json.Linq.JValue"/> from.</param>
            <returns>The <see cref="T:Spike.Text.Json.Linq.JValue"/> initialized with the specified value.</returns>
        </member>
        <member name="M:Spike.Text.Json.Linq.JToken.op_Implicit(System.String)~Spike.Text.Json.Linq.JToken">
            <summary>
            Performs an implicit conversion from <see cref="T:System.String"/> to <see cref="T:Spike.Text.Json.Linq.JToken"/>.
            </summary>
            <param name="value">The value to create a <see cref="T:Spike.Text.Json.Linq.JValue"/> from.</param>
            <returns>The <see cref="T:Spike.Text.Json.Linq.JValue"/> initialized with the specified value.</returns>
        </member>
        <member name="M:Spike.Text.Json.Linq.JToken.op_Implicit(System.UInt32)~Spike.Text.Json.Linq.JToken">
            <summary>
            Performs an implicit conversion from <see cref="T:System.UInt32"/> to <see cref="T:Spike.Text.Json.Linq.JToken"/>.
            </summary>
            <param name="value">The value to create a <see cref="T:Spike.Text.Json.Linq.JValue"/> from.</param>
            <returns>The <see cref="T:Spike.Text.Json.Linq.JValue"/> initialized with the specified value.</returns>
        </member>
        <member name="M:Spike.Text.Json.Linq.JToken.op_Implicit(System.UInt64)~Spike.Text.Json.Linq.JToken">
            <summary>
            Performs an implicit conversion from <see cref="T:System.UInt64"/> to <see cref="T:Spike.Text.Json.Linq.JToken"/>.
            </summary>
            <param name="value">The value to create a <see cref="T:Spike.Text.Json.Linq.JValue"/> from.</param>
            <returns>The <see cref="T:Spike.Text.Json.Linq.JValue"/> initialized with the specified value.</returns>
        </member>
        <member name="M:Spike.Text.Json.Linq.JToken.op_Implicit(System.Byte[])~Spike.Text.Json.Linq.JToken">
            <summary>
            Performs an implicit conversion from <see cref="T:System.Byte[]"/> to <see cref="T:Spike.Text.Json.Linq.JToken"/>.
            </summary>
            <param name="value">The value to create a <see cref="T:Spike.Text.Json.Linq.JValue"/> from.</param>
            <returns>The <see cref="T:Spike.Text.Json.Linq.JValue"/> initialized with the specified value.</returns>
        </member>
        <member name="M:Spike.Text.Json.Linq.JToken.CreateReader">
            <summary>
            Creates an <see cref="T:Spike.Text.Json.JsonReader"/> for this token.
            </summary>
            <returns>An <see cref="T:Spike.Text.Json.JsonReader"/> that can be used to read this token and its descendants.</returns>
        </member>
        <member name="M:Spike.Text.Json.Linq.JToken.FromObject(System.Object)">
            <summary>
            Creates a <see cref="T:Spike.Text.Json.Linq.JToken"/> from an object.
            </summary>
            <param name="o">The object that will be used to create <see cref="T:Spike.Text.Json.Linq.JToken"/>.</param>
            <returns>A <see cref="T:Spike.Text.Json.Linq.JToken"/> with the value of the specified object</returns>
        </member>
        <member name="M:Spike.Text.Json.Linq.JToken.FromObject(System.Object,Spike.Text.Json.JsonSerializer)">
            <summary>
            Creates a <see cref="T:Spike.Text.Json.Linq.JToken"/> from an object using the specified <see cref="T:Spike.Text.Json.JsonSerializer"/>.
            </summary>
            <param name="o">The object that will be used to create <see cref="T:Spike.Text.Json.Linq.JToken"/>.</param>
            <param name="jsonSerializer">The <see cref="T:Spike.Text.Json.JsonSerializer"/> that will be used when reading the object.</param>
            <returns>A <see cref="T:Spike.Text.Json.Linq.JToken"/> with the value of the specified object</returns>
        </member>
        <member name="M:Spike.Text.Json.Linq.JToken.ToObject``1">
            <summary>
            Creates the specified .NET type from the <see cref="T:Spike.Text.Json.Linq.JToken"/>.
            </summary>
            <returns>The new object created from the JSON value.</returns>
        </member>
        <member name="M:Spike.Text.Json.Linq.JToken.ToObject``1(Spike.Text.Json.JsonSerializer)">
            <summary>
            Creates the specified .NET type from the <see cref="T:Spike.Text.Json.Linq.JToken"/> using the specified <see cref="T:Spike.Text.Json.JsonSerializer"/>.
            </summary>
            <param name="jsonSerializer">The <see cref="T:Spike.Text.Json.JsonSerializer"/> that will be used when creating the object.</param>
            <returns>The new object created from the JSON value.</returns>
        </member>
        <member name="M:Spike.Text.Json.Linq.JToken.ReadFrom(Spike.Text.Json.JsonReader)">
            <summary>
            Creates a <see cref="T:Spike.Text.Json.Linq.JToken"/> from a <see cref="T:Spike.Text.Json.JsonReader"/>.
            </summary>
            <param name="reader">An <see cref="T:Spike.Text.Json.JsonReader"/> positioned at the token to read into this <see cref="T:Spike.Text.Json.Linq.JToken"/>.</param>
            <returns>
            An <see cref="T:Spike.Text.Json.Linq.JToken"/> that contains the token and its descendant tokens
            that were read from the reader. The runtime type of the token is determined
            by the token type of the first token encountered in the reader.
            </returns>
        </member>
        <member name="M:Spike.Text.Json.Linq.JToken.Parse(System.String)">
            <summary>
            Load a <see cref="T:Spike.Text.Json.Linq.JToken"/> from a string that contains JSON.
            </summary>
            <param name="json">A <see cref="T:System.String"/> that contains JSON.</param>
            <returns>A <see cref="T:Spike.Text.Json.Linq.JToken"/> populated from the string that contains JSON.</returns>
        </member>
        <member name="M:Spike.Text.Json.Linq.JToken.Load(Spike.Text.Json.JsonReader)">
            <summary>
            Creates a <see cref="T:Spike.Text.Json.Linq.JToken"/> from a <see cref="T:Spike.Text.Json.JsonReader"/>.
            </summary>
            <param name="reader">An <see cref="T:Spike.Text.Json.JsonReader"/> positioned at the token to read into this <see cref="T:Spike.Text.Json.Linq.JToken"/>.</param>
            <returns>
            An <see cref="T:Spike.Text.Json.Linq.JToken"/> that contains the token and its descendant tokens
            that were read from the reader. The runtime type of the token is determined
            by the token type of the first token encountered in the reader.
            </returns>
        </member>
        <member name="M:Spike.Text.Json.Linq.JToken.SelectToken(System.String)">
            <summary>
            Selects the token that matches the object path.
            </summary>
            <param name="path">
            The object path from the current <see cref="T:Spike.Text.Json.Linq.JToken"/> to the <see cref="T:Spike.Text.Json.Linq.JToken"/>
            to be returned. This must be a string of property names or array indexes separated
            by periods, such as <code>Tables[0].DefaultView[0].Price</code> in C# or
            <code>Tables(0).DefaultView(0).Price</code> in Visual Basic.
            </param>
            <returns>The <see cref="T:Spike.Text.Json.Linq.JToken"/> that matches the object path or a null reference if no matching token is found.</returns>
        </member>
        <member name="M:Spike.Text.Json.Linq.JToken.SelectToken(System.String,System.Boolean)">
            <summary>
            Selects the token that matches the object path.
            </summary>
            <param name="path">
            The object path from the current <see cref="T:Spike.Text.Json.Linq.JToken"/> to the <see cref="T:Spike.Text.Json.Linq.JToken"/>
            to be returned. This must be a string of property names or array indexes separated
            by periods, such as <code>Tables[0].DefaultView[0].Price</code> in C# or
            <code>Tables(0).DefaultView(0).Price</code> in Visual Basic.
            </param>
            <param name="errorWhenNoMatch">A flag to indicate whether an error should be thrown if no token is found.</param>
            <returns>The <see cref="T:Spike.Text.Json.Linq.JToken"/> that matches the object path.</returns>
        </member>
        <member name="M:Spike.Text.Json.Linq.JToken.GetMetaObject(System.Linq.Expressions.Expression)">
            <summary>
            Returns the <see cref="T:System.Dynamic.DynamicMetaObject"/> responsible for binding operations performed on this object.
            </summary>
            <param name="parameter">The expression tree representation of the runtime value.</param>
            <returns>
            The <see cref="T:System.Dynamic.DynamicMetaObject"/> to bind this object.
            </returns>
        </member>
        <member name="M:Spike.Text.Json.Linq.JToken.System#Dynamic#IDynamicMetaObjectProvider#GetMetaObject(System.Linq.Expressions.Expression)">
            <summary>
            Returns the <see cref="T:System.Dynamic.DynamicMetaObject"/> responsible for binding operations performed on this object.
            </summary>
            <param name="parameter">The expression tree representation of the runtime value.</param>
            <returns>
            The <see cref="T:System.Dynamic.DynamicMetaObject"/> to bind this object.
            </returns>
        </member>
        <member name="M:Spike.Text.Json.Linq.JToken.DeepClone">
            <summary>
            Creates a new instance of the <see cref="T:Spike.Text.Json.Linq.JToken"/>. All child tokens are recursively cloned.
            </summary>
            <returns>A new instance of the <see cref="T:Spike.Text.Json.Linq.JToken"/>.</returns>
        </member>
        <member name="P:Spike.Text.Json.Linq.JToken.EqualityComparer">
            <summary>
            Gets a comparer that can compare two tokens for value equality.
            </summary>
            <value>A <see cref="T:Spike.Text.Json.Linq.JTokenEqualityComparer"/> that can compare two nodes for value equality.</value>
        </member>
        <member name="P:Spike.Text.Json.Linq.JToken.Parent">
            <summary>
            Gets or sets the parent.
            </summary>
            <value>The parent.</value>
        </member>
        <member name="P:Spike.Text.Json.Linq.JToken.Root">
            <summary>
            Gets the root <see cref="T:Spike.Text.Json.Linq.JToken"/> of this <see cref="T:Spike.Text.Json.Linq.JToken"/>.
            </summary>
            <value>The root <see cref="T:Spike.Text.Json.Linq.JToken"/> of this <see cref="T:Spike.Text.Json.Linq.JToken"/>.</value>
        </member>
        <member name="P:Spike.Text.Json.Linq.JToken.Type">
            <summary>
            Gets the node type for this <see cref="T:Spike.Text.Json.Linq.JToken"/>.
            </summary>
            <value>The type.</value>
        </member>
        <member name="P:Spike.Text.Json.Linq.JToken.HasValues">
            <summary>
            Gets a value indicating whether this token has childen tokens.
            </summary>
            <value>
            	<c>true</c> if this token has child values; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Spike.Text.Json.Linq.JToken.Next">
            <summary>
            Gets the next sibling token of this node.
            </summary>
            <value>The <see cref="T:Spike.Text.Json.Linq.JToken"/> that contains the next sibling token.</value>
        </member>
        <member name="P:Spike.Text.Json.Linq.JToken.Previous">
            <summary>
            Gets the previous sibling token of this node.
            </summary>
            <value>The <see cref="T:Spike.Text.Json.Linq.JToken"/> that contains the previous sibling token.</value>
        </member>
        <member name="P:Spike.Text.Json.Linq.JToken.Item(System.Object)">
            <summary>
            Gets the <see cref="T:Spike.Text.Json.Linq.JToken"/> with the specified key.
            </summary>
            <value>The <see cref="T:Spike.Text.Json.Linq.JToken"/> with the specified key.</value>
        </member>
        <member name="P:Spike.Text.Json.Linq.JToken.First">
            <summary>
            Get the first child token of this token.
            </summary>
            <value>A <see cref="T:Spike.Text.Json.Linq.JToken"/> containing the first child token of the <see cref="T:Spike.Text.Json.Linq.JToken"/>.</value>
        </member>
        <member name="P:Spike.Text.Json.Linq.JToken.Last">
            <summary>
            Get the last child token of this token.
            </summary>
            <value>A <see cref="T:Spike.Text.Json.Linq.JToken"/> containing the last child token of the <see cref="T:Spike.Text.Json.Linq.JToken"/>.</value>
        </member>
        <member name="M:Spike.Text.Json.Linq.JContainer.OnAddingNew(System.ComponentModel.AddingNewEventArgs)">
            <summary>
            Raises the <see cref="E:Spike.Text.Json.Linq.JContainer.AddingNew"/> event.
            </summary>
            <param name="e">The <see cref="T:System.ComponentModel.AddingNewEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Spike.Text.Json.Linq.JContainer.OnListChanged(System.ComponentModel.ListChangedEventArgs)">
            <summary>
            Raises the <see cref="E:Spike.Text.Json.Linq.JContainer.ListChanged"/> event.
            </summary>
            <param name="e">The <see cref="T:System.ComponentModel.ListChangedEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Spike.Text.Json.Linq.JContainer.OnCollectionChanged(System.Collections.Specialized.NotifyCollectionChangedEventArgs)">
            <summary>
            Raises the <see cref="E:Spike.Text.Json.Linq.JContainer.CollectionChanged"/> event.
            </summary>
            <param name="e">The <see cref="T:System.Collections.Specialized.NotifyCollectionChangedEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Spike.Text.Json.Linq.JContainer.Children">
            <summary>
            Returns a collection of the child tokens of this token, in document order.
            </summary>
            <returns>
            An <see cref="T:System.Collections.Generic.IEnumerable`1"/> of <see cref="T:Spike.Text.Json.Linq.JToken"/> containing the child tokens of this <see cref="T:Spike.Text.Json.Linq.JToken"/>, in document order.
            </returns>
        </member>
        <member name="M:Spike.Text.Json.Linq.JContainer.Values``1">
            <summary>
            Returns a collection of the child values of this token, in document order.
            </summary>
            <typeparam name="T">The type to convert the values to.</typeparam>
            <returns>
            A <see cref="T:System.Collections.Generic.IEnumerable`1"/> containing the child values of this <see cref="T:Spike.Text.Json.Linq.JToken"/>, in document order.
            </returns>
        </member>
        <member name="M:Spike.Text.Json.Linq.JContainer.Descendants">
            <summary>
            Returns a collection of the descendant tokens for this token in document order.
            </summary>
            <returns>An <see cref="T:System.Collections.Generic.IEnumerable`1"/> containing the descendant tokens of the <see cref="T:Spike.Text.Json.Linq.JToken"/>.</returns>
        </member>
        <member name="M:Spike.Text.Json.Linq.JContainer.Add(System.Object)">
            <summary>
            Adds the specified content as children of this <see cref="T:Spike.Text.Json.Linq.JToken"/>.
            </summary>
            <param name="content">The content to be added.</param>
        </member>
        <member name="M:Spike.Text.Json.Linq.JContainer.AddFirst(System.Object)">
            <summary>
            Adds the specified content as the first children of this <see cref="T:Spike.Text.Json.Linq.JToken"/>.
            </summary>
            <param name="content">The content to be added.</param>
        </member>
        <member name="M:Spike.Text.Json.Linq.JContainer.CreateWriter">
            <summary>
            Creates an <see cref="T:Spike.Text.Json.JsonWriter"/> that can be used to add tokens to the <see cref="T:Spike.Text.Json.Linq.JToken"/>.
            </summary>
            <returns>An <see cref="T:Spike.Text.Json.JsonWriter"/> that is ready to have content written to it.</returns>
        </member>
        <member name="M:Spike.Text.Json.Linq.JContainer.ReplaceAll(System.Object)">
            <summary>
            Replaces the children nodes of this token with the specified content.
            </summary>
            <param name="content">The content.</param>
        </member>
        <member name="M:Spike.Text.Json.Linq.JContainer.RemoveAll">
            <summary>
            Removes the child nodes from this token.
            </summary>
        </member>
        <member name="E:Spike.Text.Json.Linq.JContainer.ListChanged">
            <summary>
            Occurs when the list changes or an item in the list changes.
            </summary>
        </member>
        <member name="E:Spike.Text.Json.Linq.JContainer.AddingNew">
            <summary>
            Occurs before an item is added to the collection.
            </summary>
        </member>
        <member name="E:Spike.Text.Json.Linq.JContainer.CollectionChanged">
            <summary>
            Occurs when the items list of the collection has changed, or the collection is reset.
            </summary>
        </member>
        <member name="P:Spike.Text.Json.Linq.JContainer.ChildrenTokens">
            <summary>
            Gets the container's children tokens.
            </summary>
            <value>The container's children tokens.</value>
        </member>
        <member name="P:Spike.Text.Json.Linq.JContainer.HasValues">
            <summary>
            Gets a value indicating whether this token has childen tokens.
            </summary>
            <value>
            	<c>true</c> if this token has child values; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Spike.Text.Json.Linq.JContainer.First">
            <summary>
            Get the first child token of this token.
            </summary>
            <value>
            A <see cref="T:Spike.Text.Json.Linq.JToken"/> containing the first child token of the <see cref="T:Spike.Text.Json.Linq.JToken"/>.
            </value>
        </member>
        <member name="P:Spike.Text.Json.Linq.JContainer.Last">
            <summary>
            Get the last child token of this token.
            </summary>
            <value>
            A <see cref="T:Spike.Text.Json.Linq.JToken"/> containing the last child token of the <see cref="T:Spike.Text.Json.Linq.JToken"/>.
            </value>
        </member>
        <member name="P:Spike.Text.Json.Linq.JContainer.Count">
            <summary>
            Gets the count of child JSON tokens.
            </summary>
            <value>The count of child JSON tokens</value>
        </member>
        <member name="M:Spike.Text.Json.Linq.JArray.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Spike.Text.Json.Linq.JArray"/> class.
            </summary>
        </member>
        <member name="M:Spike.Text.Json.Linq.JArray.#ctor(Spike.Text.Json.Linq.JArray)">
            <summary>
            Initializes a new instance of the <see cref="T:Spike.Text.Json.Linq.JArray"/> class from another <see cref="T:Spike.Text.Json.Linq.JArray"/> object.
            </summary>
            <param name="other">A <see cref="T:Spike.Text.Json.Linq.JArray"/> object to copy from.</param>
        </member>
        <member name="M:Spike.Text.Json.Linq.JArray.#ctor(System.Object[])">
            <summary>
            Initializes a new instance of the <see cref="T:Spike.Text.Json.Linq.JArray"/> class with the specified content.
            </summary>
            <param name="content">The contents of the array.</param>
        </member>
        <member name="M:Spike.Text.Json.Linq.JArray.#ctor(System.Object)">
            <summary>
            Initializes a new instance of the <see cref="T:Spike.Text.Json.Linq.JArray"/> class with the specified content.
            </summary>
            <param name="content">The contents of the array.</param>
        </member>
        <member name="M:Spike.Text.Json.Linq.JArray.Load(Spike.Text.Json.JsonReader)">
            <summary>
            Loads an <see cref="T:Spike.Text.Json.Linq.JArray"/> from a <see cref="T:Spike.Text.Json.JsonReader"/>. 
            </summary>
            <param name="reader">A <see cref="T:Spike.Text.Json.JsonReader"/> that will be read for the content of the <see cref="T:Spike.Text.Json.Linq.JArray"/>.</param>
            <returns>A <see cref="T:Spike.Text.Json.Linq.JArray"/> that contains the JSON that was read from the specified <see cref="T:Spike.Text.Json.JsonReader"/>.</returns>
        </member>
        <member name="M:Spike.Text.Json.Linq.JArray.Parse(System.String)">
            <summary>
            Load a <see cref="T:Spike.Text.Json.Linq.JArray"/> from a string that contains JSON.
            </summary>
            <param name="json">A <see cref="T:System.String"/> that contains JSON.</param>
            <returns>A <see cref="T:Spike.Text.Json.Linq.JArray"/> populated from the string that contains JSON.</returns>
        </member>
        <member name="M:Spike.Text.Json.Linq.JArray.FromObject(System.Object)">
            <summary>
            Creates a <see cref="T:Spike.Text.Json.Linq.JArray"/> from an object.
            </summary>
            <param name="o">The object that will be used to create <see cref="T:Spike.Text.Json.Linq.JArray"/>.</param>
            <returns>A <see cref="T:Spike.Text.Json.Linq.JArray"/> with the values of the specified object</returns>
        </member>
        <member name="M:Spike.Text.Json.Linq.JArray.FromObject(System.Object,Spike.Text.Json.JsonSerializer)">
            <summary>
            Creates a <see cref="T:Spike.Text.Json.Linq.JArray"/> from an object.
            </summary>
            <param name="o">The object that will be used to create <see cref="T:Spike.Text.Json.Linq.JArray"/>.</param>
            <param name="jsonSerializer">The <see cref="T:Spike.Text.Json.JsonSerializer"/> that will be used to read the object.</param>
            <returns>A <see cref="T:Spike.Text.Json.Linq.JArray"/> with the values of the specified object</returns>
        </member>
        <member name="M:Spike.Text.Json.Linq.JArray.WriteTo(Spike.Text.Json.JsonWriter,Spike.Text.Json.JsonConverter[])">
            <summary>
            Writes this token to a <see cref="T:Spike.Text.Json.JsonWriter"/>.
            </summary>
            <param name="writer">A <see cref="T:Spike.Text.Json.JsonWriter"/> into which this method will write.</param>
            <param name="converters">A collection of <see cref="T:Spike.Text.Json.JsonConverter"/> which will be used when writing the token.</param>
        </member>
        <member name="M:Spike.Text.Json.Linq.JArray.IndexOf(Spike.Text.Json.Linq.JToken)">
            <summary>
            Determines the index of a specific item in the <see cref="T:System.Collections.Generic.IList`1"/>.
            </summary>
            <param name="item">The object to locate in the <see cref="T:System.Collections.Generic.IList`1"/>.</param>
            <returns>
            The index of <paramref name="item"/> if found in the list; otherwise, -1.
            </returns>
        </member>
        <member name="M:Spike.Text.Json.Linq.JArray.Insert(System.Int32,Spike.Text.Json.Linq.JToken)">
            <summary>
            Inserts an item to the <see cref="T:System.Collections.Generic.IList`1"/> at the specified index.
            </summary>
            <param name="index">The zero-based index at which <paramref name="item"/> should be inserted.</param>
            <param name="item">The object to insert into the <see cref="T:System.Collections.Generic.IList`1"/>.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">
            	<paramref name="index"/> is not a valid index in the <see cref="T:System.Collections.Generic.IList`1"/>.</exception>
            <exception cref="T:System.NotSupportedException">The <see cref="T:System.Collections.Generic.IList`1"/> is read-only.</exception>
        </member>
        <member name="M:Spike.Text.Json.Linq.JArray.RemoveAt(System.Int32)">
            <summary>
            Removes the <see cref="T:System.Collections.Generic.IList`1"/> item at the specified index.
            </summary>
            <param name="index">The zero-based index of the item to remove.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">
            	<paramref name="index"/> is not a valid index in the <see cref="T:System.Collections.Generic.IList`1"/>.</exception>
            <exception cref="T:System.NotSupportedException">The <see cref="T:System.Collections.Generic.IList`1"/> is read-only.</exception>
        </member>
        <member name="M:Spike.Text.Json.Linq.JArray.Add(Spike.Text.Json.Linq.JToken)">
            <summary>
            Adds an item to the <see cref="T:System.Collections.Generic.ICollection`1"/>.
            </summary>
            <param name="item">The object to add to the <see cref="T:System.Collections.Generic.ICollection`1"/>.</param>
            <exception cref="T:System.NotSupportedException">The <see cref="T:System.Collections.Generic.ICollection`1"/> is read-only.</exception>
        </member>
        <member name="M:Spike.Text.Json.Linq.JArray.Clear">
            <summary>
            Removes all items from the <see cref="T:System.Collections.Generic.ICollection`1"/>.
            </summary>
            <exception cref="T:System.NotSupportedException">The <see cref="T:System.Collections.Generic.ICollection`1"/> is read-only. </exception>
        </member>
        <member name="M:Spike.Text.Json.Linq.JArray.Contains(Spike.Text.Json.Linq.JToken)">
            <summary>
            Determines whether the <see cref="T:System.Collections.Generic.ICollection`1"/> contains a specific value.
            </summary>
            <param name="item">The object to locate in the <see cref="T:System.Collections.Generic.ICollection`1"/>.</param>
            <returns>
            true if <paramref name="item"/> is found in the <see cref="T:System.Collections.Generic.ICollection`1"/>; otherwise, false.
            </returns>
        </member>
        <member name="M:Spike.Text.Json.Linq.JArray.Remove(Spike.Text.Json.Linq.JToken)">
            <summary>
            Removes the first occurrence of a specific object from the <see cref="T:System.Collections.Generic.ICollection`1"/>.
            </summary>
            <param name="item">The object to remove from the <see cref="T:System.Collections.Generic.ICollection`1"/>.</param>
            <returns>
            true if <paramref name="item"/> was successfully removed from the <see cref="T:System.Collections.Generic.ICollection`1"/>; otherwise, false. This method also returns false if <paramref name="item"/> is not found in the original <see cref="T:System.Collections.Generic.ICollection`1"/>.
            </returns>
            <exception cref="T:System.NotSupportedException">The <see cref="T:System.Collections.Generic.ICollection`1"/> is read-only.</exception>
        </member>
        <member name="P:Spike.Text.Json.Linq.JArray.ChildrenTokens">
            <summary>
            Gets the container's children tokens.
            </summary>
            <value>The container's children tokens.</value>
        </member>
        <member name="P:Spike.Text.Json.Linq.JArray.Type">
            <summary>
            Gets the node type for this <see cref="T:Spike.Text.Json.Linq.JToken"/>.
            </summary>
            <value>The type.</value>
        </member>
        <member name="P:Spike.Text.Json.Linq.JArray.Item(System.Object)">
            <summary>
            Gets the <see cref="T:Spike.Text.Json.Linq.JToken"/> with the specified key.
            </summary>
            <value>The <see cref="T:Spike.Text.Json.Linq.JToken"/> with the specified key.</value>
        </member>
        <member name="P:Spike.Text.Json.Linq.JArray.Item(System.Int32)">
            <summary>
            Gets or sets the <see cref="T:Spike.Text.Json.Linq.JToken"/> at the specified index.
            </summary>
            <value></value>
        </member>
        <member name="T:Spike.Text.Json.Linq.JConstructor">
            <summary>
            Represents a JSON constructor.
            </summary>
        </member>
        <member name="M:Spike.Text.Json.Linq.JConstructor.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Spike.Text.Json.Linq.JConstructor"/> class.
            </summary>
        </member>
        <member name="M:Spike.Text.Json.Linq.JConstructor.#ctor(Spike.Text.Json.Linq.JConstructor)">
            <summary>
            Initializes a new instance of the <see cref="T:Spike.Text.Json.Linq.JConstructor"/> class from another <see cref="T:Spike.Text.Json.Linq.JConstructor"/> object.
            </summary>
            <param name="other">A <see cref="T:Spike.Text.Json.Linq.JConstructor"/> object to copy from.</param>
        </member>
        <member name="M:Spike.Text.Json.Linq.JConstructor.#ctor(System.String,System.Object[])">
            <summary>
            Initializes a new instance of the <see cref="T:Spike.Text.Json.Linq.JConstructor"/> class with the specified name and content.
            </summary>
            <param name="name">The constructor name.</param>
            <param name="content">The contents of the constructor.</param>
        </member>
        <member name="M:Spike.Text.Json.Linq.JConstructor.#ctor(System.String,System.Object)">
            <summary>
            Initializes a new instance of the <see cref="T:Spike.Text.Json.Linq.JConstructor"/> class with the specified name and content.
            </summary>
            <param name="name">The constructor name.</param>
            <param name="content">The contents of the constructor.</param>
        </member>
        <member name="M:Spike.Text.Json.Linq.JConstructor.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Spike.Text.Json.Linq.JConstructor"/> class with the specified name.
            </summary>
            <param name="name">The constructor name.</param>
        </member>
        <member name="M:Spike.Text.Json.Linq.JConstructor.WriteTo(Spike.Text.Json.JsonWriter,Spike.Text.Json.JsonConverter[])">
            <summary>
            Writes this token to a <see cref="T:Spike.Text.Json.JsonWriter"/>.
            </summary>
            <param name="writer">A <see cref="T:Spike.Text.Json.JsonWriter"/> into which this method will write.</param>
            <param name="converters">A collection of <see cref="T:Spike.Text.Json.JsonConverter"/> which will be used when writing the token.</param>
        </member>
        <member name="M:Spike.Text.Json.Linq.JConstructor.Load(Spike.Text.Json.JsonReader)">
            <summary>
            Loads an <see cref="T:Spike.Text.Json.Linq.JConstructor"/> from a <see cref="T:Spike.Text.Json.JsonReader"/>. 
            </summary>
            <param name="reader">A <see cref="T:Spike.Text.Json.JsonReader"/> that will be read for the content of the <see cref="T:Spike.Text.Json.Linq.JConstructor"/>.</param>
            <returns>A <see cref="T:Spike.Text.Json.Linq.JConstructor"/> that contains the JSON that was read from the specified <see cref="T:Spike.Text.Json.JsonReader"/>.</returns>
        </member>
        <member name="P:Spike.Text.Json.Linq.JConstructor.ChildrenTokens">
            <summary>
            Gets the container's children tokens.
            </summary>
            <value>The container's children tokens.</value>
        </member>
        <member name="P:Spike.Text.Json.Linq.JConstructor.Name">
            <summary>
            Gets or sets the name of this constructor.
            </summary>
            <value>The constructor name.</value>
        </member>
        <member name="P:Spike.Text.Json.Linq.JConstructor.Type">
            <summary>
            Gets the node type for this <see cref="T:Spike.Text.Json.Linq.JToken"/>.
            </summary>
            <value>The type.</value>
        </member>
        <member name="P:Spike.Text.Json.Linq.JConstructor.Item(System.Object)">
            <summary>
            Gets the <see cref="T:Spike.Text.Json.Linq.JToken"/> with the specified key.
            </summary>
            <value>The <see cref="T:Spike.Text.Json.Linq.JToken"/> with the specified key.</value>
        </member>
        <member name="T:Spike.Text.Json.Linq.JEnumerable`1">
            <summary>
            Represents a collection of <see cref="T:Spike.Text.Json.Linq.JToken"/> objects.
            </summary>
            <typeparam name="T">The type of token</typeparam>
        </member>
        <member name="F:Spike.Text.Json.Linq.JEnumerable`1.Empty">
            <summary>
            An empty collection of <see cref="T:Spike.Text.Json.Linq.JToken"/> objects.
            </summary>
        </member>
        <member name="M:Spike.Text.Json.Linq.JEnumerable`1.#ctor(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Initializes a new instance of the <see cref="T:Spike.Text.Json.Linq.JEnumerable`1"/> struct.
            </summary>
            <param name="enumerable">The enumerable.</param>
        </member>
        <member name="M:Spike.Text.Json.Linq.JEnumerable`1.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the collection.
            </summary>
            <returns>
            A <see cref="T:System.Collections.Generic.IEnumerator`1"/> that can be used to iterate through the collection.
            </returns>
        </member>
        <member name="M:Spike.Text.Json.Linq.JEnumerable`1.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Returns an enumerator that iterates through a collection.
            </summary>
            <returns>
            An <see cref="T:System.Collections.IEnumerator"/> object that can be used to iterate through the collection.
            </returns>
        </member>
        <member name="M:Spike.Text.Json.Linq.JEnumerable`1.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object"/> is equal to this instance.
            </summary>
            <param name="obj">The <see cref="T:System.Object"/> to compare with this instance.</param>
            <returns>
            	<c>true</c> if the specified <see cref="T:System.Object"/> is equal to this instance; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Spike.Text.Json.Linq.JEnumerable`1.GetHashCode">
            <summary>
            Returns a hash code for this instance.
            </summary>
            <returns>
            A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table. 
            </returns>
        </member>
        <member name="P:Spike.Text.Json.Linq.JEnumerable`1.Item(System.Object)">
            <summary>
            Gets the <see cref="T:Spike.Text.Json.Linq.IJEnumerable`1"/> with the specified key.
            </summary>
            <value></value>
        </member>
        <member name="T:Spike.Text.Json.Linq.JObject">
            <summary>
            Represents a JSON object.
            </summary>
        </member>
        <member name="M:Spike.Text.Json.Linq.JObject.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Spike.Text.Json.Linq.JObject"/> class.
            </summary>
        </member>
        <member name="M:Spike.Text.Json.Linq.JObject.#ctor(Spike.Text.Json.Linq.JObject)">
            <summary>
            Initializes a new instance of the <see cref="T:Spike.Text.Json.Linq.JObject"/> class from another <see cref="T:Spike.Text.Json.Linq.JObject"/> object.
            </summary>
            <param name="other">A <see cref="T:Spike.Text.Json.Linq.JObject"/> object to copy from.</param>
        </member>
        <member name="M:Spike.Text.Json.Linq.JObject.#ctor(System.Object[])">
            <summary>
            Initializes a new instance of the <see cref="T:Spike.Text.Json.Linq.JObject"/> class with the specified content.
            </summary>
            <param name="content">The contents of the object.</param>
        </member>
        <member name="M:Spike.Text.Json.Linq.JObject.#ctor(System.Object)">
            <summary>
            Initializes a new instance of the <see cref="T:Spike.Text.Json.Linq.JObject"/> class with the specified content.
            </summary>
            <param name="content">The contents of the object.</param>
        </member>
        <member name="M:Spike.Text.Json.Linq.JObject.Properties">
            <summary>
            Gets an <see cref="T:System.Collections.Generic.IEnumerable`1"/> of this object's properties.
            </summary>
            <returns>An <see cref="T:System.Collections.Generic.IEnumerable`1"/> of this object's properties.</returns>
        </member>
        <member name="M:Spike.Text.Json.Linq.JObject.Property(System.String)">
            <summary>
            Gets a <see cref="T:Spike.Text.Json.Linq.JProperty"/> the specified name.
            </summary>
            <param name="name">The property name.</param>
            <returns>A <see cref="T:Spike.Text.Json.Linq.JProperty"/> with the specified name or null.</returns>
        </member>
        <member name="M:Spike.Text.Json.Linq.JObject.PropertyValues">
            <summary>
            Gets an <see cref="T:Spike.Text.Json.Linq.JEnumerable`1"/> of this object's property values.
            </summary>
            <returns>An <see cref="T:Spike.Text.Json.Linq.JEnumerable`1"/> of this object's property values.</returns>
        </member>
        <member name="M:Spike.Text.Json.Linq.JObject.Load(Spike.Text.Json.JsonReader)">
            <summary>
            Loads an <see cref="T:Spike.Text.Json.Linq.JObject"/> from a <see cref="T:Spike.Text.Json.JsonReader"/>. 
            </summary>
            <param name="reader">A <see cref="T:Spike.Text.Json.JsonReader"/> that will be read for the content of the <see cref="T:Spike.Text.Json.Linq.JObject"/>.</param>
            <returns>A <see cref="T:Spike.Text.Json.Linq.JObject"/> that contains the JSON that was read from the specified <see cref="T:Spike.Text.Json.JsonReader"/>.</returns>
        </member>
        <member name="M:Spike.Text.Json.Linq.JObject.Parse(System.String)">
            <summary>
            Load a <see cref="T:Spike.Text.Json.Linq.JObject"/> from a string that contains JSON.
            </summary>
            <param name="json">A <see cref="T:System.String"/> that contains JSON.</param>
            <returns>A <see cref="T:Spike.Text.Json.Linq.JObject"/> populated from the string that contains JSON.</returns>
        </member>
        <member name="M:Spike.Text.Json.Linq.JObject.FromObject(System.Object)">
            <summary>
            Creates a <see cref="T:Spike.Text.Json.Linq.JObject"/> from an object.
            </summary>
            <param name="o">The object that will be used to create <see cref="T:Spike.Text.Json.Linq.JObject"/>.</param>
            <returns>A <see cref="T:Spike.Text.Json.Linq.JObject"/> with the values of the specified object</returns>
        </member>
        <member name="M:Spike.Text.Json.Linq.JObject.FromObject(System.Object,Spike.Text.Json.JsonSerializer)">
            <summary>
            Creates a <see cref="T:Spike.Text.Json.Linq.JArray"/> from an object.
            </summary>
            <param name="o">The object that will be used to create <see cref="T:Spike.Text.Json.Linq.JArray"/>.</param>
            <param name="jsonSerializer">The <see cref="T:Spike.Text.Json.JsonSerializer"/> that will be used to read the object.</param>
            <returns>A <see cref="T:Spike.Text.Json.Linq.JArray"/> with the values of the specified object</returns>
        </member>
        <member name="M:Spike.Text.Json.Linq.JObject.WriteTo(Spike.Text.Json.JsonWriter,Spike.Text.Json.JsonConverter[])">
            <summary>
            Writes this token to a <see cref="T:Spike.Text.Json.JsonWriter"/>.
            </summary>
            <param name="writer">A <see cref="T:Spike.Text.Json.JsonWriter"/> into which this method will write.</param>
            <param name="converters">A collection of <see cref="T:Spike.Text.Json.JsonConverter"/> which will be used when writing the token.</param>
        </member>
        <member name="M:Spike.Text.Json.Linq.JObject.Add(System.String,Spike.Text.Json.Linq.JToken)">
            <summary>
            Adds the specified property name.
            </summary>
            <param name="propertyName">Name of the property.</param>
            <param name="value">The value.</param>
        </member>
        <member name="M:Spike.Text.Json.Linq.JObject.Remove(System.String)">
            <summary>
            Removes the property with the specified name.
            </summary>
            <param name="propertyName">Name of the property.</param>
            <returns>true if item was successfully removed; otherwise, false.</returns>
        </member>
        <member name="M:Spike.Text.Json.Linq.JObject.TryGetValue(System.String,Spike.Text.Json.Linq.JToken@)">
            <summary>
            Tries the get value.
            </summary>
            <param name="propertyName">Name of the property.</param>
            <param name="value">The value.</param>
            <returns>true if a value was successfully retrieved; otherwise, false.</returns>
        </member>
        <member name="M:Spike.Text.Json.Linq.JObject.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the collection.
            </summary>
            <returns>
            A <see cref="T:System.Collections.Generic.IEnumerator`1"/> that can be used to iterate through the collection.
            </returns>
        </member>
        <member name="M:Spike.Text.Json.Linq.JObject.OnPropertyChanged(System.String)">
            <summary>
            Raises the <see cref="E:Spike.Text.Json.Linq.JObject.PropertyChanged"/> event with the provided arguments.
            </summary>
            <param name="propertyName">Name of the property.</param>
        </member>
        <member name="M:Spike.Text.Json.Linq.JObject.OnPropertyChanging(System.String)">
            <summary>
            Raises the <see cref="E:Spike.Text.Json.Linq.JObject.PropertyChanging"/> event with the provided arguments.
            </summary>
            <param name="propertyName">Name of the property.</param>
        </member>
        <member name="M:Spike.Text.Json.Linq.JObject.System#ComponentModel#ICustomTypeDescriptor#GetProperties">
            <summary>
            Returns the properties for this instance of a component.
            </summary>
            <returns>
            A <see cref="T:System.ComponentModel.PropertyDescriptorCollection"/> that represents the properties for this component instance.
            </returns>
        </member>
        <member name="M:Spike.Text.Json.Linq.JObject.System#ComponentModel#ICustomTypeDescriptor#GetProperties(System.Attribute[])">
            <summary>
            Returns the properties for this instance of a component using the attribute array as a filter.
            </summary>
            <param name="attributes">An array of type <see cref="T:System.Attribute"/> that is used as a filter.</param>
            <returns>
            A <see cref="T:System.ComponentModel.PropertyDescriptorCollection"/> that represents the filtered properties for this component instance.
            </returns>
        </member>
        <member name="M:Spike.Text.Json.Linq.JObject.System#ComponentModel#ICustomTypeDescriptor#GetAttributes">
            <summary>
            Returns a collection of custom attributes for this instance of a component.
            </summary>
            <returns>
            An <see cref="T:System.ComponentModel.AttributeCollection"/> containing the attributes for this object.
            </returns>
        </member>
        <member name="M:Spike.Text.Json.Linq.JObject.System#ComponentModel#ICustomTypeDescriptor#GetClassName">
            <summary>
            Returns the class name of this instance of a component.
            </summary>
            <returns>
            The class name of the object, or null if the class does not have a name.
            </returns>
        </member>
        <member name="M:Spike.Text.Json.Linq.JObject.System#ComponentModel#ICustomTypeDescriptor#GetComponentName">
            <summary>
            Returns the name of this instance of a component.
            </summary>
            <returns>
            The name of the object, or null if the object does not have a name.
            </returns>
        </member>
        <member name="M:Spike.Text.Json.Linq.JObject.System#ComponentModel#ICustomTypeDescriptor#GetConverter">
            <summary>
            Returns a type converter for this instance of a component.
            </summary>
            <returns>
            A <see cref="T:System.ComponentModel.TypeConverter"/> that is the converter for this object, or null if there is no <see cref="T:System.ComponentModel.TypeConverter"/> for this object.
            </returns>
        </member>
        <member name="M:Spike.Text.Json.Linq.JObject.System#ComponentModel#ICustomTypeDescriptor#GetDefaultEvent">
            <summary>
            Returns the default event for this instance of a component.
            </summary>
            <returns>
            An <see cref="T:System.ComponentModel.EventDescriptor"/> that represents the default event for this object, or null if this object does not have events.
            </returns>
        </member>
        <member name="M:Spike.Text.Json.Linq.JObject.System#ComponentModel#ICustomTypeDescriptor#GetDefaultProperty">
            <summary>
            Returns the default property for this instance of a component.
            </summary>
            <returns>
            A <see cref="T:System.ComponentModel.PropertyDescriptor"/> that represents the default property for this object, or null if this object does not have properties.
            </returns>
        </member>
        <member name="M:Spike.Text.Json.Linq.JObject.System#ComponentModel#ICustomTypeDescriptor#GetEditor(System.Type)">
            <summary>
            Returns an editor of the specified type for this instance of a component.
            </summary>
            <param name="editorBaseType">A <see cref="T:System.Type"/> that represents the editor for this object.</param>
            <returns>
            An <see cref="T:System.Object"/> of the specified type that is the editor for this object, or null if the editor cannot be found.
            </returns>
        </member>
        <member name="M:Spike.Text.Json.Linq.JObject.System#ComponentModel#ICustomTypeDescriptor#GetEvents(System.Attribute[])">
            <summary>
            Returns the events for this instance of a component using the specified attribute array as a filter.
            </summary>
            <param name="attributes">An array of type <see cref="T:System.Attribute"/> that is used as a filter.</param>
            <returns>
            An <see cref="T:System.ComponentModel.EventDescriptorCollection"/> that represents the filtered events for this component instance.
            </returns>
        </member>
        <member name="M:Spike.Text.Json.Linq.JObject.System#ComponentModel#ICustomTypeDescriptor#GetEvents">
            <summary>
            Returns the events for this instance of a component.
            </summary>
            <returns>
            An <see cref="T:System.ComponentModel.EventDescriptorCollection"/> that represents the events for this component instance.
            </returns>
        </member>
        <member name="M:Spike.Text.Json.Linq.JObject.System#ComponentModel#ICustomTypeDescriptor#GetPropertyOwner(System.ComponentModel.PropertyDescriptor)">
            <summary>
            Returns an object that contains the property described by the specified property descriptor.
            </summary>
            <param name="pd">A <see cref="T:System.ComponentModel.PropertyDescriptor"/> that represents the property whose owner is to be found.</param>
            <returns>
            An <see cref="T:System.Object"/> that represents the owner of the specified property.
            </returns>
        </member>
        <member name="M:Spike.Text.Json.Linq.JObject.GetMetaObject(System.Linq.Expressions.Expression)">
            <summary>
            Returns the <see cref="T:System.Dynamic.DynamicMetaObject"/> responsible for binding operations performed on this object.
            </summary>
            <param name="parameter">The expression tree representation of the runtime value.</param>
            <returns>
            The <see cref="T:System.Dynamic.DynamicMetaObject"/> to bind this object.
            </returns>
        </member>
        <member name="P:Spike.Text.Json.Linq.JObject.ChildrenTokens">
            <summary>
            Gets the container's children tokens.
            </summary>
            <value>The container's children tokens.</value>
        </member>
        <member name="E:Spike.Text.Json.Linq.JObject.PropertyChanged">
            <summary>
            Occurs when a property value changes.
            </summary>
        </member>
        <member name="E:Spike.Text.Json.Linq.JObject.PropertyChanging">
            <summary>
            Occurs when a property value is changing.
            </summary>
        </member>
        <member name="P:Spike.Text.Json.Linq.JObject.Type">
            <summary>
            Gets the node type for this <see cref="T:Spike.Text.Json.Linq.JToken"/>.
            </summary>
            <value>The type.</value>
        </member>
        <member name="P:Spike.Text.Json.Linq.JObject.Item(System.Object)">
            <summary>
            Gets the <see cref="T:Spike.Text.Json.Linq.JToken"/> with the specified key.
            </summary>
            <value>The <see cref="T:Spike.Text.Json.Linq.JToken"/> with the specified key.</value>
        </member>
        <member name="P:Spike.Text.Json.Linq.JObject.Item(System.String)">
            <summary>
            Gets or sets the <see cref="T:Spike.Text.Json.Linq.JToken"/> with the specified property name.
            </summary>
            <value></value>
        </member>
        <member name="T:Spike.Text.Json.Linq.JProperty">
            <summary>
            Represents a JSON property.
            </summary>
        </member>
        <member name="M:Spike.Text.Json.Linq.JProperty.#ctor(Spike.Text.Json.Linq.JProperty)">
            <summary>
            Initializes a new instance of the <see cref="T:Spike.Text.Json.Linq.JProperty"/> class from another <see cref="T:Spike.Text.Json.Linq.JProperty"/> object.
            </summary>
            <param name="other">A <see cref="T:Spike.Text.Json.Linq.JProperty"/> object to copy from.</param>
        </member>
        <member name="M:Spike.Text.Json.Linq.JProperty.#ctor(System.String,System.Object[])">
            <summary>
            Initializes a new instance of the <see cref="T:Spike.Text.Json.Linq.JProperty"/> class.
            </summary>
            <param name="name">The property name.</param>
            <param name="content">The property content.</param>
        </member>
        <member name="M:Spike.Text.Json.Linq.JProperty.#ctor(System.String,System.Object)">
            <summary>
            Initializes a new instance of the <see cref="T:Spike.Text.Json.Linq.JProperty"/> class.
            </summary>
            <param name="name">The property name.</param>
            <param name="content">The property content.</param>
        </member>
        <member name="M:Spike.Text.Json.Linq.JProperty.WriteTo(Spike.Text.Json.JsonWriter,Spike.Text.Json.JsonConverter[])">
            <summary>
            Writes this token to a <see cref="T:Spike.Text.Json.JsonWriter"/>.
            </summary>
            <param name="writer">A <see cref="T:Spike.Text.Json.JsonWriter"/> into which this method will write.</param>
            <param name="converters">A collection of <see cref="T:Spike.Text.Json.JsonConverter"/> which will be used when writing the token.</param>
        </member>
        <member name="M:Spike.Text.Json.Linq.JProperty.Load(Spike.Text.Json.JsonReader)">
            <summary>
            Loads an <see cref="T:Spike.Text.Json.Linq.JProperty"/> from a <see cref="T:Spike.Text.Json.JsonReader"/>. 
            </summary>
            <param name="reader">A <see cref="T:Spike.Text.Json.JsonReader"/> that will be read for the content of the <see cref="T:Spike.Text.Json.Linq.JProperty"/>.</param>
            <returns>A <see cref="T:Spike.Text.Json.Linq.JProperty"/> that contains the JSON that was read from the specified <see cref="T:Spike.Text.Json.JsonReader"/>.</returns>
        </member>
        <member name="P:Spike.Text.Json.Linq.JProperty.ChildrenTokens">
            <summary>
            Gets the container's children tokens.
            </summary>
            <value>The container's children tokens.</value>
        </member>
        <member name="P:Spike.Text.Json.Linq.JProperty.Name">
            <summary>
            Gets the property name.
            </summary>
            <value>The property name.</value>
        </member>
        <member name="P:Spike.Text.Json.Linq.JProperty.Value">
            <summary>
            Gets or sets the property value.
            </summary>
            <value>The property value.</value>
        </member>
        <member name="P:Spike.Text.Json.Linq.JProperty.Type">
            <summary>
            Gets the node type for this <see cref="T:Spike.Text.Json.Linq.JToken"/>.
            </summary>
            <value>The type.</value>
        </member>
        <member name="T:Spike.Text.Json.Linq.JPropertyDescriptor">
            <summary>
            Represents a view of a <see cref="T:Spike.Text.Json.Linq.JProperty"/>.
            </summary>
        </member>
        <member name="M:Spike.Text.Json.Linq.JPropertyDescriptor.#ctor(System.String,System.Type)">
            <summary>
            Initializes a new instance of the <see cref="T:Spike.Text.Json.Linq.JPropertyDescriptor"/> class.
            </summary>
            <param name="name">The name.</param>
            <param name="propertyType">Type of the property.</param>
        </member>
        <member name="M:Spike.Text.Json.Linq.JPropertyDescriptor.CanResetValue(System.Object)">
            <summary>
            When overridden in a derived class, returns whether resetting an object changes its value.
            </summary>
            <returns>
            true if resetting the component changes its value; otherwise, false.
            </returns>
            <param name="component">The component to test for reset capability. 
                            </param>
        </member>
        <member name="M:Spike.Text.Json.Linq.JPropertyDescriptor.GetValue(System.Object)">
            <summary>
            When overridden in a derived class, gets the current value of the property on a component.
            </summary>
            <returns>
            The value of a property for a given component.
            </returns>
            <param name="component">The component with the property for which to retrieve the value. 
                            </param>
        </member>
        <member name="M:Spike.Text.Json.Linq.JPropertyDescriptor.ResetValue(System.Object)">
            <summary>
            When overridden in a derived class, resets the value for this property of the component to the default value.
            </summary>
            <param name="component">The component with the property value that is to be reset to the default value. 
                            </param>
        </member>
        <member name="M:Spike.Text.Json.Linq.JPropertyDescriptor.SetValue(System.Object,System.Object)">
            <summary>
            When overridden in a derived class, sets the value of the component to a different value.
            </summary>
            <param name="component">The component with the property value that is to be set. 
                            </param><param name="value">The new value. 
                            </param>
        </member>
        <member name="M:Spike.Text.Json.Linq.JPropertyDescriptor.ShouldSerializeValue(System.Object)">
            <summary>
            When overridden in a derived class, determines a value indicating whether the value of this property needs to be persisted.
            </summary>
            <returns>
            true if the property should be persisted; otherwise, false.
            </returns>
            <param name="component">The component with the property to be examined for persistence. 
                            </param>
        </member>
        <member name="P:Spike.Text.Json.Linq.JPropertyDescriptor.ComponentType">
            <summary>
            When overridden in a derived class, gets the type of the component this property is bound to.
            </summary>
            <returns>
            A <see cref="T:System.Type"/> that represents the type of component this property is bound to. When the <see cref="M:System.ComponentModel.PropertyDescriptor.GetValue(System.Object)"/> or <see cref="M:System.ComponentModel.PropertyDescriptor.SetValue(System.Object,System.Object)"/> methods are invoked, the object specified might be an instance of this type.
            </returns>
        </member>
        <member name="P:Spike.Text.Json.Linq.JPropertyDescriptor.IsReadOnly">
            <summary>
            When overridden in a derived class, gets a value indicating whether this property is read-only.
            </summary>
            <returns>
            true if the property is read-only; otherwise, false.
            </returns>
        </member>
        <member name="P:Spike.Text.Json.Linq.JPropertyDescriptor.PropertyType">
            <summary>
            When overridden in a derived class, gets the type of the property.
            </summary>
            <returns>
            A <see cref="T:System.Type"/> that represents the type of the property.
            </returns>
        </member>
        <member name="P:Spike.Text.Json.Linq.JPropertyDescriptor.NameHashCode">
            <summary>
            Gets the hash code for the name of the member.
            </summary>
            <value></value>
            <returns>
            The hash code for the name of the member.
            </returns>
        </member>
        <member name="T:Spike.Text.Json.Linq.JRaw">
            <summary>
            Represents a raw JSON string.
            </summary>
        </member>
        <member name="T:Spike.Text.Json.Linq.JValue">
            <summary>
            Represents a value in JSON (string, integer, date, etc).
            </summary>
        </member>
        <member name="M:Spike.Text.Json.Linq.JValue.#ctor(Spike.Text.Json.Linq.JValue)">
            <summary>
            Initializes a new instance of the <see cref="T:Spike.Text.Json.Linq.JValue"/> class from another <see cref="T:Spike.Text.Json.Linq.JValue"/> object.
            </summary>
            <param name="other">A <see cref="T:Spike.Text.Json.Linq.JValue"/> object to copy from.</param>
        </member>
        <member name="M:Spike.Text.Json.Linq.JValue.#ctor(System.Int64)">
            <summary>
            Initializes a new instance of the <see cref="T:Spike.Text.Json.Linq.JValue"/> class with the given value.
            </summary>
            <param name="value">The value.</param>
        </member>
        <member name="M:Spike.Text.Json.Linq.JValue.#ctor(System.UInt64)">
            <summary>
            Initializes a new instance of the <see cref="T:Spike.Text.Json.Linq.JValue"/> class with the given value.
            </summary>
            <param name="value">The value.</param>
        </member>
        <member name="M:Spike.Text.Json.Linq.JValue.#ctor(System.Double)">
            <summary>
            Initializes a new instance of the <see cref="T:Spike.Text.Json.Linq.JValue"/> class with the given value.
            </summary>
            <param name="value">The value.</param>
        </member>
        <member name="M:Spike.Text.Json.Linq.JValue.#ctor(System.DateTime)">
            <summary>
            Initializes a new instance of the <see cref="T:Spike.Text.Json.Linq.JValue"/> class with the given value.
            </summary>
            <param name="value">The value.</param>
        </member>
        <member name="M:Spike.Text.Json.Linq.JValue.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Spike.Text.Json.Linq.JValue"/> class with the given value.
            </summary>
            <param name="value">The value.</param>
        </member>
        <member name="M:Spike.Text.Json.Linq.JValue.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Spike.Text.Json.Linq.JValue"/> class with the given value.
            </summary>
            <param name="value">The value.</param>
        </member>
        <member name="M:Spike.Text.Json.Linq.JValue.#ctor(System.Guid)">
            <summary>
            Initializes a new instance of the <see cref="T:Spike.Text.Json.Linq.JValue"/> class with the given value.
            </summary>
            <param name="value">The value.</param>
        </member>
        <member name="M:Spike.Text.Json.Linq.JValue.#ctor(System.Uri)">
            <summary>
            Initializes a new instance of the <see cref="T:Spike.Text.Json.Linq.JValue"/> class with the given value.
            </summary>
            <param name="value">The value.</param>
        </member>
        <member name="M:Spike.Text.Json.Linq.JValue.#ctor(System.TimeSpan)">
            <summary>
            Initializes a new instance of the <see cref="T:Spike.Text.Json.Linq.JValue"/> class with the given value.
            </summary>
            <param name="value">The value.</param>
        </member>
        <member name="M:Spike.Text.Json.Linq.JValue.#ctor(System.Object)">
            <summary>
            Initializes a new instance of the <see cref="T:Spike.Text.Json.Linq.JValue"/> class with the given value.
            </summary>
            <param name="value">The value.</param>
        </member>
        <member name="M:Spike.Text.Json.Linq.JValue.CreateComment(System.String)">
            <summary>
            Creates a <see cref="T:Spike.Text.Json.Linq.JValue"/> comment with the given value.
            </summary>
            <param name="value">The value.</param>
            <returns>A <see cref="T:Spike.Text.Json.Linq.JValue"/> comment with the given value.</returns>
        </member>
        <member name="M:Spike.Text.Json.Linq.JValue.CreateString(System.String)">
            <summary>
            Creates a <see cref="T:Spike.Text.Json.Linq.JValue"/> string with the given value.
            </summary>
            <param name="value">The value.</param>
            <returns>A <see cref="T:Spike.Text.Json.Linq.JValue"/> string with the given value.</returns>
        </member>
        <member name="M:Spike.Text.Json.Linq.JValue.WriteTo(Spike.Text.Json.JsonWriter,Spike.Text.Json.JsonConverter[])">
            <summary>
            Writes this token to a <see cref="T:Spike.Text.Json.JsonWriter"/>.
            </summary>
            <param name="writer">A <see cref="T:Spike.Text.Json.JsonWriter"/> into which this method will write.</param>
            <param name="converters">A collection of <see cref="T:Spike.Text.Json.JsonConverter"/> which will be used when writing the token.</param>
        </member>
        <member name="M:Spike.Text.Json.Linq.JValue.Equals(Spike.Text.Json.Linq.JValue)">
            <summary>
            Indicates whether the current object is equal to another object of the same type.
            </summary>
            <returns>
            true if the current object is equal to the <paramref name="other"/> parameter; otherwise, false.
            </returns>
            <param name="other">An object to compare with this object.</param>
        </member>
        <member name="M:Spike.Text.Json.Linq.JValue.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object"/> is equal to the current <see cref="T:System.Object"/>.
            </summary>
            <param name="obj">The <see cref="T:System.Object"/> to compare with the current <see cref="T:System.Object"/>.</param>
            <returns>
            true if the specified <see cref="T:System.Object"/> is equal to the current <see cref="T:System.Object"/>; otherwise, false.
            </returns>
            <exception cref="T:System.NullReferenceException">
            The <paramref name="obj"/> parameter is null.
            </exception>
        </member>
        <member name="M:Spike.Text.Json.Linq.JValue.GetHashCode">
            <summary>
            Serves as a hash function for a particular type.
            </summary>
            <returns>
            A hash code for the current <see cref="T:System.Object"/>.
            </returns>
        </member>
        <member name="M:Spike.Text.Json.Linq.JValue.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <returns>
            A <see cref="T:System.String"/> that represents this instance.
            </returns>
        </member>
        <member name="M:Spike.Text.Json.Linq.JValue.ToString(System.String)">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <param name="format">The format.</param>
            <returns>
            A <see cref="T:System.String"/> that represents this instance.
            </returns>
        </member>
        <member name="M:Spike.Text.Json.Linq.JValue.ToString(System.IFormatProvider)">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <param name="formatProvider">The format provider.</param>
            <returns>
            A <see cref="T:System.String"/> that represents this instance.
            </returns>
        </member>
        <member name="M:Spike.Text.Json.Linq.JValue.ToString(System.String,System.IFormatProvider)">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <param name="format">The format.</param>
            <param name="formatProvider">The format provider.</param>
            <returns>
            A <see cref="T:System.String"/> that represents this instance.
            </returns>
        </member>
        <member name="M:Spike.Text.Json.Linq.JValue.GetMetaObject(System.Linq.Expressions.Expression)">
            <summary>
            Returns the <see cref="T:System.Dynamic.DynamicMetaObject"/> responsible for binding operations performed on this object.
            </summary>
            <param name="parameter">The expression tree representation of the runtime value.</param>
            <returns>
            The <see cref="T:System.Dynamic.DynamicMetaObject"/> to bind this object.
            </returns>
        </member>
        <member name="M:Spike.Text.Json.Linq.JValue.CompareTo(Spike.Text.Json.Linq.JValue)">
            <summary>
            Compares the current instance with another object of the same type and returns an integer that indicates whether the current instance precedes, follows, or occurs in the same position in the sort order as the other object.
            </summary>
            <param name="obj">An object to compare with this instance.</param>
            <returns>
            A 32-bit signed integer that indicates the relative order of the objects being compared. The return value has these meanings:
            Value
            Meaning
            Less than zero
            This instance is less than <paramref name="obj"/>.
            Zero
            This instance is equal to <paramref name="obj"/>.
            Greater than zero
            This instance is greater than <paramref name="obj"/>.
            </returns>
            <exception cref="T:System.ArgumentException">
            	<paramref name="obj"/> is not the same type as this instance.
            </exception>
        </member>
        <member name="P:Spike.Text.Json.Linq.JValue.HasValues">
            <summary>
            Gets a value indicating whether this token has childen tokens.
            </summary>
            <value>
            	<c>true</c> if this token has child values; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Spike.Text.Json.Linq.JValue.Type">
            <summary>
            Gets the node type for this <see cref="T:Spike.Text.Json.Linq.JToken"/>.
            </summary>
            <value>The type.</value>
        </member>
        <member name="P:Spike.Text.Json.Linq.JValue.Value">
            <summary>
            Gets or sets the underlying token value.
            </summary>
            <value>The underlying token value.</value>
        </member>
        <member name="M:Spike.Text.Json.Linq.JRaw.#ctor(Spike.Text.Json.Linq.JRaw)">
            <summary>
            Initializes a new instance of the <see cref="T:Spike.Text.Json.Linq.JRaw"/> class from another <see cref="T:Spike.Text.Json.Linq.JRaw"/> object.
            </summary>
            <param name="other">A <see cref="T:Spike.Text.Json.Linq.JRaw"/> object to copy from.</param>
        </member>
        <member name="M:Spike.Text.Json.Linq.JRaw.#ctor(System.Object)">
            <summary>
            Initializes a new instance of the <see cref="T:Spike.Text.Json.Linq.JRaw"/> class.
            </summary>
            <param name="rawJson">The raw json.</param>
        </member>
        <member name="M:Spike.Text.Json.Linq.JRaw.Create(Spike.Text.Json.JsonReader)">
            <summary>
            Creates an instance of <see cref="T:Spike.Text.Json.Linq.JRaw"/> with the content of the reader's current token.
            </summary>
            <param name="reader">The reader.</param>
            <returns>An instance of <see cref="T:Spike.Text.Json.Linq.JRaw"/> with the content of the reader's current token.</returns>
        </member>
        <member name="T:Spike.Text.Json.Linq.JTokenEqualityComparer">
            <summary>
            Compares tokens to determine whether they are equal.
            </summary>
        </member>
        <member name="M:Spike.Text.Json.Linq.JTokenEqualityComparer.Equals(Spike.Text.Json.Linq.JToken,Spike.Text.Json.Linq.JToken)">
            <summary>
            Determines whether the specified objects are equal.
            </summary>
            <param name="x">The first object of type <see cref="T:Spike.Text.Json.Linq.JToken"/> to compare.</param>
            <param name="y">The second object of type <see cref="T:Spike.Text.Json.Linq.JToken"/> to compare.</param>
            <returns>
            true if the specified objects are equal; otherwise, false.
            </returns>
        </member>
        <member name="M:Spike.Text.Json.Linq.JTokenEqualityComparer.GetHashCode(Spike.Text.Json.Linq.JToken)">
            <summary>
            Returns a hash code for the specified object.
            </summary>
            <param name="obj">The <see cref="T:System.Object"/> for which a hash code is to be returned.</param>
            <returns>A hash code for the specified object.</returns>
            <exception cref="T:System.ArgumentNullException">The type of <paramref name="obj"/> is a reference type and <paramref name="obj"/> is null.</exception>
        </member>
        <member name="T:Spike.Text.Json.Linq.JTokenReader">
            <summary>
            Represents a reader that provides fast, non-cached, forward-only access to serialized Json data.
            </summary>
        </member>
        <member name="M:Spike.Text.Json.Linq.JTokenReader.#ctor(Spike.Text.Json.Linq.JToken)">
            <summary>
            Initializes a new instance of the <see cref="T:Spike.Text.Json.Linq.JTokenReader"/> class.
            </summary>
            <param name="token">The token to read from.</param>
        </member>
        <member name="M:Spike.Text.Json.Linq.JTokenReader.ReadAsBytes">
            <summary>
            Reads the next JSON token from the stream as a <see cref="T:Byte[]"/>.
            </summary>
            <returns>
            A <see cref="T:Byte[]"/> or a null reference if the next JSON token is null. This method will return <c>null</c> at the end of an array.
            </returns>
        </member>
        <member name="M:Spike.Text.Json.Linq.JTokenReader.ReadAsDecimal">
            <summary>
            Reads the next JSON token from the stream as a <see cref="T:System.Nullable`1"/>.
            </summary>
            <returns>A <see cref="T:System.Nullable`1"/>. This method will return <c>null</c> at the end of an array.</returns>
        </member>
        <member name="M:Spike.Text.Json.Linq.JTokenReader.ReadAsInt32">
            <summary>
            Reads the next JSON token from the stream as a <see cref="T:System.Nullable`1"/>.
            </summary>
            <returns>A <see cref="T:System.Nullable`1"/>. This method will return <c>null</c> at the end of an array.</returns>
        </member>
        <member name="M:Spike.Text.Json.Linq.JTokenReader.ReadAsDateTimeOffset">
            <summary>
            Reads the next JSON token from the stream as a <see cref="T:System.Nullable`1"/>.
            </summary>
            <returns>A <see cref="T:System.Nullable`1"/>. This method will return <c>null</c> at the end of an array.</returns>
        </member>
        <member name="M:Spike.Text.Json.Linq.JTokenReader.Read">
            <summary>
            Reads the next JSON token from the stream.
            </summary>
            <returns>
            true if the next token was read successfully; false if there are no more tokens to read.
            </returns>
        </member>
        <member name="T:Spike.Text.Json.Linq.JTokenType">
            <summary>
            Specifies the type of token.
            </summary>
        </member>
        <member name="F:Spike.Text.Json.Linq.JTokenType.None">
            <summary>
            No token type has been set.
            </summary>
        </member>
        <member name="F:Spike.Text.Json.Linq.JTokenType.Object">
            <summary>
            A JSON object.
            </summary>
        </member>
        <member name="F:Spike.Text.Json.Linq.JTokenType.Array">
            <summary>
            A JSON array.
            </summary>
        </member>
        <member name="F:Spike.Text.Json.Linq.JTokenType.Constructor">
            <summary>
            A JSON constructor.
            </summary>
        </member>
        <member name="F:Spike.Text.Json.Linq.JTokenType.Property">
            <summary>
            A JSON object property.
            </summary>
        </member>
        <member name="F:Spike.Text.Json.Linq.JTokenType.Comment">
            <summary>
            A comment.
            </summary>
        </member>
        <member name="F:Spike.Text.Json.Linq.JTokenType.Integer">
            <summary>
            An integer value.
            </summary>
        </member>
        <member name="F:Spike.Text.Json.Linq.JTokenType.Float">
            <summary>
            A float value.
            </summary>
        </member>
        <member name="F:Spike.Text.Json.Linq.JTokenType.String">
            <summary>
            A string value.
            </summary>
        </member>
        <member name="F:Spike.Text.Json.Linq.JTokenType.Boolean">
            <summary>
            A boolean value.
            </summary>
        </member>
        <member name="F:Spike.Text.Json.Linq.JTokenType.Null">
            <summary>
            A null value.
            </summary>
        </member>
        <member name="F:Spike.Text.Json.Linq.JTokenType.Undefined">
            <summary>
            An undefined value.
            </summary>
        </member>
        <member name="F:Spike.Text.Json.Linq.JTokenType.Date">
            <summary>
            A date value.
            </summary>
        </member>
        <member name="F:Spike.Text.Json.Linq.JTokenType.Raw">
            <summary>
            A raw JSON value.
            </summary>
        </member>
        <member name="F:Spike.Text.Json.Linq.JTokenType.Bytes">
            <summary>
            A collection of bytes value.
            </summary>
        </member>
        <member name="F:Spike.Text.Json.Linq.JTokenType.Guid">
            <summary>
            A Guid value.
            </summary>
        </member>
        <member name="F:Spike.Text.Json.Linq.JTokenType.Uri">
            <summary>
            A Uri value.
            </summary>
        </member>
        <member name="F:Spike.Text.Json.Linq.JTokenType.TimeSpan">
            <summary>
            A TimeSpan value.
            </summary>
        </member>
        <member name="T:Spike.Text.Json.Linq.JTokenWriter">
            <summary>
            Represents a writer that provides a fast, non-cached, forward-only way of generating Json data.
            </summary>
        </member>
        <member name="M:Spike.Text.Json.Linq.JTokenWriter.#ctor(Spike.Text.Json.Linq.JContainer)">
            <summary>
            Initializes a new instance of the <see cref="T:Spike.Text.Json.Linq.JTokenWriter"/> class writing to the given <see cref="T:Spike.Text.Json.Linq.JContainer"/>.
            </summary>
            <param name="container">The container being written to.</param>
        </member>
        <member name="M:Spike.Text.Json.Linq.JTokenWriter.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Spike.Text.Json.Linq.JTokenWriter"/> class.
            </summary>
        </member>
        <member name="M:Spike.Text.Json.Linq.JTokenWriter.Flush">
            <summary>
            Flushes whatever is in the buffer to the underlying streams and also flushes the underlying stream.
            </summary>
        </member>
        <member name="M:Spike.Text.Json.Linq.JTokenWriter.Close">
            <summary>
            Closes this stream and the underlying stream.
            </summary>
        </member>
        <member name="M:Spike.Text.Json.Linq.JTokenWriter.WriteStartObject">
            <summary>
            Writes the beginning of a Json object.
            </summary>
        </member>
        <member name="M:Spike.Text.Json.Linq.JTokenWriter.WriteStartArray">
            <summary>
            Writes the beginning of a Json array.
            </summary>
        </member>
        <member name="M:Spike.Text.Json.Linq.JTokenWriter.WriteStartConstructor(System.String)">
            <summary>
            Writes the start of a constructor with the given name.
            </summary>
            <param name="name">The name of the constructor.</param>
        </member>
        <member name="M:Spike.Text.Json.Linq.JTokenWriter.WriteEnd(Spike.Text.Json.JsonToken)">
            <summary>
            Writes the end.
            </summary>
            <param name="token">The token.</param>
        </member>
        <member name="M:Spike.Text.Json.Linq.JTokenWriter.WritePropertyName(System.String)">
            <summary>
            Writes the property name of a name/value pair on a Json object.
            </summary>
            <param name="name">The name of the property.</param>
        </member>
        <member name="M:Spike.Text.Json.Linq.JTokenWriter.WriteNull">
            <summary>
            Writes a null value.
            </summary>
        </member>
        <member name="M:Spike.Text.Json.Linq.JTokenWriter.WriteUndefined">
            <summary>
            Writes an undefined value.
            </summary>
        </member>
        <member name="M:Spike.Text.Json.Linq.JTokenWriter.WriteRaw(System.String)">
            <summary>
            Writes raw JSON.
            </summary>
            <param name="json">The raw JSON to write.</param>
        </member>
        <member name="M:Spike.Text.Json.Linq.JTokenWriter.WriteComment(System.String)">
            <summary>
            Writes out a comment <code>/*...*/</code> containing the specified text.
            </summary>
            <param name="text">Text to place inside the comment.</param>
        </member>
        <member name="M:Spike.Text.Json.Linq.JTokenWriter.WriteValue(System.String)">
            <summary>
            Writes a <see cref="T:System.String"/> value.
            </summary>
            <param name="value">The <see cref="T:System.String"/> value to write.</param>
        </member>
        <member name="M:Spike.Text.Json.Linq.JTokenWriter.WriteValue(System.Int32)">
            <summary>
            Writes a <see cref="T:System.Int32"/> value.
            </summary>
            <param name="value">The <see cref="T:System.Int32"/> value to write.</param>
        </member>
        <member name="M:Spike.Text.Json.Linq.JTokenWriter.WriteValue(System.UInt32)">
            <summary>
            Writes a <see cref="T:System.UInt32"/> value.
            </summary>
            <param name="value">The <see cref="T:System.UInt32"/> value to write.</param>
        </member>
        <member name="M:Spike.Text.Json.Linq.JTokenWriter.WriteValue(System.Int64)">
            <summary>
            Writes a <see cref="T:System.Int64"/> value.
            </summary>
            <param name="value">The <see cref="T:System.Int64"/> value to write.</param>
        </member>
        <member name="M:Spike.Text.Json.Linq.JTokenWriter.WriteValue(System.UInt64)">
            <summary>
            Writes a <see cref="T:System.UInt64"/> value.
            </summary>
            <param name="value">The <see cref="T:System.UInt64"/> value to write.</param>
        </member>
        <member name="M:Spike.Text.Json.Linq.JTokenWriter.WriteValue(System.Single)">
            <summary>
            Writes a <see cref="T:System.Single"/> value.
            </summary>
            <param name="value">The <see cref="T:System.Single"/> value to write.</param>
        </member>
        <member name="M:Spike.Text.Json.Linq.JTokenWriter.WriteValue(System.Double)">
            <summary>
            Writes a <see cref="T:System.Double"/> value.
            </summary>
            <param name="value">The <see cref="T:System.Double"/> value to write.</param>
        </member>
        <member name="M:Spike.Text.Json.Linq.JTokenWriter.WriteValue(System.Boolean)">
            <summary>
            Writes a <see cref="T:System.Boolean"/> value.
            </summary>
            <param name="value">The <see cref="T:System.Boolean"/> value to write.</param>
        </member>
        <member name="M:Spike.Text.Json.Linq.JTokenWriter.WriteValue(System.Int16)">
            <summary>
            Writes a <see cref="T:System.Int16"/> value.
            </summary>
            <param name="value">The <see cref="T:System.Int16"/> value to write.</param>
        </member>
        <member name="M:Spike.Text.Json.Linq.JTokenWriter.WriteValue(System.UInt16)">
            <summary>
            Writes a <see cref="T:System.UInt16"/> value.
            </summary>
            <param name="value">The <see cref="T:System.UInt16"/> value to write.</param>
        </member>
        <member name="M:Spike.Text.Json.Linq.JTokenWriter.WriteValue(System.Char)">
            <summary>
            Writes a <see cref="T:System.Char"/> value.
            </summary>
            <param name="value">The <see cref="T:System.Char"/> value to write.</param>
        </member>
        <member name="M:Spike.Text.Json.Linq.JTokenWriter.WriteValue(System.Byte)">
            <summary>
            Writes a <see cref="T:System.Byte"/> value.
            </summary>
            <param name="value">The <see cref="T:System.Byte"/> value to write.</param>
        </member>
        <member name="M:Spike.Text.Json.Linq.JTokenWriter.WriteValue(System.SByte)">
            <summary>
            Writes a <see cref="T:System.SByte"/> value.
            </summary>
            <param name="value">The <see cref="T:System.SByte"/> value to write.</param>
        </member>
        <member name="M:Spike.Text.Json.Linq.JTokenWriter.WriteValue(System.Decimal)">
            <summary>
            Writes a <see cref="T:System.Decimal"/> value.
            </summary>
            <param name="value">The <see cref="T:System.Decimal"/> value to write.</param>
        </member>
        <member name="M:Spike.Text.Json.Linq.JTokenWriter.WriteValue(System.DateTime)">
            <summary>
            Writes a <see cref="T:System.DateTime"/> value.
            </summary>
            <param name="value">The <see cref="T:System.DateTime"/> value to write.</param>
        </member>
        <member name="M:Spike.Text.Json.Linq.JTokenWriter.WriteValue(System.DateTimeOffset)">
            <summary>
            Writes a <see cref="T:System.DateTimeOffset"/> value.
            </summary>
            <param name="value">The <see cref="T:System.DateTimeOffset"/> value to write.</param>
        </member>
        <member name="M:Spike.Text.Json.Linq.JTokenWriter.WriteValue(System.Byte[])">
            <summary>
            Writes a <see cref="T:Byte[]"/> value.
            </summary>
            <param name="value">The <see cref="T:Byte[]"/> value to write.</param>
        </member>
        <member name="M:Spike.Text.Json.Linq.JTokenWriter.WriteValue(System.TimeSpan)">
            <summary>
            Writes a <see cref="T:System.TimeSpan"/> value.
            </summary>
            <param name="value">The <see cref="T:System.TimeSpan"/> value to write.</param>
        </member>
        <member name="M:Spike.Text.Json.Linq.JTokenWriter.WriteValue(System.Guid)">
            <summary>
            Writes a <see cref="T:System.Guid"/> value.
            </summary>
            <param name="value">The <see cref="T:System.Guid"/> value to write.</param>
        </member>
        <member name="M:Spike.Text.Json.Linq.JTokenWriter.WriteValue(System.Uri)">
            <summary>
            Writes a <see cref="T:System.Uri"/> value.
            </summary>
            <param name="value">The <see cref="T:System.Uri"/> value to write.</param>
        </member>
        <member name="P:Spike.Text.Json.Linq.JTokenWriter.Token">
            <summary>
            Gets the token being writen.
            </summary>
            <value>The token being writen.</value>
        </member>
        <member name="T:Spike.Text.Json.MemberSerialization">
            <summary>
            Specifies the member serialization options for the <see cref="T:Spike.Text.Json.JsonSerializer"/>.
            </summary>
        </member>
        <member name="F:Spike.Text.Json.MemberSerialization.OptOut">
            <summary>
            All members are serialized by default. Members can be excluded using the <see cref="T:Spike.Text.Json.JsonIgnoreAttribute"/>.
            </summary>
        </member>
        <member name="F:Spike.Text.Json.MemberSerialization.OptIn">
            <summary>
            Only members must be marked with the <see cref="T:Spike.Text.Json.JsonPropertyAttribute"/> are serialized.
            </summary>
        </member>
        <member name="T:Spike.Text.Json.MissingMemberHandling">
            <summary>
            Specifies missing member handling options for the <see cref="T:Spike.Text.Json.JsonSerializer"/>.
            </summary>
        </member>
        <member name="F:Spike.Text.Json.MissingMemberHandling.Ignore">
            <summary>
            Ignore a missing member and do not attempt to deserialize it.
            </summary>
        </member>
        <member name="F:Spike.Text.Json.MissingMemberHandling.Error">
            <summary>
            Throw a <see cref="T:Spike.Text.Json.JsonSerializationException"/> when a missing member is encountered during deserialization.
            </summary>
        </member>
        <member name="T:Spike.Text.Json.NullValueHandling">
            <summary>
            Specifies null value handling options for the <see cref="T:Spike.Text.Json.JsonSerializer"/>.
            </summary>
        </member>
        <member name="F:Spike.Text.Json.NullValueHandling.Include">
            <summary>
            Include null values when serializing and deserializing objects.
            </summary>
        </member>
        <member name="F:Spike.Text.Json.NullValueHandling.Ignore">
            <summary>
            Ignore null values when serializing and deserializing objects.
            </summary>
        </member>
        <member name="T:Spike.Text.Json.ObjectCreationHandling">
            <summary>
            Specifies how object creation is handled by the <see cref="T:Spike.Text.Json.JsonSerializer"/>.
            </summary>
        </member>
        <member name="F:Spike.Text.Json.ObjectCreationHandling.Auto">
            <summary>
            Reuse existing objects, create new objects when needed.
            </summary>
        </member>
        <member name="F:Spike.Text.Json.ObjectCreationHandling.Reuse">
            <summary>
            Only reuse existing objects.
            </summary>
        </member>
        <member name="F:Spike.Text.Json.ObjectCreationHandling.Replace">
            <summary>
            Always create new objects.
            </summary>
        </member>
        <member name="T:Spike.Text.Json.PreserveReferencesHandling">
            <summary>
            Specifies reference handling options for the <see cref="T:Spike.Text.Json.JsonSerializer"/>.
            </summary>
        </member>
        <member name="F:Spike.Text.Json.PreserveReferencesHandling.None">
            <summary>
            Do not preserve references when serializing types.
            </summary>
        </member>
        <member name="F:Spike.Text.Json.PreserveReferencesHandling.Objects">
            <summary>
            Preserve references when serializing into a JSON object structure.
            </summary>
        </member>
        <member name="F:Spike.Text.Json.PreserveReferencesHandling.Arrays">
            <summary>
            Preserve references when serializing into a JSON array structure.
            </summary>
        </member>
        <member name="F:Spike.Text.Json.PreserveReferencesHandling.All">
            <summary>
            Preserve references when serializing.
            </summary>
        </member>
        <member name="T:Spike.Text.Json.ReferenceLoopHandling">
            <summary>
            Specifies reference loop handling options for the <see cref="T:Spike.Text.Json.JsonSerializer"/>.
            </summary>
        </member>
        <member name="F:Spike.Text.Json.ReferenceLoopHandling.Error">
            <summary>
            Throw a <see cref="T:Spike.Text.Json.JsonSerializationException"/> when a loop is encountered.
            </summary>
        </member>
        <member name="F:Spike.Text.Json.ReferenceLoopHandling.Ignore">
            <summary>
            Ignore loop references and do not serialize.
            </summary>
        </member>
        <member name="F:Spike.Text.Json.ReferenceLoopHandling.Serialize">
            <summary>
            Serialize loop references.
            </summary>
        </member>
        <member name="T:Spike.Text.Json.Required">
            <summary>
            Indicating whether a property is required.
            </summary>
        </member>
        <member name="F:Spike.Text.Json.Required.Default">
            <summary>
            The property is not required. The default state.
            </summary>
        </member>
        <member name="F:Spike.Text.Json.Required.AllowNull">
            <summary>
            The property must be defined in JSON but can be a null value.
            </summary>
        </member>
        <member name="F:Spike.Text.Json.Required.Always">
            <summary>
            The property must be defined in JSON and cannot be a null value.
            </summary>
        </member>
        <member name="T:Spike.Text.Json.Schema.Extensions">
            <summary>
            Contains the JSON schema extension methods.
            </summary>
        </member>
        <member name="M:Spike.Text.Json.Schema.Extensions.IsValid(Spike.Text.Json.Linq.JToken,Spike.Text.Json.Schema.JsonSchema)">
            <summary>
            Determines whether the <see cref="T:Spike.Text.Json.Linq.JToken"/> is valid.
            </summary>
            <param name="source">The source <see cref="T:Spike.Text.Json.Linq.JToken"/> to test.</param>
            <param name="schema">The schema to test with.</param>
            <returns>
            	<c>true</c> if the specified <see cref="T:Spike.Text.Json.Linq.JToken"/> is valid; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Spike.Text.Json.Schema.Extensions.IsValid(Spike.Text.Json.Linq.JToken,Spike.Text.Json.Schema.JsonSchema,System.Collections.Generic.IList{System.String}@)">
            <summary>
            Determines whether the <see cref="T:Spike.Text.Json.Linq.JToken"/> is valid.
            </summary>
            <param name="source">The source <see cref="T:Spike.Text.Json.Linq.JToken"/> to test.</param>
            <param name="schema">The schema to test with.</param>
            <param name="errorMessages">When this method returns, contains any error messages generated while validating. </param>
            <returns>
            	<c>true</c> if the specified <see cref="T:Spike.Text.Json.Linq.JToken"/> is valid; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Spike.Text.Json.Schema.Extensions.Validate(Spike.Text.Json.Linq.JToken,Spike.Text.Json.Schema.JsonSchema)">
            <summary>
            Validates the specified <see cref="T:Spike.Text.Json.Linq.JToken"/>.
            </summary>
            <param name="source">The source <see cref="T:Spike.Text.Json.Linq.JToken"/> to test.</param>
            <param name="schema">The schema to test with.</param>
        </member>
        <member name="M:Spike.Text.Json.Schema.Extensions.Validate(Spike.Text.Json.Linq.JToken,Spike.Text.Json.Schema.JsonSchema,Spike.Text.Json.Schema.ValidationEventHandler)">
            <summary>
            Validates the specified <see cref="T:Spike.Text.Json.Linq.JToken"/>.
            </summary>
            <param name="source">The source <see cref="T:Spike.Text.Json.Linq.JToken"/> to test.</param>
            <param name="schema">The schema to test with.</param>
            <param name="validationEventHandler">The validation event handler.</param>
        </member>
        <member name="T:Spike.Text.Json.Schema.JsonSchema">
            <summary>
            An in-memory representation of a JSON Schema.
            </summary>
        </member>
        <member name="M:Spike.Text.Json.Schema.JsonSchema.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Spike.Text.Json.Schema.JsonSchema"/> class.
            </summary>
        </member>
        <member name="M:Spike.Text.Json.Schema.JsonSchema.Read(Spike.Text.Json.JsonReader)">
            <summary>
            Reads a <see cref="T:Spike.Text.Json.Schema.JsonSchema"/> from the specified <see cref="T:Spike.Text.Json.JsonReader"/>.
            </summary>
            <param name="reader">The <see cref="T:Spike.Text.Json.JsonReader"/> containing the JSON Schema to read.</param>
            <returns>The <see cref="T:Spike.Text.Json.Schema.JsonSchema"/> object representing the JSON Schema.</returns>
        </member>
        <member name="M:Spike.Text.Json.Schema.JsonSchema.Read(Spike.Text.Json.JsonReader,Spike.Text.Json.Schema.JsonSchemaResolver)">
            <summary>
            Reads a <see cref="T:Spike.Text.Json.Schema.JsonSchema"/> from the specified <see cref="T:Spike.Text.Json.JsonReader"/>.
            </summary>
            <param name="reader">The <see cref="T:Spike.Text.Json.JsonReader"/> containing the JSON Schema to read.</param>
            <param name="resolver">The <see cref="T:Spike.Text.Json.Schema.JsonSchemaResolver"/> to use when resolving schema references.</param>
            <returns>The <see cref="T:Spike.Text.Json.Schema.JsonSchema"/> object representing the JSON Schema.</returns>
        </member>
        <member name="M:Spike.Text.Json.Schema.JsonSchema.Parse(System.String)">
            <summary>
            Load a <see cref="T:Spike.Text.Json.Schema.JsonSchema"/> from a string that contains schema JSON.
            </summary>
            <param name="json">A <see cref="T:System.String"/> that contains JSON.</param>
            <returns>A <see cref="T:Spike.Text.Json.Schema.JsonSchema"/> populated from the string that contains JSON.</returns>
        </member>
        <member name="M:Spike.Text.Json.Schema.JsonSchema.Parse(System.String,Spike.Text.Json.Schema.JsonSchemaResolver)">
            <summary>
            Parses the specified json.
            </summary>
            <param name="json">The json.</param>
            <param name="resolver">The resolver.</param>
            <returns>A <see cref="T:Spike.Text.Json.Schema.JsonSchema"/> populated from the string that contains JSON.</returns>
        </member>
        <member name="M:Spike.Text.Json.Schema.JsonSchema.WriteTo(Spike.Text.Json.JsonWriter)">
            <summary>
            Writes this schema to a <see cref="T:Spike.Text.Json.JsonWriter"/>.
            </summary>
            <param name="writer">A <see cref="T:Spike.Text.Json.JsonWriter"/> into which this method will write.</param>
        </member>
        <member name="M:Spike.Text.Json.Schema.JsonSchema.WriteTo(Spike.Text.Json.JsonWriter,Spike.Text.Json.Schema.JsonSchemaResolver)">
            <summary>
            Writes this schema to a <see cref="T:Spike.Text.Json.JsonWriter"/> using the specified <see cref="T:Spike.Text.Json.Schema.JsonSchemaResolver"/>.
            </summary>
            <param name="writer">A <see cref="T:Spike.Text.Json.JsonWriter"/> into which this method will write.</param>
            <param name="resolver">The resolver used.</param>
        </member>
        <member name="M:Spike.Text.Json.Schema.JsonSchema.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents the current <see cref="T:System.Object"/>.
            </summary>
            <returns>
            A <see cref="T:System.String"/> that represents the current <see cref="T:System.Object"/>.
            </returns>
        </member>
        <member name="P:Spike.Text.Json.Schema.JsonSchema.Id">
            <summary>
            Gets or sets the id.
            </summary>
        </member>
        <member name="P:Spike.Text.Json.Schema.JsonSchema.Title">
            <summary>
            Gets or sets the title.
            </summary>
        </member>
        <member name="P:Spike.Text.Json.Schema.JsonSchema.Required">
            <summary>
            Gets or sets whether the object is required.
            </summary>
        </member>
        <member name="P:Spike.Text.Json.Schema.JsonSchema.ReadOnly">
            <summary>
            Gets or sets whether the object is read only.
            </summary>
        </member>
        <member name="P:Spike.Text.Json.Schema.JsonSchema.Hidden">
            <summary>
            Gets or sets whether the object is visible to users.
            </summary>
        </member>
        <member name="P:Spike.Text.Json.Schema.JsonSchema.Transient">
            <summary>
            Gets or sets whether the object is transient.
            </summary>
        </member>
        <member name="P:Spike.Text.Json.Schema.JsonSchema.Description">
            <summary>
            Gets or sets the description of the object.
            </summary>
        </member>
        <member name="P:Spike.Text.Json.Schema.JsonSchema.Type">
            <summary>
            Gets or sets the types of values allowed by the object.
            </summary>
            <value>The type.</value>
        </member>
        <member name="P:Spike.Text.Json.Schema.JsonSchema.Pattern">
            <summary>
            Gets or sets the pattern.
            </summary>
            <value>The pattern.</value>
        </member>
        <member name="P:Spike.Text.Json.Schema.JsonSchema.MinimumLength">
            <summary>
            Gets or sets the minimum length.
            </summary>
            <value>The minimum length.</value>
        </member>
        <member name="P:Spike.Text.Json.Schema.JsonSchema.MaximumLength">
            <summary>
            Gets or sets the maximum length.
            </summary>
            <value>The maximum length.</value>
        </member>
        <member name="P:Spike.Text.Json.Schema.JsonSchema.DivisibleBy">
            <summary>
            Gets or sets a number that the value should be divisble by.
            </summary>
            <value>A number that the value should be divisble by.</value>
        </member>
        <member name="P:Spike.Text.Json.Schema.JsonSchema.Minimum">
            <summary>
            Gets or sets the minimum.
            </summary>
            <value>The minimum.</value>
        </member>
        <member name="P:Spike.Text.Json.Schema.JsonSchema.Maximum">
            <summary>
            Gets or sets the maximum.
            </summary>
            <value>The maximum.</value>
        </member>
        <member name="P:Spike.Text.Json.Schema.JsonSchema.ExclusiveMinimum">
            <summary>
            Gets or sets a flag indicating whether the value can not equal the number defined by the "minimum" attribute.
            </summary>
            <value>A flag indicating whether the value can not equal the number defined by the "minimum" attribute.</value>
        </member>
        <member name="P:Spike.Text.Json.Schema.JsonSchema.ExclusiveMaximum">
            <summary>
            Gets or sets a flag indicating whether the value can not equal the number defined by the "maximum" attribute.
            </summary>
            <value>A flag indicating whether the value can not equal the number defined by the "maximum" attribute.</value>
        </member>
        <member name="P:Spike.Text.Json.Schema.JsonSchema.MinimumItems">
            <summary>
            Gets or sets the minimum number of items.
            </summary>
            <value>The minimum number of items.</value>
        </member>
        <member name="P:Spike.Text.Json.Schema.JsonSchema.MaximumItems">
            <summary>
            Gets or sets the maximum number of items.
            </summary>
            <value>The maximum number of items.</value>
        </member>
        <member name="P:Spike.Text.Json.Schema.JsonSchema.Items">
            <summary>
            Gets or sets the <see cref="T:Spike.Text.Json.Schema.JsonSchema"/> of items.
            </summary>
            <value>The <see cref="T:Spike.Text.Json.Schema.JsonSchema"/> of items.</value>
        </member>
        <member name="P:Spike.Text.Json.Schema.JsonSchema.Properties">
            <summary>
            Gets or sets the <see cref="T:Spike.Text.Json.Schema.JsonSchema"/> of properties.
            </summary>
            <value>The <see cref="T:Spike.Text.Json.Schema.JsonSchema"/> of properties.</value>
        </member>
        <member name="P:Spike.Text.Json.Schema.JsonSchema.AdditionalProperties">
            <summary>
            Gets or sets the <see cref="T:Spike.Text.Json.Schema.JsonSchema"/> of additional properties.
            </summary>
            <value>The <see cref="T:Spike.Text.Json.Schema.JsonSchema"/> of additional properties.</value>
        </member>
        <member name="P:Spike.Text.Json.Schema.JsonSchema.PatternProperties">
            <summary>
            Gets or sets the pattern properties.
            </summary>
            <value>The pattern properties.</value>
        </member>
        <member name="P:Spike.Text.Json.Schema.JsonSchema.AllowAdditionalProperties">
            <summary>
            Gets or sets a value indicating whether additional properties are allowed.
            </summary>
            <value>
            	<c>true</c> if additional properties are allowed; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Spike.Text.Json.Schema.JsonSchema.Requires">
            <summary>
            Gets or sets the required property if this property is present.
            </summary>
            <value>The required property if this property is present.</value>
        </member>
        <member name="P:Spike.Text.Json.Schema.JsonSchema.Identity">
            <summary>
            Gets or sets the identity.
            </summary>
            <value>The identity.</value>
        </member>
        <member name="P:Spike.Text.Json.Schema.JsonSchema.Enum">
            <summary>
            Gets or sets the a collection of valid enum values allowed.
            </summary>
            <value>A collection of valid enum values allowed.</value>
        </member>
        <member name="P:Spike.Text.Json.Schema.JsonSchema.Options">
            <summary>
            Gets or sets a collection of options.
            </summary>
            <value>A collection of options.</value>
        </member>
        <member name="P:Spike.Text.Json.Schema.JsonSchema.Disallow">
            <summary>
            Gets or sets disallowed types.
            </summary>
            <value>The disallow types.</value>
        </member>
        <member name="P:Spike.Text.Json.Schema.JsonSchema.Default">
            <summary>
            Gets or sets the default value.
            </summary>
            <value>The default value.</value>
        </member>
        <member name="P:Spike.Text.Json.Schema.JsonSchema.Extends">
            <summary>
            Gets or sets the extend <see cref="T:Spike.Text.Json.Schema.JsonSchema"/>.
            </summary>
            <value>The extended <see cref="T:Spike.Text.Json.Schema.JsonSchema"/>.</value>
        </member>
        <member name="P:Spike.Text.Json.Schema.JsonSchema.Format">
            <summary>
            Gets or sets the format.
            </summary>
            <value>The format.</value>
        </member>
        <member name="T:Spike.Text.Json.Schema.JsonSchemaException">
            <summary>
            Returns detailed information about the schema exception.
            </summary>
        </member>
        <member name="M:Spike.Text.Json.Schema.JsonSchemaException.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Spike.Text.Json.Schema.JsonSchemaException"/> class.
            </summary>
        </member>
        <member name="M:Spike.Text.Json.Schema.JsonSchemaException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Spike.Text.Json.Schema.JsonSchemaException"/> class
            with a specified error message.
            </summary>
            <param name="message">The error message that explains the reason for the exception.</param>
        </member>
        <member name="M:Spike.Text.Json.Schema.JsonSchemaException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:Spike.Text.Json.Schema.JsonSchemaException"/> class
            with a specified error message and a reference to the inner exception that is the cause of this exception.
            </summary>
            <param name="message">The error message that explains the reason for the exception.</param>
            <param name="innerException">The exception that is the cause of the current exception, or a null reference (Nothing in Visual Basic) if no inner exception is specified.</param>
        </member>
        <member name="M:Spike.Text.Json.Schema.JsonSchemaException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:Spike.Text.Json.Schema.JsonSchemaException"/> class.
            </summary>
            <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo"/> that holds the serialized object data about the exception being thrown.</param>
            <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext"/> that contains contextual information about the source or destination.</param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="info"/> parameter is null. </exception>
            <exception cref="T:System.Runtime.Serialization.SerializationException">The class name is null or <see cref="P:System.Exception.HResult"/> is zero (0). </exception>
        </member>
        <member name="P:Spike.Text.Json.Schema.JsonSchemaException.LineNumber">
            <summary>
            Gets the line number indicating where the error occurred.
            </summary>
            <value>The line number indicating where the error occurred.</value>
        </member>
        <member name="P:Spike.Text.Json.Schema.JsonSchemaException.LinePosition">
            <summary>
            Gets the line position indicating where the error occurred.
            </summary>
            <value>The line position indicating where the error occurred.</value>
        </member>
        <member name="T:Spike.Text.Json.Schema.JsonSchemaGenerator">
            <summary>
            Generates a <see cref="T:Spike.Text.Json.Schema.JsonSchema"/> from a specified <see cref="T:System.Type"/>.
            </summary>
        </member>
        <member name="M:Spike.Text.Json.Schema.JsonSchemaGenerator.Generate(System.Type)">
            <summary>
            Generate a <see cref="T:Spike.Text.Json.Schema.JsonSchema"/> from the specified type.
            </summary>
            <param name="type">The type to generate a <see cref="T:Spike.Text.Json.Schema.JsonSchema"/> from.</param>
            <returns>A <see cref="T:Spike.Text.Json.Schema.JsonSchema"/> generated from the specified type.</returns>
        </member>
        <member name="M:Spike.Text.Json.Schema.JsonSchemaGenerator.Generate(System.Type,Spike.Text.Json.Schema.JsonSchemaResolver)">
            <summary>
            Generate a <see cref="T:Spike.Text.Json.Schema.JsonSchema"/> from the specified type.
            </summary>
            <param name="type">The type to generate a <see cref="T:Spike.Text.Json.Schema.JsonSchema"/> from.</param>
            <param name="resolver">The <see cref="T:Spike.Text.Json.Schema.JsonSchemaResolver"/> used to resolve schema references.</param>
            <returns>A <see cref="T:Spike.Text.Json.Schema.JsonSchema"/> generated from the specified type.</returns>
        </member>
        <member name="M:Spike.Text.Json.Schema.JsonSchemaGenerator.Generate(System.Type,System.Boolean)">
            <summary>
            Generate a <see cref="T:Spike.Text.Json.Schema.JsonSchema"/> from the specified type.
            </summary>
            <param name="type">The type to generate a <see cref="T:Spike.Text.Json.Schema.JsonSchema"/> from.</param>
            <param name="rootSchemaNullable">Specify whether the generated root <see cref="T:Spike.Text.Json.Schema.JsonSchema"/> will be nullable.</param>
            <returns>A <see cref="T:Spike.Text.Json.Schema.JsonSchema"/> generated from the specified type.</returns>
        </member>
        <member name="M:Spike.Text.Json.Schema.JsonSchemaGenerator.Generate(System.Type,Spike.Text.Json.Schema.JsonSchemaResolver,System.Boolean)">
            <summary>
            Generate a <see cref="T:Spike.Text.Json.Schema.JsonSchema"/> from the specified type.
            </summary>
            <param name="type">The type to generate a <see cref="T:Spike.Text.Json.Schema.JsonSchema"/> from.</param>
            <param name="resolver">The <see cref="T:Spike.Text.Json.Schema.JsonSchemaResolver"/> used to resolve schema references.</param>
            <param name="rootSchemaNullable">Specify whether the generated root <see cref="T:Spike.Text.Json.Schema.JsonSchema"/> will be nullable.</param>
            <returns>A <see cref="T:Spike.Text.Json.Schema.JsonSchema"/> generated from the specified type.</returns>
        </member>
        <member name="P:Spike.Text.Json.Schema.JsonSchemaGenerator.UndefinedSchemaIdHandling">
            <summary>
            Gets or sets how undefined schemas are handled by the serializer.
            </summary>
        </member>
        <member name="P:Spike.Text.Json.Schema.JsonSchemaGenerator.ContractResolver">
            <summary>
            Gets or sets the contract resolver.
            </summary>
            <value>The contract resolver.</value>
        </member>
        <member name="T:Spike.Text.Json.Schema.JsonSchemaResolver">
            <summary>
            Resolves <see cref="T:Spike.Text.Json.Schema.JsonSchema"/> from an id.
            </summary>
        </member>
        <member name="M:Spike.Text.Json.Schema.JsonSchemaResolver.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Spike.Text.Json.Schema.JsonSchemaResolver"/> class.
            </summary>
        </member>
        <member name="M:Spike.Text.Json.Schema.JsonSchemaResolver.GetSchema(System.String)">
            <summary>
            Gets a <see cref="T:Spike.Text.Json.Schema.JsonSchema"/> for the specified id.
            </summary>
            <param name="id">The id.</param>
            <returns>A <see cref="T:Spike.Text.Json.Schema.JsonSchema"/> for the specified id.</returns>
        </member>
        <member name="P:Spike.Text.Json.Schema.JsonSchemaResolver.LoadedSchemas">
            <summary>
            Gets or sets the loaded schemas.
            </summary>
            <value>The loaded schemas.</value>
        </member>
        <member name="T:Spike.Text.Json.Schema.JsonSchemaType">
            <summary>
            The value types allowed by the <see cref="T:Spike.Text.Json.Schema.JsonSchema"/>.
            </summary>
        </member>
        <member name="F:Spike.Text.Json.Schema.JsonSchemaType.None">
            <summary>
            No type specified.
            </summary>
        </member>
        <member name="F:Spike.Text.Json.Schema.JsonSchemaType.String">
            <summary>
            String type.
            </summary>
        </member>
        <member name="F:Spike.Text.Json.Schema.JsonSchemaType.Float">
            <summary>
            Float type.
            </summary>
        </member>
        <member name="F:Spike.Text.Json.Schema.JsonSchemaType.Integer">
            <summary>
            Integer type.
            </summary>
        </member>
        <member name="F:Spike.Text.Json.Schema.JsonSchemaType.Boolean">
            <summary>
            Boolean type.
            </summary>
        </member>
        <member name="F:Spike.Text.Json.Schema.JsonSchemaType.Object">
            <summary>
            Object type.
            </summary>
        </member>
        <member name="F:Spike.Text.Json.Schema.JsonSchemaType.Array">
            <summary>
            Array type.
            </summary>
        </member>
        <member name="F:Spike.Text.Json.Schema.JsonSchemaType.Null">
            <summary>
            Null type.
            </summary>
        </member>
        <member name="F:Spike.Text.Json.Schema.JsonSchemaType.Any">
            <summary>
            Any type.
            </summary>
        </member>
        <member name="T:Spike.Text.Json.Schema.UndefinedSchemaIdHandling">
            <summary>
            Specifies undefined schema Id handling options for the <see cref="T:Spike.Text.Json.Schema.JsonSchemaGenerator"/>.
            </summary>
        </member>
        <member name="F:Spike.Text.Json.Schema.UndefinedSchemaIdHandling.None">
            <summary>
            Do not infer a schema Id.
            </summary>
        </member>
        <member name="F:Spike.Text.Json.Schema.UndefinedSchemaIdHandling.UseTypeName">
            <summary>
            Use the .NET type name as the schema Id.
            </summary>
        </member>
        <member name="F:Spike.Text.Json.Schema.UndefinedSchemaIdHandling.UseAssemblyQualifiedName">
            <summary>
            Use the assembly qualified .NET type name as the schema Id.
            </summary>
        </member>
        <member name="T:Spike.Text.Json.Schema.ValidationEventArgs">
            <summary>
            Returns detailed information related to the <see cref="T:Spike.Text.Json.Schema.ValidationEventHandler"/>.
            </summary>
        </member>
        <member name="P:Spike.Text.Json.Schema.ValidationEventArgs.Exception">
            <summary>
            Gets the <see cref="T:Spike.Text.Json.Schema.JsonSchemaException"/> associated with the validation event.
            </summary>
            <value>The JsonSchemaException associated with the validation event.</value>
        </member>
        <member name="P:Spike.Text.Json.Schema.ValidationEventArgs.Message">
            <summary>
            Gets the text description corresponding to the validation event.
            </summary>
            <value>The text description.</value>
        </member>
        <member name="T:Spike.Text.Json.Schema.ValidationEventHandler">
            <summary>
            Represents the callback method that will handle JSON schema validation events and the <see cref="T:Spike.Text.Json.Schema.ValidationEventArgs"/>.
            </summary>
        </member>
        <member name="T:Spike.Text.Json.Serialization.CamelCasePropertyNamesContractResolver">
            <summary>
            Resolves member mappings for a type, camel casing property names.
            </summary>
        </member>
        <member name="T:Spike.Text.Json.Serialization.DefaultContractResolver">
            <summary>
            Used by <see cref="T:Spike.Text.Json.JsonSerializer"/> to resolves a <see cref="T:Spike.Text.Json.Serialization.JsonContract"/> for a given <see cref="T:System.Type"/>.
            </summary>
        </member>
        <member name="T:Spike.Text.Json.Serialization.IContractResolver">
            <summary>
            Used by <see cref="T:Spike.Text.Json.JsonSerializer"/> to resolves a <see cref="T:Spike.Text.Json.Serialization.JsonContract"/> for a given <see cref="T:System.Type"/>.
            </summary>
        </member>
        <member name="M:Spike.Text.Json.Serialization.IContractResolver.ResolveContract(System.Type)">
            <summary>
            Resolves the contract for a given type.
            </summary>
            <param name="type">The type to resolve a contract for.</param>
            <returns>The contract for a given type.</returns>
        </member>
        <member name="M:Spike.Text.Json.Serialization.DefaultContractResolver.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Spike.Text.Json.Serialization.DefaultContractResolver"/> class.
            </summary>
        </member>
        <member name="M:Spike.Text.Json.Serialization.DefaultContractResolver.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Spike.Text.Json.Serialization.DefaultContractResolver"/> class.
            </summary>
            <param name="shareCache">
            If set to <c>true</c> the <see cref="T:Spike.Text.Json.Serialization.DefaultContractResolver"/> will use a cached shared with other resolvers of the same type.
            Sharing the cache will significantly performance because expensive reflection will only happen once but could cause unexpected
            behavior if different instances of the resolver are suppose to produce different results. When set to false it is highly
            recommended to reuse <see cref="T:Spike.Text.Json.Serialization.DefaultContractResolver"/> instances with the <see cref="T:Spike.Text.Json.JsonSerializer"/>.
            </param>
        </member>
        <member name="M:Spike.Text.Json.Serialization.DefaultContractResolver.ResolveContract(System.Type)">
            <summary>
            Resolves the contract for a given type.
            </summary>
            <param name="type">The type to resolve a contract for.</param>
            <returns>The contract for a given type.</returns>
        </member>
        <member name="M:Spike.Text.Json.Serialization.DefaultContractResolver.GetSerializableMembers(System.Type)">
            <summary>
            Gets the serializable members for the type.
            </summary>
            <param name="objectType">The type to get serializable members for.</param>
            <returns>The serializable members for the type.</returns>
        </member>
        <member name="M:Spike.Text.Json.Serialization.DefaultContractResolver.CreateObjectContract(System.Type)">
            <summary>
            Creates a <see cref="T:Spike.Text.Json.Serialization.JsonObjectContract"/> for the given type.
            </summary>
            <param name="objectType">Type of the object.</param>
            <returns>A <see cref="T:Spike.Text.Json.Serialization.JsonObjectContract"/> for the given type.</returns>
        </member>
        <member name="M:Spike.Text.Json.Serialization.DefaultContractResolver.CreateConstructorParameters(System.Reflection.ConstructorInfo,Spike.Text.Json.Serialization.JsonPropertyCollection)">
            <summary>
            Creates the constructor parameters.
            </summary>
            <param name="constructor">The constructor to create properties for.</param>
            <param name="memberProperties">The type's member properties.</param>
            <returns>Properties for the given <see cref="T:System.Reflection.ConstructorInfo"/>.</returns>
        </member>
        <member name="M:Spike.Text.Json.Serialization.DefaultContractResolver.CreatePropertyFromConstructorParameter(Spike.Text.Json.Serialization.JsonProperty,System.Reflection.ParameterInfo)">
            <summary>
            Creates a <see cref="T:Spike.Text.Json.Serialization.JsonProperty"/> for the given <see cref="T:System.Reflection.ParameterInfo"/>.
            </summary>
            <param name="matchingMemberProperty">The matching member property.</param>
            <param name="parameterInfo">The constructor parameter.</param>
            <returns>A created <see cref="T:Spike.Text.Json.Serialization.JsonProperty"/> for the given <see cref="T:System.Reflection.ParameterInfo"/>.</returns>
        </member>
        <member name="M:Spike.Text.Json.Serialization.DefaultContractResolver.ResolveContractConverter(System.Type)">
            <summary>
            Resolves the default <see cref="T:Spike.Text.Json.JsonConverter"/> for the contract.
            </summary>
            <param name="objectType">Type of the object.</param>
            <returns></returns>
        </member>
        <member name="M:Spike.Text.Json.Serialization.DefaultContractResolver.CreateDictionaryContract(System.Type)">
            <summary>
            Creates a <see cref="T:Spike.Text.Json.Serialization.JsonDictionaryContract"/> for the given type.
            </summary>
            <param name="objectType">Type of the object.</param>
            <returns>A <see cref="T:Spike.Text.Json.Serialization.JsonDictionaryContract"/> for the given type.</returns>
        </member>
        <member name="M:Spike.Text.Json.Serialization.DefaultContractResolver.CreateArrayContract(System.Type)">
            <summary>
            Creates a <see cref="T:Spike.Text.Json.Serialization.JsonArrayContract"/> for the given type.
            </summary>
            <param name="objectType">Type of the object.</param>
            <returns>A <see cref="T:Spike.Text.Json.Serialization.JsonArrayContract"/> for the given type.</returns>
        </member>
        <member name="M:Spike.Text.Json.Serialization.DefaultContractResolver.CreatePrimitiveContract(System.Type)">
            <summary>
            Creates a <see cref="T:Spike.Text.Json.Serialization.JsonPrimitiveContract"/> for the given type.
            </summary>
            <param name="objectType">Type of the object.</param>
            <returns>A <see cref="T:Spike.Text.Json.Serialization.JsonPrimitiveContract"/> for the given type.</returns>
        </member>
        <member name="M:Spike.Text.Json.Serialization.DefaultContractResolver.CreateLinqContract(System.Type)">
            <summary>
            Creates a <see cref="T:Spike.Text.Json.Serialization.JsonLinqContract"/> for the given type.
            </summary>
            <param name="objectType">Type of the object.</param>
            <returns>A <see cref="T:Spike.Text.Json.Serialization.JsonLinqContract"/> for the given type.</returns>
        </member>
        <member name="M:Spike.Text.Json.Serialization.DefaultContractResolver.CreateISerializableContract(System.Type)">
            <summary>
            Creates a <see cref="T:Spike.Text.Json.Serialization.JsonISerializableContract"/> for the given type.
            </summary>
            <param name="objectType">Type of the object.</param>
            <returns>A <see cref="T:Spike.Text.Json.Serialization.JsonISerializableContract"/> for the given type.</returns>
        </member>
        <member name="M:Spike.Text.Json.Serialization.DefaultContractResolver.CreateDynamicContract(System.Type)">
            <summary>
            Creates a <see cref="T:Spike.Text.Json.Serialization.JsonDynamicContract"/> for the given type.
            </summary>
            <param name="objectType">Type of the object.</param>
            <returns>A <see cref="T:Spike.Text.Json.Serialization.JsonDynamicContract"/> for the given type.</returns>
        </member>
        <member name="M:Spike.Text.Json.Serialization.DefaultContractResolver.CreateStringContract(System.Type)">
            <summary>
            Creates a <see cref="T:Spike.Text.Json.Serialization.JsonStringContract"/> for the given type.
            </summary>
            <param name="objectType">Type of the object.</param>
            <returns>A <see cref="T:Spike.Text.Json.Serialization.JsonStringContract"/> for the given type.</returns>
        </member>
        <member name="M:Spike.Text.Json.Serialization.DefaultContractResolver.CreateContract(System.Type)">
            <summary>
            Determines which contract type is created for the given type.
            </summary>
            <param name="objectType">Type of the object.</param>
            <returns>A <see cref="T:Spike.Text.Json.Serialization.JsonContract"/> for the given type.</returns>
        </member>
        <member name="M:Spike.Text.Json.Serialization.DefaultContractResolver.CreateProperties(System.Type,Spike.Text.Json.MemberSerialization)">
            <summary>
            Creates properties for the given <see cref="T:Spike.Text.Json.Serialization.JsonContract"/>.
            </summary>
            <param name="type">The type to create properties for.</param>
            /// <param name="memberSerialization">The member serialization mode for the type.</param>
            <returns>Properties for the given <see cref="T:Spike.Text.Json.Serialization.JsonContract"/>.</returns>
        </member>
        <member name="M:Spike.Text.Json.Serialization.DefaultContractResolver.CreateMemberValueProvider(System.Reflection.MemberInfo)">
            <summary>
            Creates the <see cref="T:Spike.Text.Json.Serialization.IValueProvider"/> used by the serializer to get and set values from a member.
            </summary>
            <param name="member">The member.</param>
            <returns>The <see cref="T:Spike.Text.Json.Serialization.IValueProvider"/> used by the serializer to get and set values from a member.</returns>
        </member>
        <member name="M:Spike.Text.Json.Serialization.DefaultContractResolver.CreateProperty(System.Reflection.MemberInfo,Spike.Text.Json.MemberSerialization)">
            <summary>
            Creates a <see cref="T:Spike.Text.Json.Serialization.JsonProperty"/> for the given <see cref="T:System.Reflection.MemberInfo"/>.
            </summary>
            <param name="memberSerialization">The member's parent <see cref="T:Spike.Text.Json.MemberSerialization"/>.</param>
            <param name="member">The member to create a <see cref="T:Spike.Text.Json.Serialization.JsonProperty"/> for.</param>
            <returns>A created <see cref="T:Spike.Text.Json.Serialization.JsonProperty"/> for the given <see cref="T:System.Reflection.MemberInfo"/>.</returns>
        </member>
        <member name="M:Spike.Text.Json.Serialization.DefaultContractResolver.ResolvePropertyName(System.String)">
            <summary>
            Resolves the name of the property.
            </summary>
            <param name="propertyName">Name of the property.</param>
            <returns>Name of the property.</returns>
        </member>
        <member name="P:Spike.Text.Json.Serialization.DefaultContractResolver.DynamicCodeGeneration">
            <summary>
            Gets a value indicating whether members are being get and set using dynamic code generation.
            This value is determined by the runtime permissions available.
            </summary>
            <value>
            	<c>true</c> if using dynamic code generation; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Spike.Text.Json.Serialization.DefaultContractResolver.DefaultMembersSearchFlags">
            <summary>
            Gets or sets the default members search flags.
            </summary>
            <value>The default members search flags.</value>
        </member>
        <member name="P:Spike.Text.Json.Serialization.DefaultContractResolver.SerializeCompilerGeneratedMembers">
            <summary>
            Gets or sets a value indicating whether compiler generated members should be serialized.
            </summary>
            <value>
            	<c>true</c> if serialized compiler generated members; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="M:Spike.Text.Json.Serialization.CamelCasePropertyNamesContractResolver.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Spike.Text.Json.Serialization.CamelCasePropertyNamesContractResolver"/> class.
            </summary>
        </member>
        <member name="M:Spike.Text.Json.Serialization.CamelCasePropertyNamesContractResolver.ResolvePropertyName(System.String)">
            <summary>
            Resolves the name of the property.
            </summary>
            <param name="propertyName">Name of the property.</param>
            <returns>The property name camel cased.</returns>
        </member>
        <member name="T:Spike.Text.Json.Serialization.IReferenceResolver">
            <summary>
            Used to resolve references when serializing and deserializing JSON by the <see cref="T:Spike.Text.Json.JsonSerializer"/>.
            </summary>
        </member>
        <member name="M:Spike.Text.Json.Serialization.IReferenceResolver.ResolveReference(System.Object,System.String)">
            <summary>
            Resolves a reference to its object.
            </summary>
            <param name="context">The serialization context.</param>
            <param name="reference">The reference to resolve.</param>
            <returns>The object that</returns>
        </member>
        <member name="M:Spike.Text.Json.Serialization.IReferenceResolver.GetReference(System.Object,System.Object)">
            <summary>
            Gets the reference for the sepecified object.
            </summary>
            <param name="context">The serialization context.</param>
            <param name="value">The object to get a reference for.</param>
            <returns>The reference to the object.</returns>
        </member>
        <member name="M:Spike.Text.Json.Serialization.IReferenceResolver.IsReferenced(System.Object,System.Object)">
            <summary>
            Determines whether the specified object is referenced.
            </summary>
            <param name="context">The serialization context.</param>
            <param name="value">The object to test for a reference.</param>
            <returns>
            	<c>true</c> if the specified object is referenced; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Spike.Text.Json.Serialization.IReferenceResolver.AddReference(System.Object,System.String,System.Object)">
            <summary>
            Adds a reference to the specified object.
            </summary>
            <param name="context">The serialization context.</param>
            <param name="reference">The reference.</param>
            <param name="value">The object to reference.</param>
        </member>
        <member name="T:Spike.Text.Json.Serialization.DefaultSerializationBinder">
            <summary>
            The default serialization binder used when resolving and loading classes from type names.
            </summary>
        </member>
        <member name="M:Spike.Text.Json.Serialization.DefaultSerializationBinder.BindToType(System.String,System.String)">
            <summary>
            When overridden in a derived class, controls the binding of a serialized object to a type.
            </summary>
            <param name="assemblyName">Specifies the <see cref="T:System.Reflection.Assembly"/> name of the serialized object.</param>
            <param name="typeName">Specifies the <see cref="T:System.Type"/> name of the serialized object.</param>
            <returns>
            The type of the object the formatter creates a new instance of.
            </returns>
        </member>
        <member name="M:Spike.Text.Json.Serialization.DefaultSerializationBinder.BindToName(System.Type,System.String@,System.String@)">
            <summary>
            When overridden in a derived class, controls the binding of a serialized object to a type.
            </summary>
            <param name="serializedType">The type of the object the formatter creates a new instance of.</param>
            <param name="assemblyName">Specifies the <see cref="T:System.Reflection.Assembly"/> name of the serialized object. </param>
            <param name="typeName">Specifies the <see cref="T:System.Type"/> name of the serialized object. </param>
        </member>
        <member name="T:Spike.Text.Json.Serialization.DynamicValueProvider">
            <summary>
            Get and set values for a <see cref="T:System.Reflection.MemberInfo"/> using dynamic methods.
            </summary>
        </member>
        <member name="T:Spike.Text.Json.Serialization.IValueProvider">
            <summary>
            Provides methods to get and set values.
            </summary>
        </member>
        <member name="M:Spike.Text.Json.Serialization.IValueProvider.SetValue(System.Object,System.Object)">
            <summary>
            Sets the value.
            </summary>
            <param name="target">The target to set the value on.</param>
            <param name="value">The value to set on the target.</param>
        </member>
        <member name="M:Spike.Text.Json.Serialization.IValueProvider.GetValue(System.Object)">
            <summary>
            Gets the value.
            </summary>
            <param name="target">The target to get the value from.</param>
            <returns>The value.</returns>
        </member>
        <member name="M:Spike.Text.Json.Serialization.DynamicValueProvider.#ctor(System.Reflection.MemberInfo)">
            <summary>
            Initializes a new instance of the <see cref="T:Spike.Text.Json.Serialization.DynamicValueProvider"/> class.
            </summary>
            <param name="memberInfo">The member info.</param>
        </member>
        <member name="M:Spike.Text.Json.Serialization.DynamicValueProvider.SetValue(System.Object,System.Object)">
            <summary>
            Sets the value.
            </summary>
            <param name="target">The target to set the value on.</param>
            <param name="value">The value to set on the target.</param>
        </member>
        <member name="M:Spike.Text.Json.Serialization.DynamicValueProvider.GetValue(System.Object)">
            <summary>
            Gets the value.
            </summary>
            <param name="target">The target to get the value from.</param>
            <returns>The value.</returns>
        </member>
        <member name="T:Spike.Text.Json.Serialization.ErrorContext">
            <summary>
            Provides information surrounding an error.
            </summary>
        </member>
        <member name="P:Spike.Text.Json.Serialization.ErrorContext.Error">
            <summary>
            Gets or sets the error.
            </summary>
            <value>The error.</value>
        </member>
        <member name="P:Spike.Text.Json.Serialization.ErrorContext.OriginalObject">
            <summary>
            Gets the original object that caused the error.
            </summary>
            <value>The original object that caused the error.</value>
        </member>
        <member name="P:Spike.Text.Json.Serialization.ErrorContext.Member">
            <summary>
            Gets the member that caused the error.
            </summary>
            <value>The member that caused the error.</value>
        </member>
        <member name="P:Spike.Text.Json.Serialization.ErrorContext.Handled">
            <summary>
            Gets or sets a value indicating whether this <see cref="T:Spike.Text.Json.Serialization.ErrorContext"/> is handled.
            </summary>
            <value><c>true</c> if handled; otherwise, <c>false</c>.</value>
        </member>
        <member name="T:Spike.Text.Json.Serialization.ErrorEventArgs">
            <summary>
            Provides data for the Error event.
            </summary>
        </member>
        <member name="M:Spike.Text.Json.Serialization.ErrorEventArgs.#ctor(System.Object,Spike.Text.Json.Serialization.ErrorContext)">
            <summary>
            Initializes a new instance of the <see cref="T:Spike.Text.Json.Serialization.ErrorEventArgs"/> class.
            </summary>
            <param name="currentObject">The current object.</param>
            <param name="errorContext">The error context.</param>
        </member>
        <member name="P:Spike.Text.Json.Serialization.ErrorEventArgs.CurrentObject">
            <summary>
            Gets the current object the error event is being raised against.
            </summary>
            <value>The current object the error event is being raised against.</value>
        </member>
        <member name="P:Spike.Text.Json.Serialization.ErrorEventArgs.ErrorContext">
            <summary>
            Gets the error context.
            </summary>
            <value>The error context.</value>
        </member>
        <member name="T:Spike.Text.Json.Serialization.JsonArrayContract">
            <summary>
            Contract details for a <see cref="T:System.Type"/> used by the <see cref="T:Spike.Text.Json.JsonSerializer"/>.
            </summary>
        </member>
        <member name="T:Spike.Text.Json.Serialization.JsonContract">
            <summary>
            Contract details for a <see cref="T:System.Type"/> used by the <see cref="T:Spike.Text.Json.JsonSerializer"/>.
            </summary>
        </member>
        <member name="P:Spike.Text.Json.Serialization.JsonContract.UnderlyingType">
            <summary>
            Gets the underlying type for the contract.
            </summary>
            <value>The underlying type for the contract.</value>
        </member>
        <member name="P:Spike.Text.Json.Serialization.JsonContract.CreatedType">
            <summary>
            Gets or sets the type created during deserialization.
            </summary>
            <value>The type created during deserialization.</value>
        </member>
        <member name="P:Spike.Text.Json.Serialization.JsonContract.IsReference">
            <summary>
            Gets or sets whether this type contract is serialized as a reference.
            </summary>
            <value>Whether this type contract is serialized as a reference.</value>
        </member>
        <member name="P:Spike.Text.Json.Serialization.JsonContract.Converter">
            <summary>
            Gets or sets the default <see cref="T:Spike.Text.Json.JsonConverter"/> for this contract.
            </summary>
            <value>The converter.</value>
        </member>
        <member name="P:Spike.Text.Json.Serialization.JsonContract.OnDeserialized">
            <summary>
            Gets or sets the method called immediately after deserialization of the object.
            </summary>
            <value>The method called immediately after deserialization of the object.</value>
        </member>
        <member name="P:Spike.Text.Json.Serialization.JsonContract.OnDeserializing">
            <summary>
            Gets or sets the method called during deserialization of the object.
            </summary>
            <value>The method called during deserialization of the object.</value>
        </member>
        <member name="P:Spike.Text.Json.Serialization.JsonContract.OnSerialized">
            <summary>
            Gets or sets the method called after serialization of the object graph.
            </summary>
            <value>The method called after serialization of the object graph.</value>
        </member>
        <member name="P:Spike.Text.Json.Serialization.JsonContract.OnSerializing">
            <summary>
            Gets or sets the method called before serialization of the object.
            </summary>
            <value>The method called before serialization of the object.</value>
        </member>
        <member name="P:Spike.Text.Json.Serialization.JsonContract.DefaultCreator">
            <summary>
            Gets or sets the default creator method used to create the object.
            </summary>
            <value>The default creator method used to create the object.</value>
        </member>
        <member name="P:Spike.Text.Json.Serialization.JsonContract.DefaultCreatorNonPublic">
            <summary>
            Gets or sets a value indicating whether [default creator non public].
            </summary>
            <value><c>true</c> if the default object creator is non-public; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Spike.Text.Json.Serialization.JsonContract.OnError">
            <summary>
            Gets or sets the method called when an error is thrown during the serialization of the object.
            </summary>
            <value>The method called when an error is thrown during the serialization of the object.</value>
        </member>
        <member name="M:Spike.Text.Json.Serialization.JsonArrayContract.#ctor(System.Type)">
            <summary>
            Initializes a new instance of the <see cref="T:Spike.Text.Json.Serialization.JsonArrayContract"/> class.
            </summary>
            <param name="underlyingType">The underlying type for the contract.</param>
        </member>
        <member name="T:Spike.Text.Json.Serialization.JsonDictionaryContract">
            <summary>
            Contract details for a <see cref="T:System.Type"/> used by the <see cref="T:Spike.Text.Json.JsonSerializer"/>.
            </summary>
        </member>
        <member name="M:Spike.Text.Json.Serialization.JsonDictionaryContract.#ctor(System.Type)">
            <summary>
            Initializes a new instance of the <see cref="T:Spike.Text.Json.Serialization.JsonDictionaryContract"/> class.
            </summary>
            <param name="underlyingType">The underlying type for the contract.</param>
        </member>
        <member name="P:Spike.Text.Json.Serialization.JsonDictionaryContract.PropertyNameResolver">
            <summary>
            Gets or sets the property name resolver.
            </summary>
            <value>The property name resolver.</value>
        </member>
        <member name="T:Spike.Text.Json.Serialization.JsonDynamicContract">
            <summary>
            Contract details for a <see cref="T:System.Type"/> used by the <see cref="T:Spike.Text.Json.JsonSerializer"/>.
            </summary>
        </member>
        <member name="M:Spike.Text.Json.Serialization.JsonDynamicContract.#ctor(System.Type)">
            <summary>
            Initializes a new instance of the <see cref="T:Spike.Text.Json.Serialization.JsonDynamicContract"/> class.
            </summary>
            <param name="underlyingType">The underlying type for the contract.</param>
        </member>
        <member name="P:Spike.Text.Json.Serialization.JsonDynamicContract.Properties">
            <summary>
            Gets the object's properties.
            </summary>
            <value>The object's properties.</value>
        </member>
        <member name="P:Spike.Text.Json.Serialization.JsonDynamicContract.PropertyNameResolver">
            <summary>
            Gets or sets the property name resolver.
            </summary>
            <value>The property name resolver.</value>
        </member>
        <member name="T:Spike.Text.Json.Serialization.JsonISerializableContract">
            <summary>
            Contract details for a <see cref="T:System.Type"/> used by the <see cref="T:Spike.Text.Json.JsonSerializer"/>.
            </summary>
        </member>
        <member name="M:Spike.Text.Json.Serialization.JsonISerializableContract.#ctor(System.Type)">
            <summary>
            Initializes a new instance of the <see cref="T:Spike.Text.Json.Serialization.JsonISerializableContract"/> class.
            </summary>
            <param name="underlyingType">The underlying type for the contract.</param>
        </member>
        <member name="P:Spike.Text.Json.Serialization.JsonISerializableContract.ISerializableCreator">
            <summary>
            Gets or sets the ISerializable object constructor.
            </summary>
            <value>The ISerializable object constructor.</value>
        </member>
        <member name="T:Spike.Text.Json.Serialization.JsonLinqContract">
            <summary>
            Contract details for a <see cref="T:System.Type"/> used by the <see cref="T:Spike.Text.Json.JsonSerializer"/>.
            </summary>
        </member>
        <member name="M:Spike.Text.Json.Serialization.JsonLinqContract.#ctor(System.Type)">
            <summary>
            Initializes a new instance of the <see cref="T:Spike.Text.Json.Serialization.JsonLinqContract"/> class.
            </summary>
            <param name="underlyingType">The underlying type for the contract.</param>
        </member>
        <member name="T:Spike.Text.Json.Serialization.JsonObjectContract">
            <summary>
            Contract details for a <see cref="T:System.Type"/> used by the <see cref="T:Spike.Text.Json.JsonSerializer"/>.
            </summary>
        </member>
        <member name="M:Spike.Text.Json.Serialization.JsonObjectContract.#ctor(System.Type)">
            <summary>
            Initializes a new instance of the <see cref="T:Spike.Text.Json.Serialization.JsonObjectContract"/> class.
            </summary>
            <param name="underlyingType">The underlying type for the contract.</param>
        </member>
        <member name="P:Spike.Text.Json.Serialization.JsonObjectContract.MemberSerialization">
            <summary>
            Gets or sets the object member serialization.
            </summary>
            <value>The member object serialization.</value>
        </member>
        <member name="P:Spike.Text.Json.Serialization.JsonObjectContract.Properties">
            <summary>
            Gets the object's properties.
            </summary>
            <value>The object's properties.</value>
        </member>
        <member name="P:Spike.Text.Json.Serialization.JsonObjectContract.ConstructorParameters">
            <summary>
            Gets the constructor parameters required for any non-default constructor
            </summary>
        </member>
        <member name="P:Spike.Text.Json.Serialization.JsonObjectContract.OverrideConstructor">
            <summary>
            Gets or sets the override constructor used to create the object.
            This is set when a constructor is marked up using the
            JsonConstructor attribute.
            </summary>
            <value>The override constructor.</value>
        </member>
        <member name="P:Spike.Text.Json.Serialization.JsonObjectContract.ParametrizedConstructor">
            <summary>
            Gets or sets the parametrized constructor used to create the object.
            </summary>
            <value>The parametrized constructor.</value>
        </member>
        <member name="T:Spike.Text.Json.Serialization.JsonPrimitiveContract">
            <summary>
            Contract details for a <see cref="T:System.Type"/> used by the <see cref="T:Spike.Text.Json.JsonSerializer"/>.
            </summary>
        </member>
        <member name="M:Spike.Text.Json.Serialization.JsonPrimitiveContract.#ctor(System.Type)">
            <summary>
            Initializes a new instance of the <see cref="T:Spike.Text.Json.Serialization.JsonPrimitiveContract"/> class.
            </summary>
            <param name="underlyingType">The underlying type for the contract.</param>
        </member>
        <member name="T:Spike.Text.Json.Serialization.JsonProperty">
            <summary>
            Maps a JSON property to a .NET member or constructor parameter.
            </summary>
        </member>
        <member name="M:Spike.Text.Json.Serialization.JsonProperty.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <returns>
            A <see cref="T:System.String"/> that represents this instance.
            </returns>
        </member>
        <member name="P:Spike.Text.Json.Serialization.JsonProperty.PropertyName">
            <summary>
            Gets or sets the name of the property.
            </summary>
            <value>The name of the property.</value>
        </member>
        <member name="P:Spike.Text.Json.Serialization.JsonProperty.DeclaringType">
            <summary>
            Gets or sets the type that declared this property.
            </summary>
            <value>The type that declared this property.</value>
        </member>
        <member name="P:Spike.Text.Json.Serialization.JsonProperty.Order">
            <summary>
            Gets or sets the order of serialization and deserialization of a member.
            </summary>
            <value>The numeric order of serialization or deserialization.</value>
        </member>
        <member name="P:Spike.Text.Json.Serialization.JsonProperty.UnderlyingName">
            <summary>
            Gets or sets the name of the underlying member or parameter.
            </summary>
            <value>The name of the underlying member or parameter.</value>
        </member>
        <member name="P:Spike.Text.Json.Serialization.JsonProperty.ValueProvider">
            <summary>
            Gets the <see cref="T:Spike.Text.Json.Serialization.IValueProvider"/> that will get and set the <see cref="T:Spike.Text.Json.Serialization.JsonProperty"/> during serialization.
            </summary>
            <value>The <see cref="T:Spike.Text.Json.Serialization.IValueProvider"/> that will get and set the <see cref="T:Spike.Text.Json.Serialization.JsonProperty"/> during serialization.</value>
        </member>
        <member name="P:Spike.Text.Json.Serialization.JsonProperty.PropertyType">
            <summary>
            Gets or sets the type of the property.
            </summary>
            <value>The type of the property.</value>
        </member>
        <member name="P:Spike.Text.Json.Serialization.JsonProperty.Converter">
            <summary>
            Gets or sets the <see cref="T:Spike.Text.Json.JsonConverter"/> for the property.
            If set this converter takes presidence over the contract converter for the property type.
            </summary>
            <value>The converter.</value>
        </member>
        <member name="P:Spike.Text.Json.Serialization.JsonProperty.MemberConverter">
            <summary>
            Gets the member converter.
            </summary>
            <value>The member converter.</value>
        </member>
        <member name="P:Spike.Text.Json.Serialization.JsonProperty.Ignored">
            <summary>
            Gets a value indicating whether this <see cref="T:Spike.Text.Json.Serialization.JsonProperty"/> is ignored.
            </summary>
            <value><c>true</c> if ignored; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Spike.Text.Json.Serialization.JsonProperty.Readable">
            <summary>
            Gets a value indicating whether this <see cref="T:Spike.Text.Json.Serialization.JsonProperty"/> is readable.
            </summary>
            <value><c>true</c> if readable; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Spike.Text.Json.Serialization.JsonProperty.Writable">
            <summary>
            Gets a value indicating whether this <see cref="T:Spike.Text.Json.Serialization.JsonProperty"/> is writable.
            </summary>
            <value><c>true</c> if writable; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Spike.Text.Json.Serialization.JsonProperty.DefaultValue">
            <summary>
            Gets the default value.
            </summary>
            <value>The default value.</value>
        </member>
        <member name="P:Spike.Text.Json.Serialization.JsonProperty.Required">
            <summary>
            Gets a value indicating whether this <see cref="T:Spike.Text.Json.Serialization.JsonProperty"/> is required.
            </summary>
            <value>A value indicating whether this <see cref="T:Spike.Text.Json.Serialization.JsonProperty"/> is required.</value>
        </member>
        <member name="P:Spike.Text.Json.Serialization.JsonProperty.IsReference">
            <summary>
            Gets a value indicating whether this property preserves object references.
            </summary>
            <value>
            	<c>true</c> if this instance is reference; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Spike.Text.Json.Serialization.JsonProperty.NullValueHandling">
            <summary>
            Gets the property null value handling.
            </summary>
            <value>The null value handling.</value>
        </member>
        <member name="P:Spike.Text.Json.Serialization.JsonProperty.DefaultValueHandling">
            <summary>
            Gets the property default value handling.
            </summary>
            <value>The default value handling.</value>
        </member>
        <member name="P:Spike.Text.Json.Serialization.JsonProperty.ReferenceLoopHandling">
            <summary>
            Gets the property reference loop handling.
            </summary>
            <value>The reference loop handling.</value>
        </member>
        <member name="P:Spike.Text.Json.Serialization.JsonProperty.ObjectCreationHandling">
            <summary>
            Gets the property object creation handling.
            </summary>
            <value>The object creation handling.</value>
        </member>
        <member name="P:Spike.Text.Json.Serialization.JsonProperty.TypeNameHandling">
            <summary>
            Gets or sets the type name handling.
            </summary>
            <value>The type name handling.</value>
        </member>
        <member name="P:Spike.Text.Json.Serialization.JsonProperty.ShouldSerialize">
            <summary>
            Gets or sets a predicate used to determine whether the property should be serialize.
            </summary>
            <value>A predicate used to determine whether the property should be serialize.</value>
        </member>
        <member name="P:Spike.Text.Json.Serialization.JsonProperty.GetIsSpecified">
            <summary>
            Gets or sets a predicate used to determine whether the property should be serialized.
            </summary>
            <value>A predicate used to determine whether the property should be serialized.</value>
        </member>
        <member name="P:Spike.Text.Json.Serialization.JsonProperty.SetIsSpecified">
            <summary>
            Gets or sets an action used to set whether the property has been deserialized.
            </summary>
            <value>An action used to set whether the property has been deserialized.</value>
        </member>
        <member name="T:Spike.Text.Json.Serialization.JsonPropertyCollection">
            <summary>
            A collection of <see cref="T:Spike.Text.Json.Serialization.JsonProperty"/> objects.
            </summary>
        </member>
        <member name="M:Spike.Text.Json.Serialization.JsonPropertyCollection.#ctor(System.Type)">
            <summary>
            Initializes a new instance of the <see cref="T:Spike.Text.Json.Serialization.JsonPropertyCollection"/> class.
            </summary>
            <param name="type">The type.</param>
        </member>
        <member name="M:Spike.Text.Json.Serialization.JsonPropertyCollection.GetKeyForItem(Spike.Text.Json.Serialization.JsonProperty)">
            <summary>
            When implemented in a derived class, extracts the key from the specified element.
            </summary>
            <param name="item">The element from which to extract the key.</param>
            <returns>The key for the specified element.</returns>
        </member>
        <member name="M:Spike.Text.Json.Serialization.JsonPropertyCollection.AddProperty(Spike.Text.Json.Serialization.JsonProperty)">
            <summary>
            Adds a <see cref="T:Spike.Text.Json.Serialization.JsonProperty"/> object.
            </summary>
            <param name="property">The property to add to the collection.</param>
        </member>
        <member name="M:Spike.Text.Json.Serialization.JsonPropertyCollection.GetClosestMatchProperty(System.String)">
            <summary>
            Gets the closest matching <see cref="T:Spike.Text.Json.Serialization.JsonProperty"/> object.
            First attempts to get an exact case match of propertyName and then
            a case insensitive match.
            </summary>
            <param name="propertyName">Name of the property.</param>
            <returns>A matching property if found.</returns>
        </member>
        <member name="M:Spike.Text.Json.Serialization.JsonPropertyCollection.GetProperty(System.String,System.StringComparison)">
            <summary>
            Gets a property by property name.
            </summary>
            <param name="propertyName">The name of the property to get.</param>
            <param name="comparisonType">Type property name string comparison.</param>
            <returns>A matching property if found.</returns>
        </member>
        <member name="M:Spike.Text.Json.Serialization.JsonSerializerInternalWriter.SerializeDynamic(Spike.Text.Json.JsonWriter,System.Dynamic.IDynamicMetaObjectProvider,Spike.Text.Json.Serialization.JsonDynamicContract)">
            <summary>
            Serializes the dynamic.
            </summary>
            <param name="writer">The writer.</param>
            <param name="value">The value.</param>
            <param name="contract">The contract.</param>
        </member>
        <member name="T:Spike.Text.Json.Serialization.JsonStringContract">
            <summary>
            Contract details for a <see cref="T:System.Type"/> used by the <see cref="T:Spike.Text.Json.JsonSerializer"/>.
            </summary>
        </member>
        <member name="M:Spike.Text.Json.Serialization.JsonStringContract.#ctor(System.Type)">
            <summary>
            Initializes a new instance of the <see cref="T:Spike.Text.Json.Serialization.JsonStringContract"/> class.
            </summary>
            <param name="underlyingType">The underlying type for the contract.</param>
        </member>
        <member name="T:Spike.Text.Json.Serialization.ObjectConstructor`1">
            <summary>
            Represents a method that constructs an object.
            </summary>
        </member>
        <member name="T:Spike.Text.Json.Serialization.OnErrorAttribute">
            <summary>
            When applied to a method, specifies that the method is called when an error occurs serializing an object.
            </summary>
        </member>
        <member name="T:Spike.Text.Json.Serialization.ReflectionValueProvider">
            <summary>
            Get and set values for a <see cref="T:System.Reflection.MemberInfo"/> using reflection.
            </summary>
        </member>
        <member name="M:Spike.Text.Json.Serialization.ReflectionValueProvider.#ctor(System.Reflection.MemberInfo)">
            <summary>
            Initializes a new instance of the <see cref="T:Spike.Text.Json.Serialization.ReflectionValueProvider"/> class.
            </summary>
            <param name="memberInfo">The member info.</param>
        </member>
        <member name="M:Spike.Text.Json.Serialization.ReflectionValueProvider.SetValue(System.Object,System.Object)">
            <summary>
            Sets the value.
            </summary>
            <param name="target">The target to set the value on.</param>
            <param name="value">The value to set on the target.</param>
        </member>
        <member name="M:Spike.Text.Json.Serialization.ReflectionValueProvider.GetValue(System.Object)">
            <summary>
            Gets the value.
            </summary>
            <param name="target">The target to get the value from.</param>
            <returns>The value.</returns>
        </member>
        <member name="T:Spike.Text.Json.TypeNameHandling">
            <summary>
            Specifies type name handling options for the <see cref="T:Spike.Text.Json.JsonSerializer"/>.
            </summary>
        </member>
        <member name="F:Spike.Text.Json.TypeNameHandling.None">
            <summary>
            Do not include the .NET type name when serializing types.
            </summary>
        </member>
        <member name="F:Spike.Text.Json.TypeNameHandling.Objects">
            <summary>
            Include the .NET type name when serializing into a JSON object structure.
            </summary>
        </member>
        <member name="F:Spike.Text.Json.TypeNameHandling.Arrays">
            <summary>
            Include the .NET type name when serializing into a JSON array structure.
            </summary>
        </member>
        <member name="F:Spike.Text.Json.TypeNameHandling.Auto">
            <summary>
            Include the .NET type name when the type of the object being serialized is not the same as its declared type.
            </summary>
        </member>
        <member name="F:Spike.Text.Json.TypeNameHandling.All">
            <summary>
            Always include the .NET type name when serializing.
            </summary>
        </member>
        <member name="M:Spike.Text.Json.Utilities.CollectionUtils.IsNullOrEmpty``1(System.Collections.Generic.ICollection{``0})">
            <summary>
            Determines whether the collection is null or empty.
            </summary>
            <param name="collection">The collection.</param>
            <returns>
            	<c>true</c> if the collection is null or empty; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Spike.Text.Json.Utilities.CollectionUtils.AddRange``1(System.Collections.Generic.IList{``0},System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Adds the elements of the specified collection to the specified generic IList.
            </summary>
            <param name="initial">The list to add to.</param>
            <param name="collection">The collection of elements to add.</param>
        </member>
        <member name="M:Spike.Text.Json.Utilities.CollectionUtils.IndexOf``1(System.Collections.Generic.IEnumerable{``0},``0,System.Collections.Generic.IEqualityComparer{``0})">
            <summary>
            Returns the index of the first occurrence in a sequence by using a specified IEqualityComparer.
            </summary>
            <typeparam name="TSource">The type of the elements of source.</typeparam>
            <param name="list">A sequence in which to locate a value.</param>
            <param name="value">The object to locate in the sequence</param>
            <param name="comparer">An equality comparer to compare values.</param>
            <returns>The zero-based index of the first occurrence of value within the entire sequence, if found; otherwise, –1.</returns>
        </member>
        <member name="M:Spike.Text.Json.Utilities.ConvertUtils.Convert(System.Object,System.Globalization.CultureInfo,System.Type)">
            <summary>
            Converts the value to the specified type.
            </summary>
            <param name="initialValue">The value to convert.</param>
            <param name="culture">The culture to use when converting.</param>
            <param name="targetType">The type to convert the value to.</param>
            <returns>The converted type.</returns>
        </member>
        <member name="M:Spike.Text.Json.Utilities.ConvertUtils.TryConvert(System.Object,System.Globalization.CultureInfo,System.Type,System.Object@)">
            <summary>
            Converts the value to the specified type.
            </summary>
            <param name="initialValue">The value to convert.</param>
            <param name="culture">The culture to use when converting.</param>
            <param name="targetType">The type to convert the value to.</param>
            <param name="convertedValue">The converted value if the conversion was successful or the default value of <c>T</c> if it failed.</param>
            <returns>
            	<c>true</c> if <c>initialValue</c> was converted successfully; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Spike.Text.Json.Utilities.ConvertUtils.ConvertOrCast(System.Object,System.Globalization.CultureInfo,System.Type)">
            <summary>
            Converts the value to the specified type. If the value is unable to be converted, the
            value is checked whether it assignable to the specified type.
            </summary>
            <param name="initialValue">The value to convert.</param>
            <param name="culture">The culture to use when converting.</param>
            <param name="targetType">The type to convert or cast the value to.</param>
            <returns>
            The converted type. If conversion was unsuccessful, the initial value
            is returned if assignable to the target type.
            </returns>
        </member>
        <member name="M:Spike.Text.Json.Utilities.DynamicProxyMetaObject`1.CallMethodWithResult(System.String,System.Dynamic.DynamicMetaObjectBinder,System.Linq.Expressions.Expression[],Spike.Text.Json.Utilities.DynamicProxyMetaObject{`0}.Fallback,Spike.Text.Json.Utilities.DynamicProxyMetaObject{`0}.Fallback)">
            <summary>
            Helper method for generating a MetaObject which calls a
            specific method on Dynamic that returns a result
            </summary>
        </member>
        <member name="M:Spike.Text.Json.Utilities.DynamicProxyMetaObject`1.CallMethodReturnLast(System.String,System.Dynamic.DynamicMetaObjectBinder,System.Linq.Expressions.Expression[],Spike.Text.Json.Utilities.DynamicProxyMetaObject{`0}.Fallback)">
            <summary>
            Helper method for generating a MetaObject which calls a
            specific method on Dynamic, but uses one of the arguments for
            the result.
            </summary>
        </member>
        <member name="M:Spike.Text.Json.Utilities.DynamicProxyMetaObject`1.CallMethodNoResult(System.String,System.Dynamic.DynamicMetaObjectBinder,System.Linq.Expressions.Expression[],Spike.Text.Json.Utilities.DynamicProxyMetaObject{`0}.Fallback)">
            <summary>
            Helper method for generating a MetaObject which calls a
            specific method on Dynamic, but uses one of the arguments for
            the result.
            </summary>
        </member>
        <member name="M:Spike.Text.Json.Utilities.DynamicProxyMetaObject`1.GetRestrictions">
            <summary>
            Returns a Restrictions object which includes our current restrictions merged
            with a restriction limiting our type
            </summary>
        </member>
        <member name="M:Spike.Text.Json.Utilities.EnumUtils.GetNamesAndValues``1">
            <summary>
            Gets a dictionary of the names and values of an Enum type.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Spike.Text.Json.Utilities.EnumUtils.GetNamesAndValues``1(System.Type)">
            <summary>
            Gets a dictionary of the names and values of an Enum type.
            </summary>
            <param name="enumType">The enum type to get names and values for.</param>
            <returns></returns>
        </member>
        <member name="M:Spike.Text.Json.Utilities.ReflectionUtils.GetCollectionItemType(System.Type)">
            <summary>
            Gets the type of the typed collection's items.
            </summary>
            <param name="type">The type.</param>
            <returns>The type of the typed collection's items.</returns>
        </member>
        <member name="M:Spike.Text.Json.Utilities.ReflectionUtils.GetMemberUnderlyingType(System.Reflection.MemberInfo)">
            <summary>
            Gets the member's underlying type.
            </summary>
            <param name="member">The member.</param>
            <returns>The underlying type of the member.</returns>
        </member>
        <member name="M:Spike.Text.Json.Utilities.ReflectionUtils.IsIndexedProperty(System.Reflection.MemberInfo)">
            <summary>
            Determines whether the member is an indexed property.
            </summary>
            <param name="member">The member.</param>
            <returns>
            	<c>true</c> if the member is an indexed property; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Spike.Text.Json.Utilities.ReflectionUtils.IsIndexedProperty(System.Reflection.PropertyInfo)">
            <summary>
            Determines whether the property is an indexed property.
            </summary>
            <param name="property">The property.</param>
            <returns>
            	<c>true</c> if the property is an indexed property; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Spike.Text.Json.Utilities.ReflectionUtils.GetMemberValue(System.Reflection.MemberInfo,System.Object)">
            <summary>
            Gets the member's value on the object.
            </summary>
            <param name="member">The member.</param>
            <param name="target">The target object.</param>
            <returns>The member's value on the object.</returns>
        </member>
        <member name="M:Spike.Text.Json.Utilities.ReflectionUtils.SetMemberValue(System.Reflection.MemberInfo,System.Object,System.Object)">
            <summary>
            Sets the member's value on the target object.
            </summary>
            <param name="member">The member.</param>
            <param name="target">The target.</param>
            <param name="value">The value.</param>
        </member>
        <member name="M:Spike.Text.Json.Utilities.ReflectionUtils.CanReadMemberValue(System.Reflection.MemberInfo,System.Boolean)">
            <summary>
            Determines whether the specified MemberInfo can be read.
            </summary>
            <param name="member">The MemberInfo to determine whether can be read.</param>
            /// <param name="nonPublic">if set to <c>true</c> then allow the member to be gotten non-publicly.</param>
            <returns>
            	<c>true</c> if the specified MemberInfo can be read; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Spike.Text.Json.Utilities.ReflectionUtils.CanSetMemberValue(System.Reflection.MemberInfo,System.Boolean,System.Boolean)">
            <summary>
            Determines whether the specified MemberInfo can be set.
            </summary>
            <param name="member">The MemberInfo to determine whether can be set.</param>
            <param name="nonPublic">if set to <c>true</c> then allow the member to be set non-publicly.</param>
            <param name="canSetReadOnly">if set to <c>true</c> then allow the member to be set if read-only.</param>
            <returns>
            	<c>true</c> if the specified MemberInfo can be set; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="T:Spike.Text.Json.Utilities.StringBuffer">
            <summary>
            Builds a string. Unlike StringBuilder this class lets you reuse it's internal buffer.
            </summary>
        </member>
        <member name="M:Spike.Text.Json.Utilities.StringUtils.IsWhiteSpace(System.String)">
            <summary>
            Determines whether the string is all white space. Empty string will return false.
            </summary>
            <param name="s">The string to test whether it is all white space.</param>
            <returns>
            	<c>true</c> if the string is all white space; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Spike.Text.Json.Utilities.StringUtils.NullEmptyString(System.String)">
            <summary>
            Nulls an empty string.
            </summary>
            <param name="s">The string.</param>
            <returns>Null if the string was null, otherwise the string unchanged.</returns>
        </member>
        <member name="T:Spike.Network.BuddyBlockStatus">
            <summary>
            Represents the status of the pool.
            </summary>
        </member>
        <member name="F:Spike.Network.BuddyBlockStatus.Available">
            <summary>
            The memory is free.
            </summary>
        </member>
        <member name="F:Spike.Network.BuddyBlockStatus.Reserved">
            <summary>
            The memory is reserved
            </summary>
        </member>
        <member name="F:Spike.Network.BuddyBlock.Size">
            <summary>
            The size of the block in memory
            </summary>
        </member>
        <member name="M:Spike.Network.BuddyBlock.#ctor(System.Int32,System.Int32)">
            <summary>
            Constructs a new <see cref="T:Spike.Network.BuddyBlock"/>;
            </summary>
        </member>
        <member name="F:Spike.Network.BuddyBlock.Status">
            <summary>
            Whether the block is available or not.
            </summary>
        </member>
        <member name="F:Spike.Network.BuddyBlock.Power">
            <summary>
            The power of the available block.
            </summary>
        </member>
        <member name="F:Spike.Network.BuddyBlock.Offset">
            <summary>
            The memory offset for a reserved block.
            </summary>
        </member>
        <member name="F:Spike.Network.BuddyBlock.Next">
            <summary>
            The next link in the freelist.
            </summary>
        </member>
        <member name="F:Spike.Network.BuddyBlock.Previous">
            <summary>
            The previous link in the freelist.
            </summary>
        </member>
        <member name="M:Spike.Network.BuddyBlock.ToString">
            <summary>
            Handy debugging toString method.
            </summary>
        </member>
        <member name="P:Spike.Network.BuddyBlock.Length">
            <summary>
            Gets the length of the block.
            </summary>
        </member>
        <member name="M:Spike.Network.BuddyPool.#ctor">
            <summary>
            Construct a buddy pool for initial size buffer.
            </summary>
        </member>
        <member name="M:Spike.Network.BuddyPool.#ctor(System.Int32)">
            <summary>
            Construct a buddy pool for initial size buffer.
            </summary>
            <param name="initialPower">The minimum initial power of the pool.</param>
        </member>
        <member name="M:Spike.Network.BuddyPool.Acquire(System.Int32)">
            <summary>
            Returns a pointer to the region of memory that is allocated.
            </summary>
            <param name="size">An integer-valued argument which specifies the size of storage area required.</param>
            <returns>A pointer to the region of memory that is allocated.</returns>
        </member>
        <member name="M:Spike.Network.BuddyPool.Release(System.Int32)">
            <summary>
            Releases the memory back in the buddy pool.
            </summary>
            <param name="offset"></param>
        </member>
        <member name="M:Spike.Network.BuddyPool.Resize(System.Int32)">
            <summary>
            Resizes the pool to a minimum size.
            </summary>
            <param name="power">The minimum amount of bytes required to be in the pool.</param>
        </member>
        <member name="M:Spike.Network.BuddyPool.Log2Ceil(System.Int32)">
            <summary>
            Gets logarithm of two ceiling.
            </summary>
            <param name="x">The number to compute the logarithm of two ceiling.</param>
            <returns>The computed logarithm of two ceiling.</returns>
        </member>
        <member name="M:Spike.Network.BuddyPool.GetBuddy(Spike.Network.BuddyBlock)">
            <summary>
            Gets a buddy of a given block.
            </summary>
            <param name="block">The block to get a buddy for.</param>
            <returns>The pointer to the buddy.</returns>
        </member>
        <member name="M:Spike.Network.BuddyPool.Unlink(Spike.Network.BuddyBlock)">
            <summary>
            Unlinks the block from the freelist.
            </summary>
            <param name="block"></param>
        </member>
        <member name="M:Spike.Network.BuddyPool.InsertAfter(Spike.Network.BuddyBlock,Spike.Network.BuddyBlock)">
            <summary>
            Inserts a buddy block after the specified block.
            </summary>
            <param name="src">The source block to insert after.</param>
            <param name="block">The target block to insert after the source one.</param>
        </member>
        <member name="M:Spike.Network.BuddyPool.Finalize">
            <summary>
            Called by the GC when the object is finalized.
            </summary>
        </member>
        <member name="M:Spike.Network.BuddyPool.OnDispose(System.Boolean)">
            <summary>
            Invoked when the object pool is disposing.
            </summary>
            <param name="isDisposing">Whether the OnDispose was called by a finalizer or a dispose method</param>
        </member>
        <member name="M:Spike.Network.BuddyPool.Dispose">
            <summary>
            Disposes the pinned objects.
            </summary>
        </member>
        <member name="T:Spike.Network.ClientRouting">
            <summary>
            Represents a redirection of a client.
            </summary>
        </member>
        <member name="F:Spike.Network.ClientRouting.RoutingTable">
            <summary>
            The routing table for the 
            </summary>
        </member>
        <member name="M:Spike.Network.ClientRouting.GetOrAddRoute(System.String,Spike.IClient)">
            <summary>
            Gets the client by the identity token.
            </summary>
            <param name="clientToken">The token of the client to get.</param>
            <param name="client">The client for this identity token.</param>
            <returns>The client route, whether it is added or retrieved.</returns>
        </member>
        <member name="M:Spike.Network.ClientRouting.TryGetRoute(System.String,Spike.Network.ClientRoutingEntry@)">
            <summary>
            Attempts to get the route by the identity token.
            </summary>
            <param name="clientToken">The token of the client to get.</param>
            <param name="route">The client route for this identity token.</param>
            <returns>The client, whether it is added or retrieved.</returns>
        </member>
        <member name="M:Spike.Network.ClientRouting.RouteTo(System.String,Spike.IClient)">
            <summary>
            Attempts to get the route by the identity token.
            </summary>
            <param name="clientToken">The token of the client to get.</param>
            <param name="client">The client for this identity token.</param>
            <returns>The client, whether it is added or retrieved.</returns>
        </member>
        <member name="M:Spike.Network.ClientRouting.RouteTo(System.String,Spike.IClient,Spike.Network.ClientRoutingEntry@)">
            <summary>
            Attempts to get the route by the identity token.
            </summary>
            <param name="clientToken">The token of the client to get.</param>
            <param name="client">The client for this identity token.</param>
            <param name="route">The newly added client route.</param>
            <returns>The client, whether it is added or retrieved.</returns>
        </member>
        <member name="T:Spike.Network.ClientRoutingEntry">
            <summary>
            Represents an entry in the client routing table.
            </summary>
        </member>
        <member name="M:Spike.Network.ClientRoutingEntry.#ctor(System.String,Spike.IClient)">
            <summary>
            Constructs a new client routing entry.
            </summary>
            <param name="token">The token associated with this route.</param>
            <param name="route">The destination.</param>
        </member>
        <member name="M:Spike.Network.ClientRoutingEntry.Send(Spike.Network.Packet)">
            <summary>
            Sends the packet to the remote client end-point.
            </summary>
            <param name="packet">The packet to send to the remote end-point.</param>
        </member>
        <member name="M:Spike.Network.ClientRoutingEntry.TrySendPending">
            <summary>
            Attempts to send pending data
            </summary>
        </member>
        <member name="P:Spike.Network.ClientRoutingEntry.Token">
            <summary>
            Gets or sets the token associated with this route.
            </summary>
        </member>
        <member name="P:Spike.Network.ClientRoutingEntry.Client">
            <summary>
            Gets or sets the connection used for sending out inform packets.
            </summary>
        </member>
        <member name="T:Spike.Network.CloudNode">
            <summary>
            Represents a Spike-Cloud node.
            </summary>
        </member>
        <member name="M:Spike.Network.CloudNode.#ctor(System.String)">
            <summary>
            Constructs a new instance of a cloud node.
            </summary>
        </member>
        <member name="M:Spike.Network.CloudNode.CheckAvailability">
            <summary>
            Checks whether this spike-cloud node is available to us or not.
            </summary>
            <returns>Whether this spike-cloud node is available to us or not.</returns>
        </member>
        <member name="M:Spike.Network.CloudNode.Register(Spike.Network.CloudRegistration@)">
            <summary>
            Attempts to register this Spike-Engine instance within the Spike-Cloud.
            </summary>
            <returns>The registration response.</returns>
        </member>
        <member name="M:Spike.Network.CloudNode.Heartbeat(System.Int64,Spike.Network.CloudRegistration)">
            <summary>
            Issues a heartbeat to the spike-cloud node.
            </summary>
            <param name="tick">The current tick index.</param>
            <param name="registration">The registration which contains the info to monitor.</param>
        </member>
        <member name="M:Spike.Network.CloudNode.SubmitSpml(System.String)">
            <summary>
            Submits the spml definitions to Spike-Cloud.
            </summary>
            <returns>
            <c>true</c>, if spml definitions were submited, <c>false</c> otherwise.
            </returns>
        </member>
        <member name="P:Spike.Network.CloudNode.Host">
            <summary>
            Gets the host address of the node.
            </summary>
        </member>
        <member name="T:Spike.Network.Http.HttpResource">
            <summary>
            Represents a cached resource item.
            </summary>
        </member>
        <member name="M:Spike.Network.Http.HttpResource.#ctor(System.DateTime,System.Byte[],System.String)">
            <summary>
            Constructs a new instance of <see cref="T:Spike.Network.Http.HttpResource"/>.
            </summary>
            <param name="lastWriteUtc">The last write time in universal format.</param>
            <param name="rawContent">The raw byte content of this resource.</param>
            <param name="mime">The content type of the resource.</param>
        </member>
        <member name="M:Spike.Network.Http.HttpResource.#ctor(System.IO.FileInfo)">
            <summary>
            Constructs a new instance of <see cref="T:Spike.Network.Http.HttpResource"/>.
            </summary>
            <param name="file">The file on disk to cache.</param>
        </member>
        <member name="M:Spike.Network.Http.HttpResource.WriteTo(Spike.Network.Http.HttpContext)">
            <summary>
            Writes the cached resource to the http response.
            </summary>
            <param name="context">The HttpContext to write to.</param>
        </member>
        <member name="P:Spike.Network.Http.HttpResource.LastWriteUtc">
            <summary>
            Gets the last write time.
            </summary>
        </member>
        <member name="P:Spike.Network.Http.HttpResource.Raw">
            <summary>
            Gest the raw representation of a cached resource.
            </summary>
        </member>
        <member name="P:Spike.Network.Http.HttpResource.Gzipped">
            <summary>
            Gets the gzipped cached resource.
            </summary>
        </member>
        <member name="T:Spike.Network.Http.HttpResponseContent">
            <summary>
            Represents an HTTP Request content body.
            </summary>
        </member>
        <member name="F:Spike.Network.Http.HttpResponseContent.Stream">
            <summary>
            The actual bytes of the content.
            </summary>
        </member>
        <member name="F:Spike.Network.Http.HttpResponseContent.Encoding">
            <summary>
            The encoding type
            </summary>
        </member>
        <member name="M:Spike.Network.Http.HttpResponseContent.#ctor(Spike.Network.Http.HttpResponse)">
            <summary>
            Constructs a new <see cref="T:Spike.Network.Http.HttpRequestContent"/>.
            </summary>
            <param name="owner"><see cref="T:Spike.Network.Http.HttpRequest"/> object.</param>
        </member>
        <member name="M:Spike.Network.Http.HttpResponseContent.AsBytes">
            <summary>
            Gets the raw bytes representation of the response body.
            </summary>
            <returns>Raw bytes representation of the response body.</returns>
        </member>
        <member name="M:Spike.Network.Http.HttpResponseContent.AsStream">
            <summary>
            Gets a readable <see cref="T:Spike.Network.ByteStream"/> representation of the request body.
            </summary>
            <returns>A readable <see cref="T:Spike.Network.ByteStream"/> representation of the request body.</returns>
        </member>
        <member name="M:Spike.Network.Http.HttpResponseContent.AsString">
            <summary>
            Gets the string representation of the request body.
            </summary>
            <returns>String representation of the request body.</returns>
        </member>
        <member name="T:Spike.Network.Http.HtmlFileHandler">
            <summary>
            Represents a decoder of HTMLFile transport for Internet Explorer.
            </summary>
        </member>
        <member name="T:Spike.Network.ProcessorBase">
            <summary>
            Represents a base class for all packet processors.
            </summary>
        </member>
        <member name="T:Spike.Network.IProcessor">
            <summary>
            Represents a processor which can process various packets.
            </summary>
        </member>
        <member name="M:Spike.Network.IProcessor.Process(Spike.Channel,Spike.Network.ProcessingContext)">
            <summary>
            Processes the packet within the context. Returns true whether the packet was processed or throttled.
            </summary>
            <param name="channel">The through which the packet is coming/going out.</param>
            <param name="context">The packet context for this operation.</param>
            <returns>True whether the packet was processed or throttled, false otherwise.</returns>
        </member>
        <member name="M:Spike.Network.ProcessorBase.#ctor">
            <summary>
            Constructs a new instance.
            </summary>
        </member>
        <member name="M:Spike.Network.ProcessorBase.Process(Spike.Channel,Spike.Network.ProcessingContext)">
            <summary>
            Processes the packet within the context. Returns true whether the packet was processed or throttled.
            </summary>
            <param name="channel">The through which the packet is coming/going out.</param>
            <param name="context">The packet context for this operation.</param>
            <returns>True whether the packet was processed or throttled, false otherwise.</returns>
        </member>
        <member name="F:Spike.Network.Http.HtmlFileHandler.Current">
            <summary>
            Gets the packet processor for the current thread.
            </summary>
        </member>
        <member name="M:Spike.Network.Http.HtmlFileHandler.Process(Spike.Channel,Spike.Network.ProcessingContext)">
            <summary>
            Processes the packet within the context. Returns true whether the packet was processed or throttled.
            </summary>
            <param name="channel">The through which the packet is coming/going out.</param>
            <param name="context">The packet context for this operation.</param>
            <returns>True whether the packet was processed or throttled, false otherwise.</returns>
        </member>
        <member name="M:Spike.Network.Http.HtmlFileHandler.OnUpgrade(Spike.Channel,Spike.Network.ProcessingContext)">
            <summary>
            Upgrades the transport to the HtmlFile one.
            </summary>
            <param name="channel">The through which the packet is coming/going out.</param>
            <param name="context">The packet context for this operation.</param>
        </member>
        <member name="M:Spike.Network.Http.HtmlFileHandler.OnReceive(Spike.Channel,Spike.Network.ClientRoutingEntry,Spike.Network.ProcessingContext)">
            <summary>
            Invoked when a message is received.
            </summary>
            <param name="originalChannel">The through which the packet is coming/going out.</param>
            <param name="route">The client for this operation.</param>
            <param name="context">The packet context for this operation.</param>
        </member>
        <member name="T:Spike.Network.Http.HtmlFileEncoder">
            <summary>
            Represents a decoder for HTMLFile packets.
            </summary>
        </member>
        <member name="F:Spike.Network.Http.HtmlFileEncoder.Current">
            <summary>
            Gets the packet processor for the current thread.
            </summary>
        </member>
        <member name="M:Spike.Network.Http.HtmlFileEncoder.Process(Spike.Channel,Spike.Network.ProcessingContext)">
            <summary>
            Processes the packet within the context. Returns true whether the packet was processed or throttled.
            </summary>
            <param name="channel">The through which the packet is coming/going out.</param>
            <param name="context">The packet context for this operation.</param>
            <returns>True whether the packet was processed or throttled, false otherwise.</returns>
        </member>
        <member name="T:Spike.Network.Http.HttpCookie">
            <summary>
            Provides a type-safe way to create and manipulate individual HTTP cookies.
            </summary>
        </member>
        <member name="M:Spike.Network.Http.HttpCookie.#ctor(System.String)">
            <summary>
            Creates and names a new cookie.
            </summary>
            <param name="name">The name of the cookie.</param>
        </member>
        <member name="M:Spike.Network.Http.HttpCookie.#ctor(System.String,System.String)">
            <summary>
            Creates, names, and assigns a value to a new cookie.
            </summary>
            <param name="name">The name of the cookie.</param>
            <param name="value">The value of the cookie.</param>
        </member>
        <member name="M:Spike.Network.Http.HttpCookie.GetCookieHeader">
            <summary>
            Gets a string representing the header of the cookie.
            </summary>
        </member>
        <member name="P:Spike.Network.Http.HttpCookie.Domain">
            <summary>
            Gets or sets the domain to associate the cookie with.
            </summary>
        </member>
        <member name="P:Spike.Network.Http.HttpCookie.Expires">
            <summary>
            Gets or sets the expiration date and time for the cookie.
            </summary>
        </member>
        <member name="P:Spike.Network.Http.HttpCookie.HasKeys">
            <summary>
            Gets a value indicating whether a cookie has subkeys.
            </summary>
        </member>
        <member name="P:Spike.Network.Http.HttpCookie.Item(System.String)">
            <summary>
            Gets a shortcut to the <see cref="T:Spike.Network.Http.HttpCookie"/>.Values property.
            </summary>
            <param name="key">The key of the cookie property.</param>
            <returns>The value of the property.</returns>
        </member>
        <member name="P:Spike.Network.Http.HttpCookie.Name">
            <summary>
            Gets or sets the name of a cookie.
            </summary>
        </member>
        <member name="P:Spike.Network.Http.HttpCookie.Path">
            <summary>
            Gets or sets the virtual path to transmit with the current cookie.
            </summary>
        </member>
        <member name="P:Spike.Network.Http.HttpCookie.Secure">
            <summary>
            Gets or sets a value indicating whether to transmit the cookie using Secure Sockets Layer (SSL)--that is, over HTTPS only.
            </summary>
        </member>
        <member name="P:Spike.Network.Http.HttpCookie.Value">
            <summary>
            Gets or sets an individual cookie value.
            </summary>
        </member>
        <member name="P:Spike.Network.Http.HttpCookie.Values">
            <summary>
            Gets a collection of key/value pairs that are contained within a single cookie object.
            </summary>
        </member>
        <member name="P:Spike.Network.Http.HttpCookie.HttpOnly">
            <summary>
            Gets or sets a value that specifies whether a cookie is accessible by client-side script.
            </summary>
        </member>
        <member name="T:Spike.Network.Http.HttpCookieCollection">
            <summary>
            Provides a type-safe way to manipulate HTTP cookies.
            </summary>
        </member>
        <member name="M:Spike.Network.Http.HttpCookieCollection.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Spike.Network.Http.HttpCookieCollection"/> class.
            </summary>
        </member>
        <member name="M:Spike.Network.Http.HttpCookieCollection.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Deserialization constructor for an <see cref="T:Spike.Network.Http.HttpCookieCollection"/>.
            </summary>
            <param name="info">Serialization info for the constructor.</param>
            <param name="context">Streaming context for deserialization.</param>
        </member>
        <member name="M:Spike.Network.Http.HttpCookieCollection.Add(Spike.Network.Http.HttpCookie)">
            <summary>
            Adds the specified cookie to the cookie collection.
            </summary>
            <param name="cookie">The <see cref="T:Spike.Network.Http.HttpCookie"/> to add.</param>
        </member>
        <member name="M:Spike.Network.Http.HttpCookieCollection.Clear">
            <summary>
            Clears all cookies from the cookie collection.
            </summary>
        </member>
        <member name="M:Spike.Network.Http.HttpCookieCollection.CopyTo(System.Array,System.Int32)">
            <summary>
            Copies this cookie colklection to an array.
            </summary>
            <param name="array">The destination array to copy to.</param>
            <param name="index">The starting index.</param>
        </member>
        <member name="M:Spike.Network.Http.HttpCookieCollection.GetKey(System.Int32)">
            <summary>
            Returns the key (name) of the cookie at the specified numerical index
            </summary>
            <param name="index">The index of the key to retrieve from the collection. </param>
            <returns>The name of the cookie specified by index.</returns>
        </member>
        <member name="M:Spike.Network.Http.HttpCookieCollection.Remove(System.String)">
            <summary>
            Removes the cookie with the specified name from the collection
            </summary>
            <param name="name">The name of the cookie to remove from the collection. </param>
        </member>
        <member name="M:Spike.Network.Http.HttpCookieCollection.Set(Spike.Network.Http.HttpCookie)">
            <summary>
            Updates the value of an existing cookie in a cookie collection.
            </summary>
            <param name="cookie">The <see cref="T:Spike.Network.Http.HttpCookie"/> object to update. </param>
        </member>
        <member name="M:Spike.Network.Http.HttpCookieCollection.Set(System.String,System.String)">
            <summary>
            Updates the value of an existing cookie in a cookie collection.
            </summary>
            <param name="name">The name of <see cref="T:Spike.Network.Http.HttpCookie"/> object to update. </param>
            <param name="value">The value to set. </param>
        </member>
        <member name="M:Spike.Network.Http.HttpCookieCollection.Set(System.String,System.String,System.TimeSpan)">
            <summary>
            Updates the value of an existing cookie in a cookie collection.
            </summary>
            <param name="name">The name of <see cref="T:Spike.Network.Http.HttpCookie"/> object to update. </param>
            <param name="value">The value to set. </param>
            <param name="expiresIn">The amount of time in which the cookie expires.</param>
        </member>
        <member name="M:Spike.Network.Http.HttpCookieCollection.Set(System.String,System.String,System.DateTime)">
            <summary>
            Updates the value of an existing cookie in a cookie collection.
            </summary>
            <param name="name">The name of <see cref="T:Spike.Network.Http.HttpCookie"/> object to update. </param>
            <param name="value">The value to set. </param>
            <param name="expires">The date when the cookie expires.</param>
        </member>
        <member name="M:Spike.Network.Http.HttpCookieCollection.Get(System.Int32)">
            <summary>
            Returns the <see cref="T:Spike.Network.Http.HttpCookie"/> item with the specified index from the cookie collection.
            </summary>
            <param name="index">The index of the cookie to retrieve from the collection.</param>
            <returns>The <see cref="T:Spike.Network.Http.HttpCookie"/> specified by index.</returns>
        </member>
        <member name="M:Spike.Network.Http.HttpCookieCollection.Get(System.String)">
            <summary>
            Returns the <see cref="T:Spike.Network.Http.HttpCookie"/> item with the specified name from the cookie collection.
            </summary>
            <param name="name">The name of the cookie to retrieve from the collection.</param>
            <returns>The <see cref="T:Spike.Network.Http.HttpCookie"/> specified by name.</returns>
        </member>
        <member name="M:Spike.Network.Http.HttpCookieCollection.GetString(System.String)">
            <summary>
            Returns the string representation of the cookie's value with the specified name from the cookie collection.
            </summary>
            <param name="name">The name of the cookie to retrieve from the collection.</param>
            <returns>The string representation of the value.</returns>
        </member>
        <member name="P:Spike.Network.Http.HttpCookieCollection.Item(System.Int32)">
            <summary>
            Gets the cookie with the specified numerical index from the cookie collection.
            </summary>
            <param name="index">The index of the cookie to retrieve from the collection. </param>
            <returns>The <see cref="T:Spike.Network.Http.HttpCookie"/> specified by index.</returns>
        </member>
        <member name="P:Spike.Network.Http.HttpCookieCollection.Item(System.String)">
            <summary>
            Gets the cookie with the specified name from the cookie collection.
            </summary>
            <param name="name">The hame of the cookie to retrieve from the collection</param>
            <returns>The <see cref="T:Spike.Network.Http.HttpCookie"/> specified by name.</returns>
        </member>
        <member name="P:Spike.Network.Http.HttpCookieCollection.AllKeys">
            <summary>
            Gets a string array containing all the keys (cookie names) in the cookie collection.
            </summary>
        </member>
        <member name="T:Spike.Network.Http.HttpSession">
            <summary>
            Provides access to session-state values as well as session-level settings and lifetime management methods.
            </summary>
        </member>
        <member name="F:Spike.Network.Http.HttpSession.Values">
            <summary>
            Values of the session.
            </summary>
        </member>
        <member name="M:Spike.Network.Http.HttpSession.#ctor">
            <summary>
            Creates a new <see cref="T:Spike.Network.Http.HttpSession"/> object.
            </summary>
        </member>
        <member name="M:Spike.Network.Http.HttpSession.Add(System.String,System.Object)">
            <summary>
            Adds a new item to the session-state collection.
            </summary>
            <param name="name">The name of the item to add to the session-state collection.</param>
            <param name="value">The value of the item to add to the session-state collection.</param>
        </member>
        <member name="M:Spike.Network.Http.HttpSession.Clear">
            <summary>
            Removes all keys and values from the session-state collection.
            </summary>
        </member>
        <member name="M:Spike.Network.Http.HttpSession.Remove(System.String)">
            <summary>
            Deletes an item from the session-state collection.
            </summary>
            <param name="name">The name of the item to delete from the session-state collection.</param>
        </member>
        <member name="M:Spike.Network.Http.HttpSession.RemoveAll">
            <summary>
            Removes all keys and values from the session-state collection.
            </summary>
        </member>
        <member name="M:Spike.Network.Http.HttpSession.RemoveAt(System.Int32)">
            <summary>
            Removes the item from the collection at the specified index.
            </summary>
            <param name="index">The index to remove the item at.</param>
        </member>
        <member name="M:Spike.Network.Http.HttpSession.GetEnumerator">
            <summary>
            Gets the enumerator for this <see cref="T:Spike.Network.Http.HttpSession"/> object.
            </summary>
            <returns>Returns the enumerator for this <see cref="T:Spike.Network.Http.HttpSession"/> object.</returns>
        </member>
        <member name="M:Spike.Network.Http.HttpSession.CopyTo(System.Array,System.Int32)">
            <summary>
            Copies the values of this <see cref="T:Spike.Network.Http.HttpSession"/> to the destination array.
            </summary>
            <param name="array">The destination array.</param>
            <param name="index">The destination index to start to.</param>
        </member>
        <member name="M:Spike.Network.Http.HttpSession.GetAsStringOrEmpty(System.String)">
            <summary>
            Gets a session value as a string or empty string if no key was found.
            </summary>
            <param name="key">The key name of the session value.</param>
            <returns>The session-state value with the specified name.</returns>
        </member>
        <member name="M:Spike.Network.Http.HttpSession.GetAsString(System.String)">
            <summary>
            Gets a session value as a string or a null string if no key was found.
            </summary>
            <param name="key">The key name of the session value.</param>
            <returns>The session-state value with the specified name.</returns>
        </member>
        <member name="M:Spike.Network.Http.HttpSession.GetAsSingle(System.String)">
            <summary>
            Gets a session value as a single value or false if no key was found.
            </summary>
            <param name="key">The key name of the session value.</param>
            <returns>The session-state value with the specified name.</returns>
        </member>
        <member name="M:Spike.Network.Http.HttpSession.GetAsDouble(System.String)">
            <summary>
            Gets a session value as a double value or false if no key was found.
            </summary>
            <param name="key">The key name of the session value.</param>
            <returns>The session-state value with the specified name.</returns>
        </member>
        <member name="M:Spike.Network.Http.HttpSession.GetAsInt16(System.String)">
            <summary>
            Gets a session value as a int16 value or false if no key was found.
            </summary>
            <param name="key">The key name of the session value.</param>
            <returns>The session-state value with the specified name.</returns>
        </member>
        <member name="M:Spike.Network.Http.HttpSession.GetAsInt32(System.String)">
            <summary>
            Gets a session value as a int32 value or false if no key was found.
            </summary>
            <param name="key">The key name of the session value.</param>
            <returns>The session-state value with the specified name.</returns>
        </member>
        <member name="M:Spike.Network.Http.HttpSession.GetAsInt64(System.String)">
            <summary>
            Gets a session value as a int64 value or false if no key was found.
            </summary>
            <param name="key">The key name of the session value.</param>
            <returns>The session-state value with the specified name.</returns>
        </member>
        <member name="M:Spike.Network.Http.HttpSession.GetAsString(System.String,System.String)">
            <summary>
            Gets a session value as a string or default string if no key was found.
            </summary>
            <param name="key">The key name of the session value.</param>
            <param name="defaultValue">The default value of the string.</param>
            <returns>The session-state value with the specified name.</returns>
        </member>
        <member name="M:Spike.Network.Http.HttpSession.GetAsBoolean(System.String)">
            <summary>
            Gets a session value as a boolean value or false if no key was found.
            </summary>
            <param name="key">The key name of the session value.</param>
            <returns>The session-state value with the specified name.</returns>
        </member>
        <member name="F:Spike.Network.Http.HttpSession.CookieKey">
            <summary>
            The name of the cookie that contains the session id.
            </summary>
        </member>
        <member name="M:Spike.Network.Http.HttpSession.OnRequest(Spike.Network.Http.HttpContext)">
            <summary>
            Check if session id is present in the cookie. If there is no session id
            we create a new session.
            </summary>
            <param name="context">The context to operate on.</param>
        </member>
        <member name="P:Spike.Network.Http.HttpSession.Key">
            <summary>
            Gets the key/identifier of this <see cref="T:Spike.Network.Http.HttpSession"/>.
            </summary>
        </member>
        <member name="P:Spike.Network.Http.HttpSession.Expires">
            <summary>
            Gets or sets when this session will expire.
            </summary>
        </member>
        <member name="P:Spike.Network.Http.HttpSession.Timeout">
            <summary>
            Gets or sets the timeout of this session object. Default is 20 minutes.
            </summary>
        </member>
        <member name="P:Spike.Network.Http.HttpSession.Item(System.String)">
            <summary>
            Gets or sets a session value by name.
            </summary>
            <param name="name">The key name of the session value.</param>
            <returns>The session-state value with the specified name.</returns>
        </member>
        <member name="P:Spike.Network.Http.HttpSession.Item(System.Int32)">
            <summary>
            Gets or sets a session value by index.
            </summary>
            <param name="index">The index of the session value.</param>
            <returns>The session-state value with the specified name.</returns>
        </member>
        <member name="P:Spike.Network.Http.HttpSession.Keys">
            <summary>
            Gets all the keys in this <see cref="T:Spike.Network.Http.HttpSession"/> object.
            </summary>
        </member>
        <member name="P:Spike.Network.Http.HttpSession.Count">
            <summary>
            Gets the number of items in the session-state collection.
            </summary>
        </member>
        <member name="P:Spike.Network.Http.HttpSession.IsSynchronized">
            <summary>
            Gets whether this object is synchronized or not.
            </summary>
        </member>
        <member name="P:Spike.Network.Http.HttpSession.SyncRoot">
            <summary>
            Gets the synchronization root for this object.
            </summary>
        </member>
        <member name="T:Spike.Network.Http.HttpSessionCreate">
            <summary>
            Represents an event that is sent by the <see cref="T:Spike.Providers.HttpProvider"/> when a session is created.
            </summary>
            <param name="session">The session that is created.</param>
            <param name="key">The key of the session.</param>
        </member>
        <member name="T:Spike.Network.Http.HttpSessionExpire">
            <summary>
            Represents an event that is sent by the <see cref="T:Spike.Providers.HttpProvider"/> when a session expires.
            </summary>
            <param name="session">The session that is about to expire.</param>
            <param name="key">The key of the session.</param>
        </member>
        <member name="T:Spike.Network.Http.HttpSessionDictionary">
            <summary>
            Represents internal session dictionary.
            </summary>
        </member>
        <member name="T:Spike.Network.SystemProtocol">
            <summary>
             Represents a static class that performs all the necessary initialization routines for SystemProtocol.
            </summary>
        </member>
        <member name="M:Spike.Network.SystemProtocol.Configure">
            <summary>
             Performs the necessary configuration. This method is automatically invoked by Spike-Engine runtime.
            </summary>
        </member>
        <member name="M:Spike.Network.SystemProtocol.Initialize">
            <summary>
             Performs the necessary initaliazation. This method is automatically invoked by Spike-Engine runtime.
            </summary>
        </member>
        <member name="E:Spike.Network.SystemProtocol.Ping">
            <summary>
             Event that is invoked when a request for Ping operation comes in.
            </summary>
        </member>
        <member name="E:Spike.Network.SystemProtocol.GetServerTime">
            <summary>
             Event that is invoked when a request for GetServerTime operation comes in.
            </summary>
        </member>
        <member name="E:Spike.Network.SystemProtocol.SupplyCredentials">
            <summary>
             Event that is invoked when a request for SupplyCredentials operation comes in.
            </summary>
        </member>
        <member name="E:Spike.Network.SystemProtocol.RevokeCredentials">
            <summary>
             Event that is invoked when a request for RevokeCredentials operation comes in.
            </summary>
        </member>
        <member name="E:Spike.Network.SystemProtocol.HubSubscribe">
            <summary>
             Event that is invoked when a request for HubSubscribe operation comes in.
            </summary>
        </member>
        <member name="E:Spike.Network.SystemProtocol.HubUnsubscribe">
            <summary>
             Event that is invoked when a request for HubUnsubscribe operation comes in.
            </summary>
        </member>
        <member name="E:Spike.Network.SystemProtocol.HubPublish">
            <summary>
             Event that is invoked when a request for HubPublish operation comes in.
            </summary>
        </member>
        <member name="T:Spike.Network.SystemProtocolExtensions">
            <summary>
             Represents a static class that contains IClient extension methods for SystemProtocol.
            </summary>
        </member>
        <member name="M:Spike.Network.SystemProtocolExtensions.SendPingInform(Spike.IClient,System.Boolean)">
            <summary>
            Sents a reply to the operation: Pings the server
            </summary>
        </member>
        <member name="M:Spike.Network.SystemProtocolExtensions.SendPingInform(Spike.IClient,Spike.Network.PingInform)">
            <summary>
            Sents a reply to the operation: Pings the server
            </summary>
        </member>
        <member name="M:Spike.Network.SystemProtocolExtensions.SendGetServerTimeInform(Spike.IClient,System.DateTime)">
            <summary>
            Sents a reply to the operation: Gets the time on the server
            </summary>
        </member>
        <member name="M:Spike.Network.SystemProtocolExtensions.SendGetServerTimeInform(Spike.IClient,Spike.Network.GetServerTimeInform)">
            <summary>
            Sents a reply to the operation: Gets the time on the server
            </summary>
        </member>
        <member name="M:Spike.Network.SystemProtocolExtensions.SendSupplyCredentialsInform(Spike.IClient,System.Boolean)">
            <summary>
            Sents a reply to the operation: Supplies the requesting channel with the specified client credentials.
            </summary>
        </member>
        <member name="M:Spike.Network.SystemProtocolExtensions.SendSupplyCredentialsInform(Spike.IClient,Spike.Network.SupplyCredentialsInform)">
            <summary>
            Sents a reply to the operation: Supplies the requesting channel with the specified client credentials.
            </summary>
        </member>
        <member name="M:Spike.Network.SystemProtocolExtensions.SendRevokeCredentialsInform(Spike.IClient,System.Boolean)">
            <summary>
            Sents a reply to the operation: Revokes the credentials from the requesting channel.
            </summary>
        </member>
        <member name="M:Spike.Network.SystemProtocolExtensions.SendRevokeCredentialsInform(Spike.IClient,Spike.Network.RevokeCredentialsInform)">
            <summary>
            Sents a reply to the operation: Revokes the credentials from the requesting channel.
            </summary>
        </member>
        <member name="M:Spike.Network.SystemProtocolExtensions.SendHubSubscribeInform(Spike.IClient,System.Int16)">
            <summary>
            Sents a reply to the operation: Allows the remote client to subscribe to a hub.
            </summary>
        </member>
        <member name="M:Spike.Network.SystemProtocolExtensions.SendHubSubscribeInform(Spike.IClient,Spike.Network.HubSubscribeInform)">
            <summary>
            Sents a reply to the operation: Allows the remote client to subscribe to a hub.
            </summary>
        </member>
        <member name="M:Spike.Network.SystemProtocolExtensions.SendHubUnsubscribeInform(Spike.IClient,System.Int16)">
            <summary>
            Sents a reply to the operation: Allows the remote client to unsubscribe from a hub.
            </summary>
        </member>
        <member name="M:Spike.Network.SystemProtocolExtensions.SendHubUnsubscribeInform(Spike.IClient,Spike.Network.HubUnsubscribeInform)">
            <summary>
            Sents a reply to the operation: Allows the remote client to unsubscribe from a hub.
            </summary>
        </member>
        <member name="M:Spike.Network.SystemProtocolExtensions.SendHubPublishInform(Spike.IClient,System.Int16)">
            <summary>
            Sents a reply to the operation: Publishes an event message to a particular hub.
            </summary>
        </member>
        <member name="M:Spike.Network.SystemProtocolExtensions.SendHubPublishInform(Spike.IClient,Spike.Network.HubPublishInform)">
            <summary>
            Sents a reply to the operation: Publishes an event message to a particular hub.
            </summary>
        </member>
        <member name="M:Spike.Network.SystemProtocolExtensions.SendHubEventInform(Spike.IClient,System.String,System.String,System.DateTime)">
            <summary>
            Sents a reply to the operation: Occurs when a message is published in a hub.
            </summary>
        </member>
        <member name="M:Spike.Network.SystemProtocolExtensions.SendHubEventInform(Spike.IClient,Spike.Network.HubEventInform)">
            <summary>
            Sents a reply to the operation: Occurs when a message is published in a hub.
            </summary>
        </member>
        <member name="T:Spike.Network.SystemProtocolHubBase">
            <summary>
             Represents an optional, abstract hub class for SystemProtocol.
            </summary>
        </member>
        <member name="M:Spike.Network.SystemProtocolHubBase.#ctor">
            <summary>
            Constructs a new instance of a <see cref="T:Spike.Network.SystemProtocolHubBase"/> class. The instance will be locked
            with a default randomly generated publish key.
            </summary>
        </member>
        <member name="M:Spike.Network.SystemProtocolHubBase.#ctor(System.String)">
            <summary>
            Constructs a new instance of a <see cref="T:Spike.Network.SystemProtocolHubBase"/> class. The instance will be locked
            with a default randomly generated publish key.
            </summary>
            <param name="name">The name of the hub.</param>
        </member>
        <member name="M:Spike.Network.SystemProtocolHubBase.#ctor(System.String,System.Boolean)">
            <summary>
            Constructs a new instance of a <see cref="T:Spike.Network.SystemProtocolHubBase"/> class. The instance will be locked with a 
            default randomly generated publish key.
            </summary>
            <param name="autoRegister">Whether the hub should be automatically registered in the provider or not.</param>
            <param name="name">The name of the hub.</param>
        </member>
        <member name="M:Spike.Network.SystemProtocolHubBase.#ctor(System.String,System.String,System.String)">
            <summary>
            Constructs a new instance of a <see cref="T:Spike.Network.SystemProtocolHubBase"/> class. 
            </summary>
            <param name="name">The name of the hub.</param>
            <param name="defaultPublishKey">The default publish key to apply to this hub.</param>
            <param name="defaultSubscribeKey">The default subscribe key to apply to this hub.</param>
        </member>
        <member name="M:Spike.Network.SystemProtocolHubBase.#ctor(System.String,System.String)">
            <summary>
            Constructs a new instance of a <see cref="T:Spike.Network.SystemProtocolHubBase"/> class.
            </summary>
            <param name="name">The name of the hub.</param>
            <param name="defaultPublishKey">The default publish key to apply to this hub.</param>
        </member>
        <member name="M:Spike.Network.SystemProtocolHubBase.#ctor(System.String,System.String,System.Boolean)">
            <summary>
            Constructs a new instance of a <see cref="T:Spike.Network.SystemProtocolHubBase"/> class.
            </summary>
            <param name="name">The name of the hub.</param>
            <param name="defaultPublishKey">The default publish key to apply to this hub.</param>
            <param name="autoRegister">Whether the hub should be automatically registered in the provider or not.</param>
        </member>
        <member name="M:Spike.Network.SystemProtocolHubBase.#ctor(System.String,System.String,System.String,System.Boolean)">
            <summary>
            Constructs a new instance of a <see cref="T:Spike.Network.SystemProtocolHubBase"/> class.
            </summary>
            <param name="name">The name of the hub.</param>
            <param name="defaultPublishKey">The default publish key to apply to this hub.</param>
            <param name="defaultSubscribeKey">The default subscribe key to apply to this hub.</param>
            <param name="autoRegister">Whether the hub should be automatically registered in the provider or not.</param>
        </member>
        <member name="M:Spike.Network.SystemProtocolHubBase.OnAfterConstruct">
            <summary>
            Invoked when a new instance of a <see cref="T:Spike.Hubs.Hub"/> is constructed.
            </summary>
        </member>
        <member name="M:Spike.Network.SystemProtocolHubBase.Dispose(System.Boolean)">
            <summary>
            Releases the unmanaged resources used by the ByteSTream class and optionally releases the managed resources.
            </summary>
            <param name="disposing">If set to true, release both managed and unmanaged resources, othewise release only unmanaged resources. </param>
        </member>
        <member name="M:Spike.Network.SystemProtocolHubBase.OnPing(Spike.IClient)">
            <summary>
            Invoked when an incoming request for Ping operation comes in.
            </summary>
        </member>
        <member name="M:Spike.Network.SystemProtocolHubBase.OnGetServerTime(Spike.IClient)">
            <summary>
            Invoked when an incoming request for GetServerTime operation comes in.
            </summary>
        </member>
        <member name="M:Spike.Network.SystemProtocolHubBase.OnSupplyCredentials(Spike.IClient,Spike.Network.SupplyCredentialsRequest)">
            <summary>
            Invoked when an incoming request for SupplyCredentials operation comes in.
            </summary>
        </member>
        <member name="M:Spike.Network.SystemProtocolHubBase.OnRevokeCredentials(Spike.IClient,Spike.Network.RevokeCredentialsRequest)">
            <summary>
            Invoked when an incoming request for RevokeCredentials operation comes in.
            </summary>
        </member>
        <member name="M:Spike.Network.SystemProtocolHubBase.OnHubSubscribe(Spike.IClient,Spike.Network.HubSubscribeRequest)">
            <summary>
            Invoked when an incoming request for HubSubscribe operation comes in.
            </summary>
        </member>
        <member name="M:Spike.Network.SystemProtocolHubBase.OnHubUnsubscribe(Spike.IClient,Spike.Network.HubUnsubscribeRequest)">
            <summary>
            Invoked when an incoming request for HubUnsubscribe operation comes in.
            </summary>
        </member>
        <member name="M:Spike.Network.SystemProtocolHubBase.OnHubPublish(Spike.IClient,Spike.Network.HubPublishRequest)">
            <summary>
            Invoked when an incoming request for HubPublish operation comes in.
            </summary>
        </member>
        <member name="T:Spike.Network.SupplyCredentialsRequest">
            <summary>
            SupplyCredentialsRequest defines a packet container object for the SupplyCredentials operation.
            </summary>
        </member>
        <member name="T:Spike.Network.SecpPacket">
            <summary>
            Represents a Spike Engine Communication Protocol (SECP) packet.
            </summary>
        </member>
        <member name="T:Spike.Network.Packet">
            <summary>
            Represents a data packet that can be send remotely.
            </summary>
        </member>
        <member name="T:Spike.RecyclableObject">
            <summary>
            Represents an object that implements IRecyclable contract, allowing the object instance to be reused.
            </summary>
        </member>
        <member name="T:Spike.IRecyclable">
            <summary>
            Defines the the IRecyclable contract, allowing the object instance to be reused.
            </summary>
        </member>
        <member name="M:Spike.IRecyclable.Recycle">
            <summary>
            Recycles (resets) the object to the original state.
            </summary>
        </member>
        <member name="M:Spike.IRecyclable.Bind(Spike.ReleaseInstanceDelegate)">
            <summary>
            Binds an <see cref="T:Spike.ReleaseInstanceDelegate"/> which releases the <see cref="T:Spike.IRecyclable"/> object
            instance back to the pool.
            </summary>
            <param name="releaser">The <see cref="T:Spike.ReleaseInstanceDelegate"/> delegate to bind.</param>
        </member>
        <member name="M:Spike.IRecyclable.OnAcquire">
            <summary>
            Invoked when <see cref="T:Spike.IRecyclable"/> object is about to be acquired.
            </summary>
        </member>
        <member name="F:Spike.RecyclableObject.ObjectAcquired">
            <summary>
            A fild that contains the value representing whether the object is acquired or not.
            </summary>
        </member>
        <member name="M:Spike.RecyclableObject.Recycle">
            <summary>
            Recycles (resets) the object to the original state.
            </summary>
        </member>
        <member name="M:Spike.RecyclableObject.Bind(Spike.ReleaseInstanceDelegate)">
            <summary>
            Binds an <see cref="T:Spike.ReleaseInstanceDelegate"/> delegate which releases the <see cref="T:Spike.IRecyclable"/> object
            instance back to the pool.
            </summary>
            <param name="releaser">The <see cref="T:Spike.ReleaseInstanceDelegate"/> delegate to bind.</param>
        </member>
        <member name="M:Spike.RecyclableObject.OnAcquire">
            <summary>
            Invoked when a pool acquires the instance. 
            </summary>
        </member>
        <member name="M:Spike.RecyclableObject.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or
            resetting unmanaged resources.
            </summary>
        </member>
        <member name="M:Spike.RecyclableObject.TryRelease">
            <summary>
            Attempts to release this instance back to the pool. If the instance is not pooled, nothing will be done.
            </summary>
        </member>
        <member name="M:Spike.RecyclableObject.Dispose(System.Boolean)">
            <summary>
            Releases the unmanaged resources used by the ByteSTream class and optionally releases the managed resources.
            </summary>
            <param name="disposing"> 
            If set to true, release both managed and unmanaged resources, othewise release only unmanaged resources.
            </param>
        </member>
        <member name="M:Spike.RecyclableObject.Finalize">
            <summary>
            Finalizer for the recyclable object.
            </summary>
        </member>
        <member name="P:Spike.RecyclableObject.IsPooled">
            <summary>
            Gets whether this <see cref="T:Spike.RecyclableObject"/> object is pooled or not.
            </summary>
        </member>
        <member name="M:Spike.Network.Packet.#ctor">
            <summary>
            Construcs a new instance of a <see cref="T:Spike.Network.Packet"/>.
            </summary>
        </member>
        <member name="M:Spike.Network.Packet.Recycle">
            <summary>
            Recycles (resets) the object to the original state.
            </summary>
        </member>
        <member name="P:Spike.Network.Packet.Origin">
            <summary>
            Gets or sets the connection the packet originated from.
            </summary>
        </member>
        <member name="P:Spike.Network.Packet.Direction">
            <summary>
            Gets the direction of this packet.
            </summary>
        </member>
        <member name="M:Spike.Network.SecpPacket.#ctor(Spike.Network.PacketKey)">
            <summary>
            Construcs a new instance of <see cref="T:Spike.Network.SecpPacket"/> for a particular Spike operation.
            </summary>
            <param name="key">The key of the operation the packet is for.</param>
        </member>
        <member name="M:Spike.Network.SecpPacket.Read(Spike.Network.PacketReader)">
            <summary>
            Serializes this packet to a binary stream.
            </summary>
            <param name="Reader">PacketReader used to serialize the packet.</param>
        </member>
        <member name="M:Spike.Network.SecpPacket.Write(Spike.Network.PacketWriter)">
            <summary>
            Deserializes this packet from a binary stream.
            </summary>
            <param name="Writer">PacketWriter used to deserialize the packet.</param>
        </member>
        <member name="P:Spike.Network.SecpPacket.OperationKey">
            <summary>
            Gets the operation key for this packet.
            </summary>
        </member>
        <member name="M:Spike.Network.SupplyCredentialsRequest.#ctor">
            <summary>
            Creates a new empty instance of the packet
            </summary>
        </member>
        <member name="M:Spike.Network.SupplyCredentialsRequest.#ctor(System.String,System.String,System.String,System.String,System.String)">
            <summary>
            Creates a new instance of the packet by initializing all its fields
            </summary>
        </member>
        <member name="F:Spike.Network.SupplyCredentialsRequest.CredentialsUri">
            <summary>
            Gets or sets the CredentialsUri field. 
            </summary>
        </member>
        <member name="F:Spike.Network.SupplyCredentialsRequest.CredentialsType">
            <summary>
            Gets or sets the CredentialsType field. 
            </summary>
        </member>
        <member name="F:Spike.Network.SupplyCredentialsRequest.UserName">
            <summary>
            Gets or sets the UserName field. 
            </summary>
        </member>
        <member name="F:Spike.Network.SupplyCredentialsRequest.Password">
            <summary>
            Gets or sets the Password field. 
            </summary>
        </member>
        <member name="F:Spike.Network.SupplyCredentialsRequest.Domain">
            <summary>
            Gets or sets the Domain field. 
            </summary>
        </member>
        <member name="M:Spike.Network.SupplyCredentialsRequest.Write(Spike.Network.PacketWriter)">
            <summary>
            Serializes this complex type to a binary stream.
            </summary>
        </member>
        <member name="M:Spike.Network.SupplyCredentialsRequest.Read(Spike.Network.PacketReader)">
            <summary>
            Serializes this complex type to a binary stream.
            </summary>
        </member>
        <member name="M:Spike.Network.SupplyCredentialsRequest.CreateInstance">
            <summary>
            A factory method that constructs an instance of SupplyCredentialsRequest packet.
            </summary>
        </member>
        <member name="F:Spike.Network.SupplyCredentialsRequest.OpInfo">
            <summary>
            Cached metadata reference for faster access. 
            </summary>
        </member>
        <member name="P:Spike.Network.SupplyCredentialsRequest.Direction">
            <summary>
            Gets the direction of the packet: whether the first 
            call is initiated on server (Push) or client (Pull)
            </summary>
        </member>
        <member name="P:Spike.Network.SupplyCredentialsRequest.Metadata">
            <summary>
            Gets the metadata for the operation which contains the given packet type.
            </summary>
        </member>
        <member name="T:Spike.Network.RevokeCredentialsRequest">
            <summary>
            RevokeCredentialsRequest defines a packet container object for the RevokeCredentials operation.
            </summary>
        </member>
        <member name="M:Spike.Network.RevokeCredentialsRequest.#ctor">
            <summary>
            Creates a new empty instance of the packet
            </summary>
        </member>
        <member name="M:Spike.Network.RevokeCredentialsRequest.#ctor(System.String,System.String)">
            <summary>
            Creates a new instance of the packet by initializing all its fields
            </summary>
        </member>
        <member name="F:Spike.Network.RevokeCredentialsRequest.CredentialsUri">
            <summary>
            Gets or sets the CredentialsUri field. 
            </summary>
        </member>
        <member name="F:Spike.Network.RevokeCredentialsRequest.CredentialsType">
            <summary>
            Gets or sets the CredentialsType field. 
            </summary>
        </member>
        <member name="M:Spike.Network.RevokeCredentialsRequest.Write(Spike.Network.PacketWriter)">
            <summary>
            Serializes this complex type to a binary stream.
            </summary>
        </member>
        <member name="M:Spike.Network.RevokeCredentialsRequest.Read(Spike.Network.PacketReader)">
            <summary>
            Serializes this complex type to a binary stream.
            </summary>
        </member>
        <member name="M:Spike.Network.RevokeCredentialsRequest.CreateInstance">
            <summary>
            A factory method that constructs an instance of RevokeCredentialsRequest packet.
            </summary>
        </member>
        <member name="F:Spike.Network.RevokeCredentialsRequest.OpInfo">
            <summary>
            Cached metadata reference for faster access. 
            </summary>
        </member>
        <member name="P:Spike.Network.RevokeCredentialsRequest.Direction">
            <summary>
            Gets the direction of the packet: whether the first 
            call is initiated on server (Push) or client (Pull)
            </summary>
        </member>
        <member name="P:Spike.Network.RevokeCredentialsRequest.Metadata">
            <summary>
            Gets the metadata for the operation which contains the given packet type.
            </summary>
        </member>
        <member name="T:Spike.Network.HubSubscribeRequest">
            <summary>
            HubSubscribeRequest defines a packet container object for the HubSubscribe operation.
            </summary>
        </member>
        <member name="M:Spike.Network.HubSubscribeRequest.#ctor">
            <summary>
            Creates a new empty instance of the packet
            </summary>
        </member>
        <member name="M:Spike.Network.HubSubscribeRequest.#ctor(System.String,System.String)">
            <summary>
            Creates a new instance of the packet by initializing all its fields
            </summary>
        </member>
        <member name="F:Spike.Network.HubSubscribeRequest.HubName">
            <summary>
            Gets or sets the HubName field. 
            </summary>
        </member>
        <member name="F:Spike.Network.HubSubscribeRequest.SubscribeKey">
            <summary>
            Gets or sets the SubscribeKey field. 
            </summary>
        </member>
        <member name="M:Spike.Network.HubSubscribeRequest.Write(Spike.Network.PacketWriter)">
            <summary>
            Serializes this complex type to a binary stream.
            </summary>
        </member>
        <member name="M:Spike.Network.HubSubscribeRequest.Read(Spike.Network.PacketReader)">
            <summary>
            Serializes this complex type to a binary stream.
            </summary>
        </member>
        <member name="M:Spike.Network.HubSubscribeRequest.CreateInstance">
            <summary>
            A factory method that constructs an instance of HubSubscribeRequest packet.
            </summary>
        </member>
        <member name="F:Spike.Network.HubSubscribeRequest.OpInfo">
            <summary>
            Cached metadata reference for faster access. 
            </summary>
        </member>
        <member name="P:Spike.Network.HubSubscribeRequest.Direction">
            <summary>
            Gets the direction of the packet: whether the first 
            call is initiated on server (Push) or client (Pull)
            </summary>
        </member>
        <member name="P:Spike.Network.HubSubscribeRequest.Metadata">
            <summary>
            Gets the metadata for the operation which contains the given packet type.
            </summary>
        </member>
        <member name="T:Spike.Network.HubUnsubscribeRequest">
            <summary>
            HubUnsubscribeRequest defines a packet container object for the HubUnsubscribe operation.
            </summary>
        </member>
        <member name="M:Spike.Network.HubUnsubscribeRequest.#ctor">
            <summary>
            Creates a new empty instance of the packet
            </summary>
        </member>
        <member name="M:Spike.Network.HubUnsubscribeRequest.#ctor(System.String,System.String)">
            <summary>
            Creates a new instance of the packet by initializing all its fields
            </summary>
        </member>
        <member name="F:Spike.Network.HubUnsubscribeRequest.HubName">
            <summary>
            Gets or sets the HubName field. 
            </summary>
        </member>
        <member name="F:Spike.Network.HubUnsubscribeRequest.SubscribeKey">
            <summary>
            Gets or sets the SubscribeKey field. 
            </summary>
        </member>
        <member name="M:Spike.Network.HubUnsubscribeRequest.Write(Spike.Network.PacketWriter)">
            <summary>
            Serializes this complex type to a binary stream.
            </summary>
        </member>
        <member name="M:Spike.Network.HubUnsubscribeRequest.Read(Spike.Network.PacketReader)">
            <summary>
            Serializes this complex type to a binary stream.
            </summary>
        </member>
        <member name="M:Spike.Network.HubUnsubscribeRequest.CreateInstance">
            <summary>
            A factory method that constructs an instance of HubUnsubscribeRequest packet.
            </summary>
        </member>
        <member name="F:Spike.Network.HubUnsubscribeRequest.OpInfo">
            <summary>
            Cached metadata reference for faster access. 
            </summary>
        </member>
        <member name="P:Spike.Network.HubUnsubscribeRequest.Direction">
            <summary>
            Gets the direction of the packet: whether the first 
            call is initiated on server (Push) or client (Pull)
            </summary>
        </member>
        <member name="P:Spike.Network.HubUnsubscribeRequest.Metadata">
            <summary>
            Gets the metadata for the operation which contains the given packet type.
            </summary>
        </member>
        <member name="T:Spike.Network.HubPublishRequest">
            <summary>
            HubPublishRequest defines a packet container object for the HubPublish operation.
            </summary>
        </member>
        <member name="M:Spike.Network.HubPublishRequest.#ctor">
            <summary>
            Creates a new empty instance of the packet
            </summary>
        </member>
        <member name="M:Spike.Network.HubPublishRequest.#ctor(System.String,System.String,System.String)">
            <summary>
            Creates a new instance of the packet by initializing all its fields
            </summary>
        </member>
        <member name="F:Spike.Network.HubPublishRequest.HubName">
            <summary>
            Gets or sets the HubName field. 
            </summary>
        </member>
        <member name="F:Spike.Network.HubPublishRequest.PublishKey">
            <summary>
            Gets or sets the PublishKey field. 
            </summary>
        </member>
        <member name="F:Spike.Network.HubPublishRequest.Message">
            <summary>
            Gets or sets the Message field. 
            </summary>
        </member>
        <member name="M:Spike.Network.HubPublishRequest.Write(Spike.Network.PacketWriter)">
            <summary>
            Serializes this complex type to a binary stream.
            </summary>
        </member>
        <member name="M:Spike.Network.HubPublishRequest.Read(Spike.Network.PacketReader)">
            <summary>
            Serializes this complex type to a binary stream.
            </summary>
        </member>
        <member name="M:Spike.Network.HubPublishRequest.CreateInstance">
            <summary>
            A factory method that constructs an instance of HubPublishRequest packet.
            </summary>
        </member>
        <member name="F:Spike.Network.HubPublishRequest.OpInfo">
            <summary>
            Cached metadata reference for faster access. 
            </summary>
        </member>
        <member name="P:Spike.Network.HubPublishRequest.Direction">
            <summary>
            Gets the direction of the packet: whether the first 
            call is initiated on server (Push) or client (Pull)
            </summary>
        </member>
        <member name="P:Spike.Network.HubPublishRequest.Metadata">
            <summary>
            Gets the metadata for the operation which contains the given packet type.
            </summary>
        </member>
        <member name="T:Spike.Network.PingInform">
            <summary>
            PingInform defines a packet container object for the Ping operation.
            </summary>
        </member>
        <member name="M:Spike.Network.PingInform.#ctor">
            <summary>
            Creates a new empty instance of the packet
            </summary>
        </member>
        <member name="M:Spike.Network.PingInform.#ctor(System.Boolean)">
            <summary>
            Creates a new instance of the packet by initializing all its fields
            </summary>
        </member>
        <member name="F:Spike.Network.PingInform.Pong">
            <summary>
            Gets or sets the Pong field. 
            </summary>
        </member>
        <member name="M:Spike.Network.PingInform.Write(Spike.Network.PacketWriter)">
            <summary>
            Serializes this complex type to a binary stream.
            </summary>
        </member>
        <member name="M:Spike.Network.PingInform.Read(Spike.Network.PacketReader)">
            <summary>
            Serializes this complex type to a binary stream.
            </summary>
        </member>
        <member name="M:Spike.Network.PingInform.CreateInstance">
            <summary>
            A factory method that constructs an instance of PingInform packet.
            </summary>
        </member>
        <member name="F:Spike.Network.PingInform.OpInfo">
            <summary>
            Cached metadata reference for faster access. 
            </summary>
        </member>
        <member name="P:Spike.Network.PingInform.Direction">
            <summary>
            Gets the direction of the packet: whether the first 
            call is initiated on server (Push) or client (Pull)
            </summary>
        </member>
        <member name="P:Spike.Network.PingInform.Metadata">
            <summary>
            Gets the metadata for the operation which contains the given packet type.
            </summary>
        </member>
        <member name="T:Spike.Network.GetServerTimeInform">
            <summary>
            GetServerTimeInform defines a packet container object for the GetServerTime operation.
            </summary>
        </member>
        <member name="M:Spike.Network.GetServerTimeInform.#ctor">
            <summary>
            Creates a new empty instance of the packet
            </summary>
        </member>
        <member name="M:Spike.Network.GetServerTimeInform.#ctor(System.DateTime)">
            <summary>
            Creates a new instance of the packet by initializing all its fields
            </summary>
        </member>
        <member name="F:Spike.Network.GetServerTimeInform.ServerTime">
            <summary>
            Gets or sets the ServerTime field. 
            </summary>
        </member>
        <member name="M:Spike.Network.GetServerTimeInform.Write(Spike.Network.PacketWriter)">
            <summary>
            Serializes this complex type to a binary stream.
            </summary>
        </member>
        <member name="M:Spike.Network.GetServerTimeInform.Read(Spike.Network.PacketReader)">
            <summary>
            Serializes this complex type to a binary stream.
            </summary>
        </member>
        <member name="M:Spike.Network.GetServerTimeInform.CreateInstance">
            <summary>
            A factory method that constructs an instance of GetServerTimeInform packet.
            </summary>
        </member>
        <member name="F:Spike.Network.GetServerTimeInform.OpInfo">
            <summary>
            Cached metadata reference for faster access. 
            </summary>
        </member>
        <member name="P:Spike.Network.GetServerTimeInform.Direction">
            <summary>
            Gets the direction of the packet: whether the first 
            call is initiated on server (Push) or client (Pull)
            </summary>
        </member>
        <member name="P:Spike.Network.GetServerTimeInform.Metadata">
            <summary>
            Gets the metadata for the operation which contains the given packet type.
            </summary>
        </member>
        <member name="T:Spike.Network.SupplyCredentialsInform">
            <summary>
            SupplyCredentialsInform defines a packet container object for the SupplyCredentials operation.
            </summary>
        </member>
        <member name="M:Spike.Network.SupplyCredentialsInform.#ctor">
            <summary>
            Creates a new empty instance of the packet
            </summary>
        </member>
        <member name="M:Spike.Network.SupplyCredentialsInform.#ctor(System.Boolean)">
            <summary>
            Creates a new instance of the packet by initializing all its fields
            </summary>
        </member>
        <member name="F:Spike.Network.SupplyCredentialsInform.Result">
            <summary>
            Gets or sets the Result field. Whether the credentials were successfully provided or not.
            </summary>
        </member>
        <member name="M:Spike.Network.SupplyCredentialsInform.Write(Spike.Network.PacketWriter)">
            <summary>
            Serializes this complex type to a binary stream.
            </summary>
        </member>
        <member name="M:Spike.Network.SupplyCredentialsInform.Read(Spike.Network.PacketReader)">
            <summary>
            Serializes this complex type to a binary stream.
            </summary>
        </member>
        <member name="M:Spike.Network.SupplyCredentialsInform.CreateInstance">
            <summary>
            A factory method that constructs an instance of SupplyCredentialsInform packet.
            </summary>
        </member>
        <member name="F:Spike.Network.SupplyCredentialsInform.OpInfo">
            <summary>
            Cached metadata reference for faster access. 
            </summary>
        </member>
        <member name="P:Spike.Network.SupplyCredentialsInform.Direction">
            <summary>
            Gets the direction of the packet: whether the first 
            call is initiated on server (Push) or client (Pull)
            </summary>
        </member>
        <member name="P:Spike.Network.SupplyCredentialsInform.Metadata">
            <summary>
            Gets the metadata for the operation which contains the given packet type.
            </summary>
        </member>
        <member name="T:Spike.Network.RevokeCredentialsInform">
            <summary>
            RevokeCredentialsInform defines a packet container object for the RevokeCredentials operation.
            </summary>
        </member>
        <member name="M:Spike.Network.RevokeCredentialsInform.#ctor">
            <summary>
            Creates a new empty instance of the packet
            </summary>
        </member>
        <member name="M:Spike.Network.RevokeCredentialsInform.#ctor(System.Boolean)">
            <summary>
            Creates a new instance of the packet by initializing all its fields
            </summary>
        </member>
        <member name="F:Spike.Network.RevokeCredentialsInform.Result">
            <summary>
            Gets or sets the Result field. Whether the credentials were successfully revoked or not.
            </summary>
        </member>
        <member name="M:Spike.Network.RevokeCredentialsInform.Write(Spike.Network.PacketWriter)">
            <summary>
            Serializes this complex type to a binary stream.
            </summary>
        </member>
        <member name="M:Spike.Network.RevokeCredentialsInform.Read(Spike.Network.PacketReader)">
            <summary>
            Serializes this complex type to a binary stream.
            </summary>
        </member>
        <member name="M:Spike.Network.RevokeCredentialsInform.CreateInstance">
            <summary>
            A factory method that constructs an instance of RevokeCredentialsInform packet.
            </summary>
        </member>
        <member name="F:Spike.Network.RevokeCredentialsInform.OpInfo">
            <summary>
            Cached metadata reference for faster access. 
            </summary>
        </member>
        <member name="P:Spike.Network.RevokeCredentialsInform.Direction">
            <summary>
            Gets the direction of the packet: whether the first 
            call is initiated on server (Push) or client (Pull)
            </summary>
        </member>
        <member name="P:Spike.Network.RevokeCredentialsInform.Metadata">
            <summary>
            Gets the metadata for the operation which contains the given packet type.
            </summary>
        </member>
        <member name="T:Spike.Network.HubSubscribeInform">
            <summary>
            HubSubscribeInform defines a packet container object for the HubSubscribe operation.
            </summary>
        </member>
        <member name="M:Spike.Network.HubSubscribeInform.#ctor">
            <summary>
            Creates a new empty instance of the packet
            </summary>
        </member>
        <member name="M:Spike.Network.HubSubscribeInform.#ctor(System.Int16)">
            <summary>
            Creates a new instance of the packet by initializing all its fields
            </summary>
        </member>
        <member name="F:Spike.Network.HubSubscribeInform.Status">
            <summary>
            Gets or sets the Status field. The status code of the operation.
            </summary>
        </member>
        <member name="M:Spike.Network.HubSubscribeInform.Write(Spike.Network.PacketWriter)">
            <summary>
            Serializes this complex type to a binary stream.
            </summary>
        </member>
        <member name="M:Spike.Network.HubSubscribeInform.Read(Spike.Network.PacketReader)">
            <summary>
            Serializes this complex type to a binary stream.
            </summary>
        </member>
        <member name="M:Spike.Network.HubSubscribeInform.CreateInstance">
            <summary>
            A factory method that constructs an instance of HubSubscribeInform packet.
            </summary>
        </member>
        <member name="F:Spike.Network.HubSubscribeInform.OpInfo">
            <summary>
            Cached metadata reference for faster access. 
            </summary>
        </member>
        <member name="P:Spike.Network.HubSubscribeInform.Direction">
            <summary>
            Gets the direction of the packet: whether the first 
            call is initiated on server (Push) or client (Pull)
            </summary>
        </member>
        <member name="P:Spike.Network.HubSubscribeInform.Metadata">
            <summary>
            Gets the metadata for the operation which contains the given packet type.
            </summary>
        </member>
        <member name="T:Spike.Network.HubUnsubscribeInform">
            <summary>
            HubUnsubscribeInform defines a packet container object for the HubUnsubscribe operation.
            </summary>
        </member>
        <member name="M:Spike.Network.HubUnsubscribeInform.#ctor">
            <summary>
            Creates a new empty instance of the packet
            </summary>
        </member>
        <member name="M:Spike.Network.HubUnsubscribeInform.#ctor(System.Int16)">
            <summary>
            Creates a new instance of the packet by initializing all its fields
            </summary>
        </member>
        <member name="F:Spike.Network.HubUnsubscribeInform.Status">
            <summary>
            Gets or sets the Status field. The status code of the operation.
            </summary>
        </member>
        <member name="M:Spike.Network.HubUnsubscribeInform.Write(Spike.Network.PacketWriter)">
            <summary>
            Serializes this complex type to a binary stream.
            </summary>
        </member>
        <member name="M:Spike.Network.HubUnsubscribeInform.Read(Spike.Network.PacketReader)">
            <summary>
            Serializes this complex type to a binary stream.
            </summary>
        </member>
        <member name="M:Spike.Network.HubUnsubscribeInform.CreateInstance">
            <summary>
            A factory method that constructs an instance of HubUnsubscribeInform packet.
            </summary>
        </member>
        <member name="F:Spike.Network.HubUnsubscribeInform.OpInfo">
            <summary>
            Cached metadata reference for faster access. 
            </summary>
        </member>
        <member name="P:Spike.Network.HubUnsubscribeInform.Direction">
            <summary>
            Gets the direction of the packet: whether the first 
            call is initiated on server (Push) or client (Pull)
            </summary>
        </member>
        <member name="P:Spike.Network.HubUnsubscribeInform.Metadata">
            <summary>
            Gets the metadata for the operation which contains the given packet type.
            </summary>
        </member>
        <member name="T:Spike.Network.HubPublishInform">
            <summary>
            HubPublishInform defines a packet container object for the HubPublish operation.
            </summary>
        </member>
        <member name="M:Spike.Network.HubPublishInform.#ctor">
            <summary>
            Creates a new empty instance of the packet
            </summary>
        </member>
        <member name="M:Spike.Network.HubPublishInform.#ctor(System.Int16)">
            <summary>
            Creates a new instance of the packet by initializing all its fields
            </summary>
        </member>
        <member name="F:Spike.Network.HubPublishInform.Status">
            <summary>
            Gets or sets the Status field. The status code of the operation.
            </summary>
        </member>
        <member name="M:Spike.Network.HubPublishInform.Write(Spike.Network.PacketWriter)">
            <summary>
            Serializes this complex type to a binary stream.
            </summary>
        </member>
        <member name="M:Spike.Network.HubPublishInform.Read(Spike.Network.PacketReader)">
            <summary>
            Serializes this complex type to a binary stream.
            </summary>
        </member>
        <member name="M:Spike.Network.HubPublishInform.CreateInstance">
            <summary>
            A factory method that constructs an instance of HubPublishInform packet.
            </summary>
        </member>
        <member name="F:Spike.Network.HubPublishInform.OpInfo">
            <summary>
            Cached metadata reference for faster access. 
            </summary>
        </member>
        <member name="P:Spike.Network.HubPublishInform.Direction">
            <summary>
            Gets the direction of the packet: whether the first 
            call is initiated on server (Push) or client (Pull)
            </summary>
        </member>
        <member name="P:Spike.Network.HubPublishInform.Metadata">
            <summary>
            Gets the metadata for the operation which contains the given packet type.
            </summary>
        </member>
        <member name="T:Spike.Network.HubEventInform">
            <summary>
            HubEventInform defines a packet container object for the HubEvent operation.
            </summary>
        </member>
        <member name="M:Spike.Network.HubEventInform.#ctor">
            <summary>
            Creates a new empty instance of the packet
            </summary>
        </member>
        <member name="M:Spike.Network.HubEventInform.#ctor(System.String,System.String,System.DateTime)">
            <summary>
            Creates a new instance of the packet by initializing all its fields
            </summary>
        </member>
        <member name="F:Spike.Network.HubEventInform.HubName">
            <summary>
            Gets or sets the HubName field. 
            </summary>
        </member>
        <member name="F:Spike.Network.HubEventInform.Message">
            <summary>
            Gets or sets the Message field. 
            </summary>
        </member>
        <member name="F:Spike.Network.HubEventInform.Time">
            <summary>
            Gets or sets the Time field. 
            </summary>
        </member>
        <member name="M:Spike.Network.HubEventInform.Write(Spike.Network.PacketWriter)">
            <summary>
            Serializes this complex type to a binary stream.
            </summary>
        </member>
        <member name="M:Spike.Network.HubEventInform.Read(Spike.Network.PacketReader)">
            <summary>
            Serializes this complex type to a binary stream.
            </summary>
        </member>
        <member name="M:Spike.Network.HubEventInform.CreateInstance">
            <summary>
            A factory method that constructs an instance of HubEventInform packet.
            </summary>
        </member>
        <member name="F:Spike.Network.HubEventInform.OpInfo">
            <summary>
            Cached metadata reference for faster access. 
            </summary>
        </member>
        <member name="P:Spike.Network.HubEventInform.Direction">
            <summary>
            Gets the direction of the packet: whether the first 
            call is initiated on server (Push) or client (Pull)
            </summary>
        </member>
        <member name="P:Spike.Network.HubEventInform.Metadata">
            <summary>
            Gets the metadata for the operation which contains the given packet type.
            </summary>
        </member>
        <member name="T:Spike.Text.MinifierOutputMode">
            <summary>
            Output mode setting
            </summary>
        </member>
        <member name="F:Spike.Text.MinifierOutputMode.SingleLine">
            <summary>
            Output the minified code on a single line for maximum minification.
            LineBreakThreshold may still break the single line into multiple lines
            at a syntactically correct point after the given line length is reached.
            Not easily human-readable.
            </summary>
        </member>
        <member name="F:Spike.Text.MinifierOutputMode.MultipleLines">
            <summary>
            Output the minified code on multiple lines to increase readability
            </summary>
        </member>
        <member name="F:Spike.Text.MinifierOutputMode.None">
            <summary>
            Supress code output; typically used for linting or analysis of source code
            </summary>
        </member>
        <member name="T:Spike.Text.MinifierBlockStart">
            <summary>
            Describes how to output the opening curly-brace for blocks when the OutputMode
            is set to MultipleLines. 
            </summary>
        </member>
        <member name="F:Spike.Text.MinifierBlockStart.NewLine">
            <summary>
            Output the opening curly-brace block-start character on its own new line. Ex:
            if (condition)
            {
                ...
            }
            </summary>
        </member>
        <member name="F:Spike.Text.MinifierBlockStart.SameLine">
            <summary>
            Output the opening curly-brace block-start character at the end of the previous line. Ex:
            if (condition) {
                ...
            }
            </summary>
        </member>
        <member name="F:Spike.Text.MinifierBlockStart.UseSource">
            <summary>
            Output the opening curly-brace block-start character on the same line or a new line
            depending on how it was specified in the sources. 
            </summary>
        </member>
        <member name="T:Spike.Text.MinifierSettings">
            <summary>
            Common settings shared between CSS and JS settings objects
            </summary>
        </member>
        <member name="M:Spike.Text.MinifierSettings.#ctor">
            <summary>
            Constructs a new instance of <see cref="T:Spike.Text.MinifierSettings"/>.
            </summary>
        </member>
        <member name="M:Spike.Text.MinifierSettings.SetIgnoreErrors(System.String[])">
            <summary>
            Set the list of errors to ignore.
            </summary>
            <param name="ignoreErrors">Array of errors to ignore.</param>
            <returns>number of error codes successfully added to the collection</returns>
        </member>
        <member name="M:Spike.Text.MinifierSettings.SetIgnoreErrors(System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Set the collection of errors to ignore
            </summary>
            <param name="ignoreErrors">Array of errors to ignore.</param>
            <returns>number of error codes successfully added to the collection</returns>
        </member>
        <member name="M:Spike.Text.MinifierSettings.SetPreprocessorDefines(System.String[])">
            <summary>
            Set the collection of defined names for the preprocessor
            </summary>
            <param name="definedNames">array of defined name strings</param>
            <returns>number of names successfully added to the collection</returns>
        </member>
        <member name="M:Spike.Text.MinifierSettings.SetPreprocessorValues(System.Collections.Generic.IDictionary{System.String,System.String})">
            <summary>
            Set the dictionary of preprocessor defines and values
            </summary>
            <param name="defines">dictionary to set</param>
        </member>
        <member name="M:Spike.Text.MinifierSettings.AddResourceStrings(Spike.Text.MinifierResourceStrings)">
            <summary>
            Adds a resource strings to the collection.
            </summary>
            <param name="resourceStrings">The resource strings to add.</param>
        </member>
        <member name="M:Spike.Text.MinifierSettings.AddResourceStrings(System.Collections.Generic.IEnumerable{Spike.Text.MinifierResourceStrings})">
            <summary>
            Adds a resource strings to the collection.
            </summary>
            <param name="collection">The resource strings to add.</param>
        </member>
        <member name="M:Spike.Text.MinifierSettings.ClearResourceStrings">
            <summary>
            Clears all resource strings from the collection.
            </summary>
        </member>
        <member name="M:Spike.Text.MinifierSettings.RemoveResourceStrings(Spike.Text.MinifierResourceStrings)">
            <summary>
            Removes a resource strings from the collection.
            </summary>
            <param name="resourceStrings">The resource strings to remove.</param>
        </member>
        <member name="P:Spike.Text.MinifierSettings.AllowEmbeddedAspNetBlocks">
            <summary>
            Gets or sets a boolean value indicating whether embedded asp.net blocks (&lt;% %>) should be recognized and output as is. Default is false.
            </summary>
        </member>
        <member name="P:Spike.Text.MinifierSettings.BlocksStartOnSameLine">
            <summary>
            Gets or sets a value indicating whether the opening curly brace for blocks is
            on its own line (NewLine, default) or on the same line as the preceding code (SameLine)
            or taking a hint from the source code position (UseSource). Only relevant when OutputMode is 
            set to MultipleLines.
            </summary>
        </member>
        <member name="P:Spike.Text.MinifierSettings.IgnoreAllErrors">
            <summary>
            Gets or sets a flag for whether to ignore ALL errors found in the input code.
            Default is false.
            </summary>
        </member>
        <member name="P:Spike.Text.MinifierSettings.IndentSize">
            <summary>
            Gets or sets an integer value specifying the number of spaces per indent level when in MultipleLines output mode. (Default = 4)
            </summary>
        </member>
        <member name="P:Spike.Text.MinifierSettings.LineBreakThreshold">
            <summary>
            Gets or sets the column position at which the line will be broken at the next available opportunity.
            Default value is int.MaxValue - 1000.
            </summary>
        </member>
        <member name="P:Spike.Text.MinifierSettings.OutputMode">
            <summary>
            Gets or sets a value indicating the output mode:
            SingleLine (default) - output all code on a single line;
            MultipleLines - break the output into multiple lines to be more human-readable;
            SingleLine mode may still result in multiple lines if the LineBreakThreshold is set to a small enough value.
            </summary>
        </member>
        <member name="P:Spike.Text.MinifierSettings.TermSemicolons">
            <summary>
            Gets or sets a boolean value indicting whether to add a semicolon at the end of the parsed code (true) or not (false, default)
            </summary>
        </member>
        <member name="P:Spike.Text.MinifierSettings.KillSwitch">
            <summary>
            Gets or sets a long integer value containing kill switch flags for each individual mod to the parsed code tree. Allows for
            callers to turn off specific modifications if desired. Default is 0, meaning no kill switches are set.
            </summary>
        </member>
        <member name="P:Spike.Text.MinifierSettings.LineTerminator">
            <summary>
            Gets an appropriate line-terminator string given the output mode
            </summary>
        </member>
        <member name="P:Spike.Text.MinifierSettings.IgnoreErrors">
            <summary>
            Collection of errors to ignore
            </summary>
        </member>
        <member name="P:Spike.Text.MinifierSettings.IgnoreErrorCollection">
            <summary>
            Gets a collection of errors to ignore
            </summary>
        </member>
        <member name="P:Spike.Text.MinifierSettings.IgnoreErrorList">
            <summary>
            string representation of the list of debug lookups, comma-separated
            </summary>
        </member>
        <member name="P:Spike.Text.MinifierSettings.PreprocessorDefines">
            <summary>
            Collection of names to define for the preprocessor
            </summary>
        </member>
        <member name="P:Spike.Text.MinifierSettings.PreprocessorValues">
            <summary>
            dictionary of defines and their values
            </summary>
        </member>
        <member name="P:Spike.Text.MinifierSettings.PreprocessorDefineList">
            <summary>
            string representation of the list of names defined for the preprocessor, comma-separated
            </summary>
        </member>
        <member name="P:Spike.Text.MinifierSettings.ResourceStrings">
            <summary>
            Collection of resource string objects
            </summary>
        </member>
        <member name="T:Spike.Text.MinifierError">
            <summary>
            Represents a context error of a minifier.
            </summary>
        </member>
        <member name="M:Spike.Text.MinifierError.#ctor(System.Boolean,System.Int32,System.String,System.String,System.String,System.String,System.Int32,System.Int32,System.Int32,System.Int32,System.String)">
            <summary>
            Constructs a new instance of a <see cref="T:Spike.Text.MinifierError"/>.
            </summary>
            <param name="isError">Whether this is an error.</param>
            <param name="severity">The severity of this error.</param>
            <param name="subcategory">The subcategory of this error.</param>
            <param name="errorCode">The error code of this error.</param>
            <param name="helpKeyword">The help keyword of this error.</param>
            <param name="file">The file of this error.</param>
            <param name="startLine">The start line of this error.</param>
            <param name="startColumn">The start column of this error.</param>
            <param name="endLine">The end line of this error.</param>
            <param name="endColumn">The end column of this error.</param>
            <param name="message">The message of this error.</param>
        </member>
        <member name="M:Spike.Text.MinifierError.ToString">
            <summary>
            Convert the exception to a VisualStudio format error message
            file(startline[-endline]?,startcol[-endcol]?):[ subcategory] category [errorcode]: message
            </summary>
            <returns></returns>
        </member>
        <member name="P:Spike.Text.MinifierError.IsError">
            <summary>
            Gets whether this is an error.
            </summary>
        </member>
        <member name="P:Spike.Text.MinifierError.Severity">
            <summary>
            Gets the serverity value of the error.
            </summary>
        </member>
        <member name="P:Spike.Text.MinifierError.Subcategory">
            <summary>
            Gets the subcategory of the error.
            </summary>
        </member>
        <member name="P:Spike.Text.MinifierError.ErrorCode">
            <summary>
            Gets the error code.
            </summary>
        </member>
        <member name="P:Spike.Text.MinifierError.HelpKeyword">
            <summary>
            Gets the help keyword for this error.
            </summary>
        </member>
        <member name="P:Spike.Text.MinifierError.File">
            <summary>
            Gets the file where the error occured.
            </summary>
        </member>
        <member name="P:Spike.Text.MinifierError.StartLine">
            <summary>
            Gets the start line of the error.
            </summary>
        </member>
        <member name="P:Spike.Text.MinifierError.StartColumn">
            <summary>
            Gets the start column of the error.
            </summary>
        </member>
        <member name="P:Spike.Text.MinifierError.EndLine">
            <summary>
            Gets the end line of the error.
            </summary>
        </member>
        <member name="P:Spike.Text.MinifierError.EndColumn">
            <summary>
            Gets the end column of the error.
            </summary>
        </member>
        <member name="P:Spike.Text.MinifierError.Message">
            <summary>
            Gets the message for this error.
            </summary>
        </member>
        <member name="T:Spike.Text.CssEncoderFallback">
            <summary>
            CssFallback encodes invalid encoder characters as Unicode escapes:
                  \123456
            up to six hexadecimal characters. If less then six characters, we'll
            suffix the encoding with a space character, just un case the next character 
            could be mistaken for another hexadecimal digit.
            
            To use this class, create an instance of it and set it to the EncoderFallback
            property of your Encoding object. You may have to clone the Encoding object
            in order to get write access to the EncoderFallback property. 
            <example>
                var encoding = (Encoding)Encoding.ASCII.Clone();
                encoding.EncoderFallback = new CssEncoderFallback();
                var bytes = encoding.GetBytes(crunchedCode);
                Console.WriteLine(encoding.GetString(bytes));
            </example>
            </summary>
        </member>
        <member name="M:Spike.Text.CssEncoderFallback.CreateFallbackBuffer">
            <summary>
            return a fallback buffer for this encoding fallback
            </summary>
            <returns></returns>
        </member>
        <member name="P:Spike.Text.CssEncoderFallback.MaxCharCount">
            <summary>
            the maximum number of characters we'll expand a single character into
            </summary>
        </member>
        <member name="T:Spike.Text.CssEncoderFallbackBuffer">
            <summary>
            fallback buffer for encoding unknown characters into CSS Unicode escapes
            </summary>
        </member>
        <member name="M:Spike.Text.CssEncoderFallbackBuffer.GetEncoding(System.Int32)">
            <summary>
            Get the single-character encoding string
            </summary>
            <param name="charValue">character to encode</param>
            <returns>encoded string</returns>
        </member>
        <member name="M:Spike.Text.CssEncoderFallbackBuffer.Fallback(System.Char,System.Int32)">
            <summary>
            Prepare the unknown character for encoding
            </summary>
            <param name="charUnknown">character to process</param>
            <param name="index">position in input string</param>
            <returns>true if characters to process placed in buffer</returns>
        </member>
        <member name="M:Spike.Text.CssEncoderFallbackBuffer.Fallback(System.Char,System.Char,System.Int32)">
            <summary>
            Prepare the unknwon surrogate pair for encoding
            </summary>
            <param name="charUnknownHigh">high surrogate pair character</param>
            <param name="charUnknownLow">low surrogate pair character</param>
            <param name="index">index of character in the stream</param>
            <returns></returns>
        </member>
        <member name="M:Spike.Text.CssEncoderFallbackBuffer.GetNextChar">
            <summary>
            return the next character
            </summary>
            <returns>(char)0 if no character</returns>
        </member>
        <member name="M:Spike.Text.CssEncoderFallbackBuffer.MovePrevious">
            <summary>
            back the character position up one character
            </summary>
            <returns>false if already at front; true otherwise</returns>
        </member>
        <member name="M:Spike.Text.CssEncoderFallbackBuffer.Reset">
            <summary>
            reset the fallback buffer to initial state
            </summary>
        </member>
        <member name="M:Spike.Text.CssEncoderFallbackBuffer.ToString">
            <summary>
            Return string representation of this object
            </summary>
            <returns></returns>
        </member>
        <member name="P:Spike.Text.CssEncoderFallbackBuffer.Remaining">
            <summary>
            Number of characters remaining in the buffer
            </summary>
        </member>
        <member name="T:Spike.Text.ColorSlice">
            <summary>
            ColorSlice class
            </summary>
        </member>
        <member name="T:Spike.Text.CssParser">
            <summary>
            Parser takes Tokens and parses them into rules and statements
            </summary>
        </member>
        <member name="F:Spike.Text.CssParser.s_regexHack1">
            <summary>
            regular expression for matching first comment hack
            This is the MacIE ignore bug: /*(anything or nothing inside)\*/.../*(anything or nothing inside)*/
            </summary>
        </member>
        <member name="F:Spike.Text.CssParser.s_regexHack2">
            <summary>
            Regular expression for matching second comment hack
            Hide from everything EXCEPT Netscape 4 and Opera 5
            Format: /*/*//*/.../*(anything or nothing inside)*/
            </summary>
        </member>
        <member name="F:Spike.Text.CssParser.s_regexHack3">
            <summary>
            Regular expression for matching third comment hack
            Hide from Netscape 4
            Format: /*/*/.../*(anything or nothing inside)*/
            </summary>
        </member>
        <member name="F:Spike.Text.CssParser.s_regexHack4">
            <summary>
            Regular expression for matching fourth comment hack
            Hide from IE6
            Format: property /*(anything or nothing inside)*/:value
            WARNING: This does not actually parse the property/value -- it simply looks for a
            word character followed by at least one whitespace character, followed
            by a simple comment, followed by optional space, followed by a colon.
            Does not match the simple word, the space or the colon (just the comment) 
            </summary>
        </member>
        <member name="F:Spike.Text.CssParser.s_regexHack5">
            <summary>
            Regular expression for matching fifth comment hack
            Hide from IE5.5
            Format: property:/* (anything or nothing inside) */value
            WARNING: This does not actually parse the property/value -- it simply looks for a
            word character followed by optional whitespace character, followed
            by a colon, followed by optional whitespace, followed by a simple comment.
            Does not match initial word or the colon, just the comment.
            </summary>
        </member>
        <member name="F:Spike.Text.CssParser.s_regexHack6">
            <summary>
            Regular expression for matching sixth comment hack -- although not a real hack
            Hide from IE6, NOT
            Format: property/*(anything or nothing inside)*/:value
            NOTE: This doesn't actually hide from IE6; it needs a space before the comment to actually work.
            but enoough people code this in their CSS and expect it to be output that I recieved enough
            requests to add it to the allowed "hacks"
            WARNING: This does not actually parse the property/value -- it simply looks for a
            word character followed by a simple comment, followed by optional space, followed by a colon.
            Does not match the simple word or the colon (just initial whitespace and comment) 
            </summary>
        </member>
        <member name="F:Spike.Text.CssParser.s_regexHack7">
            <summary>
            Regular expression for empty comments
            These comments don't really do anything. But if the developer wrote an empty
            comment (/**/ or /* */), then it has no documentation value and might possibly be
            an attempted comment hack.
            Format: /**/ or /* */ (single space)
            </summary>
        </member>
        <member name="F:Spike.Text.CssParser.s_rrggbb">
            <summary>
            matches 6-digit RGB color value where both r digits are the same, both
            g digits are the same, and both b digits are the same (but r, g, and b
            values are not necessarily the same). Used to identify #rrggbb values
            that can be collapsed to #rgb
            </summary>
        </member>
        <member name="F:Spike.Text.CssParser.s_valueReplacement">
            <summary>
            regular expression for matching css comments containing special formatted identifiers
            for value-replacement matching
            Format: /*[id]*/
            </summary>
        </member>
        <member name="M:Spike.Text.CssParser.SkipSpace">
            <summary>
            This method advances to the next token FIRST -- effectively skipping the current one -- 
            and then skips any space tokens that FOLLOW it.
            </summary>
        </member>
        <member name="M:Spike.Text.CssParser.SkipIfSpace">
            <summary>
            This method only skips the space that is already the current token.
            </summary>
            <returns>true if space was skipped; false if the current token is not space</returns>
        </member>
        <member name="M:Spike.Text.CssParser.AddNewLine">
            <summary>
            Always add new line to the stream
            </summary>
        </member>
        <member name="M:Spike.Text.CssParser.NormalizedValueReplacementComment(System.String)">
            <summary>
            regular expression for matching newline characters
            </summary>
        </member>
        <member name="T:Spike.Text.CssException">
            <summary>
            Base class for exceptions thrown by the parser or the scanner
            </summary>
        </member>
        <member name="P:Spike.Text.CssErrorEventArgs.Error">
            <summary>
            The error information with the context info.
            Use this property going forward
            </summary>
        </member>
        <member name="P:Spike.Text.CssErrorEventArgs.Exception">
            <summary>
            The CSS exception object. Don't use this; might go away in future version. Use the Error property instead.
            </summary>
        </member>
        <member name="T:Spike.Text.CssScanner">
            <summary>
            Scanner takes input stream and breaks it into Tokens
            </summary>
        </member>
        <member name="M:Spike.Text.CssScanner.GetUnicodeEncodingValue(System.Boolean@)">
            <summary>
            returns the VALUE of a unicode number, up to six hex digits
            </summary>
            <returns>int value representing up to 6 hex digits</returns>
        </member>
        <member name="T:Spike.Text.CssType">
            <summary>
            Enumeration for the type of CSS that will be parsed
            </summary>
        </member>
        <member name="F:Spike.Text.CssType.FullStyleSheet">
            <summary>
            Default setting: expecting a full CSS stylesheet
            </summary>
        </member>
        <member name="F:Spike.Text.CssType.DeclarationList">
            <summary>
            Expecting just a declaration list, for instance: the value of an HTML style attribute
            </summary>
        </member>
        <member name="T:Spike.Text.CssComment">
            <summary>
            Enumeration for the CSS comment type.
            </summary>
        </member>
        <member name="F:Spike.Text.CssComment.Important">
            <summary>
            Remove all comments except those marked as important (//! or /*!)
            </summary>
        </member>
        <member name="F:Spike.Text.CssComment.None">
            <summary>
            Remove all source comments from the output
            </summary>
        </member>
        <member name="F:Spike.Text.CssComment.All">
            <summary>
            Keep all source comments in the output
            </summary>
        </member>
        <member name="F:Spike.Text.CssComment.Hacks">
            <summary>
            Remove all source comments except those for approved comment-based hacks. (See documentation)
            </summary>
        </member>
        <member name="T:Spike.Text.CssColor">
            <summary>
            Enumeration for how to treat known color names
            </summary>
        </member>
        <member name="F:Spike.Text.CssColor.Strict">
            <summary>
            Convert strict names to hex values if shorter; hex values to strict names if shorter. Leave all other
            color names or hex values as-specified.
            </summary>
        </member>
        <member name="F:Spike.Text.CssColor.Hex">
            <summary>
            Always use hex values; do not convert any hex values to color names
            </summary>
        </member>
        <member name="F:Spike.Text.CssColor.Major">
            <summary>
            Convert known hex values to major-browser color names if shorter; and known major-browser color
            names to hex if shorter.
            </summary>
        </member>
        <member name="T:Spike.Text.CssSettings">
            <summary>
            Represents the settings object for the CSS Minifier.
            </summary>
        </member>
        <member name="M:Spike.Text.CssSettings.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Spike.Text.CssSettings"/> class with default settings.
            </summary>
        </member>
        <member name="M:Spike.Text.CssSettings.Clone">
            <summary>
            Clones the Css settings object by copying all the properties.
            </summary>
            <returns>The copy of the current object.</returns>
        </member>
        <member name="P:Spike.Text.CssSettings.ColorNames">
            <summary>
            Gets or sets ColorNames setting. Default is Strict.
            </summary>
        </member>
        <member name="P:Spike.Text.CssSettings.CommentMode">
            <summary>
            Gets or sets CommentMode setting. Default is Important.
            </summary>
        </member>
        <member name="P:Spike.Text.CssSettings.MinifyExpressions">
            <summary>
            Gets or sets a value indicating whether to minify the javascript within expression functions. Deault is true.
            </summary>
        </member>
        <member name="P:Spike.Text.CssSettings.CssType">
            <summary>
            Gets or sets a value indicating how to treat the input source. Default is FullStyleSheet.
            </summary>
        </member>
        <member name="T:Spike.Text.CssStrings">
            <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
        </member>
        <member name="P:Spike.Text.CssStrings.ResourceManager">
            <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
        </member>
        <member name="P:Spike.Text.CssStrings.Culture">
            <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
        </member>
        <member name="P:Spike.Text.CssStrings.ColorCanBeCollapsed">
            <summary>
              Looks up a localized string similar to Color {0} can be collapsed to {1}.
            </summary>
        </member>
        <member name="P:Spike.Text.CssStrings.DecimalNoDigit">
            <summary>
              Looks up a localized string similar to Decimal point not followed by numeric digit.
            </summary>
        </member>
        <member name="P:Spike.Text.CssStrings.DeclarationIgnored">
            <summary>
              Looks up a localized string similar to declaration ignored.
            </summary>
        </member>
        <member name="P:Spike.Text.CssStrings.DeclarationIgnoredFormat">
            <summary>
              Looks up a localized string similar to {0} ({1}).
            </summary>
        </member>
        <member name="P:Spike.Text.CssStrings.DuplicateNamespaceDeclaration">
            <summary>
              Looks up a localized string similar to Duplicate namespace declaration; already declared &apos;{0}&apos;.
            </summary>
        </member>
        <member name="P:Spike.Text.CssStrings.EquivalentNumbers">
            <summary>
              Looks up a localized string similar to Numeric value contains unnecessary characters: {0} is equivalent to {1}..
            </summary>
        </member>
        <member name="P:Spike.Text.CssStrings.ExpectedCharset">
            <summary>
              Looks up a localized string similar to Expected charset string, found &apos;{0}&apos;.
            </summary>
        </member>
        <member name="P:Spike.Text.CssStrings.ExpectedClosingBrace">
            <summary>
              Looks up a localized string similar to Expected closing curly-brace, found &apos;{0}&apos;.
            </summary>
        </member>
        <member name="P:Spike.Text.CssStrings.ExpectedClosingBracket">
            <summary>
              Looks up a localized string similar to Expected closing bracket, found &apos;{0}&apos;.
            </summary>
        </member>
        <member name="P:Spike.Text.CssStrings.ExpectedClosingParen">
            <summary>
              Looks up a localized string similar to Expected closing parenthesis, found &apos;{0}&apos;.
            </summary>
        </member>
        <member name="P:Spike.Text.CssStrings.ExpectedColon">
            <summary>
              Looks up a localized string similar to Expected colon, found &apos;{0}&apos;.
            </summary>
        </member>
        <member name="P:Spike.Text.CssStrings.ExpectedComma">
            <summary>
              Looks up a localized string similar to Expect comma, found &apos;{0}&apos;.
            </summary>
        </member>
        <member name="P:Spike.Text.CssStrings.ExpectedCommaOrOpenBrace">
            <summary>
              Looks up a localized string similar to Expected comma or open brace, found &apos;{0}&apos;.
            </summary>
        </member>
        <member name="P:Spike.Text.CssStrings.ExpectedCommaOrSemicolon">
            <summary>
              Looks up a localized string similar to Expected comma or semi-colon, found &apos;{0}&apos;.
            </summary>
        </member>
        <member name="P:Spike.Text.CssStrings.ExpectedEndOfFile">
            <summary>
              Looks up a localized string similar to Expected end of file; invalid input file.
            </summary>
        </member>
        <member name="P:Spike.Text.CssStrings.ExpectedEqualSign">
            <summary>
              Looks up a localized string similar to Expected equal sign, found {0}.
            </summary>
        </member>
        <member name="P:Spike.Text.CssStrings.ExpectedExpression">
            <summary>
              Looks up a localized string similar to Expected expression, found &apos;{0}&apos;.
            </summary>
        </member>
        <member name="P:Spike.Text.CssStrings.ExpectedFunction">
            <summary>
              Looks up a localized string similar to Expected function, found &apos;{0}&apos;.
            </summary>
        </member>
        <member name="P:Spike.Text.CssStrings.ExpectedHexColor">
            <summary>
              Looks up a localized string similar to Expected hex color, found &apos;{0}&apos;.
            </summary>
        </member>
        <member name="P:Spike.Text.CssStrings.ExpectedIdentifier">
            <summary>
              Looks up a localized string similar to Expected identifier, found &apos;{0}&apos;.
            </summary>
        </member>
        <member name="P:Spike.Text.CssStrings.ExpectedIdentifierOrString">
            <summary>
              Looks up a localized string similar to Expected identifier or string, found &apos;{0}&apos;.
            </summary>
        </member>
        <member name="P:Spike.Text.CssStrings.ExpectedImport">
            <summary>
              Looks up a localized string similar to Expected import string or uri, found &apos;{0}&apos;.
            </summary>
        </member>
        <member name="P:Spike.Text.CssStrings.ExpectedMediaFeature">
            <summary>
              Looks up a localized string similar to Expected media feature, found &apos;{0}&apos;.
            </summary>
        </member>
        <member name="P:Spike.Text.CssStrings.ExpectedMediaIdentifier">
            <summary>
              Looks up a localized string similar to Expected media identifier, found &apos;{0}&apos;.
            </summary>
        </member>
        <member name="P:Spike.Text.CssStrings.ExpectedMediaQuery">
            <summary>
              Looks up a localized string similar to Expected media query, found &apos;{0}&apos;.
            </summary>
        </member>
        <member name="P:Spike.Text.CssStrings.ExpectedMediaQueryExpression">
            <summary>
              Looks up a localized string similar to Expected media-query expression, found &apos;{0}&apos;.
            </summary>
        </member>
        <member name="P:Spike.Text.CssStrings.ExpectedNamespace">
            <summary>
              Looks up a localized string similar to Expected namespace string or uri, found &apos;{0}&apos;.
            </summary>
        </member>
        <member name="P:Spike.Text.CssStrings.ExpectedNumber">
            <summary>
              Looks up a localized string similar to Expected number, found &apos;{0}&apos;.
            </summary>
        </member>
        <member name="P:Spike.Text.CssStrings.ExpectedOpenBrace">
            <summary>
              Looks up a localized string similar to Expected open brace, found &apos;{0}&apos;.
            </summary>
        </member>
        <member name="P:Spike.Text.CssStrings.ExpectedOpenParen">
            <summary>
              Looks up a localized string similar to Expected opening parenthesis.
            </summary>
        </member>
        <member name="P:Spike.Text.CssStrings.ExpectedPercentageFromOrTo">
            <summary>
              Looks up a localized string similar to Expected percentage, &apos;from&apos;, or &apos;to&apos;; found &apos;{0}&apos;.
            </summary>
        </member>
        <member name="P:Spike.Text.CssStrings.ExpectedProduct">
            <summary>
              Looks up a localized string similar to Expected calculation product, found &apos;{0}&apos;.
            </summary>
        </member>
        <member name="P:Spike.Text.CssStrings.ExpectedProgId">
            <summary>
              Looks up a localized string similar to Expected progid, found &apos;{0}&apos;.
            </summary>
        </member>
        <member name="P:Spike.Text.CssStrings.ExpectedRgbNumberOrPercentage">
            <summary>
              Looks up a localized string similar to Expected number or percentage value in rgb function, found &apos;{0}&apos;.
            </summary>
        </member>
        <member name="P:Spike.Text.CssStrings.ExpectedSelector">
            <summary>
              Looks up a localized string similar to Expected selector, found &apos;{0}&apos;.
            </summary>
        </member>
        <member name="P:Spike.Text.CssStrings.ExpectedSemicolon">
            <summary>
              Looks up a localized string similar to Expected semi-colon, found &apos;{0}&apos;.
            </summary>
        </member>
        <member name="P:Spike.Text.CssStrings.ExpectedSemicolonOrClosingBrace">
            <summary>
              Looks up a localized string similar to Expected semicolon or closing curly-brace, found &apos;{0}&apos;.
            </summary>
        </member>
        <member name="P:Spike.Text.CssStrings.ExpectedSemicolonOrOpenBrace">
            <summary>
              Looks up a localized string similar to Expected semi-colon or close brace, found &apos;{0}&apos;.
            </summary>
        </member>
        <member name="P:Spike.Text.CssStrings.ExpectedSum">
            <summary>
              Looks up a localized string similar to Expected calculation sum, found &apos;{0}&apos;.
            </summary>
        </member>
        <member name="P:Spike.Text.CssStrings.ExpectedTerm">
            <summary>
              Looks up a localized string similar to Expected term, found {0}.
            </summary>
        </member>
        <member name="P:Spike.Text.CssStrings.ExpectedUnit">
            <summary>
              Looks up a localized string similar to Expected calculation unit, found &apos;{0}&apos;.
            </summary>
        </member>
        <member name="P:Spike.Text.CssStrings.ExpressionError">
            <summary>
              Looks up a localized string similar to JavaScript error in expression property: {0}.
            </summary>
        </member>
        <member name="P:Spike.Text.CssStrings.FallbackEncodingFailed">
            <summary>
              Looks up a localized string similar to CssFallbackBuffer failed to encode encoded characters!.
            </summary>
        </member>
        <member name="P:Spike.Text.CssStrings.HackGeneratesInvalidCSS">
            <summary>
              Looks up a localized string similar to Browser hack generates invalid CSS.
            </summary>
        </member>
        <member name="P:Spike.Text.CssStrings.HashAfterUnaryNotAllowed">
            <summary>
              Looks up a localized string similar to Hash ({0}) not allowed after unary operator.
            </summary>
        </member>
        <member name="P:Spike.Text.CssStrings.HighSurrogateNoLow">
            <summary>
              Looks up a localized string similar to Unicode high-surrogate value (0x{0:x}) not immediately followed by unicode-escaped low-surrogate value.
            </summary>
        </member>
        <member name="P:Spike.Text.CssStrings.InvalidLowSurrogate">
            <summary>
              Looks up a localized string similar to Unicode high-surrogate value (0x{0:x}) followed by invalid low-surrogate value: 0x{1:x}.
            </summary>
        </member>
        <member name="P:Spike.Text.CssStrings.InvalidUnicodeRange">
            <summary>
              Looks up a localized string similar to Invalid Unicode Range Token: &apos;{0}&apos;.
            </summary>
        </member>
        <member name="P:Spike.Text.CssStrings.MediaQueryRequiresSpace">
            <summary>
              Looks up a localized string similar to Media queries require a space between &apos;and&apos; and the opening parenthesis: &apos;{0}&apos;.
            </summary>
        </member>
        <member name="P:Spike.Text.CssStrings.ParserSubsystem">
            <summary>
              Looks up a localized string similar to Parser.
            </summary>
        </member>
        <member name="P:Spike.Text.CssStrings.PossibleCharsetError">
            <summary>
              Looks up a localized string similar to Byte-order mark at front of source indicates possible encoding issue..
            </summary>
        </member>
        <member name="P:Spike.Text.CssStrings.PossibleInvalidClassName">
            <summary>
              Looks up a localized string similar to Possible cross-browser invalid class name: {0}.
            </summary>
        </member>
        <member name="P:Spike.Text.CssStrings.ProgIdIEOnly">
            <summary>
              Looks up a localized string similar to &apos;progid:&apos; is an IE-only construct that generates invalid CSS.
            </summary>
        </member>
        <member name="P:Spike.Text.CssStrings.ScannerSubsystem">
            <summary>
              Looks up a localized string similar to Scanner.
            </summary>
        </member>
        <member name="P:Spike.Text.CssStrings.Severity0">
            <summary>
              Looks up a localized string similar to run-time.
            </summary>
        </member>
        <member name="P:Spike.Text.CssStrings.Severity1">
            <summary>
              Looks up a localized string similar to coding.
            </summary>
        </member>
        <member name="P:Spike.Text.CssStrings.Severity2">
            <summary>
              Looks up a localized string similar to code.
            </summary>
        </member>
        <member name="P:Spike.Text.CssStrings.Severity3">
            <summary>
              Looks up a localized string similar to performance.
            </summary>
        </member>
        <member name="P:Spike.Text.CssStrings.Severity4">
            <summary>
              Looks up a localized string similar to improper technique.
            </summary>
        </member>
        <member name="P:Spike.Text.CssStrings.SeverityUnknown">
            <summary>
              Looks up a localized string similar to unknown ({0}).
            </summary>
        </member>
        <member name="P:Spike.Text.CssStrings.TokenAfterUnaryNotAllowed">
            <summary>
              Looks up a localized string similar to Token not allowed after unary operator: &apos;{0}&apos;.
            </summary>
        </member>
        <member name="P:Spike.Text.CssStrings.UndeclaredNamespace">
            <summary>
              Looks up a localized string similar to Namespace used but not declared in a @namespace statement: &apos;{0}&apos;.
            </summary>
        </member>
        <member name="P:Spike.Text.CssStrings.UnderscoreNotValid">
            <summary>
              Looks up a localized string similar to An underscore is not a valid CSS1 or CSS2 identifier character.
            </summary>
        </member>
        <member name="P:Spike.Text.CssStrings.UnexpectedAtKeyword">
            <summary>
              Looks up a localized string similar to Unexpected at-keyword, found &apos;{0}&apos;.
            </summary>
        </member>
        <member name="P:Spike.Text.CssStrings.UnexpectedCharset">
            <summary>
              Looks up a localized string similar to @charset must be very first token in file.
            </summary>
        </member>
        <member name="P:Spike.Text.CssStrings.UnexpectedDimension">
            <summary>
              Looks up a localized string similar to Unexpected dimension: &apos;{0}&apos;.
            </summary>
        </member>
        <member name="P:Spike.Text.CssStrings.UnexpectedEndOfFile">
            <summary>
              Looks up a localized string similar to Unexpected end of file encountered.
            </summary>
        </member>
        <member name="P:Spike.Text.CssStrings.UnexpectedEscape">
            <summary>
              Looks up a localized string similar to Unexpected escape sequence: \{0}.
            </summary>
        </member>
        <member name="P:Spike.Text.CssStrings.UnexpectedFunction">
            <summary>
              Looks up a localized string similar to Unexpected function; only calc( or attr( allowed here, found &apos;{0}&apos;.
            </summary>
        </member>
        <member name="P:Spike.Text.CssStrings.UnexpectedNumberCharacter">
            <summary>
              Looks up a localized string similar to Unexpected number character: {0}.
            </summary>
        </member>
        <member name="P:Spike.Text.CssStrings.UnexpectedStringCharacter">
            <summary>
              Looks up a localized string similar to Unexpected string character: {0}.
            </summary>
        </member>
        <member name="P:Spike.Text.CssStrings.UnexpectedToken">
            <summary>
              Looks up a localized string similar to Unexpected token, found &apos;{0}&apos;.
            </summary>
        </member>
        <member name="P:Spike.Text.CssStrings.UnknownCharacterEncoding">
            <summary>
              Looks up a localized string similar to ?.
            </summary>
        </member>
        <member name="P:Spike.Text.CssStrings.UnknownError">
            <summary>
              Looks up a localized string similar to Unknown error.
            </summary>
        </member>
        <member name="P:Spike.Text.CssStrings.UnnecessaryUnits">
            <summary>
              Looks up a localized string similar to Unnecessary units on a value of zero.
            </summary>
        </member>
        <member name="P:Spike.Text.CssStrings.UnterminatedComment">
            <summary>
              Looks up a localized string similar to Unterminated comment..
            </summary>
        </member>
        <member name="P:Spike.Text.CssStrings.UnterminatedString">
            <summary>
              Looks up a localized string similar to Unterminated string: {0}.
            </summary>
        </member>
        <member name="T:Spike.Text.CssToken">
            <summary>
            Token class represents a parsed token of information consumed by the parser
            </summary>
        </member>
        <member name="M:Spike.Text.JsActivationObject.DeclareScope">
            <summary>
            Set up this scope's fields from the declarations it contains
            </summary>
        </member>
        <member name="M:Spike.Text.JsActivationObject.GetParentBlock(Spike.Text.JsAstNode)">
            <summary>
            Return the first Block node in the tree starting from the given node and working up through the parent nodes.
            </summary>
            <param name="node">initial node</param>
            <returns>first block node in the node tree</returns>
        </member>
        <member name="P:Spike.Text.JsActivationObject.Existing">
            <summary>
            Gets or sets a boolean value for whether this is an existing scope or a new one
            generated during the current run.
            </summary>
        </member>
        <member name="T:Spike.Text.JsAstNode">
            <summary>
            Abstract syntax tree node
            </summary>
        </member>
        <member name="F:Spike.Text.JsAstNode.m_terminatingContext">
            <summary>the context of any terminating character parsed after this node
            e.g. the semicolon after a statement or a comma in a parameter list</summary>
        </member>
        <member name="M:Spike.Text.JsAstNode.ToCode">
            <summary>
            Generates valid JavaScript code from the given node 
            </summary>
            <returns>string representation of the JavaScript code for this node</returns>
        </member>
        <member name="M:Spike.Text.JsAstNode.FindPrimitiveType">
            <summary>
            Gets a valid indicating the primitive JavaScript type of this node, if known.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Spike.Text.JsAstNode.ReplaceChild(Spike.Text.JsAstNode,Spike.Text.JsAstNode)">
            <summary>
            Replace this node's specified child with another given node. 
            </summary>
            <param name="oldNode">Child node to be replaced</param>
            <param name="newNode">New node with which to replace the existing child node</param>
            <returns>true if the replacement succeeded; false otherwise</returns>
        </member>
        <member name="M:Spike.Text.JsAstNode.IsEquivalentTo(Spike.Text.JsAstNode)">
            <summary>
            Abstract method to be implemented by every concrete class.
            Returns true of the other object is equivalent to this object
            </summary>
            <param name="otherNode"></param>
            <returns></returns>
        </member>
        <member name="M:Spike.Text.JsAstNode.Accept(Spike.Text.IJsVisitor)">
            <summary>
            Abstract method to be implemented by every concrete node class
            </summary>
            <param name="visitor">visitor to accept</param>
        </member>
        <member name="P:Spike.Text.JsAstNode.Parent">
            <summary>
            Gets or sets the parent node of this node in the abstract syntax tree
            </summary>
        </member>
        <member name="P:Spike.Text.JsAstNode.Context">
            <summary>
            Gets or sets the source context of this node
            </summary>
        </member>
        <member name="P:Spike.Text.JsAstNode.Parser">
            <summary>
            Gets a reference to the JSParser object that generated this node
            </summary>
        </member>
        <member name="P:Spike.Text.JsAstNode.IsExpression">
            <summary>
            Gets a boolean flag indicating whether this node is an expression
            </summary>
        </member>
        <member name="P:Spike.Text.JsAstNode.IsConstant">
            <summary>
            Gets a boolean flag indicating whether this node is a constant expression
            </summary>
        </member>
        <member name="P:Spike.Text.JsAstNode.Index">
            <summary>
            Gets or sets the order-execution index for the node's function scope
            </summary>
        </member>
        <member name="P:Spike.Text.JsAstNode.Precedence">
            <summary>
            Gets the order precedence of this node, if it is an expression
            </summary>
        </member>
        <member name="P:Spike.Text.JsAstNode.HideFromOutput">
            <summary>
            Gets or sets a flag indicating whether this node should be hidden from the output generated by the ToCode method
            </summary>
        </member>
        <member name="P:Spike.Text.JsAstNode.Children">
            <summary>
            Gets an enumeration representing the child nodes of this node in the abstract syntax tree
            </summary>
        </member>
        <member name="P:Spike.Text.JsAstNode.IsWindowLookup">
            <summary>
            Gets a boolean value representing whether this node is a Lookup node resolving to the global predefined window object.
            </summary>
        </member>
        <member name="P:Spike.Text.JsAstNode.LeftHandSide">
            <summary>
            Gets the syntax tree node representing the leftmost portion of this node's subtree.
            </summary>
        </member>
        <member name="P:Spike.Text.JsAstNode.EnclosingScope">
            <summary>
            Get the enclosing lexical scope for this node.
            </summary>
        </member>
        <member name="P:Spike.Text.JsAstNode.ContainsInOperator">
            <summary>
            Returns true if the node contains an in-operator
            </summary>
        </member>
        <member name="M:Spike.Text.JsAstNodeList.IsEquivalentTo(Spike.Text.JsAstNode)">
            <summary>
            an astlist is equivalent to another astlist if they both have the same number of
            items, and each item is equivalent to the corresponding item in the other
            </summary>
            <param name="otherNode"></param>
            <returns></returns>
        </member>
        <member name="P:Spike.Text.JsBinaryOperator.ContainsInOperator">
            <summary>
            Returns true if the expression contains an in-operator
            </summary>
        </member>
        <member name="M:Spike.Text.JsBlock.ReplaceChild(Spike.Text.JsAstNode,Spike.Text.JsAstNode)">
            <summary>
            Replace the existing direct child node of the block with a new node.
            </summary>
            <param name="oldNode">existing statement node to replace.</param>
            <param name="newNode">node with which to replace the existing node.</param>
            <returns>true if the replacement was a succeess; false otherwise</returns>
        </member>
        <member name="M:Spike.Text.JsBlock.Append(Spike.Text.JsAstNode)">
            <summary>
            Append the given statement node to the end of the block
            </summary>
            <param name="element">node to add to the block</param>
        </member>
        <member name="M:Spike.Text.JsBlock.IndexOf(Spike.Text.JsAstNode)">
            <summary>
            Gets the zero-based index of the given syntax tree node within the block, or -1 if the node is not a direct child of the block
            </summary>
            <param name="child">node to find</param>
            <returns>zero-based index of the node in the block, or -1 if the node is not a direct child of the block</returns>
        </member>
        <member name="M:Spike.Text.JsBlock.InsertAfter(Spike.Text.JsAstNode,Spike.Text.JsAstNode)">
            <summary>
            Insert the given statement node after an existing node in the block.
            </summary>
            <param name="after">exisitng child node of the block</param>
            <param name="item">node to insert after the existing node</param>
        </member>
        <member name="M:Spike.Text.JsBlock.Insert(System.Int32,Spike.Text.JsAstNode)">
            <summary>
            Insert a new node into the given position index within the block
            </summary>
            <param name="position">zero-based index into which the new node will be inserted</param>
            <param name="item">new node to insert into the block</param>
        </member>
        <member name="M:Spike.Text.JsBlock.RemoveLast">
            <summary>
            Remove the last node in the block
            </summary>
        </member>
        <member name="M:Spike.Text.JsBlock.RemoveAt(System.Int32)">
            <summary>
            Remove the node at the given position index.
            </summary>
            <param name="index">Zero-based position index</param>
        </member>
        <member name="M:Spike.Text.JsBlock.InsertRange(System.Int32,System.Collections.Generic.IEnumerable{Spike.Text.JsAstNode})">
            <summary>
            Insert a set of nodes into the block at the given position
            </summary>
            <param name="index">Zero-based position into which the new nodes will be inserted.</param>
            <param name="newItems">Collection of statements to insert</param>
        </member>
        <member name="M:Spike.Text.JsBlock.Clear">
            <summary>
            Remove all statements from the Block
            </summary>
        </member>
        <member name="P:Spike.Text.JsBlock.Item(System.Int32)">
            <summary>
            Gets a particular statement in the list of statements making up this block
            </summary>
            <param name="index">zero-based index of the desired statement</param>
            <returns>abstract syntax tree node</returns>
        </member>
        <member name="P:Spike.Text.JsBlock.EnclosingScope">
            <summary>
            Returns the enclosing scope of this block
            </summary>
        </member>
        <member name="P:Spike.Text.JsBlock.BraceOnNewLine">
            <summary>
            Gets or sets a boolean value indicating whether the brace for this block (if there was one) started
            on a newline (true) or the same line as the statement to which it belongs (false)
            </summary>
        </member>
        <member name="P:Spike.Text.JsBlock.ForceBraces">
            <summary>
            Gets or sets whether to force this block to always have curly-braces around it
            and never to optimize them away.
            </summary>
        </member>
        <member name="P:Spike.Text.JsBlock.IsExpression">
            <summary>
            Returns false unless the block constains only a single statement that is itself an expression.
            </summary>
        </member>
        <member name="P:Spike.Text.JsBlock.Count">
            <summary>
            Gets the count of statements making up this block
            </summary>
        </member>
        <member name="P:Spike.Text.JsBlock.Children">
            <summary>
            Gets an enumerator for the syntax tree nodes making up this block
            </summary>
        </member>
        <member name="M:Spike.Text.JsBlockScope.DeclareScope">
            <summary>
            Set up this scopes lexically-declared fields
            </summary>
        </member>
        <member name="T:Spike.Text.JsLocalRenaming">
            <summary>
            Settings for how local variables and functions can be renamed
            </summary>
        </member>
        <member name="F:Spike.Text.JsLocalRenaming.KeepAll">
            <summary>
            Keep all names; don't rename anything
            </summary>
        </member>
        <member name="F:Spike.Text.JsLocalRenaming.KeepLocalizationVars">
            <summary>
            Rename all local variables and functions that do not begin with "L_"
            </summary>
        </member>
        <member name="F:Spike.Text.JsLocalRenaming.CrunchAll">
            <summary>
            Rename all local variables and functions. (default)
            </summary>
        </member>
        <member name="T:Spike.Text.JsEvalTreatment">
            <summary>
            Settings for how to treat eval statements
            </summary>
        </member>
        <member name="F:Spike.Text.JsEvalTreatment.Ignore">
            <summary>
            Ignore all eval statements (default). This assumes that code that is eval'd will not attempt
            to access any local variables or functions, as those variables and function may be renamed.
            </summary>
        </member>
        <member name="F:Spike.Text.JsEvalTreatment.MakeImmediateSafe">
            <summary>
            Assume any code that is eval'd will attempt to access local variables and functions declared
            in the same scope as the eval statement. This will turn off local variable and function renaming
            in any scope that contains an eval statement.
            </summary>
        </member>
        <member name="F:Spike.Text.JsEvalTreatment.MakeAllSafe">
            <summary>
            Assume that any local variable or function in any accessible scope chain may be referenced by 
            code that is eval'd. This will turn off local variable and function renaming for all scopes that
            contain an eval statement, and all their parent scopes up the chain to the global scope.
            </summary>
        </member>
        <member name="T:Spike.Text.JsSourceMode">
            <summary>
            Enum describing the type of input expected
            </summary>
        </member>
        <member name="F:Spike.Text.JsSourceMode.Program">
            <summary>Default input mode: a program, a block of top-level global statements</summary>
        </member>
        <member name="F:Spike.Text.JsSourceMode.Expression">
            <summary>Input is a single JavaScript Expression</summary>
        </member>
        <member name="F:Spike.Text.JsSourceMode.EventHandler">
            <summary>Input is an implicit function block, as in the value of an HTML onclick attribute</summary>
        </member>
        <member name="T:Spike.Text.JsFormat">
            <summary>
            Enum describing how to treat the output JavaScript
            </summary>
        </member>
        <member name="F:Spike.Text.JsFormat.Normal">
            <summary>normal JavaScript code</summary>
        </member>
        <member name="F:Spike.Text.JsFormat.JSON">
            <summary>JSON code</summary>
        </member>
        <member name="T:Spike.Text.JsSettings">
            <summary>
            Object used to store code settings for JavaScript parsing, minification, and output
            </summary>
        </member>
        <member name="M:Spike.Text.JsSettings.#ctor">
            <summary>
            Instantiate a CodeSettings object with the default settings
            </summary>
        </member>
        <member name="M:Spike.Text.JsSettings.Clone">
            <summary>
            Instantiate a new CodeSettings object with the same settings as the current object.
            </summary>
            <returns>a copy CodeSettings object</returns>
        </member>
        <member name="F:Spike.Text.JsSettings.m_identifierReplacementMap">
            <summary>
            dictionary of identifiers we want to manually rename
            </summary>
        </member>
        <member name="M:Spike.Text.JsSettings.AddRenamePair(System.String,System.String)">
            <summary>
            Add a rename pair to the identifier rename map
            </summary>
            <param name="sourceName">name of the identifier in the source code</param>
            <param name="newName">new name with which to replace the source name</param>
            <returns>true if added; false if either name is not a valid JavaScript identifier</returns>
        </member>
        <member name="M:Spike.Text.JsSettings.ClearRenamePairs">
            <summary>
            Clear any rename pairs from the identifier rename map
            </summary>
        </member>
        <member name="M:Spike.Text.JsSettings.GetNewName(System.String)">
            <summary>
            Given a source identifier, return a new name for it, if one has already been added
            </summary>
            <param name="sourceName">source name to check</param>
            <returns>new name if it exists, null otherwise</returns>
        </member>
        <member name="M:Spike.Text.JsSettings.SetNoAutoRename(System.String[])">
            <summary>
            sets the collection of known global names to the array of string passed to this method
            </summary>
            <param name="noRenameNames">Array of names to exclude from renaming process.</param>
        </member>
        <member name="M:Spike.Text.JsSettings.SetNoAutoRenames(System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            sets the collection of known global names to the enumeration of strings passed to this method
            </summary>
            <param name="noRenameNames">Array of names to exclude from renaming process.</param>
        </member>
        <member name="M:Spike.Text.JsSettings.AddNoAutoRename(System.String)">
            <summary>
            Adds an identifier to the auto-rename exclusion list.
            </summary>
            <param name="noRename">The identifier to avoid renaming.</param>
            <returns>Whether it was added or not.</returns>
        </member>
        <member name="M:Spike.Text.JsSettings.SetKnownGlobalNames(System.String[])">
            <summary>
            sets the collection of known global names to the array of string passed to this method
            </summary>
            <param name="globalArray">array of known global names</param>
        </member>
        <member name="M:Spike.Text.JsSettings.SetKnownGlobalIdentifiers(System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            sets the collection of known global names to the array of string passed to this method
            </summary>
            <param name="globalArray">collection of known global names</param>
        </member>
        <member name="M:Spike.Text.JsSettings.AddKnownGlobal(System.String)">
            <summary>
            Add a known global identifier to the list
            </summary>
            <param name="identifier">global identifier</param>
            <returns>true if valid identifier; false if invalid identifier</returns>
        </member>
        <member name="M:Spike.Text.JsSettings.SetDebugLookups(System.String[])">
            <summary>
            Set the collection of debug "lookup" identifiers
            </summary>
            <param name="debugLookups">array of debug lookup identifier strings</param>
            <returns>number of names successfully added to the collection</returns>
        </member>
        <member name="M:Spike.Text.JsSettings.SetDebugNamespaces(System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Set the collection of debug "lookup" identifiers
            </summary>
            <param name="debugLookups">collection of debug lookup identifier strings</param>
            <returns>number of names successfully added to the collection</returns>
        </member>
        <member name="M:Spike.Text.JsSettings.AddDebugLookup(System.String)">
            <summary>
            Adds a debug lookup namespace to this settings object.
            </summary>
            <param name="debugNamespace">The debug namespace to add.</param>
            <returns>Whether it was added or not.</returns>
        </member>
        <member name="M:Spike.Text.JsSettings.IsModificationAllowed(Spike.Text.JsTreeModifications)">
            <summary>
            Determine whether a particular AST tree modification is allowed, or has
            been squelched (regardless of any other settings)
            </summary>
            <param name="modification">one or more tree modification settings</param>
            <returns>true only if NONE of the passed modifications have their kill bits set</returns>
        </member>
        <member name="P:Spike.Text.JsSettings.HasRenamePairs">
            <summary>
            returns whether or not there are any rename pairs in this settings object
            </summary>
        </member>
        <member name="P:Spike.Text.JsSettings.RenamePairs">
            <summary>
            Gets or sets a string representation of all the indentifier replacements as a comma-separated
            list of "source=target" identifiers.
            </summary>
        </member>
        <member name="P:Spike.Text.JsSettings.NoAutoRenameIdentifiers">
            <summary>
            read-only collection of identifiers we do not want renamed
            </summary>
        </member>
        <member name="P:Spike.Text.JsSettings.NoAutoRenameCollection">
            <summary>
            Gets the list of excluded identifiers from auto-renaming process.
            </summary>
        </member>
        <member name="P:Spike.Text.JsSettings.NoAutoRenameList">
            <summary>
            Get or sets the no-automatic-renaming list as a single string of comma-separated identifiers
            </summary>
        </member>
        <member name="P:Spike.Text.JsSettings.KnownGlobalNames">
            <summary>
            read-only collection of known global names
            </summary>
        </member>
        <member name="P:Spike.Text.JsSettings.KnownGlobalCollection">
            <summary>
            Gets the known global name collection
            </summary>
        </member>
        <member name="P:Spike.Text.JsSettings.KnownGlobalNamesList">
            <summary>
            Gets or sets the known global names list as a single comma-separated string
            </summary>
        </member>
        <member name="P:Spike.Text.JsSettings.DebugLookups">
            <summary>
            Collection of "debug" lookup identifiers
            </summary>
        </member>
        <member name="P:Spike.Text.JsSettings.DebugLookupCollection">
            <summary>
            Gets the set of debug lookups
            </summary>
        </member>
        <member name="P:Spike.Text.JsSettings.DebugLookupList">
            <summary>
            string representation of the list of debug lookups, comma-separated
            </summary>
        </member>
        <member name="P:Spike.Text.JsSettings.AlwaysEscapeNonAscii">
            <summary>
            Gets or sets a flag indicating whether to always escape non-ASCII characters as \uXXXX
            or to let the output encoding object handle that via the JsEncoderFallback object for the
            specified output encoding format. Default is false (let the Encoding object handle it).
            </summary>
        </member>
        <member name="P:Spike.Text.JsSettings.CollapseToLiteral">
            <summary>
            collapse new Array() to [] and new Object() to {} [true]
            or leave ais [false]. Default is true.
            </summary>
        </member>
        <member name="P:Spike.Text.JsSettings.ConstStatementsMozilla">
            <summary>
            Gets or sets a boolean value indicating whether to use old-style const statements (just var-statements that
            define unchangeable fields) or new EcmaScript 6 lexical declarations.
            </summary>
        </member>
        <member name="P:Spike.Text.JsSettings.ErrorIfNotInlineSafe">
            <summary>
            Throw an error if a source string is not safe for inclusion 
            in an HTML inline script block. Default is false.
            </summary>
        </member>
        <member name="P:Spike.Text.JsSettings.EvalsAreSafe">
            <summary>
            Gets or sets a value indicating whether eval-statements are "safe."
            Deprecated in favor of <see cref="P:Spike.Text.JsSettings.EvalTreatment"/>, which is an enumeration
            allowing for more options than just true or false.
            True for this property is the equivalent of EvalTreament.Ignore;
            False is the equivalent to EvalTreament.MakeAllSafe
            </summary>
        </member>
        <member name="P:Spike.Text.JsSettings.EvalLiteralExpressions">
            <summary>
            Evaluate expressions containing only literal bool, string, numeric, or null values [true]
            Leave literal expressions alone and do not evaluate them [false]. Default is true.
            </summary>
        </member>
        <member name="P:Spike.Text.JsSettings.EvalTreatment">
            <summary>
            Gets or sets a settings value indicating how "safe" eval-statements are to be assumed.
            Ignore (default) means we can assume eval-statements will not reference any local variables and functions.
            MakeImmediateSafe assumes eval-statements will reference local variables and function within the same scope.
            MakeAllSafe assumes eval-statements will reference any accessible local variable or function.
            Local variables that we assume may be referenced by eval-statements cannot be automatically renamed.
            </summary>
        </member>
        <member name="P:Spike.Text.JsSettings.Format">
            <summary>
            Gets or sets the format to use for the JavaScript processing.
            </summary>
        </member>
        <member name="P:Spike.Text.JsSettings.IgnoreConditionalCompilation">
            <summary>
            Gets or sets a boolean value indicating whether or not to ignore conditional-compilation comment syntax (true) or
            to try to retain the comments in the output (false; default)
            </summary>
        </member>
        <member name="P:Spike.Text.JsSettings.IgnorePreprocessorDefines">
            <summary>
            Gets or sets a boolean value indicating whether or not to ignore preprocessor defines comment syntax (true) or
            to evaluate them (false; default)
            </summary>
        </member>
        <member name="P:Spike.Text.JsSettings.InlineSafeStrings">
            <summary>
            Gets or sets a boolean value indicating whether to break up string literals containing &lt;/script&gt; so inline code won't break [true, default]
            or to leave string literals as-is [false]
            </summary>
        </member>
        <member name="P:Spike.Text.JsSettings.LocalRenaming">
            <summary>
            Gets or sets a boolean value indicating whether/how local variables and functions should be automatically renamed:
            KeepAll - do not rename local variables and functions; 
            CrunchAll - rename all local variables and functions to shorter names; 
            KeepLocalizationVars - rename all local variables and functions that do NOT start with L_
            </summary>
        </member>
        <member name="P:Spike.Text.JsSettings.MacSafariQuirks">
            <summary>
            Gets or sets a boolean value indicating whether to add characters to the output to make sure Mac Safari bugs are not generated [true, default], or to
            disregard potential known Mac Safari bugs in older versions [false]
            </summary>
        </member>
        <member name="P:Spike.Text.JsSettings.MinifyCode">
            <summary>
            Gets or sets a boolean value indicating whether any operations are to be applied to the parsed tree [true, default],
            or whether to return it as-is [false]. 
            </summary>
        </member>
        <member name="P:Spike.Text.JsSettings.ManualRenamesProperties">
            <summary>
            Gets or sets a boolean value indicating whether object property names with the specified "from" names will
            get renamed to the corresponding "to" names (true, default) when using the manual-rename feature, or left alone (false)
            </summary>
        </member>
        <member name="P:Spike.Text.JsSettings.PreprocessOnly">
            <summary>
            Gets or sets a boolean value indicating whether or not the input files should be preprocessed only (default is false)
            </summary>
        </member>
        <member name="P:Spike.Text.JsSettings.PreserveFunctionNames">
            <summary>
            Gets or sets a value indicating whether all function names must be preserved and remain as-named (true),
            or can be automatically renamed (false, default).
            </summary>
        </member>
        <member name="P:Spike.Text.JsSettings.PreserveImportantComments">
            <summary>
            Gets or sets a value indicating whether to preserve important comments in the output.
            Default is true, preserving important comments. Important comments have an exclamation
            mark as the very first in-comment character (//! or /*!).
            </summary>
        </member>
        <member name="P:Spike.Text.JsSettings.QuoteObjectLiteralProperties">
            <summary>
            Gets or sets a value indicating whether to always quote object literal property names.
            Default is false.
            </summary>
        </member>
        <member name="P:Spike.Text.JsSettings.ReorderScopeDeclarations">
            <summary>
            Gets or sets a value indicating whether or not to reorder function and variable
            declarations within scopes (true, default), or to leave the order as specified in 
            the original source.
            </summary>
        </member>
        <member name="P:Spike.Text.JsSettings.RemoveFunctionExpressionNames">
            <summary>
            Gets or sets a value indicating whether or not to remove unreferenced function expression names (true, default)
            or to leave the names of function expressions, even if they are unreferenced (false).
            </summary>
        </member>
        <member name="P:Spike.Text.JsSettings.RemoveUnneededCode">
            <summary>
            Gets or sets a boolean value indicating whether to remove unneeded code, such as uncalled local functions or unreachable code [true, default], 
            or to keep such code in the output [false].
            </summary>
        </member>
        <member name="P:Spike.Text.JsSettings.SourceMode">
            <summary>
            Gets or sets the source mode
            </summary>
        </member>
        <member name="P:Spike.Text.JsSettings.StrictMode">
            <summary>
            Gets or sets a boolean value indicating whether or not to force the input code into strict mode (true)
            or rely on the sources to turn on strict mode via the "use strict" prologue directive (false, default).
            </summary>
        </member>
        <member name="P:Spike.Text.JsSettings.StripDebugStatements">
            <summary>
            Gets or sets a boolean value indicating whether to strip debug statements [true, default],
            or leave debug statements in the output [false]
            </summary>
        </member>
        <member name="P:Spike.Text.JsSettings.SymbolsMap">
            <summary>
            Gets or sets the <see cref="T:Spike.Text.IJsSourceMap"/> instance. Default is null, which won't output a symbol map.
            </summary>
        </member>
        <member name="T:Spike.Text.JsTreeModifications">
            <summary>
            Enum describing tree modifications on the javascript code file.
            </summary>
        </member>
        <member name="F:Spike.Text.JsTreeModifications.None">
            <summary>
            Default. No specific tree modification
            </summary>
        </member>
        <member name="F:Spike.Text.JsTreeModifications.PreserveImportantComments">
            <summary>
            Preserve "important" comments in output: /*! ... */
            </summary>
        </member>
        <member name="F:Spike.Text.JsTreeModifications.BracketMemberToDotMember">
            <summary>
            Replace a member-bracket call with a member-dot construct if the member
            name is a string literal that can be an identifier.
            A["B"] ==&gt; A.B
            </summary>
        </member>
        <member name="F:Spike.Text.JsTreeModifications.NewObjectToObjectLiteral">
            <summary>
            Replace a new Object constructor call with an object literal
            new Object() ==&gt; {}
            </summary>
        </member>
        <member name="F:Spike.Text.JsTreeModifications.NewArrayToArrayLiteral">
            <summary>
            Change Array constructor calls with array literals.
            Does not replace constructors called with a single numeric parameter
            (could be a capacity contructor call).
            new Array() ==&gt; []
            new Array(A,B,C) ==&gt; [A,B,C]
            </summary>
        </member>
        <member name="F:Spike.Text.JsTreeModifications.RemoveEmptyDefaultCase">
            <summary>
            Remove the default case in a switch statement if the block contains
            only a break statement.
            remove default:break;
            </summary>
        </member>
        <member name="F:Spike.Text.JsTreeModifications.RemoveEmptyCaseWhenNoDefault">
            <summary>
            If there is no default case, remove any case statements that contain
            only a single break statement.
            remove case A:break;
            </summary>
        </member>
        <member name="F:Spike.Text.JsTreeModifications.RemoveBreakFromLastCaseBlock">
            <summary>
            Remove the break statement from the last case block of a switch statement.
            switch(A){case B: C;break;} ==&gt; switch(A){case B:C;}
            </summary>
        </member>
        <member name="F:Spike.Text.JsTreeModifications.RemoveEmptyFinally">
            <summary>
            Remove an empty finally statement if there is a non-empty catch block.
            try{...}catch(E){...}finally{} ==&gt; try{...}catch(E){...}
            </summary>
        </member>
        <member name="F:Spike.Text.JsTreeModifications.RemoveDuplicateVar">
            <summary>
            Remove duplicate var declarations in a var statement that have no initializers.
            var A,A=B  ==&gt;  var A=B
            var A=B,A  ==&gt;  var A=B
            </summary>
        </member>
        <member name="F:Spike.Text.JsTreeModifications.CombineVarStatements">
            <summary>
            Combine adjacent var statements.
            var A;var B  ==&gt;  var A,B
            </summary>
        </member>
        <member name="F:Spike.Text.JsTreeModifications.MoveVarIntoFor">
            <summary>
            Move preceeding var statement into the initializer of the for statement.
            var A;for(var B;;);  ==&gt;  for(var A,B;;);
            var A;for(;;)  ==&gt; for(var A;;)
            </summary>
        </member>
        <member name="F:Spike.Text.JsTreeModifications.VarInitializeReturnToReturnInitializer">
            <summary>
            Combine adjacent var statement and return statement to a single return statement
            var A=B;return A  ==&gt; return B
            </summary>
        </member>
        <member name="F:Spike.Text.JsTreeModifications.IfEmptyToExpression">
            <summary>
            Replace an if-statement that has empty true and false branches with just the 
            condition expression.
            if(A);else;  ==&gt; A;
            </summary>
        </member>
        <member name="F:Spike.Text.JsTreeModifications.IfConditionCallToConditionAndCall">
            <summary>
            replace if-statement that only has a single call statement in the true branch
            with a logical-and statement
            if(A)B() ==&gt; A&amp;&amp;B()
            </summary>
        </member>
        <member name="F:Spike.Text.JsTreeModifications.IfElseReturnToReturnConditional">
            <summary>
            Replace an if-else-statement where both branches are only a single return
            statement with a single return statement and a conditional operator.
            if(A)return B;else return C  ==&gt;  return A?B:C 
            </summary>
        </member>
        <member name="F:Spike.Text.JsTreeModifications.IfConditionReturnToCondition">
            <summary>
            If a function ends in an if-statement that only has a true-branch containing
            a single return statement with no operand, replace the if-statement with just
            the condition expression.
            function A(...){...;if(B)return}  ==&gt; function A(...){...;B}
            </summary>
        </member>
        <member name="F:Spike.Text.JsTreeModifications.IfConditionFalseToIfNotConditionTrue">
            <summary>
            If the true-block of an if-statment is empty and the else-block is not,
            negate the condition and move the else-block to the true-block.
            if(A);else B  ==&gt;  if(!A)B
            </summary>
        </member>
        <member name="F:Spike.Text.JsTreeModifications.CombineAdjacentStringLiterals">
            <summary>
            Combine adjacent string literals.
            "A"+"B"  ==&gt; "AB"
            </summary>
        </member>
        <member name="F:Spike.Text.JsTreeModifications.RemoveUnaryPlusOnNumericLiteral">
            <summary>
            Remove unary-plus operators when the operand is a numeric literal
            +123  ==&gt;  123
            </summary>
        </member>
        <member name="F:Spike.Text.JsTreeModifications.ApplyUnaryMinusToNumericLiteral">
            <summary>
            Apply (and cascade) unary-minus operators to the value of a numeric literal
            -(4)  ==&gt;  -4   (unary minus applied to a numeric 4 ==&gt; numeric -4)
            -(-4)  ==&gt;  4   (same as above, but cascading)
            </summary>
        </member>
        <member name="F:Spike.Text.JsTreeModifications.MinifyStringLiterals">
            <summary>
            Apply minification technics to string literals
            </summary>
        </member>
        <member name="F:Spike.Text.JsTreeModifications.MinifyNumericLiterals">
            <summary>
            Apply minification techniques to numeric literals
            </summary>
        </member>
        <member name="F:Spike.Text.JsTreeModifications.RemoveUnusedParameters">
            <summary>
            Remove unused function parameters
            </summary>
        </member>
        <member name="F:Spike.Text.JsTreeModifications.StripDebugStatements">
            <summary>
            remove "debug" statements
            </summary>
        </member>
        <member name="F:Spike.Text.JsTreeModifications.LocalRenaming">
            <summary>
            Rename local variables and functions
            </summary>
        </member>
        <member name="F:Spike.Text.JsTreeModifications.RemoveFunctionExpressionNames">
            <summary>
            Remove unused function expression names
            </summary>
        </member>
        <member name="F:Spike.Text.JsTreeModifications.RemoveUnnecessaryLabels">
            <summary>
            Remove unnecessary labels from break or continue statements
            </summary>
        </member>
        <member name="F:Spike.Text.JsTreeModifications.RemoveUnnecessaryCCOnStatements">
            <summary>
            Remove unnecessary @cc_on statements
            </summary>
        </member>
        <member name="F:Spike.Text.JsTreeModifications.DateGetTimeToUnaryPlus">
            <summary>
            Convert (new Date()).getTime() to +new Date
            </summary>
        </member>
        <member name="F:Spike.Text.JsTreeModifications.EvaluateNumericExpressions">
            <summary>
            Evaluate numeric literal expressions.
            1 + 2  ==&gt; 3
            </summary>
        </member>
        <member name="F:Spike.Text.JsTreeModifications.SimplifyStringToNumericConversion">
            <summary>
            Simplify a common method on converting string to numeric: 
            lookup - 0  ==&gt; +lookup
            (Subtracting zero converts lookup to number, then doesn't modify
            it; unary plus also converts operand to numeric)
            </summary>
        </member>
        <member name="F:Spike.Text.JsTreeModifications.PropertyRenaming">
            <summary>
            Rename properties in object literals, member-dot, and member-bracket operations
            </summary>
        </member>
        <member name="F:Spike.Text.JsTreeModifications.RemoveQuotesFromObjectLiteralNames">
            <summary>
            Remove the quotes arounf objectl literal property names when
            the names are valid identifiers.
            </summary>
        </member>
        <member name="F:Spike.Text.JsTreeModifications.BooleanLiteralsToNotOperators">
            <summary>
            Change boolean literals to not operators.
            true  -> !0
            false -> !1
            </summary>
        </member>
        <member name="F:Spike.Text.JsTreeModifications.IfExpressionsToExpression">
            <summary>
            Change if-statements with expression statements as their branches to expressions
            </summary>
        </member>
        <member name="F:Spike.Text.JsTreeModifications.CombineAdjacentExpressionStatements">
            <summary>
            Combine adjacent expression statements into a single expression statement
            using the comma operator
            </summary>
        </member>
        <member name="F:Spike.Text.JsTreeModifications.ReduceStrictOperatorIfTypesAreSame">
            <summary>
            If the types of both sides of a strict operator (=== or !==) are known
            to be the same, we can reduce the operators to == or !=
            </summary>
        </member>
        <member name="F:Spike.Text.JsTreeModifications.ReduceStrictOperatorIfTypesAreDifferent">
            <summary>
            If the types of both sides of a strict operator (=== or !==) are known
            to be different, than we can reduct the binary operator to false or true (respectively)
            </summary>
        </member>
        <member name="F:Spike.Text.JsTreeModifications.MoveFunctionToTopOfScope">
            <summary>
            Move function declarations to the top of the containing scope
            </summary>
        </member>
        <member name="F:Spike.Text.JsTreeModifications.CombineVarStatementsToTopOfScope">
            <summary>
            Combine var statements at the top of the containing scope
            </summary>
        </member>
        <member name="F:Spike.Text.JsTreeModifications.IfNotTrueFalseToIfFalseTrue">
            <summary>
            If the condition of an if-statement or conditional starts with a not-operator,
            get rid of the not-operator and swap the true/false branches.
            </summary>
        </member>
        <member name="F:Spike.Text.JsTreeModifications.MoveInExpressionsIntoForStatement">
            <summary>
            Whether it's okay to move an expression containing an in-operator into a for-statement.
            </summary>
        </member>
        <member name="F:Spike.Text.JsTreeModifications.InvertIfReturn">
            <summary>
            Whether it's okay to convert function...{...if(cond)return;s1;s2} to function...{...if(!cond){s1;s2}}
            </summary>
        </member>
        <member name="F:Spike.Text.JsTreeModifications.CombineNestedIfs">
            <summary>
            Whether it's okay to combine nested if-statments if(cond1)if(cond2){...} to if(cond1&amp;&amp;cond2){...}
            </summary>
        </member>
        <member name="F:Spike.Text.JsTreeModifications.CombineEquivalentIfReturns">
            <summary>
            Whether it's okay to combine equivalent if-statments that return the same expression.
            if(cond1)return expr;if(cond2)return expr; =&gt; if(cond1||cond2)return expr;
            </summary>
        </member>
        <member name="F:Spike.Text.JsTreeModifications.ChangeWhileToFor">
            <summary>
            Whether to convert certain while-statements to for-statements.
            while(1)... => for(;;)...
            var ...;while(1)... => for(var ...;;)
            var ...;while(cond)... => for(var ...;cond;)...
            </summary>
        </member>
        <member name="F:Spike.Text.JsTreeModifications.InvertIfContinue">
            <summary>
            Whether to invert iterator{if(cond)continue;st1;st2} to iterator{if(!cond){st1;st2}}
            </summary>
        </member>
        <member name="F:Spike.Text.JsTreeModifications.EvaluateLiteralJoins">
            <summary>
            Whether to convert [a,b,c].join(s) to "asbsc" if all items are constants.
            </summary>
        </member>
        <member name="F:Spike.Text.JsTreeModifications.RemoveUnusedVariables">
            <summary>
            Whether we should remove unused variable, or variables assigned a constant in their
            initializer and referenced only once.
            </summary>
        </member>
        <member name="F:Spike.Text.JsTreeModifications.UnfoldCommaExpressionStatements">
            <summary>
            Whether we should unfold comma-separated expressions statements into separate statements
            as a final minification step (if it doesn't create more bytes)
            </summary>
        </member>
        <member name="F:Spike.Text.JsTreeModifications.EvaluateLiteralLengths">
            <summary>
            Whether to convert [a,b,c].length to 3 (if all items are constants)
            and "123".length to 3 
            </summary>
        </member>
        <member name="T:Spike.Text.JsConstStatement">
            <summary>
            Old-style const-statement, pre-ES6, for those browsers that basically implemented
            a var that can't be assigned to outside the declaration. Have to set the 
            <see cref="P:Spike.Text.JsSettings.ConstStatementsMozilla"/> property to true to get these objects
            parsed, because we default to the ES6 behavior.
            </summary>
        </member>
        <member name="P:Spike.Text.JsDeclaration.ContainsInOperator">
            <summary>
            Returns true if any of the variable declarations contain initializers using the in-operator
            </summary>
        </member>
        <member name="P:Spike.Text.JsContext.OutputLine">
            <summary>
            Gets and sets the output start line after running an AST through an output visitor 
            </summary>
        </member>
        <member name="P:Spike.Text.JsContext.OutputColumn">
            <summary>
            Gets and sets the output start column after running an AST through an output visitor
            </summary>
        </member>
        <member name="M:Spike.Text.JsCrunchEnumerator.GenerateNameFromNumber(System.Int32)">
            <summary>
            get the algorithmically-generated minified variable name based on the given number
            zero is the first name, 1 is the next, etc. This method needs to be tuned to
            get better gzip results.
            </summary>
            <param name="index">integer position of the name to retrieve</param>
            <returns>minified variable name</returns>
        </member>
        <member name="T:Spike.Text.ReferenceComparer">
            <summary>
            this class is used to sort the crunchable local fields in a scope so that the fields
            most in need of crunching get crunched first, therefore having the smallest-length
            crunched variable name.
            Highest priority are the fields most-often referenced.
            Among fields with the same reference count, the longest fields get priority.
            Lastly, alphabetize.
            </summary>
        </member>
        <member name="M:Spike.Text.ReferenceComparer.Compare(Spike.Text.JsVariableField,Spike.Text.JsVariableField)">
            <summary>
            sorting method for fields that will be renamed in the minification process.
            The order of the fields determines which minified name it will receive --
            the earlier in the list, typically the smaller, more-common the minified name.
            Tune this method to get better gzip results.
            </summary>
            <param name="left"></param>
            <param name="right"></param>
            <returns></returns>
        </member>
        <member name="T:Spike.Text.JsCustomNode">
            <summary>
            This is a base-class for any custom AST nodes someone may want to implement. It allows 
            these nodes to be hooked into the IVisitor framework. If you wish to create custom AST nodes,
            derive from this class.
            </summary>
        </member>
        <member name="M:Spike.Text.JsEvaluateLiteralVisitor.ReplaceMemberBracketWithDot(Spike.Text.JsBinaryOperator,Spike.Text.JsConstantWrapper)">
            <summary>
            If the new literal is a string literal, then we need to check to see if our
            parent is a CallNode. If it is, and if the string literal can be an identifier,
            we'll replace it with a Member-Dot operation.
            </summary>
            <param name="newLiteral">newLiteral we intend to replace this binaryop node with</param>
            <returns>true if we replaced the parent callnode with a member-dot operation</returns>
            <param name="node"></param>
        </member>
        <member name="M:Spike.Text.JsEvaluateLiteralVisitor.ReplaceNodeWithLiteral(Spike.Text.JsAstNode,Spike.Text.JsConstantWrapper)">
            <summary>
            replace the node with a literal. If the node was wrapped in a grouping operator
            before (parentheses around it), then we can get rid of the parentheses too, since
            we are replacing the node with a single literal entity.
            </summary>
            <param name="node">node to replace</param>
            <param name="newLiteral">literal to replace the node with</param>
        </member>
        <member name="M:Spike.Text.JsEvaluateLiteralVisitor.EvalThisOperator(Spike.Text.JsBinaryOperator,Spike.Text.JsConstantWrapper,Spike.Text.JsConstantWrapper)">
            <summary>
            Both the operands of this operator are constants. See if we can evaluate them
            </summary>
            <param name="left">left-side operand</param>
            <param name="right">right-side operand</param>
            <param name="node"></param>
        </member>
        <member name="M:Spike.Text.JsEvaluateLiteralVisitor.RotateFromLeft(Spike.Text.JsBinaryOperator,Spike.Text.JsBinaryOperator,Spike.Text.JsConstantWrapper)">
            <summary>
            We have determined that our left-hand operand is another binary operator, and its
            right-hand operand is a constant that can be combined with our right-hand operand.
            Now we want to set the right-hand operand of that other operator to the newly-
            combined constant value, and then rotate it up -- replace our binary operator
            with this newly-modified binary operator, and then attempt to re-evaluate it.
            </summary>
            <param name="binaryOp">the binary operator that is our left-hand operand</param>
            <param name="newLiteral">the newly-combined literal</param>
            <param name="node"></param>
        </member>
        <member name="M:Spike.Text.JsEvaluateLiteralVisitor.RotateFromRight(Spike.Text.JsBinaryOperator,Spike.Text.JsBinaryOperator,Spike.Text.JsConstantWrapper)">
            <summary>
            We have determined that our right-hand operand is another binary operator, and its
            left-hand operand is a constant that can be combined with our left-hand operand.
            Now we want to set the left-hand operand of that other operator to the newly-
            combined constant value, and then rotate it up -- replace our binary operator
            with this newly-modified binary operator, and then attempt to re-evaluate it.
            </summary>
            <param name="binaryOp">the binary operator that is our right-hand operand</param>
            <param name="newLiteral">the newly-combined literal</param>
            <param name="node"></param>
        </member>
        <member name="M:Spike.Text.JsEvaluateLiteralVisitor.NoMultiplicativeOverOrUnderFlow(Spike.Text.JsConstantWrapper,Spike.Text.JsConstantWrapper,Spike.Text.JsConstantWrapper)">
            <summary>
            Return true is not an overflow or underflow, for multiplication operations
            </summary>
            <param name="left">left operand</param>
            <param name="right">right operand</param>
            <param name="result">result</param>
            <returns>true if result not overflow or underflow; false if it is</returns>
        </member>
        <member name="M:Spike.Text.JsEvaluateLiteralVisitor.NoOverflow(Spike.Text.JsConstantWrapper)">
            <summary>
            Return true if the result isn't an overflow condition
            </summary>
            <param name="result">result constant</param>
            <returns>true is not an overflow; false if it is</returns>
        </member>
        <member name="M:Spike.Text.JsEvaluateLiteralVisitor.EvalToTheLeft(Spike.Text.JsBinaryOperator,Spike.Text.JsConstantWrapper,Spike.Text.JsConstantWrapper,Spike.Text.JsBinaryOperator)">
            <summary>
            Evaluate: (OTHER [op] CONST) [op] CONST
            </summary>
            <param name="thisConstant">second constant</param>
            <param name="otherConstant">first constant</param>
            <param name="leftOperator">first operator</param>
            <param name="node"></param>
        </member>
        <member name="M:Spike.Text.JsEvaluateLiteralVisitor.EvalFarToTheLeft(Spike.Text.JsBinaryOperator,Spike.Text.JsConstantWrapper,Spike.Text.JsConstantWrapper,Spike.Text.JsBinaryOperator)">
            <summary>
            Evaluate: (CONST [op] OTHER) [op] CONST
            </summary>
            <param name="thisConstant">second constant</param>
            <param name="otherConstant">first constant</param>
            <param name="leftOperator">first operator</param>
            <param name="node"></param>
        </member>
        <member name="M:Spike.Text.JsEvaluateLiteralVisitor.EvalToTheRight(Spike.Text.JsBinaryOperator,Spike.Text.JsConstantWrapper,Spike.Text.JsConstantWrapper,Spike.Text.JsBinaryOperator)">
            <summary>
            Evaluate: CONST [op] (CONST [op] OTHER)
            </summary>
            <param name="thisConstant">first constant</param>
            <param name="otherConstant">second constant</param>
            <param name="rightOperator">second operator</param>
            <param name="node"></param>
        </member>
        <member name="M:Spike.Text.JsEvaluateLiteralVisitor.EvalFarToTheRight(Spike.Text.JsBinaryOperator,Spike.Text.JsConstantWrapper,Spike.Text.JsConstantWrapper,Spike.Text.JsBinaryOperator)">
            <summary>
            Eval the two constants: CONST [op] (OTHER [op] CONST)
            </summary>
            <param name="thisConstant">first constant</param>
            <param name="otherConstant">second constant</param>
            <param name="rightOperator">second operator</param>
            <param name="node"></param>
        </member>
        <member name="P:Spike.Text.JsForNode.Separator1Context">
            <summary>Context for the first semicolon, separating the initializer and the condition</summary>
        </member>
        <member name="P:Spike.Text.JsForNode.Separator2Context">
            <summary>Context for the second semicolon, separating the condition and the incrementor</summary>
        </member>
        <member name="M:Spike.Text.JsFunctionScope.DeclareScope">
            <summary>
            Set up this scopes lexically- and var-declared fields, plus formal parameters and the arguments object
            </summary>
        </member>
        <member name="M:Spike.Text.JsGlobalScope.DeclareScope">
            <summary>
            Set up this scopes lexically- and var-declared fields
            </summary>
        </member>
        <member name="T:Spike.Text.JsGroupingOperator">
            <summary>
            Implementation of parenthetical '(' expr ')' operators
            </summary>
        </member>
        <member name="T:Spike.Text.JScript">
            <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
        </member>
        <member name="P:Spike.Text.JScript.ResourceManager">
            <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
        </member>
        <member name="P:Spike.Text.JScript.Culture">
            <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
        </member>
        <member name="P:Spike.Text.JScript.AmbiguousCatchVar">
            <summary>
              Looks up a localized string similar to Ambiguous catch identifier. Cross-browser behavior difference. .
            </summary>
        </member>
        <member name="P:Spike.Text.JScript.AmbiguousNamedFunctionExpression">
            <summary>
              Looks up a localized string similar to Ambiguous reference to named function expression. Cross-browser behavior difference.
            </summary>
        </member>
        <member name="P:Spike.Text.JScript.ApplicationError">
            <summary>
              Looks up a localized string similar to Application failed. Please report this issue..
            </summary>
        </member>
        <member name="P:Spike.Text.JScript.ArgumentNotReferenced">
            <summary>
              Looks up a localized string similar to Argument defined but not referenced.
            </summary>
        </member>
        <member name="P:Spike.Text.JScript.ArrayLiteralTrailingComma">
            <summary>
              Looks up a localized string similar to Trailing comma in array literal; cross-browser difference.
            </summary>
        </member>
        <member name="P:Spike.Text.JScript.AssignmentToConstant">
            <summary>
              Looks up a localized string similar to Assignment to constant.
            </summary>
        </member>
        <member name="P:Spike.Text.JScript.BadBreak">
            <summary>
              Looks up a localized string similar to Can&apos;t have &apos;break&apos; outside of loop.
            </summary>
        </member>
        <member name="P:Spike.Text.JScript.BadContinue">
            <summary>
              Looks up a localized string similar to Can&apos;t have &apos;continue&apos; outside of loop.
            </summary>
        </member>
        <member name="P:Spike.Text.JScript.BadHexEscapeSequence">
            <summary>
              Looks up a localized string similar to Invalid hexadecimal escape sequence.
            </summary>
        </member>
        <member name="P:Spike.Text.JScript.BadLabel">
            <summary>
              Looks up a localized string similar to Label redefined.
            </summary>
        </member>
        <member name="P:Spike.Text.JScript.BadNumericLiteral">
            <summary>
              Looks up a localized string similar to Invalid numeric literal.
            </summary>
        </member>
        <member name="P:Spike.Text.JScript.BadReturn">
            <summary>
              Looks up a localized string similar to &apos;return&apos; statement outside of function.
            </summary>
        </member>
        <member name="P:Spike.Text.JScript.BadSwitch">
            <summary>
              Looks up a localized string similar to Missing &apos;case&apos; or &apos;default&apos; statement.
            </summary>
        </member>
        <member name="P:Spike.Text.JScript.CCInvalidElse">
            <summary>
              Looks up a localized string similar to Unmatched &apos;@else&apos;; no &apos;@if&apos; defined.
            </summary>
        </member>
        <member name="P:Spike.Text.JScript.CCInvalidElseIf">
            <summary>
              Looks up a localized string similar to Unmatched &apos;@elif&apos;; no &apos;@if&apos; defined.
            </summary>
        </member>
        <member name="P:Spike.Text.JScript.CCInvalidEnd">
            <summary>
              Looks up a localized string similar to Unmatched &apos;@end&apos;; no &apos;@if&apos; defined.
            </summary>
        </member>
        <member name="P:Spike.Text.JScript.CCOff">
            <summary>
              Looks up a localized string similar to Conditional compilation is turned off.
            </summary>
        </member>
        <member name="P:Spike.Text.JScript.ConditionalCompilationTooComplex">
            <summary>
              Looks up a localized string similar to Conditional compilation expression not supported. Comment ignored.
            </summary>
        </member>
        <member name="P:Spike.Text.JScript.DupDefault">
            <summary>
              Looks up a localized string similar to &apos;default&apos; can only appear once in a &apos;switch&apos; statement.
            </summary>
        </member>
        <member name="P:Spike.Text.JScript.DuplicateCatch">
            <summary>
              Looks up a localized string similar to Variable or function declaration redefines the catch error name.
            </summary>
        </member>
        <member name="P:Spike.Text.JScript.DuplicateConstantDeclaration">
            <summary>
              Looks up a localized string similar to Constant declaration already declared.
            </summary>
        </member>
        <member name="P:Spike.Text.JScript.DuplicateLexicalDeclaration">
            <summary>
              Looks up a localized string similar to Duplicate lexical declaration; cannot redefine let or const variables.
            </summary>
        </member>
        <member name="P:Spike.Text.JScript.DuplicateName">
            <summary>
              Looks up a localized string similar to Name is already defined.
            </summary>
        </member>
        <member name="P:Spike.Text.JScript.ErrorEndOfFile">
            <summary>
              Looks up a localized string similar to Expecting more source characters.
            </summary>
        </member>
        <member name="P:Spike.Text.JScript.ExpressionExpected">
            <summary>
              Looks up a localized string similar to Expected expression.
            </summary>
        </member>
        <member name="P:Spike.Text.JScript.FallbackEncodingFailed">
            <summary>
              Looks up a localized string similar to Fallback character encoding failed.
            </summary>
        </member>
        <member name="P:Spike.Text.JScript.FunctionExpressionExpected">
            <summary>
              Looks up a localized string similar to Function expression expected.
            </summary>
        </member>
        <member name="P:Spike.Text.JScript.FunctionNameMustBeIdentifier">
            <summary>
              Looks up a localized string similar to Function name should be a simple identifier; possible browser-specific implementation.
            </summary>
        </member>
        <member name="P:Spike.Text.JScript.FunctionNotReferenced">
            <summary>
              Looks up a localized string similar to Function defined but not referenced.
            </summary>
        </member>
        <member name="P:Spike.Text.JScript.IllegalAssignment">
            <summary>
              Looks up a localized string similar to Illegal assignment.
            </summary>
        </member>
        <member name="P:Spike.Text.JScript.IllegalChar">
            <summary>
              Looks up a localized string similar to Invalid character.
            </summary>
        </member>
        <member name="P:Spike.Text.JScript.InternalCompilerError">
            <summary>
              Looks up a localized string similar to ***INTERNAL COMPILER ERROR***.
            </summary>
        </member>
        <member name="P:Spike.Text.JScript.InvalidElse">
            <summary>
              Looks up a localized string similar to Unmatched &apos;else&apos;; no &apos;if&apos; defined.
            </summary>
        </member>
        <member name="P:Spike.Text.JScript.InvalidJSONOutput">
            <summary>
              Looks up a localized string similar to Invalid JSON JavaScript nodes encountered during output.
            </summary>
        </member>
        <member name="P:Spike.Text.JScript.JSParserException">
            <summary>
              Looks up a localized string similar to JSParser Exception.
            </summary>
        </member>
        <member name="P:Spike.Text.JScript.KeywordUsedAsIdentifier">
            <summary>
              Looks up a localized string similar to Reserved words and should not be used as an identifier; cross-browser differences.
            </summary>
        </member>
        <member name="P:Spike.Text.JScript.MisplacedFunctionDeclaration">
            <summary>
              Looks up a localized string similar to Function declaration should not be inside a statement. Cross-browser behavior difference.
            </summary>
        </member>
        <member name="P:Spike.Text.JScript.NoCatch">
            <summary>
              Looks up a localized string similar to Expected &apos;catch&apos;.
            </summary>
        </member>
        <member name="P:Spike.Text.JScript.NoCCEnd">
            <summary>
              Looks up a localized string similar to Expected &apos;@end&apos;.
            </summary>
        </member>
        <member name="P:Spike.Text.JScript.NoColon">
            <summary>
              Looks up a localized string similar to Expected &apos;:&apos;.
            </summary>
        </member>
        <member name="P:Spike.Text.JScript.NoComma">
            <summary>
              Looks up a localized string similar to Expected &apos;,&apos;.
            </summary>
        </member>
        <member name="P:Spike.Text.JScript.NoCommaOrTypeDefinitionError">
            <summary>
              Looks up a localized string similar to Expected &apos;,&apos;. Write &apos;identifier : Type&apos; rather than &apos;Type identifier&apos; to declare a typed parameter.
            </summary>
        </member>
        <member name="P:Spike.Text.JScript.NoCommentEnd">
            <summary>
              Looks up a localized string similar to Unterminated comment.
            </summary>
        </member>
        <member name="P:Spike.Text.JScript.NoEndDebugDirective">
            <summary>
              Looks up a localized string similar to Expected ///#ENDDEBUG directive.
            </summary>
        </member>
        <member name="P:Spike.Text.JScript.NoEndIfDirective">
            <summary>
              Looks up a localized string similar to Expected ///#ENDIF directive.
            </summary>
        </member>
        <member name="P:Spike.Text.JScript.NoEqual">
            <summary>
              Looks up a localized string similar to Expected &apos;=&apos;.
            </summary>
        </member>
        <member name="P:Spike.Text.JScript.NoIdentifier">
            <summary>
              Looks up a localized string similar to Expected identifier.
            </summary>
        </member>
        <member name="P:Spike.Text.JScript.NoLabel">
            <summary>
              Looks up a localized string similar to Label not found.
            </summary>
        </member>
        <member name="P:Spike.Text.JScript.NoLeftCurly">
            <summary>
              Looks up a localized string similar to Expected &apos;{&apos;.
            </summary>
        </member>
        <member name="P:Spike.Text.JScript.NoLeftParenthesis">
            <summary>
              Looks up a localized string similar to Expected &apos;(&apos;.
            </summary>
        </member>
        <member name="P:Spike.Text.JScript.NoMemberIdentifier">
            <summary>
              Looks up a localized string similar to Expected identifier or string.
            </summary>
        </member>
        <member name="P:Spike.Text.JScript.NoRightBracket">
            <summary>
              Looks up a localized string similar to Expected &apos;]&apos;.
            </summary>
        </member>
        <member name="P:Spike.Text.JScript.NoRightBracketOrComma">
            <summary>
              Looks up a localized string similar to Expected &apos;,&apos; or &apos;]&apos;.
            </summary>
        </member>
        <member name="P:Spike.Text.JScript.NoRightCurly">
            <summary>
              Looks up a localized string similar to Expected &apos;}&apos;.
            </summary>
        </member>
        <member name="P:Spike.Text.JScript.NoRightParenthesis">
            <summary>
              Looks up a localized string similar to Expected &apos;)&apos;.
            </summary>
        </member>
        <member name="P:Spike.Text.JScript.NoRightParenthesisOrComma">
            <summary>
              Looks up a localized string similar to Expected &apos;,&apos; or &apos;)&apos;.
            </summary>
        </member>
        <member name="P:Spike.Text.JScript.NoSemicolon">
            <summary>
              Looks up a localized string similar to Expected &apos;;&apos;.
            </summary>
        </member>
        <member name="P:Spike.Text.JScript.NoWhile">
            <summary>
              Looks up a localized string similar to Expected &apos;while&apos;.
            </summary>
        </member>
        <member name="P:Spike.Text.JScript.NumericMaximum">
            <summary>
              Looks up a localized string similar to Consider replacing maximum numeric literal with Number.MAX_VALUE.
            </summary>
        </member>
        <member name="P:Spike.Text.JScript.NumericMinimum">
            <summary>
              Looks up a localized string similar to Consider replacing minimum numeric literal with Number.MIN_VALUE.
            </summary>
        </member>
        <member name="P:Spike.Text.JScript.NumericOverflow">
            <summary>
              Looks up a localized string similar to Numeric literal evaluates to Number.POSITIVE_INFINITY or Number.NEGATIVE_INFINITY.
            </summary>
        </member>
        <member name="P:Spike.Text.JScript.ObjectConstructorTakesNoArguments">
            <summary>
              Looks up a localized string similar to Object constructor should take no arguments.
            </summary>
        </member>
        <member name="P:Spike.Text.JScript.ObjectLiteralKeyword">
            <summary>
              Looks up a localized string similar to Reserved word used as object literal property name; cross-browser issue..
            </summary>
        </member>
        <member name="P:Spike.Text.JScript.OctalLiteralsDeprecated">
            <summary>
              Looks up a localized string similar to Octal literals are deprecated. Possible cross-browser behavior difference.
            </summary>
        </member>
        <member name="P:Spike.Text.JScript.ParameterListNotLast">
            <summary>
              Looks up a localized string similar to A variable argument list must be the last argument.
            </summary>
        </member>
        <member name="P:Spike.Text.JScript.RegExpSyntax">
            <summary>
              Looks up a localized string similar to Syntax error in regular expression.
            </summary>
        </member>
        <member name="P:Spike.Text.JScript.ResourceReferenceMustBeConstant">
            <summary>
              Looks up a localized string similar to Resource reference must be single constant argument.
            </summary>
        </member>
        <member name="P:Spike.Text.JScript.SemicolonInsertion">
            <summary>
              Looks up a localized string similar to Semicolon insertion rules applied.
            </summary>
        </member>
        <member name="P:Spike.Text.JScript.Severity0">
            <summary>
              Looks up a localized string similar to run-time.
            </summary>
        </member>
        <member name="P:Spike.Text.JScript.Severity1">
            <summary>
              Looks up a localized string similar to coding.
            </summary>
        </member>
        <member name="P:Spike.Text.JScript.Severity2">
            <summary>
              Looks up a localized string similar to code.
            </summary>
        </member>
        <member name="P:Spike.Text.JScript.Severity3">
            <summary>
              Looks up a localized string similar to performance.
            </summary>
        </member>
        <member name="P:Spike.Text.JScript.Severity4">
            <summary>
              Looks up a localized string similar to improper technique.
            </summary>
        </member>
        <member name="P:Spike.Text.JScript.SeverityUnknown">
            <summary>
              Looks up a localized string similar to unknown ({0}).
            </summary>
        </member>
        <member name="P:Spike.Text.JScript.StatementBlockExpected">
            <summary>
              Looks up a localized string similar to Always use full statement blocks.
            </summary>
        </member>
        <member name="P:Spike.Text.JScript.StrictComparisonIsAlwaysTrueOrFalse">
            <summary>
              Looks up a localized string similar to Strict operator always evaluates to true or false.
            </summary>
        </member>
        <member name="P:Spike.Text.JScript.StrictModeArgumentName">
            <summary>
              Looks up a localized string similar to Strict-mode does not allow certain argument names.
            </summary>
        </member>
        <member name="P:Spike.Text.JScript.StrictModeDuplicateArgument">
            <summary>
              Looks up a localized string similar to Strict-mode does not allow duplicate argument names.
            </summary>
        </member>
        <member name="P:Spike.Text.JScript.StrictModeDuplicateProperty">
            <summary>
              Looks up a localized string similar to Strict-mode does not allow duplicate property names.
            </summary>
        </member>
        <member name="P:Spike.Text.JScript.StrictModeFunctionName">
            <summary>
              Looks up a localized string similar to Strict-mode does not allow certain function names.
            </summary>
        </member>
        <member name="P:Spike.Text.JScript.StrictModeInvalidAssign">
            <summary>
              Looks up a localized string similar to Strict-mode does not allow assignment to certain variables.
            </summary>
        </member>
        <member name="P:Spike.Text.JScript.StrictModeInvalidDelete">
            <summary>
              Looks up a localized string similar to Strict-mode does not allow certain delete operands.
            </summary>
        </member>
        <member name="P:Spike.Text.JScript.StrictModeInvalidPreOrPost">
            <summary>
              Looks up a localized string similar to Strict-mode does not allow ++ or -- on certain objects.
            </summary>
        </member>
        <member name="P:Spike.Text.JScript.StrictModeNoWith">
            <summary>
              Looks up a localized string similar to Strict-mode does not allow with-statements.
            </summary>
        </member>
        <member name="P:Spike.Text.JScript.StrictModeUndefinedVariable">
            <summary>
              Looks up a localized string similar to Strict-mode does not allow assignment to undefined variables.
            </summary>
        </member>
        <member name="P:Spike.Text.JScript.StrictModeVariableName">
            <summary>
              Looks up a localized string similar to Strict-mode does not allow certain variable names.
            </summary>
        </member>
        <member name="P:Spike.Text.JScript.StringNotInlineSafe">
            <summary>
              Looks up a localized string similar to String literal is not safe for inline.
            </summary>
        </member>
        <member name="P:Spike.Text.JScript.SuspectAssignment">
            <summary>
              Looks up a localized string similar to Suspect assignment operator.
            </summary>
        </member>
        <member name="P:Spike.Text.JScript.SuspectEquality">
            <summary>
              Looks up a localized string similar to Suspect equality comparison.
            </summary>
        </member>
        <member name="P:Spike.Text.JScript.SuspectSemicolon">
            <summary>
              Looks up a localized string similar to Suspect semicolon.
            </summary>
        </member>
        <member name="P:Spike.Text.JScript.SyntaxError">
            <summary>
              Looks up a localized string similar to Syntax error.
            </summary>
        </member>
        <member name="P:Spike.Text.JScript.TooManyTokensSkipped">
            <summary>
              Looks up a localized string similar to Too many errors. The file might not be a JavaScript file.
            </summary>
        </member>
        <member name="P:Spike.Text.JScript.UncaughtException">
            <summary>
              Looks up a localized string similar to Exception thrown and not caught.
            </summary>
        </member>
        <member name="P:Spike.Text.JScript.UnclosedFunction">
            <summary>
              Looks up a localized string similar to End of file encountered before function is properly closed.
            </summary>
        </member>
        <member name="P:Spike.Text.JScript.UndeclaredFunction">
            <summary>
              Looks up a localized string similar to Function has not been defined.
            </summary>
        </member>
        <member name="P:Spike.Text.JScript.UndeclaredVariable">
            <summary>
              Looks up a localized string similar to Variable has not been declared.
            </summary>
        </member>
        <member name="P:Spike.Text.JScript.UnexpectedSemicolon">
            <summary>
              Looks up a localized string similar to Unexpected &apos;;&apos;.
            </summary>
        </member>
        <member name="P:Spike.Text.JScript.UnterminatedAspNetBlock">
            <summary>
              Looks up a localized string similar to Unterminated ASP.NET block.
            </summary>
        </member>
        <member name="P:Spike.Text.JScript.UnterminatedString">
            <summary>
              Looks up a localized string similar to Unterminated string constant.
            </summary>
        </member>
        <member name="P:Spike.Text.JScript.VariableDefinedNotReferenced">
            <summary>
              Looks up a localized string similar to Variable defined but not referenced.
            </summary>
        </member>
        <member name="P:Spike.Text.JScript.WithNotRecommended">
            <summary>
              Looks up a localized string similar to &apos;with&apos; statement not recommended.
            </summary>
        </member>
        <member name="M:Spike.Text.JsException.GetSeverity(Spike.Text.JsError)">
            <summary>
            Return the default severity for a given JSError value
            guide: 0 == there will be a run-time error if this code executes
                   1 == the programmer probably did not intend to do this
                   2 == this can lead to cross-browser of future problems.
                   3 == this can lead to performance problems
                   4 == this is just not right
            </summary>
            <param name="errorCode">error code</param>
            <returns>severity</returns>
        </member>
        <member name="P:Spike.Text.JScriptExceptionEventArgs.Error">
            <summary>
            The JavaScript error information being fired
            </summary>
        </member>
        <member name="P:Spike.Text.JScriptExceptionEventArgs.Exception">
            <summary>
            JScriptException object. Don't use this; might go away in future versions. Use Error property instead.
            </summary>
        </member>
        <member name="T:Spike.Text.JsonOutputVisitor">
            <summary>
            output JSON-compatible code
            </summary>
        </member>
        <member name="T:Spike.Text.JsParser">
            <summary>
            Class used to parse JavaScript source code into an abstract syntax tree.
            </summary>
        </member>
        <member name="M:Spike.Text.JsParser.#ctor(System.String)">
            <summary>
            Creates an instance of the JSParser class that can be used to parse the given source code.
            </summary>
            <param name="source">Source code to parse.</param>
        </member>
        <member name="M:Spike.Text.JsParser.PreprocessOnly(Spike.Text.JsSettings)">
            <summary>
            Obsolete - set the PreprocessOnly property on the CodeSettings class to true and call Parse method.
            Preprocess the input only - don't generate an AST tree or do any other code analysis, just return the processed code as a string. 
            </summary>
            <param name="settings">settings to use in the scanner</param>
            <returns>the source as processed by the preprocessor</returns>
        </member>
        <member name="M:Spike.Text.JsParser.PreprocessOnly(Spike.Text.JsSettings,System.IO.TextWriter)">
            <summary>
            Preprocess the input only - don't generate a syntax tree or do any other code analysis. Just write the processed
            code to the provided text stream.
            </summary>
            <param name="settings">settings to use in the scanner</param>
            <param name="outputStream">output stream to which to write the processed source</param>
        </member>
        <member name="M:Spike.Text.JsParser.Parse(Spike.Text.JsSettings)">
            <summary>
            Parse the source code using the given settings, getting back an abstract syntax tree Block node as the root
            representing the list of statements in the source code.
            </summary>
            <param name="settings">code settings to use to process the source code</param>
            <returns>root Block node representing the top-level statements</returns>
        </member>
        <member name="M:Spike.Text.JsParser.ParseExpression(Spike.Text.JsSettings)">
            <summary>
            Parse an expression from the source code and return a block node containing just that expression.
            The block node is needed because we might perform optimization on the expression that creates
            a new expression, and we need a parent to contain it.
            </summary>
            <param name="settings">settings to use</param>
            <returns>a block node containing the parsed expression as its only child</returns>
        </member>
        <member name="M:Spike.Text.JsParser.ConvertNumericLiteralToDouble(System.String,System.Boolean,System.Double@)">
            <summary>
            Convert the given numeric string to a double value
            </summary>
            <param name="str">string representation of a number</param>
            <param name="isInteger">we should know alreasdy if it's an integer or not</param>
            <param name="doubleValue">output value</param>
            <returns>true if there were no problems; false if there were</returns>
        </member>
        <member name="P:Spike.Text.JsParser.EchoWriter">
            <summary>
            Gets or sets a TextWriter instance to which raw preprocessed input will be
            written when Parse is called.
            </summary>
        </member>
        <member name="P:Spike.Text.JsParser.FileContext">
            <summary>
            Gets or sets the file context for the given source code. This context will be used when generating any error messages.
            </summary>
        </member>
        <member name="M:Spike.Text.JsScanner.ScanNextToken(System.Boolean)">
            <summary>
            main method for the scanner; scans the next token from the input stream.
            </summary>
            <param name="scanForRegularExpressionLiterals">whether to try scanning a regexp when encountering a /</param>
            <returns>next token from the input</returns>
        </member>
        <member name="M:Spike.Text.JsScanner.SetPreprocessorDefines(System.Collections.Generic.IDictionary{System.String,System.String})">
            <summary>
            Set the list of preprocessor defined names and values
            </summary>
            <param name="defines">dictionary of name/value pairs</param>
        </member>
        <member name="M:Spike.Text.JsScanner.ScanAspNetBlock">
            <summary>
            Scans for the end of an Asp.Net block.
             On exit this.currentPos will be at the next char to scan after the asp.net block.
            </summary>
        </member>
        <member name="M:Spike.Text.JsScanner.StripAssignment(Spike.Text.JsToken)">
            <summary>
            Given an assignment operator (=, +=, -=, *=, /=, %=, &amp;=, |=, ^=, &lt;&lt;=, &gt;&gt;=, &gt;&gt;&gt;=), strip
            the assignment to return (+, -, *, /, %, &amp;, |, ^, &lt;&lt;, &gt;&gt;, &gt;&gt;&gt;). For all other operators,
            include the normal assign (=), just return the same operator token.
            This only works if the two groups of tokens are actually defined in those orders!!! 
            </summary>
            <param name="assignOp"></param>
            <returns></returns>
        </member>
        <member name="T:Spike.Text.JsScanner.PPOperators">
            <summary>
            Class for associating an operator with a function for ///#IF directives
            in a lazy-loaded manner. Doesn't create and initialize the dictionary
            until the scanner actually encounters syntax that needs it.
            The keys are sorted by length, decreasing (longest operators first).
            </summary>
        </member>
        <member name="M:Spike.Text.JsScanner.PPOperators.ConvertToNumeric(System.String,System.String,System.Double@,System.Double@)">
            <summary>
            Try converting the two strings to doubles
            </summary>
            <param name="left">first string</param>
            <param name="right">second string</param>
            <param name="leftNumeric">first string converted to double</param>
            <param name="rightNumeric">second string converted to double</param>
            <returns>true if the conversion was successful; false otherwise</returns>
        </member>
        <member name="T:Spike.Text.JsScanner.PPOperators.LengthComparer">
            <summary>
            Sorting class for the sorted dictionary base to make sure the operators are
            enumerated with the LONGEST strings first, before the shorter strings.
            </summary>
        </member>
        <member name="T:Spike.Text.JsFieldType">
            <summary>
            Field type enumeration
            </summary>
        </member>
        <member name="M:Spike.Text.JsVariableField.IsSameField(Spike.Text.JsVariableField)">
            <summary>
            returns true if the fields point to the same ultimate reference object.
            Needs to walk up the outer-reference chain for each field in order to
            find the ultimate reference
            </summary>
            <param name="otherField"></param>
            <returns></returns>
        </member>
        <member name="P:Spike.Text.JsVariableField.OnlyReference">
            <summary>
            returns the only reference IF there is only ONE reference
            in the collection; otherwise returns false.
            </summary>
        </member>
        <member name="P:Spike.Text.JsVariableField.OnlyDeclaration">
            <summary>
            returns the only declaration IF there is only ONE name declaration
            in the collection; otherwise returns false.
            </summary>
        </member>
        <member name="P:Spike.Text.JsVariableField.IsReferencedInnerScope">
            <summary>
            Gets a value that indicates whether this field is ever referenced in a scope
            other than the one in which it is defined
            </summary>
        </member>
        <member name="T:Spike.Text.JsMatchPropertiesVisitor">
            <summary>
            This visitor has a Match method that takes a node and an string representing an identifier list separated by periods: IDENT(.IDENT)*
            </summary>
        </member>
        <member name="M:Spike.Text.JsOutputVisitor.OutputFunctionArgsAndBody(Spike.Text.JsFunctionObject,System.Boolean)">
            <summary>
            Output everything for a function except the initial keyword
            </summary>
            <param name="node"></param>
            <param name="removeUnused"></param>
        </member>
        <member name="M:Spike.Text.JsOutputVisitor.OutputBlock(Spike.Text.JsBlock)">
            <summary>
            outputs a semicolon for an empty block, just the statement for a single-statement block,
            and recurses to the Block visitor for mutiple-statement blocks
            </summary>
            <param name="block">block to output</param>
        </member>
        <member name="M:Spike.Text.JsOutputVisitor.QuoteFactor(System.String)">
            <summary>
            Counts the number of double-quotes and single-quotes in a string
            and returns a numeric indicator for which one should be used as
            the string delimiter.
            </summary>
            <param name="text">string to test</param>
            <returns>less than zero use single-quotes, zero or more, use double-quotes</returns>
        </member>
        <member name="T:Spike.Text.JsResolutionVisitor">
            <summary>
            Traverse the tree to build up scope lexically-declared names, var-declared names,
            and lookups, then resolve everything.
            </summary>
        </member>
        <member name="F:Spike.Text.JsResolutionVisitor.m_orderIndex">
            <summary>index to use for ordering the statements in this scope</summary>
        </member>
        <member name="F:Spike.Text.JsResolutionVisitor.m_isUnreachable">
            <summary>flag indicating whether we've encountered some unreachable code</summary>
        </member>
        <member name="F:Spike.Text.JsResolutionVisitor.m_withDepth">
            <summary>depth level of with-statements, needed so we can treat decls within with-scopes specially</summary>
        </member>
        <member name="F:Spike.Text.JsResolutionVisitor.m_lexicalStack">
            <summary>stack to maintain the current lexical scope as we traverse the tree</summary>
        </member>
        <member name="F:Spike.Text.JsResolutionVisitor.m_variableStack">
            <summary>stack to maintain the current variable scope as we traverse the tree</summary>
        </member>
        <member name="F:Spike.Text.JsResolutionVisitor.m_settings">
            <summary>code setings</summary>
        </member>
        <member name="P:Spike.Text.JsResolutionVisitor.CurrentLexicalScope">
            <summary>Current lexical scope</summary>
        </member>
        <member name="P:Spike.Text.JsResolutionVisitor.CurrentVariableScope">
            <summary>current variable scope</summary>
        </member>
        <member name="P:Spike.Text.JsResolutionVisitor.NextOrderIndex">
            <summary>retrieve the next order index</summary>
        </member>
        <member name="M:Spike.Text.JsScriptSharpSourceMap.NewLineInsertedInOutput">
            <summary>
            A new line has been inserted into the output code, so adjust the offsets accordingly
            for the next run.
            </summary>
        </member>
        <member name="M:Spike.Text.JsScriptSharpSourceMap.EndOutputRun(System.Int32,System.Int32)">
            <summary>
            Signal the end of an output run by sending the NEXT position in the output
            </summary>
            <param name="lineNumber">0-based line number</param>
            <param name="columnPosition">0-based column position</param>
        </member>
        <member name="P:Spike.Text.JsScriptSharpSourceMap.SourceRoot">
            <summary>
            Gets or sets an optional source root URI that will be added to the map object as the sourceRoot property if set
            </summary>
        </member>
        <member name="P:Spike.Text.JsScriptSharpSourceMap.SafeHeader">
            <summary>
            Gets or sets a flag indicating whether or not to add a "safe" header to the map output file
            (not used by this implementation)
            </summary>
        </member>
        <member name="M:Spike.Text.JsSourceMapFactory.Create(System.IO.TextWriter,System.String)">
            <summary>
            Create an instance of a source map writer of the given name and from the given base stream.
            </summary>
            <param name="writer">base stream</param>
            <param name="implementationName">implementation name to create</param>
            <returns>instance of a source map writer</returns>
        </member>
        <member name="F:Spike.Text.JsStatementStartVisitor.m_isSafe">
            <summary>
            This is the flag that we are going to return to indicate whether or not
            the statement start is safe (true) or requires parens (false)
            </summary>
        </member>
        <member name="T:Spike.Text.JsV3SourceMap">
            <summary>
            Standard JSON source map format, version 3
            </summary>
        </member>
        <member name="F:Spike.Text.JsV3SourceMap.m_hasProperty">
            <summary>whether we have output a property yet</summary>
        </member>
        <member name="M:Spike.Text.JsV3SourceMap.StartPackage(System.String,System.String)">
            <summary>
            Called when we start a new minified output file
            </summary>
            <param name="sourcePath">output file path</param>
            <param name="mapPath"></param>
        </member>
        <member name="M:Spike.Text.JsV3SourceMap.EndPackage">
            <summary>
            Called when we end a minified output file. write all the accumulated 
            data to the stream.
            </summary>
        </member>
        <member name="M:Spike.Text.JsV3SourceMap.NewLineInsertedInOutput">
            <summary>
            A new line has been inserted into the output code, so adjust the offsets accordingly
            for the next run.
            </summary>
        </member>
        <member name="M:Spike.Text.JsV3SourceMap.EndOutputRun(System.Int32,System.Int32)">
            <summary>
            Signal the end of an output run by sending the NEXT position in the output
            </summary>
            <param name="lineNumber">0-based line number</param>
            <param name="columnPosition">0-based column position</param>
        </member>
        <member name="P:Spike.Text.JsV3SourceMap.SourceRoot">
            <summary>
            Gets or sets an optional source root URI that will be added to the map object as the sourceRoot property if set
            </summary>
        </member>
        <member name="P:Spike.Text.JsV3SourceMap.SafeHeader">
            <summary>
            Gets or sets a flag indicating whether or not to prepend the map file with an XSSI (cross-site script injection) protection string
            </summary>
        </member>
        <member name="T:Spike.Text.JsVar">
            <summary>
            Summary description for variablestatement.
            </summary>
        </member>
        <member name="M:Spike.Text.JsWithScope.DeclareScope">
            <summary>
            Set up this scopes lexically-declared fields
            </summary>
        </member>
        <member name="T:Spike.Text.JsEncoderFallback">
            <summary>
            JsEncoderFallback encodes invalid encoder characters as Unicode escapes:
                  \uXXXX
            up to six characters per escape. If the UNICODE character is in the upper
            range, we need to encode it as a surrogate pair:
                  \uUUUU\uLLLL
            
            To use this class, create an instance of it and set it to the EncoderFallback
            property of your Encoding object. You may have to clone the Encoding object
            in order to get write access to the EncoderFallback property.
            <example>
                var encoding = (Encoding)Encoding.ASCII.Clone();
                encoding.EncoderFallback = new JSEncoderFallback();
                var bytes = encoding.GetBytes(crunchedCode);
                Console.WriteLine(encoding.GetString(bytes));
            </example>
            </summary>
        </member>
        <member name="M:Spike.Text.JsEncoderFallback.#ctor">
            <summary>
            Constructs a new instance of <see cref="T:Spike.Text.JsEncoderFallback"/>
            </summary>
        </member>
        <member name="M:Spike.Text.JsEncoderFallback.CreateFallbackBuffer">
            <summary>
            return a fallback buffer for this encoding fallback
            </summary>
            <returns></returns>
        </member>
        <member name="P:Spike.Text.JsEncoderFallback.MaxCharCount">
            <summary>
            the maximum number of characters we'll expand a single character into
            </summary>
        </member>
        <member name="T:Spike.Text.JSEncoderFallbackBuffer">
            <summary>
            fallback buffer for encoding unknown characters into JS Unicode escapes
            </summary>
        </member>
        <member name="M:Spike.Text.JSEncoderFallbackBuffer.GetEncoding(System.Int32)">
            <summary>
            Get the single-character encoding string
            </summary>
            <param name="charValue">character to encode</param>
            <returns>encoded string</returns>
        </member>
        <member name="M:Spike.Text.JSEncoderFallbackBuffer.Fallback(System.Char,System.Int32)">
            <summary>
            Prepare the unknown character for encoding
            </summary>
            <param name="charUnknown">character to process</param>
            <param name="index">position in input string</param>
            <returns>true if characters to process placed in buffer</returns>
        </member>
        <member name="M:Spike.Text.JSEncoderFallbackBuffer.Fallback(System.Char,System.Char,System.Int32)">
            <summary>
            Prepare the unknwon surrogate pair for encoding
            </summary>
            <param name="charUnknownHigh">high surrogate pair character</param>
            <param name="charUnknownLow">low surrogate pair character</param>
            <param name="index">index of character in the stream</param>
            <returns></returns>
        </member>
        <member name="M:Spike.Text.JSEncoderFallbackBuffer.GetNextChar">
            <summary>
            return the next character
            </summary>
            <returns>(char)0 if no character</returns>
        </member>
        <member name="M:Spike.Text.JSEncoderFallbackBuffer.MovePrevious">
            <summary>
            back the character position up one character
            </summary>
            <returns>false if already at front; true otherwise</returns>
        </member>
        <member name="M:Spike.Text.JSEncoderFallbackBuffer.Reset">
            <summary>
            reset the fallback buffer to initial state
            </summary>
        </member>
        <member name="M:Spike.Text.JSEncoderFallbackBuffer.ToString">
            <summary>
            Return string representation of this object
            </summary>
            <returns></returns>
        </member>
        <member name="P:Spike.Text.JSEncoderFallbackBuffer.Remaining">
            <summary>
            Number of characters remaining in the buffer
            </summary>
        </member>
        <member name="T:Spike.Text.Minifier">
            <summary>
            Minifier class for quick minification of JavaScript or Stylesheet code without needing to
            access or modify any abstract syntax tree nodes. Just put in source code and get our minified
            code as strings.
            </summary>
        </member>
        <member name="M:Spike.Text.Minifier.MinifyJavaScript(System.String)">
            <summary>
            MinifyJavaScript JS string passed to it using default code minification settings.
            The ErrorList property will be set with any errors found during the minification process.
            </summary>
            <param name="source">source Javascript</param>
            <returns>minified Javascript</returns>
        </member>
        <member name="M:Spike.Text.Minifier.MinifyJavaScript(System.String,Spike.Text.JsSettings)">
            <summary>
            Crunched JS string passed to it, returning crunched string.
            The ErrorList property will be set with any errors found during the minification process.
            </summary>
            <param name="source">source Javascript</param>
            <param name="codeSettings">code minification settings</param>
            <returns>minified Javascript</returns>
        </member>
        <member name="M:Spike.Text.Minifier.MinifyStyleSheet(System.String)">
            <summary>
            MinifyJavaScript CSS string passed to it using default code minification settings.
            The ErrorList property will be set with any errors found during the minification process.
            </summary>
            <param name="source">source Javascript</param>
            <returns>minified Javascript</returns>
        </member>
        <member name="M:Spike.Text.Minifier.MinifyStyleSheet(System.String,Spike.Text.CssSettings)">
            <summary>
            Minifies the CSS stylesheet passes to it using the given settings, returning the minified results
            The ErrorList property will be set with any errors found during the minification process.
            </summary>
            <param name="source">CSS Source</param>
            <param name="settings">CSS minification settings</param>
            <returns>Minified StyleSheet</returns>
        </member>
        <member name="M:Spike.Text.Minifier.MinifyStyleSheet(System.String,Spike.Text.CssSettings,Spike.Text.JsSettings)">
            <summary>
            Minifies the CSS stylesheet passes to it using the given settings, returning the minified results
            The ErrorList property will be set with any errors found during the minification process.
            </summary>
            <param name="source">CSS Source</param>
            <param name="settings">CSS minification settings</param>
            <param name="scriptSettings">JS minification settings to use for expression-minification</param>
            <returns>Minified StyleSheet</returns>
        </member>
        <member name="P:Spike.Text.Minifier.WarningLevel">
            <summary>
            Warning level threshold for reporting errors.
            Default value is zero: syntax/run-time errors.
            </summary>
        </member>
        <member name="P:Spike.Text.Minifier.FileName">
            <summary>
            File name to use in error reporting.
            Default value is null: use Minify... method name.
            </summary>
        </member>
        <member name="P:Spike.Text.Minifier.ErrorList">
            <summary>
            Collection of ContextError objects found during minification process
            </summary>
        </member>
        <member name="P:Spike.Text.Minifier.Errors">
            <summary>
            Collection of any error strings found during the crunch process.
            </summary>
        </member>
        <member name="T:Spike.Text.MinifierResourceStrings">
            <summary>
            Represents a resource strings for the minifier.
            </summary>
        </member>
        <member name="M:Spike.Text.MinifierResourceStrings.#ctor(System.Collections.IDictionaryEnumerator)">
            <summary>
            Constructs a new instance of <see cref="T:Spike.Text.MinifierResourceStrings"/>.
            </summary>
            <param name="enumerator">The dictionary to enumerate for values.</param>
        </member>
        <member name="P:Spike.Text.MinifierResourceStrings.Name">
            <summary>
            The name of the collection.
            </summary>
        </member>
        <member name="P:Spike.Text.MinifierResourceStrings.NameValuePairs">
            <summary>
            Name value pairs of the resource strings.
            </summary>
        </member>
        <member name="P:Spike.Text.MinifierResourceStrings.Item(System.String)">
            <summary>
            Gets the value of a resource string.
            </summary>
            <param name="name">The name of the resource string.</param>
            <returns>The value.</returns>
        </member>
        <member name="P:Spike.Text.MinifierResourceStrings.Count">
            <summary>
            Gets the count of key value pairs in this collection.
            </summary>
        </member>
        <member name="M:Spike.Text.MinifierParser.Parse(System.String)">
            <summary>
            Takes a full command-line string and parses the switches into the appropriate settings objects
            </summary>
            <param name="commandLine"></param>
        </member>
        <member name="M:Spike.Text.MinifierParser.Parse(System.String[])">
            <summary>
            Takes an array of arguments and parses the switches into the appropriate settings objects
            </summary>
            <param name="args"></param>
        </member>
        <member name="P:Spike.Text.MinifierParser.JSSettings">
            <summary>
            Gets the parsed JavaScript code settings object
            </summary>
        </member>
        <member name="P:Spike.Text.MinifierParser.CssSettings">
            <summary>
            Gets the parsed CSS settings object
            </summary>
        </member>
        <member name="P:Spike.Text.MinifierParser.AnalyzeMode">
            <summary>
            Gets a boolean value indicating whether or not Analyze mode is specified (default is false)
            </summary>
        </member>
        <member name="P:Spike.Text.MinifierParser.ReportFormat">
            <summary>
            Gets a string value indication the report format specified for analyze more (default is null)
            </summary>
        </member>
        <member name="P:Spike.Text.MinifierParser.ReportPath">
            <summary>
            Gets the path for the analyze scope report file (default is null, output to console)
            </summary>
        </member>
        <member name="P:Spike.Text.MinifierParser.PrettyPrint">
            <summary>
            Gets a boolean value indicating whether or not Pretty-Print mode is specified (default is false)
            </summary>
        </member>
        <member name="P:Spike.Text.MinifierParser.WarningLevel">
            <summary>
            Gets or sets an integer value indicating the warning severity threshold for reporting. Default is zero (syntax errors only).
            </summary>
        </member>
        <member name="P:Spike.Text.MinifierParser.EncodingOutputName">
            <summary>
            Gets the string output encoding name. Default is null, indicating the default output encoding should be used.
            </summary>
        </member>
        <member name="P:Spike.Text.MinifierParser.EncodingInputName">
            <summary>
            Gets the string input encoding name. Default is null, indicating the default output encoding should be used.
            </summary>
        </member>
        <member name="T:Spike.Network.Http.RayHttpEncoder">
            <summary>
            Represents an encoder for RAY HTTP requests.
            </summary>
        </member>
        <member name="F:Spike.Network.Http.RayHttpEncoder.Current">
            <summary>
            Gets the packet processor for the current thread.
            </summary>
        </member>
        <member name="M:Spike.Network.Http.RayHttpEncoder.Process(Spike.Channel,Spike.Network.ProcessingContext)">
            <summary>
            Processes the packet within the context. Returns true whether the packet was processed or throttled.
            </summary>
            <param name="channel">The through which the packet is coming/going out.</param>
            <param name="context">The packet context for this operation.</param>
            <returns>True whether the packet was processed or throttled, false otherwise.</returns>
        </member>
        <member name="T:Spike.Network.Http.WebSocketDraft76Encoder">
            <summary>
            Represents a decoder for WebSocket packets.
            </summary>
        </member>
        <member name="F:Spike.Network.Http.WebSocketDraft76Encoder.Current">
            <summary>
            Gets the packet processor for the current thread.
            </summary>
        </member>
        <member name="M:Spike.Network.Http.WebSocketDraft76Encoder.Process(Spike.Channel,Spike.Network.ProcessingContext)">
            <summary>
            Processes the packet within the context. Returns true whether the packet was processed or throttled.
            </summary>
            <param name="channel">The through which the packet is coming/going out.</param>
            <param name="context">The packet context for this operation.</param>
            <returns>True whether the packet was processed or throttled, false otherwise.</returns>
        </member>
        <member name="T:Spike.Network.Http.WebSocketDraft76Decoder">
            <summary>
            Represents a decoder for WebSocket packets.
            </summary>
        </member>
        <member name="F:Spike.Network.Http.WebSocketDraft76Decoder.Current">
            <summary>
            Gets the packet processor for the current thread.
            </summary>
        </member>
        <member name="M:Spike.Network.Http.WebSocketDraft76Decoder.Process(Spike.Channel,Spike.Network.ProcessingContext)">
            <summary>
            Processes the packet within the context. Returns true whether the packet was processed or throttled.
            </summary>
            <param name="channel">The through which the packet is coming/going out.</param>
            <param name="context">The packet context for this operation.</param>
            <returns>True whether the packet was processed or throttled, false otherwise.</returns>
        </member>
        <member name="T:Spike.Network.Http.WebSocketDraft76Upgrade">
            <summary>
            Websockets Draft76 implementation.
            </summary>
        </member>
        <member name="T:Spike.Network.Http.IWebSocketProtocol">
            <summary>
            The contract that is defined for handling web socket protocol.
            </summary>
        </member>
        <member name="M:Spike.Network.Http.IWebSocketProtocol.Upgrade(Spike.Network.ProcessingContext,Spike.Network.Http.HttpContext)">
            <summary>
            Upgrades the connection to the particular protocol. Handles the handshake.
            </summary>
            <param name="context"><see cref="T:Spike.Network.ProcessingContext"/> for the current connection.</param>
            <param name="httpContext"><see cref="T:Spike.Network.Http.HttpContext"/> for the current connection.</param>
        </member>
        <member name="M:Spike.Network.Http.WebSocketDraft76Upgrade.Upgrade(Spike.Network.ProcessingContext,Spike.Network.Http.HttpContext)">
            <summary>
            Upgrades the connection to the particular protocol. Handles the handshake.
            </summary>
            <param name="context"><see cref="T:Spike.Network.ProcessingContext"/> for the current connection.</param>
            <param name="httpContext"><see cref="T:Spike.Network.Http.HttpContext"/> for the current connection.</param>
        </member>
        <member name="T:Spike.Network.Http.WebSocketHybi13Encoder">
            <summary>
            Represents a decoder for WebSocket packets.
            </summary>
        </member>
        <member name="F:Spike.Network.Http.WebSocketHybi13Encoder.Current">
            <summary>
            Gets the packet processor for the current thread.
            </summary>
        </member>
        <member name="M:Spike.Network.Http.WebSocketHybi13Encoder.Process(Spike.Channel,Spike.Network.ProcessingContext)">
            <summary>
            Processes the packet within the context. Returns true whether the packet was processed or throttled.
            </summary>
            <param name="channel">The through which the packet is coming/going out.</param>
            <param name="context">The packet context for this operation.</param>
            <returns>True whether the packet was processed or throttled, false otherwise.</returns>
        </member>
        <member name="T:Spike.Network.Http.WebSocketUpgradeHandler">
            <summary>
            Represents a decoder of WebSocket upgrade requests.
            </summary>
        </member>
        <member name="F:Spike.Network.Http.WebSocketUpgradeHandler.Current">
            <summary>
            Gets the packet processor for the current thread.
            </summary>
        </member>
        <member name="M:Spike.Network.Http.WebSocketUpgradeHandler.Process(Spike.Channel,Spike.Network.ProcessingContext)">
            <summary>
            Processes the packet within the context. Returns true whether the packet was processed or throttled.
            </summary>
            <param name="channel">The through which the packet is coming/going out.</param>
            <param name="context">The packet context for this operation.</param>
            <returns>True whether the packet was processed or throttled, false otherwise.</returns>
        </member>
        <member name="T:Spike.Network.Http.XhrEncoder">
            <summary>
            Represents a decoder for XHR Polling packets.
            </summary>
        </member>
        <member name="F:Spike.Network.Http.XhrEncoder.Current">
            <summary>
            Gets the packet processor for the current thread.
            </summary>
        </member>
        <member name="M:Spike.Network.Http.XhrEncoder.Process(Spike.Channel,Spike.Network.ProcessingContext)">
            <summary>
            Processes the packet within the context. Returns true whether the packet was processed or throttled.
            </summary>
            <param name="channel">The through which the packet is coming/going out.</param>
            <param name="context">The packet context for this operation.</param>
            <returns>True whether the packet was processed or throttled, false otherwise.</returns>
        </member>
        <member name="T:Spike.Network.Http.XhrHandler">
            <summary>
            Represents a decoder of XHR Polling transport.
            </summary>
        </member>
        <member name="F:Spike.Network.Http.XhrHandler.Current">
            <summary>
            Gets the packet processor for the current thread.
            </summary>
        </member>
        <member name="M:Spike.Network.Http.XhrHandler.Process(Spike.Channel,Spike.Network.ProcessingContext)">
            <summary>
            Processes the packet within the context. Returns true whether the packet was processed or throttled.
            </summary>
            <param name="channel">The through which the packet is coming/going out.</param>
            <param name="context">The packet context for this operation.</param>
            <returns>True whether the packet was processed or throttled, false otherwise.</returns>
        </member>
        <member name="M:Spike.Network.Http.XhrHandler.OnUpgrade(Spike.Channel,Spike.Network.ProcessingContext)">
            <summary>
            Upgrades the transport to the HtmlFile one.
            </summary>
            <param name="channel">The through which the packet is coming/going out.</param>
            <param name="context">The packet context for this operation.</param>
        </member>
        <member name="M:Spike.Network.Http.XhrHandler.OnReceive(Spike.Channel,Spike.Network.ClientRoutingEntry,Spike.Network.ProcessingContext)">
            <summary>
            Invoked when a message is received.
            </summary>
            <param name="originalChannel">The through which the packet is coming/going out.</param>
            <param name="route">The client route for this operation.</param>
            <param name="context">The packet context for this operation.</param>
        </member>
        <member name="T:Spike.WeakReference`1">
            <summary>
            Represents a weak reference, which references an object while still allowing that object to be reclaimed by garbage collection.
            </summary>
            <remarks>
            <para>We define our own type, unrelated to <see cref="T:System.WeakReference"/> both to provide type safety and because <see cref="T:System.WeakReference"/> is an incorrect implementation (it does not implement <see cref="T:System.IDisposable"/>).</para>
            </remarks>
            <typeparam name="T">The type of object to reference.</typeparam>
        </member>
        <member name="F:Spike.WeakReference`1.Reference">
            <summary>
            The contained <see cref="T:Spike.SafeGCHandle"/>.
            </summary>
        </member>
        <member name="M:Spike.WeakReference`1.#ctor(`0)">
            <summary>
            Initializes a new instance of the <see cref="T:Spike.WeakReference`1"/> class, referencing the specified object.
            </summary>
            <param name="target">The object to track. May not be null.</param>
        </member>
        <member name="M:Spike.WeakReference`1.Dispose">
            <summary>
            Frees the weak reference.
            </summary>
        </member>
        <member name="P:Spike.WeakReference`1.Target">
            <summary>
            Gets the referenced object. Will return null if the object has been garbage collected.
            </summary>
        </member>
        <member name="P:Spike.WeakReference`1.IsAlive">
            <summary>
            Gets a value indicating whether the object is still alive (has not been garbage collected).
            </summary>
        </member>
        <member name="T:Spike.SafeGCHandle">
            <summary>
            Helper class to help with managing <see cref="T:System.Runtime.InteropServices.GCHandle"/> resources.
            </summary>
            <remarks>
            <para>Note that this class can only be used to represent <see cref="T:System.Runtime.InteropServices.GCHandle"/> objects that should be freed when garbage collected (or disposed). This class cannot be used in several interop situations, such as passing ownership of an object to a callback function.</para>
            </remarks>
        </member>
        <member name="M:Spike.SafeGCHandle.#ctor(System.Object,System.Runtime.InteropServices.GCHandleType)">
            <summary>
            Initializes a new instance of the <see cref="T:Spike.SafeGCHandle"/> class referring to the target in the given way.
            </summary>
            <param name="target">The object to reference.</param>
            <param name="type">The way to reference the object.</param>
        </member>
        <member name="M:Spike.SafeGCHandle.ReleaseHandle">
            <summary>
            Frees the garbage collection handle.
            </summary>
            <returns>Whether the handle was released successfully.</returns>
        </member>
        <member name="P:Spike.SafeGCHandle.Handle">
            <summary>
            Gets the underlying allocated garbage collection handle.
            </summary>
        </member>
        <member name="P:Spike.SafeGCHandle.IsInvalid">
            <summary>
            Gets a value indicating whether the handle value is invalid.
            </summary>
        </member>
        <member name="T:Spike.Collections.WeakReferenceList`1">
            <summary>
            A collection of weak references to objects. Weak references are purged by iteration/count operations, not by add/remove operations.
            </summary>
            <typeparam name="T">The type of object to hold weak references to.</typeparam>
            <remarks>
            <para>Since the collection holds weak references to the actual objects, the collection is comprised of both living and dead references. Living references refer to objects that have not been garbage collected, and may be used as normal references. Dead references refer to objects that have been garbage collected.</para>
            <para>Dead references do consume resources; each dead reference is a garbage collection handle.</para>
            <para>Dead references may be cleaned up by a <see cref="M:Spike.Collections.WeakReferenceList`1.Purge"/> operation. Some properties and methods cause a purge as a side effect; the member documentation specifies whether a purge takes place.</para>
            </remarks>
        </member>
        <member name="F:Spike.Collections.WeakReferenceList`1.InternalList">
            <summary>
            The actual collection of strongly-typed weak references.
            </summary>
        </member>
        <member name="F:Spike.Collections.WeakReferenceList`1.Lock">
            <summary>
            The lock for the list
            </summary>
        </member>
        <member name="M:Spike.Collections.WeakReferenceList`1.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Spike.Collections.WeakReferenceList`1"/> class that is empty.
            </summary>
        </member>
        <member name="M:Spike.Collections.WeakReferenceList`1.Add(`0)">
            <summary>
            Adds a weak reference to an object to the collection. Does not cause a purge.
            </summary>
            <param name="item">The object to add a weak reference to.</param>
        </member>
        <member name="M:Spike.Collections.WeakReferenceList`1.Remove(`0)">
            <summary>
            Removes a weak reference to an object from the collection. Does not cause a purge.
            </summary>
            <param name="item">The object to remove a weak reference to.</param>
            <returns>True if the object was found and removed; false if the object was not found.</returns>
        </member>
        <member name="M:Spike.Collections.WeakReferenceList`1.Purge">
            <summary>
            Removes all dead objects from the collection.
            </summary>
        </member>
        <member name="M:Spike.Collections.WeakReferenceList`1.Dispose">
            <summary>
            Frees all resources held by the collection.
            </summary>
        </member>
        <member name="M:Spike.Collections.WeakReferenceList`1.Clear">
            <summary>
            Empties the collection.
            </summary>
        </member>
        <member name="M:Spike.Collections.WeakReferenceList`1.System#Collections#Generic#ICollection{T}#Contains(`0)">
            <summary>
            Determines whether the collection contains a specific value.
            </summary>
            <param name="item">The object to locate.</param>
            <returns>True if the collection contains a specific value; false if it does not.</returns>
        </member>
        <member name="M:Spike.Collections.WeakReferenceList`1.System#Collections#Generic#ICollection{T}#CopyTo(`0[],System.Int32)">
            <summary>
            Copies all live objects to an array.
            </summary>
            <param name="array">The destination array.</param>
            <param name="arrayIndex">The index to begin writing into the array.</param>
        </member>
        <member name="M:Spike.Collections.WeakReferenceList`1.System#Collections#Generic#IEnumerable{T}#GetEnumerator">
            <summary>
            Gets a sequence of live objects from the collection, causing a purge.
            </summary>
            <returns>The sequence of live objects.</returns>
        </member>
        <member name="M:Spike.Collections.WeakReferenceList`1.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Gets a sequence of live objects from the collection, causing a purge.
            </summary>
            <returns>The sequence of live objects.</returns>
        </member>
        <member name="P:Spike.Collections.WeakReferenceList`1.System#Collections#Generic#ICollection{T}#Count">
            <summary>
            Gets the number of live entries in the collection, causing a purge. O(n).
            </summary>
        </member>
        <member name="P:Spike.Collections.WeakReferenceList`1.System#Collections#Generic#ICollection{T}#IsReadOnly">
            <summary>
            Gets a value indicating whether the collection is read only. Always returns false.
            </summary>
        </member>
        <member name="P:Spike.Collections.WeakReferenceList`1.UnsafeLiveList">
            <summary>
            Gets a sequence of live objects from the collection, causing a purge. The entire sequence MUST always be enumerated!
            </summary>
        </member>
        <member name="T:Spike.Diagnostics.TrafficInfo">
            <summary>
            Represents a serializable form for the traffic information.
            </summary>
        </member>
        <member name="F:Spike.Diagnostics.TrafficInfo.Lock">
            <summary>
            Read/Write lock on the file
            </summary>
        </member>
        <member name="M:Spike.Diagnostics.TrafficInfo.#ctor">
            <summary>
            Constructs a new instance of the <see cref="T:Spike.Diagnostics.TrafficInfo"/> class.
            </summary>
        </member>
        <member name="M:Spike.Diagnostics.TrafficInfo.Load(System.String)">
            <summary>
            Loads the specified file name.
            </summary>
            <param name="fileName">Name of the file.</param>
            <returns></returns>
        </member>
        <member name="M:Spike.Diagnostics.TrafficInfo.Save(System.String)">
            <summary>
            Saves the specified file name.
            </summary>
            <param name="fileName">Name of the file.</param>
        </member>
        <member name="P:Spike.Diagnostics.TrafficInfo.Points">
            <summary>
            Gets the matrix for the traffic points
            </summary>
        </member>
        <member name="P:Spike.Diagnostics.TrafficInfo.Item(System.Int32,System.Int32)">
            <summary>
            Gets or sets a particular point specified by X and Y coordinates
            </summary>
            <param name="day">The x coordinate of the point (days of the week)</param>
            <param name="hour">The y coordinate of the point (hour)</param>
            <returns>The value of the points</returns>
        </member>
        <member name="T:Spike.Diagnostics.TrafficMonitor">
            <summary>
            Represents a traffic monitor that samples the traffic info and serializes the information.
            </summary>
        </member>
        <member name="M:Spike.Diagnostics.TrafficMonitor.Tick">
            <summary>
            Performs the sampling of the traffic info.
            </summary>
        </member>
        <member name="M:Spike.Diagnostics.TrafficMonitor.Start">
            <summary>
            Starts the traffic monitor
            </summary>
        </member>
        <member name="M:Spike.Diagnostics.TrafficMonitor.Stop">
            <summary>
            Stops the traffic monitor
            </summary>
        </member>
        <member name="P:Spike.Diagnostics.TrafficMonitor.Item(System.Int32,System.Int32)">
            <summary>
            Gets or sets a particular point specified by X and Y coordinates
            </summary>
            <param name="day">The x coordinate of the point (days of the week)</param>
            <param name="hour">The y coordinate of the point (hour)</param>
            <returns>The value of the points</returns>
        </member>
        <member name="P:Spike.Diagnostics.TrafficMonitor.Cumulative">
            <summary>
            Gets or sets whether the info should be cumulative. If set to false, the samples for each hour
            will be reinitialized every hour. 
            </summary>
        </member>
        <member name="P:Spike.Diagnostics.TrafficMonitor.FilePath">
            <summary>
            Gets the full path to the Security.xml file.
            </summary>
        </member>
        <member name="T:Spike.Network.Http.HttpRequestContent">
            <summary>
            Represents an HTTP Request content body.
            </summary>
        </member>
        <member name="F:Spike.Network.Http.HttpRequestContent.Bytes">
            <summary>
            The actual bytes of the content.
            </summary>
        </member>
        <member name="F:Spike.Network.Http.HttpRequestContent.Encoding">
            <summary>
            The encoding type
            </summary>
        </member>
        <member name="M:Spike.Network.Http.HttpRequestContent.#ctor(System.Text.Encoding,System.Byte[])">
            <summary>
            Constructs a new <see cref="T:Spike.Network.Http.HttpRequestContent"/>.
            </summary>
            <param name="encoding">HttpRequest encoding type</param>
            <param name="bytes">Raw bytes of the body</param>
        </member>
        <member name="M:Spike.Network.Http.HttpRequestContent.AsBytes">
            <summary>
            Gets the raw bytes representation of the request body.
            </summary>
            <returns>Raw bytes representation of the request body.</returns>
        </member>
        <member name="M:Spike.Network.Http.HttpRequestContent.AsStream">
            <summary>
            Gets a readable <see cref="T:Spike.Network.ByteStream"/> representation of the request body.
            </summary>
            <returns>A readable <see cref="T:Spike.Network.ByteStream"/> representation of the request body.</returns>
        </member>
        <member name="M:Spike.Network.Http.HttpRequestContent.AsString">
            <summary>
            Gets the string representation of the request body.
            </summary>
            <returns>String representation of the request body.</returns>
        </member>
        <member name="T:Spike.Network.Http.HttpEncodingException">
            <summary>
            Represents a exception relation to HTTP Encoding.
            </summary>
        </member>
        <member name="M:Spike.Network.Http.HttpEncodingException.#ctor(System.String)">
            <summary>
            Constructs a new instance of <see cref="T:Spike.Network.Http.HttpEncodingException"/>.
            </summary>
            <param name="message">The message of the exception.</param>
        </member>
        <member name="T:Spike.Network.PacketKey">
            <summary>
            Represents the key of the packet, an operation ID.
            </summary>
        </member>
        <member name="F:Spike.Network.PacketKey.Cache">
            <summary>
            The cache of the keys for faster string to key conversion.
            </summary>
        </member>
        <member name="F:Spike.Network.PacketKey.Empty">
            <summary>
            Gets the empty packet key
            </summary>
        </member>
        <member name="M:Spike.Network.PacketKey.Get(System.String)">
            <summary>
            Attempts to get the <see cref="T:Spike.Network.PacketKey"/> value from the cache, parses and adds it to the cache in the case of a miss.
            </summary>
            <param name="hexKey">The string representation of a <see cref="T:Spike.Network.PacketKey"/>, in a hexadecimal form, starting with 0x characters.</param>
            <returns>The retrieved or parsed <see cref="T:Spike.Network.PacketKey"/> value.</returns>
        </member>
        <member name="F:Spike.Network.PacketKey.Byte0">
            <summary>
            First byte of the key
            </summary>
        </member>
        <member name="F:Spike.Network.PacketKey.Byte1">
            <summary>
            Second byte of the key
            </summary>
        </member>
        <member name="F:Spike.Network.PacketKey.Byte2">
            <summary>
            Third byte of the key
            </summary>
        </member>
        <member name="F:Spike.Network.PacketKey.Byte3">
            <summary>
            Fourth byte of the key
            </summary>
        </member>
        <member name="M:Spike.Network.PacketKey.#ctor(System.Byte[])">
            <summary>
            Constructs a new instance of the <see cref="T:Spike.Network.PacketKey"/>.
            </summary>
            <param name="value">The byte data.</param>
        </member>
        <member name="M:Spike.Network.PacketKey.#ctor(System.Byte*)">
            <summary>
            Constructs a new instance of the <see cref="T:Spike.Network.PacketKey"/>.
            </summary>
        </member>
        <member name="M:Spike.Network.PacketKey.WriteTo(System.IO.Stream)">
            <summary>
            Writes this packet key to the stream.
            </summary>
            <param name="stream">The stream to write the key to.</param>
        </member>
        <member name="M:Spike.Network.PacketKey.WriteTo(System.Byte[],System.Int32)">
            <summary>
            Writes this packet key to the buffer.
            </summary>
            <param name="destination">The destination buffer to write to.</param>
            <param name="offset">The offset in the buffer, specifies where to start writing</param>
        </member>
        <member name="M:Spike.Network.PacketKey.ToByteArray">
            <summary>
            Gets the byte array value of the packet key.
            </summary>
        </member>
        <member name="M:Spike.Network.PacketKey.ToString">
            <summary>
            Gets the string representation of the <see cref="T:Spike.Network.PacketKey"/> value.
            </summary>
            <returns>The string representation of the <see cref="T:Spike.Network.PacketKey"/> value.</returns>
        </member>
        <member name="M:Spike.Network.PacketKey.Parse(System.String)">
            <summary>
            Parses the provided string as a <see cref="T:Spike.Network.PacketKey"/> value.
            </summary>
            <param name="hexString">The string representation of a <see cref="T:Spike.Network.PacketKey"/>, in a hexadecimal form.</param>
            <returns>The parsed <see cref="T:Spike.Network.PacketKey"/> value.</returns>
        </member>
        <member name="M:Spike.Network.PacketKey.Equals(System.Object)">
            <summary>
            Indicates whether this instance and a specified object are equal.
            </summary>
            <param name="obj">Another object to compare to. </param>
            <returns>true if obj and this instance are the same type and represent the same value; otherwise, false.</returns>
        </member>
        <member name="M:Spike.Network.PacketKey.GetHashCode">
            <summary>
            Returns the hash code for this instance.
            </summary>
            <returns>A 32-bit signed integer that is the hash code for this instance.</returns>
        </member>
        <member name="T:Spike.Network.BytePacket">
            <summary>
            Represents a packet containing raw bytes to send.
            </summary>
        </member>
        <member name="M:Spike.Network.BytePacket.#ctor">
            <summary>
            Constructs a new <see cref="T:Spike.Network.BytePacket"/> instance.
            </summary>
        </member>
        <member name="M:Spike.Network.BytePacket.#ctor(System.Byte[])">
            <summary>
            Constructs a new <see cref="T:Spike.Network.BytePacket"/> instance.
            </summary>
            <param name="defaultBuffer">The default buffer to set on this packet.</param>
        </member>
        <member name="M:Spike.Network.BytePacket.Recycle">
            <summary>
            Recycles (resets) the object to the original state.
            </summary>
        </member>
        <member name="M:Spike.Network.BytePacket.Acquire(System.Byte[])">
            <summary>
            Acquires a byte packet and fills it with the provided buffer. 
            </summary>
            <param name="defaultBuffer">The default buffer to set to the byte packet.</param>
        </member>
        <member name="P:Spike.Network.BytePacket.Buffer">
            <summary>
            Gets the byte buffer of this packet.
            </summary>
        </member>
        <member name="T:Spike.Network.BufferProvider">
            <summary>
            Defines a class that represents a circular byte queue.
            </summary>
        </member>
        <member name="M:Spike.Network.BufferProvider.Write(System.IO.MemoryStream)">
            <summary>
            Writes a memory stream to the buffer and returns a segment which can be used for various operations.
            </summary>
            <param name="stream">The memory stream to write to this buffer.</param>
            <returns>A delimited buffer segment.</returns>
        </member>
        <member name="M:Spike.Network.BufferProvider.Write(System.IO.MemoryStream,System.Int32,System.Int32)">
            <summary>
            Writes a memory stream to the buffer and returns a segment which can be used for various operations.
            </summary>
            <param name="stream">The memory stream to write to this buffer.</param>
            <param name="offset">The starting offset in the byte array.</param>
            <param name="length">The amount of bytes to write.</param>
            <returns>A delimited buffer segment.</returns>
        </member>
        <member name="M:Spike.Network.BufferProvider.Write(System.Byte[])">
            <summary>
            Writes the array of bytes to the buffer and returns a segment which can be used for various operations.
            </summary>
            <param name="buffer">The array of bytes to write to this buffer.</param>
            <returns>A delimited buffer segment.</returns>
        </member>
        <member name="M:Spike.Network.BufferProvider.Write(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Writes the array of bytes to the buffer and returns a segment which can be used for various operations.
            </summary>
            <param name="buffer">The array of bytes to write to this buffer.</param>
            <param name="offset">The starting offset in the byte array.</param>
            <param name="length">The amount of bytes to write.</param>
            <returns>A delimited buffer segment.</returns>
        </member>
        <member name="M:Spike.Network.BufferProvider.Reserve(System.Int32)">
            <summary>
            Reserves a specific segment which can be used for various operations.
            </summary>
            <param name="length">The amount of bytes to reserve.</param>
            <returns>A delimited buffer segment.</returns>
        </member>
        <member name="M:Spike.Network.BufferProvider.Release(Spike.Network.BufferSegment)">
            <summary>
            Releases the memory associated with the particular <see cref="T:Spike.Network.BufferSegment"/>.
            </summary>
            <param name="segment">The segment which should be released.</param>
        </member>
        <member name="P:Spike.Network.BufferProvider.IsDisposed">
            <summary>
            Gets whether the buffer provider was disposed or not.
            </summary>
        </member>
        <member name="T:Spike.Network.BufferSegment">
            <summary>
            Represents a segment of a buffer from a <see cref="T:Spike.Network.BufferProvider"/>.
            </summary>
        </member>
        <member name="M:Spike.Network.BufferSegment.#ctor">
            <summary>
            Constructs a new <see cref="T:Spike.Network.BufferSegment"/> structure.
            </summary>
        </member>
        <member name="M:Spike.Network.BufferSegment.Acquire(Spike.Network.BufferProvider,System.Byte[],System.Int32,System.Int32,System.Int32)">
            <summary>
            Constructs a new <see cref="T:Spike.Network.BufferSegment"/> structure.
            </summary>
            <param name="owner">The owner of this segment.</param>
            <param name="origin">The origin buffer.</param>
            <param name="offset">The starting position.</param>
            <param name="length">The number of bytes.</param>
            <param name="handle">The offset in the original array.</param>
        </member>
        <member name="M:Spike.Network.BufferSegment.Create(Spike.Network.BufferProvider,System.Byte[],System.Int32,System.Int32,System.Int32)">
            <summary>
            Constructs a new <see cref="T:Spike.Network.BufferSegment"/> structure.
            </summary>
            <param name="owner">The owner of this segment.</param>
            <param name="origin">The origin buffer.</param>
            <param name="offset">The starting position.</param>
            <param name="length">The number of bytes.</param>
            <param name="handle">The offset in the original array.</param>
        </member>
        <member name="F:Spike.Network.BufferSegment.Owner">
            <summary>
            Gets the owner buffer. We keep this in order to be able to release the segment back.
            </summary>
        </member>
        <member name="F:Spike.Network.BufferSegment.Array">
            <summary>
            Gets the reference to the byte array. This is done in order to prevent the memory being 
            collected by the GC until the BufferSegment is disposed. Therefore, we can perform a byte*
            read on an old copy of the data, and write back to the new memory table.
            </summary>
        </member>
        <member name="F:Spike.Network.BufferSegment.Handle">
            <summary>
            Gets the offset in the managed buffer.
            </summary>
        </member>
        <member name="F:Spike.Network.BufferSegment.Offset">
            <summary>
            Gets the offset in the original array.
            </summary>
        </member>
        <member name="F:Spike.Network.BufferSegment.Length">
            <summary>
            Gets the number of elements in the range delimited by the array segment.
            </summary>
        </member>
        <member name="M:Spike.Network.BufferSegment.AsSegment">
            <summary>
            Converts this <see cref="T:Spike.Network.BufferSegment"/> to an ArraySegment.
            </summary>
            <returns>The byte array segment corresponding to this <see cref="T:Spike.Network.BufferSegment"/>.</returns>
        </member>
        <member name="M:Spike.Network.BufferSegment.AsArray">
            <summary>
            Converts this <see cref="T:Spike.Network.BufferSegment"/> to an array of bytes.
            </summary>
            <returns>The byte array segment corresponding to this <see cref="T:Spike.Network.BufferSegment"/>.</returns>
        </member>
        <member name="M:Spike.Network.BufferSegment.AsBytePointer">
            <summary>
            Gets a pointer <see cref="T:Spike.Network.BufferSegment"/> to the buffer.
            </summary>
            <returns>The byte pointer corresponding to the beginning of this <see cref="T:Spike.Network.BufferSegment"/>.</returns>
        </member>
        <member name="M:Spike.Network.BufferSegment.Split(System.Int32)">
            <summary>
            Splits the current segment in two and returns the tailing segment.
            </summary>
            <param name="offset">The starting offset of the subsegment.</param>
            <returns>Returns a tailing segment.</returns>
        </member>
        <member name="M:Spike.Network.BufferSegment.Join(Spike.Network.BufferSegment)">
            <summary>
            Joins the current segment with another segment to produce a new one, merged segment.
            </summary>
            <param name="segmentRight">A segment to merge with.</param>
            <returns>Returns a merged segment.</returns>
        </member>
        <member name="M:Spike.Network.BufferSegment.Recycle">
            <summary>
            Recycles the object.
            </summary>
        </member>
        <member name="P:Spike.Network.BufferSegment.Size">
            <summary>
            Gets the number of elements in the range delimited by the array segment.
            </summary>
        </member>
        <member name="P:Spike.Network.BufferSegment.String">
            <summary>
            Gets the segment as a ASCII string, for debug view.
            </summary>
        </member>
        <member name="T:Spike.Network.Http.RayHttpDecoder">
            <summary>
            Represents a decoder of RAY HTTP requests.
            </summary>
        </member>
        <member name="F:Spike.Network.Http.RayHttpDecoder.Current">
            <summary>
            Gets the packet processor for the current thread.
            </summary>
        </member>
        <member name="M:Spike.Network.Http.RayHttpDecoder.Process(Spike.Channel,Spike.Network.ProcessingContext)">
            <summary>
            Processes the packet within the context. Returns true whether the packet was processed or throttled.
            </summary>
            <param name="channel">The through which the packet is coming/going out.</param>
            <param name="context">The packet context for this operation.</param>
            <returns>True whether the packet was processed or throttled, false otherwise.</returns>
        </member>
        <member name="T:Spike.Network.Http.RayHttpConnect">
            <summary>
            Represents a decoder of RAY HTTP requests.
            </summary>
        </member>
        <member name="F:Spike.Network.Http.RayHttpConnect.Current">
            <summary>
            Gets the packet processor for the current thread.
            </summary>
        </member>
        <member name="M:Spike.Network.Http.RayHttpConnect.Process(Spike.Channel,Spike.Network.ProcessingContext)">
            <summary>
            Processes the packet within the context. Returns true whether the packet was processed or throttled.
            </summary>
            <param name="channel">The through which the packet is coming/going out.</param>
            <param name="context">The packet context for this operation.</param>
            <returns>True whether the packet was processed or throttled, false otherwise.</returns>
        </member>
        <member name="T:Spike.Network.Http.CometEncoder">
            <summary>
            Represents a decoder for COMET.
            </summary>
        </member>
        <member name="F:Spike.Network.Http.CometEncoder.Current">
            <summary>
            Gets the packet processor for the current thread.
            </summary>
        </member>
        <member name="M:Spike.Network.Http.CometEncoder.Process(Spike.Channel,Spike.Network.ProcessingContext)">
            <summary>
            Processes the packet within the context. Returns true whether the packet was processed or throttled.
            </summary>
            <param name="channel">The through which the packet is coming/going out.</param>
            <param name="context">The packet context for this operation.</param>
            <returns>True whether the packet was processed or throttled, false otherwise.</returns>
        </member>
        <member name="T:Spike.Network.ByteEncoder">
            <summary>
            Represents a encoder of various <see cref="T:Spike.Network.BytePacket"/> objects.
            </summary>
        </member>
        <member name="F:Spike.Network.ByteEncoder.Current">
            <summary>
            Gets the packet processor for the current thread.
            </summary>
        </member>
        <member name="M:Spike.Network.ByteEncoder.Process(Spike.Channel,Spike.Network.ProcessingContext)">
            <summary>
            Processes the packet within the context. Returns true whether the packet was processed or throttled.
            </summary>
            <param name="channel">The through which the packet is coming/going out.</param>
            <param name="context">The packet context for this operation.</param>
            <returns>True whether the packet was processed or throttled, false otherwise.</returns>
        </member>
        <member name="T:Spike.Network.ProcessingSettings">
            <summary>
            Represents a processing settings to be applied for an individual incoming or outgoing packet.
            </summary>
        </member>
        <member name="F:Spike.Network.ProcessingSettings.DefaultEncoders">
            <summary>
            Default encoders to apply for every newly acquired context.
            </summary>
        </member>
        <member name="F:Spike.Network.ProcessingSettings.DefaultDecoders">
            <summary>
            Default decoders to apply for every newly acquired context.
            </summary>
        </member>
        <member name="M:Spike.Network.ProcessingSettings.#ctor(Spike.Network.ProcessingType)">
            <summary>
            Constructs a new <see cref="T:Spike.Network.ProcessingContext"/>.
            </summary>
        </member>
        <member name="M:Spike.Network.ProcessingSettings.PipelineAddFirst(Spike.Network.IProcessor)">
            <summary>
            Adds a processor to the first place in the pipeline.
            </summary>
            <param name="processor">The processor to queue to the default pipeline.</param>
        </member>
        <member name="M:Spike.Network.ProcessingSettings.PipelineAddLast(Spike.Network.IProcessor)">
            <summary>
            Adds a processor to the last place in the pipeline.
            </summary>
            <param name="processor">The processor to queue to the default pipeline.</param>
        </member>
        <member name="M:Spike.Network.ProcessingSettings.PipelineGetFirst">
            <summary>
            Gets the first element in the pipeline.
            </summary>
            <returns>The <see cref="T:Spike.Network.IProcessor"/> retrieved.</returns>
        </member>
        <member name="M:Spike.Network.ProcessingSettings.PipelineGetLast">
            <summary>
            Gets the last element in the pipeline.
            </summary>
            <returns>The <see cref="T:Spike.Network.IProcessor"/> retrieved.</returns>
        </member>
        <member name="M:Spike.Network.ProcessingSettings.Finalize">
            <summary>
            Called by the GC when the object is finalized.
            </summary>
        </member>
        <member name="M:Spike.Network.ProcessingSettings.OnDispose(System.Boolean)">
            <summary>
            Invoked when the object pool is disposing.
            </summary>
            <param name="isDisposing">Whether the OnDispose was called by a finalizer or a dispose method</param>
        </member>
        <member name="M:Spike.Network.ProcessingSettings.Dispose">
            <summary>
            Disposes the pinned objects.
            </summary>
        </member>
        <member name="P:Spike.Network.ProcessingSettings.BufferProvider">
            <summary>
            Gets the buffer provider who provided the corresponding buffer.
            </summary>
        </member>
        <member name="P:Spike.Network.ProcessingSettings.Processors">
            <summary>
            Gets the list of processors to apply for each <see cref="T:Spike.Network.ProcessingContext"/>.
            </summary>
        </member>
        <member name="T:Spike.Network.Http.CometDecoder">
            <summary>
            Represents a decoder for COMET.
            </summary>
        </member>
        <member name="F:Spike.Network.Http.CometDecoder.Current">
            <summary>
            Gets the packet processor for the current thread.
            </summary>
        </member>
        <member name="M:Spike.Network.Http.CometDecoder.Process(Spike.Channel,Spike.Network.ProcessingContext)">
            <summary>
            Processes the packet within the context. Returns true whether the packet was processed or throttled.
            </summary>
            <param name="channel">The through which the packet is coming/going out.</param>
            <param name="context">The packet context for this operation.</param>
            <returns>True whether the packet was processed or throttled, false otherwise.</returns>
        </member>
        <member name="T:Spike.Network.Http.CometHandshake">
            <summary>
            Represents a comet handshake http handler.
            </summary>
        </member>
        <member name="T:Spike.Network.Http.IHttpHandler">
            <summary>
            Defines the contract that Spike implements to synchronously process HTTP
            Web requests using custom HTTP handlers.
            </summary>
        </member>
        <member name="M:Spike.Network.Http.IHttpHandler.ProcessRequest(Spike.Network.Http.HttpContext)">
            <summary>
            Enables processing of HTTP Web requests by a custom HttpHandler that implements
            the IHttpHandler interface.
            </summary>
            <param name="context">An HttpContext object that provides references to the intrinsic
            server objects (for example, Request, Response, Session, and Server) used
            to service HTTP requests.</param>
        </member>
        <member name="M:Spike.Network.Http.IHttpHandler.CanHandle(Spike.Network.Http.HttpContext,Spike.Network.Http.HttpVerb,System.String)">
            <summary>
            Checks whether the handler can handle an incoming request or not
            </summary>
            <param name="context">An HttpContext object that provides references to the intrinsic
            server objects (for example, Request, Response, Session, and Server) used
            to service HTTP requests.</param>
            <param name="verb">Verb of the request</param>
            <param name="url">Url passed in parameter</param>
            <returns></returns>
        </member>
        <member name="M:Spike.Network.Http.CometHandshake.CanHandle(Spike.Network.Http.HttpContext,Spike.Network.Http.HttpVerb,System.String)">
            <summary>
            Checks whether the handler can handle an incoming request or not
            </summary>
            <param name="context">An HttpContext object that provides references to the intrinsic
            server objects (for example, Request, Response, Session, and Server) used
            to service HTTP requests.</param>
            <param name="verb">Verb of the request</param>
            <param name="url">Url passed in parameter</param>
            <returns></returns>
        </member>
        <member name="M:Spike.Network.Http.CometHandshake.ProcessRequest(Spike.Network.Http.HttpContext)">
            <summary>
            Enables processing of HTTP Web requests by a custom HttpHandler that implements
            the IHttpHandler interface.
            </summary>
            <param name="context">An HttpContext object that provides references to the intrinsic
            server objects (for example, Request, Response, Session, and Server) used
            to service HTTP requests.</param>
        </member>
        <member name="T:Spike.Network.Http.WebSocketHybi13Decoder">
            <summary>
            Represents a decoder for WebSocket packets.
            </summary>
        </member>
        <member name="F:Spike.Network.Http.WebSocketHybi13Decoder.Current">
            <summary>
            Gets the packet processor for the current thread.
            </summary>
        </member>
        <member name="M:Spike.Network.Http.WebSocketHybi13Decoder.Process(Spike.Channel,Spike.Network.ProcessingContext)">
            <summary>
            Processes the packet within the context. Returns true whether the packet was processed or throttled.
            </summary>
            <param name="channel">The through which the packet is coming/going out.</param>
            <param name="context">The packet context for this operation.</param>
            <returns>True whether the packet was processed or throttled, false otherwise.</returns>
        </member>
        <member name="T:Spike.Network.Http.HttpEncoder">
            <summary>
            Represents a encoder of various <see cref="T:Spike.Network.Http.HttpResponse"/> packets.
            </summary>
        </member>
        <member name="F:Spike.Network.Http.HttpEncoder.Current">
            <summary>
            Gets the packet processor for the current thread.
            </summary>
        </member>
        <member name="M:Spike.Network.Http.HttpEncoder.Process(Spike.Channel,Spike.Network.ProcessingContext)">
            <summary>
            Processes the packet within the context. Returns true whether the packet was processed or throttled.
            </summary>
            <param name="channel">The through which the packet is coming/going out.</param>
            <param name="context">The packet context for this operation.</param>
            <returns>True whether the packet was processed or throttled, false otherwise.</returns>
        </member>
        <member name="T:Spike.Network.StringEncoder">
            <summary>
            Represents a encoder of various <see cref="T:Spike.Network.StringPacket"/> objects.
            </summary>
        </member>
        <member name="F:Spike.Network.StringEncoder.Current">
            <summary>
            Gets the packet processor for the current thread.
            </summary>
        </member>
        <member name="M:Spike.Network.StringEncoder.Process(Spike.Channel,Spike.Network.ProcessingContext)">
            <summary>
            Processes the packet within the context. Returns true whether the packet was processed or throttled.
            </summary>
            <param name="channel">The through which the packet is coming/going out.</param>
            <param name="context">The packet context for this operation.</param>
            <returns>True whether the packet was processed or throttled, false otherwise.</returns>
        </member>
        <member name="T:Spike.Network.SecpEncoder">
            <summary>
            Represents a encoder of various SECP informs.
            </summary>
        </member>
        <member name="F:Spike.Network.SecpEncoder.Current">
            <summary>
            Gets the packet processor for the current thread.
            </summary>
        </member>
        <member name="M:Spike.Network.SecpEncoder.Process(Spike.Channel,Spike.Network.ProcessingContext)">
            <summary>
            Processes the packet within the context. Returns true whether the packet was processed or throttled.
            </summary>
            <param name="channel">The through which the packet is coming/going out.</param>
            <param name="context">The packet context for this operation.</param>
            <returns>True whether the packet was processed or throttled, false otherwise.</returns>
        </member>
        <member name="T:Spike.Network.Http.HttpHandler">
            <summary>
            Represents a decoder of various HTTP requests.
            </summary>
        </member>
        <member name="F:Spike.Network.Http.HttpHandler.Current">
            <summary>
            Gets the packet processor for the current thread.
            </summary>
        </member>
        <member name="M:Spike.Network.Http.HttpHandler.Process(Spike.Channel,Spike.Network.ProcessingContext)">
            <summary>
            Processes the packet within the context. Returns true whether the packet was processed or throttled.
            </summary>
            <param name="channel">The through which the packet is coming/going out.</param>
            <param name="context">The packet context for this operation.</param>
            <returns>True whether the packet was processed or throttled, false otherwise.</returns>
        </member>
        <member name="T:Spike.Network.Http.NonAuthorizedException">
            <summary>
            Represents a non-authorized exception for an HTTP request.
            </summary>
        </member>
        <member name="M:Spike.Network.Http.NonAuthorizedException.#ctor">
            <summary>
            Constructs an instance of a <see cref="T:Spike.Network.Http.NonAuthorizedException"/>.
            </summary>
        </member>
        <member name="M:Spike.Network.Http.NonAuthorizedException.#ctor(System.String)">
            <summary>
            Constructs an instance of a <see cref="T:Spike.Network.Http.NonAuthorizedException"/>.
            </summary>
            <param name="message">The default message.</param>
        </member>
        <member name="M:Spike.Network.Http.NonAuthorizedException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Constructs an instance of a <see cref="T:Spike.Network.Http.NonAuthorizedException"/>.
            </summary>
            <param name="info">The serialization info.</param>
            <param name="context">The serialization context.</param>
        </member>
        <member name="T:Spike.Network.Http.HttpRedirectException">
            <summary>
            Represents an exception redirecting an HTTP request.
            </summary>
        </member>
        <member name="M:Spike.Network.Http.HttpRedirectException.#ctor">
            <summary>
            Constructs an instance of a <see cref="T:Spike.Network.Http.HttpRedirectException"/>.
            </summary>
        </member>
        <member name="T:Spike.Network.Http.HttpForbiddenException">
            <summary>
            Represents a forbidden exception for an HTTP request.
            </summary>
        </member>
        <member name="M:Spike.Network.Http.HttpForbiddenException.#ctor">
            <summary>
            Constructs an instance of a <see cref="T:Spike.Network.Http.HttpForbiddenException"/>.
            </summary>
        </member>
        <member name="M:Spike.Network.Http.HttpForbiddenException.#ctor(System.String)">
            <summary>
            Constructs an instance of a <see cref="T:Spike.Network.Http.HttpForbiddenException"/>.
            </summary>
            <param name="message">The default message.</param>
        </member>
        <member name="M:Spike.Network.Http.HttpForbiddenException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Constructs an instance of a <see cref="T:Spike.Network.Http.HttpForbiddenException"/>.
            </summary>
            <param name="info">The serialization info.</param>
            <param name="context">The serialization context.</param>
        </member>
        <member name="T:Spike.Network.Http.XdprHandler">
            <summary>
            Represents a decoder of cross domain policy requests.
            </summary>
        </member>
        <member name="F:Spike.Network.Http.XdprHandler.Current">
            <summary>
            Gets the packet processor for the current thread.
            </summary>
        </member>
        <member name="M:Spike.Network.Http.XdprHandler.Process(Spike.Channel,Spike.Network.ProcessingContext)">
            <summary>
            Processes the packet within the context. Returns true whether the packet was processed or throttled.
            </summary>
            <param name="channel">The through which the packet is coming/going out.</param>
            <param name="context">The packet context for this operation.</param>
            <returns>True whether the packet was processed or throttled, false otherwise.</returns>
        </member>
        <member name="T:Spike.Network.SecpHandler">
            <summary>
            Represents a decoder of various SECP requests.
            </summary>
        </member>
        <member name="F:Spike.Network.SecpHandler.Current">
            <summary>
            Gets the packet processor for the current thread.
            </summary>
        </member>
        <member name="M:Spike.Network.SecpHandler.Process(Spike.Channel,Spike.Network.ProcessingContext)">
            <summary>
            Processes the packet within the context. Returns true whether the packet was processed or throttled.
            </summary>
            <param name="channel">The through which the packet is coming/going out.</param>
            <param name="context">The packet context for this operation.</param>
            <returns>True whether the packet was processed or throttled, false otherwise.</returns>
        </member>
        <member name="T:Spike.Network.LzfDecoder">
            <summary>
            Represents a decoder for LZF compression.
            </summary>
        </member>
        <member name="F:Spike.Network.LzfDecoder.Current">
            <summary>
            Gets the packet processor for the current thread.
            </summary>
        </member>
        <member name="F:Spike.Network.LzfDecoder.Compressors">
            <summary>
            Pool of LZF Compressors.
            </summary>
        </member>
        <member name="M:Spike.Network.LzfDecoder.Process(Spike.Channel,Spike.Network.ProcessingContext)">
            <summary>
            Processes the packet within the context. Returns true whether the packet was processed or throttled.
            </summary>
            <param name="channel">The through which the packet is coming/going out.</param>
            <param name="context">The packet context for this operation.</param>
            <returns>True whether the packet was processed or throttled, false otherwise.</returns>
        </member>
        <member name="T:Spike.Network.SecpDecoder">
            <summary>
            Represents a decoder of various SECP requests.
            </summary>
        </member>
        <member name="F:Spike.Network.SecpDecoder.Current">
            <summary>
            Gets the packet processor for the current thread.
            </summary>
        </member>
        <member name="M:Spike.Network.SecpDecoder.Process(Spike.Channel,Spike.Network.ProcessingContext)">
            <summary>
            Processes the packet within the context. Returns true whether the packet was processed or throttled.
            </summary>
            <param name="channel">The through which the packet is coming/going out.</param>
            <param name="context">The packet context for this operation.</param>
            <returns>True whether the packet was processed or throttled, false otherwise.</returns>
        </member>
        <member name="M:Spike.Network.SecpDecoder.PeekPacketLength(System.Byte*)">
            <summary>
            Gets the packet data length.
            </summary>
        </member>
        <member name="M:Spike.Network.SecpDecoder.PeekPacketIdentifier(System.Byte*)">
            <summary>
            Gets the packet operation number.
            </summary>
        </member>
        <member name="T:Spike.Network.SecpSession">
            <summary>
            Represents a session object that holds intermediate parsing state for SECP protocol.
            </summary>
        </member>
        <member name="M:Spike.Network.SecpSession.#ctor(Spike.Network.PacketKey,System.Int32,Spike.Network.OperationInfo,Spike.Network.PacketHandler)">
            <summary>
            Constructs a new instance of <see cref="T:Spike.Network.SecpSession"/>.
            </summary>
        </member>
        <member name="F:Spike.Network.SecpSession.Metadata">
            <summary>
            Gets or sets the metadata of the operation. 
            </summary>
        </member>
        <member name="F:Spike.Network.SecpSession.Handler">
            <summary>
            Gets or sets the packet handler of the operation. 
            </summary>
        </member>
        <member name="F:Spike.Network.SecpSession.Key">
            <summary>
            Gets or sets the packet key.
            </summary>
        </member>
        <member name="F:Spike.Network.SecpSession.Length">
            <summary>
            Gets or sets the length of the packet.
            </summary>
        </member>
        <member name="T:Spike.Network.Http.HttpDecoder">
            <summary>
            Represents a decoder of various HTTP requests.
            </summary>
        </member>
        <member name="F:Spike.Network.Http.HttpDecoder.Current">
            <summary>
            Gets the packet processor for the current thread.
            </summary>
        </member>
        <member name="M:Spike.Network.Http.HttpDecoder.Process(Spike.Channel,Spike.Network.ProcessingContext)">
            <summary>
            Processes the packet within the context. Returns true whether the packet was processed or throttled.
            </summary>
            <param name="channel">The through which the packet is coming/going out.</param>
            <param name="context">The packet context for this operation.</param>
            <returns>True whether the packet was processed or throttled, false otherwise.</returns>
        </member>
        <member name="M:Spike.Network.Http.HttpDecoder.CanHandle(Spike.Network.BufferSegment)">
            <summary>
            Checks whether the incoming request is HTTP one.
            </summary>
        </member>
        <member name="T:Spike.Network.ProcessingContext">
            <summary>
            Represents a processing context for an individual incoming or outgoing packet.
            </summary>
        </member>
        <member name="M:Spike.Network.ProcessingContext.#ctor">
            <summary>
            Constructs a new <see cref="T:Spike.Network.ProcessingContext"/>.
            </summary>
        </member>
        <member name="M:Spike.Network.ProcessingContext.Acquire(Spike.Channel,Spike.Network.ProcessingSettings)">
            <summary>
            Acquires a new processing context for the given channel and settings.
            </summary>
            <param name="channel">The channel to acquire the context for.</param>
            <param name="settings">The type of the context.</param>
            <returns>An acquired <see cref="T:Spike.Network.ProcessingContext"/>.</returns>
        </member>
        <member name="M:Spike.Network.ProcessingContext.Recycle">
            <summary>
            Recycles the context.
            </summary>
        </member>
        <member name="M:Spike.Network.ProcessingContext.GetIdentity">
            <summary>
            Gets the identifier of the context, for debugging.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Spike.Network.ProcessingContext.GetSession``1">
            <summary>
            Attempts to cast the session object to the specified type. Returns null if the session object is not 
            present or unable to cast.
            </summary>
            <typeparam name="T">The type to cast to.</typeparam>
            <returns>The strongly-typed session object or null.</returns>
        </member>
        <member name="M:Spike.Network.ProcessingContext.BufferWrite(System.IO.MemoryStream)">
            <summary>
            Writes a memory stream to the buffer and returns a segment which can be used for various operations.
            </summary>
            <param name="stream">The memory stream to write to this buffer.</param>
            <returns>A delimited buffer segment.</returns>
        </member>
        <member name="M:Spike.Network.ProcessingContext.BufferWrite(System.IO.MemoryStream,System.Int32,System.Int32)">
            <summary>
            Writes a memory stream to the buffer and returns a segment which can be used for various operations.
            </summary>
            <param name="stream">The memory stream to write to this buffer.</param>
            <param name="offset">The starting offset in the byte array.</param>
            <param name="length">The amount of bytes to write.</param>
            <returns>A delimited buffer segment.</returns>
        </member>
        <member name="M:Spike.Network.ProcessingContext.BufferWrite(System.Byte[])">
            <summary>
            Writes the array of bytes to the buffer and returns a segment which can be used for various operations.
            </summary>
            <param name="buffer">The array of bytes to write to this buffer.</param>
            <returns>A delimited buffer segment.</returns>
        </member>
        <member name="M:Spike.Network.ProcessingContext.BufferWrite(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Writes the array of bytes to the buffer and returns a segment which can be used for various operations.
            </summary>
            <param name="buffer">The array of bytes to write to this buffer.</param>
            <param name="offset">The starting offset in the byte array.</param>
            <param name="length">The amount of bytes to write.</param>
            <returns>A delimited buffer segment.</returns>
        </member>
        <member name="M:Spike.Network.ProcessingContext.BufferReserve(System.Int32)">
            <summary>
            Reserves a specific segment which can be used for various operations.
            </summary>
            <param name="length">The amount of bytes to reserve.</param>
            <returns>A delimited buffer segment.</returns>
        </member>
        <member name="M:Spike.Network.ProcessingContext.PipelineInsert(Spike.Network.IProcessor)">
            <summary>
            Queues a next packet processor after the current processor have been executed.
            </summary>
            <param name="processor">The packet processor to insert.</param>
        </member>
        <member name="M:Spike.Network.ProcessingContext.PipelineRedirect(Spike.Network.IProcessor[])">
            <summary>
            Clears everything in the current pipeline and enqueues a next packet processor a
            fter the current processor have been executed.
            </summary>
            <param name="processors">The packet processors to insert.</param>
        </member>
        <member name="M:Spike.Network.ProcessingContext.PipelineClear">
            <summary>
            Clears everything in the current pipeline, starting from the current worker.
            </summary>
        </member>
        <member name="M:Spike.Network.ProcessingContext.GetProcessors">
            <summary>
            Gets the enumeration over the processors in the pipeline.
            </summary>
            <returns>Returns the processors in the pipeline.</returns>
        </member>
        <member name="M:Spike.Network.ProcessingContext.SwitchBuffer(Spike.Network.BufferSegment)">
            <summary>
            Swaps the buffer and frees the memory used by the current one.
            </summary>
            <param name="newBuffer">New buffer to put in the Buffer property.</param>
        </member>
        <member name="M:Spike.Network.ProcessingContext.Throttle(Spike.Network.BufferSegment)">
            <summary>
            Throttles a buffer segment. It will be processed later.
            </summary>
            <param name="segment">The segment to process later.</param>
        </member>
        <member name="M:Spike.Network.ProcessingContext.Throttle(System.Int32)">
            <summary>
            Throttles a buffer segment by creating a new segment from the current buffer. It will 
            be processed later.
            </summary>
            <param name="offset">The offset specifying where to perform a buffer split.</param>
        </member>
        <member name="M:Spike.Network.ProcessingContext.OnReceive(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Processes the incoming data in the context.
            </summary>
            <param name="incomingData">The data received through the socket.</param>
            <param name="count">The amount of bytes to process.</param>
            <param name="offset">The offset in the incoming byte array.</param>
        </member>
        <member name="M:Spike.Network.ProcessingContext.OnSend(Spike.Network.Packet)">
            <summary>
            Processes outgoing data.
            </summary>
            <param name="packet">The packet to send to the remote endpoint.</param>
            <returns>The buffer segment to send to the remote client.</returns>
        </member>
        <member name="P:Spike.Network.ProcessingContext.Channel">
            <summary>
            Gets the sender or recipient channel for the packet or buffer.
            </summary>
        </member>
        <member name="P:Spike.Network.ProcessingContext.Client">
            <summary>
            Gets or sets the sender or recipient client for the packet or buffer.
            </summary>
        </member>
        <member name="P:Spike.Network.ProcessingContext.Buffer">
            <summary>
            Gets or sets the buffer segment.
            </summary>
        </member>
        <member name="P:Spike.Network.ProcessingContext.Packet">
            <summary>
            Gets or sets the incoming or outgoing packet.
            </summary>
        </member>
        <member name="P:Spike.Network.ProcessingContext.Processor">
            <summary>
            Gets the current pipeline processor.
            </summary>
        </member>
        <member name="P:Spike.Network.ProcessingContext.KeepAlive">
            <summary>
            Gets or sets whether the connection should be kept alive whether the packet is sent.
            </summary>
        </member>
        <member name="P:Spike.Network.ProcessingContext.Session">
            <summary>
            Gets or sets a session object for storing various intermediate parsing state.
            </summary>
        </member>
        <member name="T:Spike.Network.ProcessingState">
            <summary>
            Represents a process result for an <see cref="T:Spike.Network.IProcessor"/>.
            </summary>
        </member>
        <member name="F:Spike.Network.ProcessingState.Success">
            <summary>
            A successfully decoded/encoded packet.
            </summary>
        </member>
        <member name="F:Spike.Network.ProcessingState.Failure">
            <summary>
            An unrecognized packet received or encoding failed.
            </summary>
        </member>
        <member name="F:Spike.Network.ProcessingState.Stop">
            <summary>
            A pipeline have been successfully completed and should not be executed further.
            </summary>
        </member>
        <member name="F:Spike.Network.ProcessingState.InsufficientData">
            <summary>
            Insufficient data has been received and the buffer should be throttled.
            </summary>
        </member>
        <member name="T:Spike.Network.ProcessingType">
            <summary>
            Represents a processing type for an <see cref="T:Spike.Network.IProcessor"/>.
            </summary>
        </member>
        <member name="F:Spike.Network.ProcessingType.Encoding">
            <summary>
            Specifies that the processor is used for encoding outgoing packets.
            </summary>
        </member>
        <member name="F:Spike.Network.ProcessingType.Decoding">
            <summary>
            Specifies that the processor is used for decoding incoming packets.
            </summary>
        </member>
        <member name="T:Spike.Network.ProcessingException">
            <summary>
            Represents an exception which has occured during either decoding or encoding.
            </summary>
        </member>
        <member name="M:Spike.Network.ProcessingException.#ctor">
            <summary>
            Constructs a new instance of <see cref="T:Spike.Network.ProcessingException"/>.
            </summary>
        </member>
        <member name="M:Spike.Network.ProcessingException.#ctor(System.String)">
            <summary>
            Constructs a new instance of <see cref="T:Spike.Network.ProcessingException"/>.
            </summary>
            <param name="message">A message of the exception.</param>
        </member>
        <member name="M:Spike.Network.ProcessingException.#ctor(System.String,System.Exception)">
            <summary>
            Constructs a new instance of <see cref="T:Spike.Network.ProcessingException"/>.
            </summary>
            <param name="message">A message of the exception.</param>
            <param name="inner">An inner exception.</param>
        </member>
        <member name="M:Spike.Network.ProcessingException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Constructs a new instance of <see cref="T:Spike.Network.ProcessingException"/>.
            </summary>
            <param name="info">Serialization context.</param>
            <param name="context">Serialization info.</param>
        </member>
        <member name="T:Spike.Providers.HubProvider">
            <summary>
            Represents a provider for registering and acquiring hubs.
            </summary>
        </member>
        <member name="T:Spike.Provider">
            <summary>
            This class provides a base implementation for the extensible provider model.
            </summary>
        </member>
        <member name="M:Spike.Provider.#ctor">
            <summary>
            Initializes a new instance of the System.Configuration.Provider.ProviderBase
            class.
            </summary>
        </member>
        <member name="M:Spike.Provider.Initialize(System.String,System.Collections.Specialized.NameValueCollection)">
            <summary>
            Initializes the provider.
            </summary>
            <param name="name">The friendly name of the provider.</param>
            <param name="config">A collection of the name/value pairs representing the provider-specific attributes
            specified in the configuration for this provider.
            </param>
        </member>
        <member name="P:Spike.Provider.Description">
            <summary>
            Gets a brief, friendly description suitable for display in administrative
            tools or other user interfaces.
            </summary>
        </member>
        <member name="P:Spike.Provider.Name">
            <summary>
            Gets the friendly name used to refer to the provider during configuration.
            </summary>
        </member>
        <member name="M:Spike.Providers.HubProvider.GetOrCreate(System.String,System.Func{Spike.Hubs.IHub})">
            <summary>
            Gets or creates an instance of a <see cref="T:Spike.Hubs.IHub"/>.
            </summary>
            <param name="hubName">The name of the hub to register.</param>
            <param name="constructor">The constructor used to create a new hub.</param>
            <returns>A newly registered <see cref="T:Spike.Hubs.IHub"/>.</returns>
        </member>
        <member name="M:Spike.Providers.HubProvider.Unregister(Spike.Hubs.IHub)">
            <summary>
            Unregisters a hub instance from the provider.
            </summary>
            <param name="hub">The hub to unregister.</param>
        </member>
        <member name="M:Spike.Providers.HubProvider.Dispose(System.String)">
            <summary>
            Unregisters and disposes a hub instance from the provider.
            </summary>
            <param name="hubName">The hub to unregister.</param>
        </member>
        <member name="M:Spike.Providers.HubProvider.Dispose(Spike.Hubs.IHub)">
            <summary>
            Unregisters and disposes a hub instance from the provider.
            </summary>
            <param name="hub">The hub to unregister.</param>
        </member>
        <member name="M:Spike.Providers.HubProvider.CreatePubHub(System.String,System.String,System.String,Spike.Hubs.HubTerminationPolicy)">
            <summary>
            Creates and registers a <see cref="T:Spike.Hubs.PubHub"/>. This can be used for simple 
            string publish/subscribe event publishing.
            </summary>
            <param name="hubName">The name of the hub to register.</param>
            <param name="publishKey">The publish key for this <see cref="T:Spike.Hubs.PubHub"/>.</param>
            <param name="subscribeKey">The subscribe key for this <see cref="T:Spike.Hubs.PubHub"/>.</param>
            <param name="policy">The termination policy that determines when the <see cref="T:Spike.Hubs.PubHub"/> should be disposed.</param>
            <returns>A newly registered <see cref="T:Spike.Hubs.PubHub"/>.</returns>
        </member>
        <member name="M:Spike.Providers.HubProvider.CreatePubHub(System.String,System.String,Spike.Hubs.HubTerminationPolicy)">
            <summary>
            Creates and registers a <see cref="T:Spike.Hubs.PubHub"/>. This can be used for simple 
            string publish/subscribe event publishing. Everyone can subscribe to this <see cref="T:Spike.Hubs.PubHub"/>.
            </summary>
            <param name="hubName">The name of the hub to register.</param>
            <param name="publishKey">The publish key for this <see cref="T:Spike.Hubs.PubHub"/>.</param>
            <param name="policy">The termination policy that determines when the <see cref="T:Spike.Hubs.PubHub"/> should be disposed.</param>
            <returns>A newly registered <see cref="T:Spike.Hubs.PubHub"/>.</returns>
        </member>
        <member name="M:Spike.Providers.HubProvider.CreatePubHub(System.String,Spike.Hubs.HubTerminationPolicy)">
            <summary>
            Creates and registers a <see cref="T:Spike.Hubs.PubHub"/>. This can be used for simple 
            string publish/subscribe event publishing. Everyone can subscribe and publish
            to this <see cref="T:Spike.Hubs.PubHub"/>.
            </summary>
            <param name="hubName">The name of the hub to register.</param>
            <param name="policy">The termination policy that determines when the <see cref="T:Spike.Hubs.PubHub"/> should be disposed.</param>
            <returns>A newly registered <see cref="T:Spike.Hubs.PubHub"/>.</returns>
        </member>
        <member name="M:Spike.Providers.HubProvider.CreatePubHub(System.String,System.String,System.String)">
            <summary>
            Creates and registers a <see cref="T:Spike.Hubs.PubHub"/>. This can be used for simple 
            string publish/subscribe event publishing.
            </summary>
            <param name="hubName">The name of the hub to register.</param>
            <param name="publishKey">The publish key for this <see cref="T:Spike.Hubs.PubHub"/>.</param>
            <param name="subscribeKey">The subscribe key for this <see cref="T:Spike.Hubs.PubHub"/>.</param>
            <returns>A newly registered <see cref="T:Spike.Hubs.PubHub"/>.</returns>
        </member>
        <member name="M:Spike.Providers.HubProvider.CreatePubHub(System.String,System.String)">
            <summary>
            Creates and registers a <see cref="T:Spike.Hubs.PubHub"/>. This can be used for simple 
            string publish/subscribe event publishing. Everyone can subscribe to this <see cref="T:Spike.Hubs.PubHub"/>.
            </summary>
            <param name="hubName">The name of the hub to register.</param>
            <param name="publishKey">The publish key for this <see cref="T:Spike.Hubs.PubHub"/>.</param>
            <returns>A newly registered <see cref="T:Spike.Hubs.PubHub"/>.</returns>
        </member>
        <member name="M:Spike.Providers.HubProvider.CreatePubHub(System.String)">
            <summary>
            Creates and registers a <see cref="T:Spike.Hubs.PubHub"/>. This can be used for simple 
            string publish/subscribe event publishing. Everyone can subscribe and publish
            to this <see cref="T:Spike.Hubs.PubHub"/>.
            </summary>
            <param name="hubName">The name of the hub to register.</param>
            <returns>A newly registered <see cref="T:Spike.Hubs.PubHub"/>.</returns>
        </member>
        <member name="M:Spike.Providers.HubProvider.GetOrCreatePubHub(System.String,System.String,System.String,Spike.Hubs.HubTerminationPolicy)">
            <summary>
            Gets or creates a <see cref="T:Spike.Hubs.PubHub"/>. This can be used for simple 
            string publish/subscribe event publishing.
            </summary>
            <param name="hubName">The name of the hub to register.</param>
            <param name="publishKey">The publish key for this <see cref="T:Spike.Hubs.PubHub"/>.</param>
            <param name="subscribeKey">The subscribe key for this <see cref="T:Spike.Hubs.PubHub"/>.</param>
            <param name="policy">The termination policy that determines when the <see cref="T:Spike.Hubs.PubHub"/> should be disposed.</param>
            <returns>A newly registered <see cref="T:Spike.Hubs.PubHub"/>.</returns>
        </member>
        <member name="M:Spike.Providers.HubProvider.GetOrCreatePubHub(System.String,System.String,Spike.Hubs.HubTerminationPolicy)">
            <summary>
            Gets or creates a <see cref="T:Spike.Hubs.PubHub"/>. This can be used for simple 
            string publish/subscribe event publishing. Everyone can subscribe to this <see cref="T:Spike.Hubs.PubHub"/>.
            </summary>
            <param name="hubName">The name of the hub to register.</param>
            <param name="publishKey">The publish key for this <see cref="T:Spike.Hubs.PubHub"/>.</param>
            <param name="policy">The termination policy that determines when the <see cref="T:Spike.Hubs.PubHub"/> should be disposed.</param>
            <returns>A newly registered <see cref="T:Spike.Hubs.PubHub"/>.</returns>
        </member>
        <member name="M:Spike.Providers.HubProvider.GetOrCreatePubHub(System.String,Spike.Hubs.HubTerminationPolicy)">
            <summary>
            Gets or creates a <see cref="T:Spike.Hubs.PubHub"/>. This can be used for simple 
            string publish/subscribe event publishing. Everyone can subscribe and publish
            to this <see cref="T:Spike.Hubs.PubHub"/>.
            </summary>
            <param name="hubName">The name of the hub to register.</param>
            <param name="policy">The termination policy that determines when the <see cref="T:Spike.Hubs.PubHub"/> should be disposed.</param>
            <returns>A newly registered <see cref="T:Spike.Hubs.PubHub"/>.</returns>
        </member>
        <member name="M:Spike.Providers.HubProvider.GetOrCreatePubHub(System.String,System.String,System.String)">
            <summary>
            Gets or creates a <see cref="T:Spike.Hubs.PubHub"/>. This can be used for simple 
            string publish/subscribe event publishing.
            </summary>
            <param name="hubName">The name of the hub to register.</param>
            <param name="publishKey">The publish key for this <see cref="T:Spike.Hubs.PubHub"/>.</param>
            <param name="subscribeKey">The subscribe key for this <see cref="T:Spike.Hubs.PubHub"/>.</param>
            <returns>A newly registered <see cref="T:Spike.Hubs.PubHub"/>.</returns>
        </member>
        <member name="M:Spike.Providers.HubProvider.GetOrCreatePubHub(System.String,System.String)">
            <summary>
            Gets or creates a <see cref="T:Spike.Hubs.PubHub"/>. This can be used for simple 
            string publish/subscribe event publishing. Everyone can subscribe to this <see cref="T:Spike.Hubs.PubHub"/>.
            </summary>
            <param name="hubName">The name of the hub to register.</param>
            <param name="publishKey">The publish key for this <see cref="T:Spike.Hubs.PubHub"/>.</param>
            <returns>A newly registered <see cref="T:Spike.Hubs.PubHub"/>.</returns>
        </member>
        <member name="M:Spike.Providers.HubProvider.GetOrCreatePubHub(System.String)">
            <summary>
            Gets or creates a <see cref="T:Spike.Hubs.PubHub"/>. This can be used for simple 
            string publish/subscribe event publishing. Everyone can subscribe and publish
            to this <see cref="T:Spike.Hubs.PubHub"/>.
            </summary>
            <param name="hubName">The name of the hub to register.</param>
            <returns>A newly registered <see cref="T:Spike.Hubs.PubHub"/>.</returns>
        </member>
        <member name="M:Spike.Providers.HubProvider.Get(System.String)">
            <summary>
            Gets the instance of a client hub given the name of the hub.
            </summary>
            <param name="hubName">The name of the hub to retrieve.</param>
            <returns>An instance of the hub for the given name.</returns>
        </member>
        <member name="M:Spike.Providers.HubProvider.Register(Spike.Hubs.IHub)">
            <summary>
            Registers a hub instance to the provider.
            </summary>
            <param name="hub">The instance of the hub to register.</param>
        </member>
        <member name="M:Spike.Providers.HubProvider.Unregister(System.String)">
            <summary>
            Unregisters a hub instance from the provider
            </summary>
            <param name="hubName">The name of the hub to unregister.</param>
        </member>
        <member name="M:Spike.Providers.HubProvider.GetValues">
            <summary>
            Gets all hubs in the registry.
            </summary>
            <returns>All the hubs in the registry.</returns>
        </member>
        <member name="T:Spike.Providers.DefaultHubProvider">
            <summary>
            Represents a provider for registering and acquiring hubs.
            </summary>
        </member>
        <member name="M:Spike.Providers.DefaultHubProvider.Get(System.String)">
            <summary>
            Gets the instance of a client hub given the name of the hub.
            </summary>
            <param name="hubName">The name of the hub to retrieve.</param>
            <returns>An instance of the hub for the given name.</returns>
        </member>
        <member name="M:Spike.Providers.DefaultHubProvider.Register(Spike.Hubs.IHub)">
            <summary>
            Registers a hub instance to the provider.
            </summary>
            <param name="hub">The instance of the hub to register.</param>
        </member>
        <member name="M:Spike.Providers.DefaultHubProvider.Unregister(System.String)">
            <summary>
            Unregisters a hub instance from the provider
            </summary>
            <param name="hubName">The name of the hub to register.</param>
        </member>
        <member name="M:Spike.Providers.DefaultHubProvider.GetValues">
            <summary>
            Gets all hubs in the registry.
            </summary>
            <returns>All the hubs in the registry.</returns>
        </member>
        <member name="T:Spike.Providers.MonitoringProvider">
            <summary>
            Represents a provider that submits health information to Spike-Cloud.
            </summary>
        </member>
        <member name="M:Spike.Providers.MonitoringProvider.GetCurrentValue(System.String)">
            <summary>
            Gets the value by its name.
            </summary>
            <param name="name">Name of the value to get.</param>
            <returns>Current value for the provided name.</returns>
        </member>
        <member name="M:Spike.Providers.MonitoringProvider.GetCurrentValues(Spike.Network.CloudMonitorVariable[],System.Int64)">
            <summary>
            Gets the list of values given the list of names.
            </summary>
            <param name="tick">Current tick</param>
            <param name="variables">The list of names to get.</param>
            <returns>The list of current values.</returns>
        </member>
        <member name="M:Spike.Providers.MonitoringProvider.GetValue(System.String)">
            <summary>
            Gets a current value
            </summary>
        </member>
        <member name="M:Spike.Providers.MonitoringProvider.GetCurrentValueBuiltin(System.String,System.Object@)">
            <summary>
            Gets the value by its name.
            </summary>
            <param name="name">Name of the value to get.</param>
            <param name="value">Current value for the provided name.</param>
            <returns>Whether the name is built-in or not.</returns>
        </member>
        <member name="T:Spike.Providers.DefaultMonitoringProvider">
            <summary>
            Represents a default provider that submits health information to Spike-Cloud.
            </summary>
        </member>
        <member name="M:Spike.Providers.DefaultMonitoringProvider.GetCurrentValue(System.String)">
            <summary>
            Gets the value by its name.
            </summary>
            <param name="name">Name of the value to get.</param>
            <returns>Current value for the provided name.</returns>
        </member>
        <member name="T:Spike.Providers.FirewallProvider">
            <summary>
            Represents a provider for the firewall related functionnality.
            </summary>
        </member>
        <member name="M:Spike.Providers.FirewallProvider.IsBlocked(System.Net.IPAddress)">
            <summary>
            Checks whether the given IP address should be blocked or allowed.
            </summary>
            <param name="ip">The IP address to check.</param>
            <returns>True if the address is blocked; false otherwise.</returns>
        </member>
        <member name="M:Spike.Providers.FirewallProvider.IsBlocked(System.Net.EndPoint)">
            <summary>
            Checks whether the given remote end point should be blocked or allowed.
            </summary>
            <param name="ep">The remote end point to check.</param>
            <returns>True if the remote end point is blocked; false otherwise.</returns>
        </member>
        <member name="M:Spike.Providers.FirewallProvider.RemoveRule(System.String)">
            <summary>
            Removes a rule from the firewall rule list. This method matches the provided pattern with the associated rule.
            </summary>
            <param name="pattern">The pattern to match to remove.</param>
        </member>
        <member name="M:Spike.Providers.FirewallProvider.RemoveRule(Spike.Security.IFirewallRule)">
            <summary>
            Removes a rule from the firewall rule list.
            </summary>
            <param name="rule">The rule object to remove.</param>
        </member>
        <member name="M:Spike.Providers.FirewallProvider.AddRule(Spike.Security.IFirewallRule)">
            <summary>
            Adds a rule to the firewall rule list.
            </summary>
            <param name="rule">The rule object to add.</param>
        </member>
        <member name="M:Spike.Providers.FirewallProvider.AddRule(System.String,System.String,Spike.Security.FirewallAction)">
            <summary>
            Adds a rule to the firewall rule list.
            </summary>
            <param name="name">The user friendly name of the rule to add.</param>
            <param name="action">The action the firewall should perform it the rule is valid.</param>
            <param name="pattern">The pattern to add as a rule.</param>
        </member>
        <member name="M:Spike.Providers.FirewallProvider.AddRule(System.String,System.Net.IPAddress,Spike.Security.FirewallAction)">
            <summary>
            Adds a rule to the firewall rule list.
            </summary>
            <param name="ip">The IP address to add as a rule.</param>
            <param name="name">The user friendly name of the rule to add.</param>
            <param name="action">The action the firewall should perform it the rule is valid.</param>
        </member>
        <member name="M:Spike.Providers.FirewallProvider.EditRule(Spike.Security.IFirewallRule,System.String,System.String,Spike.Security.FirewallAction)">
            <summary>
            Edits a rule by assigning a new name, pattern and action.
            </summary>
            <param name="ruleToEdit">The target rule to edit.</param>
            <param name="newName">New name to assign to the rule.</param>
            <param name="newPattern">New pattern to assign to the rule.</param>
            <param name="newAction">New action to assign to the rule.</param>
        </member>
        <member name="P:Spike.Providers.FirewallProvider.Rules">
            <summary>
            Gets the collection of all firewall rules.
            </summary>
        </member>
        <member name="T:Spike.Providers.DefaultFirewallProvider">
            <summary>
            Represents a provider for the firewall related functionnality.
            </summary>
        </member>
        <member name="M:Spike.Providers.DefaultFirewallProvider.#ctor">
            <summary>
            Constructs a new <see cref="T:Spike.Providers.DefaultFirewallProvider"/> instance.
            </summary>
        </member>
        <member name="M:Spike.Providers.DefaultFirewallProvider.LoadFrom(Spike.Security.FirewallFileRuleCollection)">
            <summary>
            Loads the rules from a <see cref="T:Spike.Security.FirewallFileRuleCollection"/> object.
            </summary>
            <param name="collection">The collection that provides generic rules.</param>
        </member>
        <member name="M:Spike.Providers.DefaultFirewallProvider.ParseAll">
            <summary>
            Parses all file rules 
            </summary>
        </member>
        <member name="M:Spike.Providers.DefaultFirewallProvider.MakeRule(System.String,System.String,Spike.Security.FirewallAction)">
            <summary>
            Parses a pattern rule to a strongly typed one.
            </summary>
            <param name="action">The action to perform.</param>
            <param name="name">The name of the rule to make.</param>
            <param name="pattern">The pattern to parse.</param>
            <returns>Strongly typed firewall rule or null if the provider was unable to parse the rule.</returns>
        </member>
        <member name="M:Spike.Providers.DefaultFirewallProvider.RemoveRule(System.String)">
            <summary>
            Removes a rule from the firewall rule list. This method matches the provided pattern with the associated rule.
            </summary>
            <param name="pattern">The pattern to match to remove.</param>
        </member>
        <member name="M:Spike.Providers.DefaultFirewallProvider.RemoveRule(Spike.Security.IFirewallRule)">
            <summary>
            Removes a rule from the firewall rule list.
            </summary>
            <param name="rule">The rule object to remove.</param>
        </member>
        <member name="M:Spike.Providers.DefaultFirewallProvider.EditRule(Spike.Security.IFirewallRule,System.String,System.String,Spike.Security.FirewallAction)">
            <summary>
            Edits a rule by assigning a new name, pattern and action.
            </summary>
            <param name="ruleToEdit">The target rule to edit.</param>
            <param name="newName">New name to assign to the rule.</param>
            <param name="newPattern">New pattern to assign to the rule.</param>
            <param name="newAction">New action to assign to the rule.</param>
        </member>
        <member name="M:Spike.Providers.DefaultFirewallProvider.AddRule(Spike.Security.IFirewallRule)">
            <summary>
            Adds a rule to the firewall rule list.
            </summary>
            <param name="rule">The rule object to add.</param>
        </member>
        <member name="M:Spike.Providers.DefaultFirewallProvider.AddRule(System.String,System.String,Spike.Security.FirewallAction)">
            <summary>
            Adds a rule to the firewall rule list.
            </summary>
            <param name="name">The user friendly name of the rule to add.</param>
            <param name="action">The action the firewall should perform it the rule is valid.</param>
            <param name="pattern">The pattern to add as a rule.</param>
        </member>
        <member name="M:Spike.Providers.DefaultFirewallProvider.AddRule(System.String,System.Net.IPAddress,Spike.Security.FirewallAction)">
            <summary>
            Adds a rule to the firewall rule list.
            </summary>
            <param name="ip">The IP address to add as a rule.</param>
            <param name="name">The user friendly name of the rule to add.</param>
            <param name="action">The action the firewall should perform it the rule is valid.</param>
        </member>
        <member name="M:Spike.Providers.DefaultFirewallProvider.IsBlocked(System.Net.IPAddress)">
            <summary>
            Checks whether the given IP address should be blocked or allowed.
            </summary>
            <param name="ip">The IP address to check.</param>
            <returns>True if the address is blocked; false otherwise.</returns>
        </member>
        <member name="M:Spike.Providers.DefaultFirewallProvider.IsBlocked(System.Net.EndPoint)">
            <summary>
            Checks whether the given remote end point should be blocked or allowed.
            </summary>
            <param name="ep">The remote end point to check.</param>
            <returns>True if the remote end point is blocked; false otherwise.</returns>
        </member>
        <member name="M:Spike.Providers.DefaultFirewallProvider.Save">
            <summary>
            Saves the firewall rules if there were modified programmatically.
            </summary>
        </member>
        <member name="P:Spike.Providers.DefaultFirewallProvider.FilePath">
            <summary>
            Gets the full path to the Security.xml file.
            </summary>
        </member>
        <member name="P:Spike.Providers.DefaultFirewallProvider.Rules">
            <summary>
            Gets the collection of all firewall rules.
            </summary>
        </member>
        <member name="T:Spike.Network.CloudConnector">
            <summary>
            Represents a validation mechanism for the license.
            </summary>
        </member>
        <member name="M:Spike.Network.CloudConnector.Connect">
            <summary>
            Attempts to register the server with spike-cloud.
            </summary>
            <returns>Whether connect was authorised or not.</returns>
        </member>
        <member name="M:Spike.Network.CloudConnector.Heartbeat(System.Int64)">
            <summary>
            Issues a heartbeat to spike-cloud.
            </summary>
            <param name="tick">Current tick.</param>
        </member>
        <member name="M:Spike.Network.CloudConnector.SubmitSpml">
            <summary>
            Submits the SPML definitions to the cloud
            </summary>
        </member>
        <member name="M:Spike.Network.CloudConnector.RefreshAvailableNode">
            <summary>
            Gets the list of available cloud servers and sets the current.
            </summary>
        </member>
        <member name="P:Spike.Network.CloudConnector.Timeout">
            <summary>
            Gets or sets the timeout for the http posts.
            </summary>
        </member>
        <member name="P:Spike.Network.CloudConnector.Nodes">
            <summary>
            Gets the list of available nodes.
            </summary>
        </member>
        <member name="P:Spike.Network.CloudConnector.Current">
            <summary>
            Gets the current node we're connected to.
            </summary>
        </member>
        <member name="P:Spike.Network.CloudConnector.Registration">
            <summary>
            Gets the current cloud registration.
            </summary>
        </member>
        <member name="P:Spike.Network.CloudConnector.IsAvailable">
            <summary>
            Gets whether the cloud is available
            </summary>
        </member>
        <member name="T:Spike.Security.FirewallCidrRule">
            <summary>
            Represents a firewall rule that is defined using a CIDR format.
            </summary>
        </member>
        <member name="T:Spike.Security.IFirewallRule">
            <summary>
            Represents a contract that a firewall rule implements.
            </summary>
        </member>
        <member name="M:Spike.Security.IFirewallRule.Validate(System.Net.IPAddress)">
            <summary>
            Validates the firewall rule and tells the firewall what action should be performed.
            </summary>
            <param name="address">The address to validate.</param>
            <returns>The firewall action that should be taken.</returns>
        </member>
        <member name="P:Spike.Security.IFirewallRule.Name">
            <summary>
            Gets or sets a user friendly name of the <see cref="T:Spike.Security.IFirewallRule"/>.
            </summary>
        </member>
        <member name="P:Spike.Security.IFirewallRule.Action">
            <summary>
            Gets or sets the action that the firewall should take by default if the rule is valid.
            </summary>
        </member>
        <member name="M:Spike.Security.FirewallCidrRule.#ctor(System.String,System.Net.IPAddress,System.Int32,Spike.Security.FirewallAction)">
            <summary>
            Constructs a new instance of <see cref="T:Spike.Security.FirewallCidrRule"/>.
            </summary>
            <param name="name">A user friendly name of the rule.</param>
            <param name="cidrPrefix">The prefix of the CIDR address.</param>
            <param name="cidrLength">The CIDR length.</param>
            <param name="action">The default action to perform if the rule is matched.</param>
        </member>
        <member name="F:Spike.Security.FirewallCidrRule.Prefix">
            <summary>
            The prefix of the CIDR address
            </summary>
        </member>
        <member name="F:Spike.Security.FirewallCidrRule.Length">
            <summary>
            The CIDR length
            </summary>
        </member>
        <member name="M:Spike.Security.FirewallCidrRule.Validate(System.Net.IPAddress)">
            <summary>
            Validates the firewall rule and tells the firewall what action should be performed.
            </summary>
            <param name="address">The address to validate.</param>
            <returns>The firewall action that should be taken.</returns>
        </member>
        <member name="M:Spike.Security.FirewallCidrRule.ToString">
            <summary>
            Converts the rule to the serializable string form.
            </summary>
            <returns>The pattern to represent this rule.</returns>
        </member>
        <member name="M:Spike.Security.FirewallCidrRule.Equals(System.Object)">
            <summary>
            Determines whether this rule equals the target rule.
            </summary>
            <param name="obj">The target rule to check.</param>
            <returns>True if this rule is equals to the target rule; false otherwise.</returns>
        </member>
        <member name="M:Spike.Security.FirewallCidrRule.GetHashCode">
            <summary>
            Returns a hash value for this rule.
            </summary>
            <returns>The hash value of this rule.</returns>
        </member>
        <member name="P:Spike.Security.FirewallCidrRule.Name">
            <summary>
            Gets or sets a user friendly name of the <see cref="T:Spike.Security.IFirewallRule"/>.
            </summary>
        </member>
        <member name="P:Spike.Security.FirewallCidrRule.Action">
            <summary>
            Gets or sets the action that the firewall should take by default if the rule is valid.
            </summary>
        </member>
        <member name="T:Spike.Security.FirewallUtility">
            <summary>
            Provides functionnality for IP/CIDR Matching
            </summary>
        </member>
        <member name="T:Spike.Security.FirewallFileRule">
            <summary>
            Represents a generic rule in the Firewall.xml configuration file.
            </summary>
        </member>
        <member name="M:Spike.Security.FirewallFileRule.#ctor">
            <summary>
            Constructs an instance of <see cref="T:Spike.Security.FirewallFileRule"/> class.
            </summary>
        </member>
        <member name="M:Spike.Security.FirewallFileRule.#ctor(System.String,System.String,Spike.Security.FirewallAction)">
            <summary>
            Constructs an instance of <see cref="T:Spike.Security.FirewallFileRule"/> class.
            </summary>
        </member>
        <member name="P:Spike.Security.FirewallFileRule.Name">
            <summary>
            Gets the name of the rule
            </summary>
        </member>
        <member name="P:Spike.Security.FirewallFileRule.Pattern">
            <summary>
            Gets or sets the pattern to parse for the rule. This can be CIDR, wildcard or a static IP address.
            </summary>
        </member>
        <member name="P:Spike.Security.FirewallFileRule.Action">
            <summary>
            Gets or sets the default firewall action to perform if the rule is valid.
            </summary>
        </member>
        <member name="T:Spike.Security.FirewallFileRuleCollection">
            <summary>
            Contains a collection of <see cref="T:Spike.Security.FirewallFileRule"/>
            </summary>
        </member>
        <member name="F:Spike.Security.FirewallFileRuleCollection.Lock">
            <summary>
            Read/Write lock on the file
            </summary>
        </member>
        <member name="M:Spike.Security.FirewallFileRuleCollection.#ctor">
            <summary>
            Constructs a new instance of the <see cref="T:Spike.Security.FirewallFileRuleCollection"/> class.
            </summary>
        </member>
        <member name="M:Spike.Security.FirewallFileRuleCollection.#ctor(System.Collections.Generic.IList{Spike.Security.FirewallFileRule})">
            <summary>
            Constructs a new instance of the <see cref="T:Spike.Security.FirewallFileRuleCollection"/> class.
            </summary>
        </member>
        <member name="M:Spike.Security.FirewallFileRuleCollection.Load(System.String)">
            <summary>
            Loads the specified file name.
            </summary>
            <param name="fileName">Name of the file.</param>
            <returns></returns>
        </member>
        <member name="M:Spike.Security.FirewallFileRuleCollection.Save(System.String)">
            <summary>
            Saves the specified file name.
            </summary>
            <param name="fileName">Name of the file.</param>
        </member>
        <member name="T:Spike.Security.FirewallWildcardRule">
            <summary>
            Represents a firewall rule that is defined using an IPv4 or IPv6 address with wildcard (*) allowed.
            </summary>
        </member>
        <member name="M:Spike.Security.FirewallWildcardRule.#ctor(System.String,System.String,Spike.Security.FirewallAction)">
            <summary>
            Constructs a new instance of <see cref="T:Spike.Security.FirewallCidrRule"/>.
            </summary>
            <param name="name">A user friendly name of the rule.</param>
            <param name="pattern">A IPv4 or IPv6 address with wildcard (*) pattern. Ex: 127.0.0.* </param>
            <param name="action">The default action to perform if the rule is matched.</param>
        </member>
        <member name="F:Spike.Security.FirewallWildcardRule.WildcardPattern">
            <summary>
            A IPv4 or IPv6 address with wildcard (*) pattern. Ex: 127.0.0.*
            </summary>
        </member>
        <member name="F:Spike.Security.FirewallWildcardRule.IsValid">
            <summary>
            Whether the pattern is valid or not.
            </summary>
        </member>
        <member name="M:Spike.Security.FirewallWildcardRule.Validate(System.Net.IPAddress)">
            <summary>
            Validates the firewall rule and tells the firewall what action should be performed.
            </summary>
            <param name="address">The address to validate.</param>
            <returns>The firewall action that should be taken.</returns>
        </member>
        <member name="M:Spike.Security.FirewallWildcardRule.ToString">
            <summary>
            Converts the rule to the serializable string form.
            </summary>
            <returns>The pattern to represent this rule.</returns>
        </member>
        <member name="M:Spike.Security.FirewallWildcardRule.Equals(System.Object)">
            <summary>
            Determines whether this rule equals the target rule.
            </summary>
            <param name="obj">The target rule to check.</param>
            <returns>True if this rule is equals to the target rule; false otherwise.</returns>
        </member>
        <member name="M:Spike.Security.FirewallWildcardRule.GetHashCode">
            <summary>
            Returns a hash value for this rule.
            </summary>
            <returns>The hash value of this rule.</returns>
        </member>
        <member name="P:Spike.Security.FirewallWildcardRule.Name">
            <summary>
            Gets or sets a user friendly name of the <see cref="T:Spike.Security.IFirewallRule"/>.
            </summary>
        </member>
        <member name="P:Spike.Security.FirewallWildcardRule.Action">
            <summary>
            Gets or sets the action that the firewall should take by default if the rule is valid.
            </summary>
        </member>
        <member name="T:Spike.Security.FirewallAddressRule">
            <summary>
            Represents a firewall rule that is defined using a static IPv4 or IPv6 address.
            </summary>
        </member>
        <member name="M:Spike.Security.FirewallAddressRule.#ctor(System.String,System.Net.IPAddress,Spike.Security.FirewallAction)">
            <summary>
            Constructs a new instance of <see cref="T:Spike.Security.FirewallAddressRule"/>.
            </summary>
            <param name="name">A user friendly name of the rule.</param>
            <param name="address">The target static IPv4 or IPv6 address.</param>
            <param name="action">The default action to perform if the rule is matched.</param>
        </member>
        <member name="F:Spike.Security.FirewallAddressRule.Address">
            <summary>
            The static IP Address of this rule.
            </summary>
        </member>
        <member name="M:Spike.Security.FirewallAddressRule.Validate(System.Net.IPAddress)">
            <summary>
            Validates the firewall rule and tells the firewall what action should be performed.
            </summary>
            <param name="address">The address to validate.</param>
            <returns>The firewall action that should be taken.</returns>
        </member>
        <member name="M:Spike.Security.FirewallAddressRule.ToString">
            <summary>
            Converts the rule to the serializable string form.
            </summary>
            <returns>The pattern to represent this rule.</returns>
        </member>
        <member name="M:Spike.Security.FirewallAddressRule.Equals(System.Object)">
            <summary>
            Determines whether this rule equals the target rule.
            </summary>
            <param name="obj">The target rule to check.</param>
            <returns>True if this rule is equals to the target rule; false otherwise.</returns>
        </member>
        <member name="M:Spike.Security.FirewallAddressRule.GetHashCode">
            <summary>
            Returns a hash value for this rule.
            </summary>
            <returns>The hash value of this rule.</returns>
        </member>
        <member name="P:Spike.Security.FirewallAddressRule.Name">
            <summary>
            Gets or sets a user friendly name of the <see cref="T:Spike.Security.IFirewallRule"/>.
            </summary>
        </member>
        <member name="P:Spike.Security.FirewallAddressRule.Action">
            <summary>
            Gets or sets the action that the firewall should take by default if the rule is valid.
            </summary>
        </member>
        <member name="T:Spike.Security.FirewallAction">
            <summary>
            Represents a firewall action that should be taken when a rule is valid.
            </summary>
        </member>
        <member name="F:Spike.Security.FirewallAction.Ignore">
            <summary>
            The firewall should ignore the rule and take no action.
            </summary>
        </member>
        <member name="F:Spike.Security.FirewallAction.Allow">
            <summary>
            The firewall should allow the remote end point to connect.
            </summary>
        </member>
        <member name="F:Spike.Security.FirewallAction.Block">
            <summary>
            The firewall should disallow the remote end point from connecting.
            </summary>
        </member>
        <member name="T:Spike.Security.SecurityUser">
            <summary>
            Represents a basic user in the security model.
            </summary>
        </member>
        <member name="M:Spike.Security.SecurityUser.#ctor">
            <summary>
            Constructs an instance of <see cref="T:Spike.Security.SecurityUser"/> class.
            </summary>
        </member>
        <member name="P:Spike.Security.SecurityUser.UserName">
            <summary>
            Gets the logon name of the account
            </summary>
        </member>
        <member name="P:Spike.Security.SecurityUser.Password">
            <summary>
            Gets the digest of the password
            </summary>
        </member>
        <member name="P:Spike.Security.SecurityUser.Roles">
            <summary>
            Gets the list of roles associated with this user
            </summary>
        </member>
        <member name="T:Spike.Security.SecurityUserCollection">
            <summary>
            Contains a collection of <see cref="T:Spike.Security.SecurityUser"/>
            </summary>
        </member>
        <member name="F:Spike.Security.SecurityUserCollection.Lock">
            <summary>
            Read/Write lock on the file
            </summary>
        </member>
        <member name="M:Spike.Security.SecurityUserCollection.#ctor">
            <summary>
            Constructs a new instance of the <see cref="T:Spike.Security.SecurityUserCollection"/> class.
            </summary>
        </member>
        <member name="M:Spike.Security.SecurityUserCollection.#ctor(System.Collections.Generic.IList{Spike.Security.SecurityUser})">
            <summary>
            Constructs a new instance of the <see cref="T:Spike.Security.SecurityUserCollection"/> class.
            </summary>
        </member>
        <member name="M:Spike.Security.SecurityUserCollection.Load(System.String)">
            <summary>
            Loads the specified file name.
            </summary>
            <param name="fileName">Name of the file.</param>
            <returns></returns>
        </member>
        <member name="M:Spike.Security.SecurityUserCollection.Save(System.String)">
            <summary>
            Saves the specified file name.
            </summary>
            <param name="fileName">Name of the file.</param>
        </member>
        <member name="M:Spike.Security.SecurityUserCollection.FindByUserName(System.String)">
            <summary>
            Finds the name of the by user.
            </summary>
            <param name="userName">Name of the user.</param>
            <returns></returns>
        </member>
        <member name="T:Spike.Collections.ConcurrentPool`1">
            <summary>
            This class represents a strongly-typed generic, concurrrent object pool.
            </summary>
            <typeparam name="T">The type of the items to manage in the pool.</typeparam>
        </member>
        <member name="T:Spike.Collections.IRecycler`1">
            <summary>
            Defines a contract for an object pool.
            </summary>
        </member>
        <member name="T:Spike.Collections.IRecycler">
            <summary>
            Defines a contract for an object pool.
            </summary>
        </member>
        <member name="M:Spike.Collections.IRecycler.Acquire">
            <summary>
            Acquires an instance of a recyclable object
            </summary>
            <returns></returns>
        </member>
        <member name="M:Spike.Collections.IRecycler.Release(Spike.IRecyclable)">
            <summary>
            Releases an instance of a recyclable object back to the pool.
            </summary>
            <param name="instance">The instance of IRecyclable to release.</param>
        </member>
        <member name="P:Spike.Collections.IRecycler.Count">
            <summary>
            Gets the overall number of elements managed by this pool.
            </summary>
        </member>
        <member name="P:Spike.Collections.IRecycler.AvailableCount">
            <summary>
            Gets the number of available elements currently contained in the pool.
            </summary>
        </member>
        <member name="P:Spike.Collections.IRecycler.InUseCount">
            <summary>
            Gets the number of elements currently in use and not available in this pool.
            </summary>
        </member>
        <member name="M:Spike.Collections.IRecycler`1.Acquire">
            <summary>
            Acquires an instance of a recyclable object
            </summary>
            <returns></returns>
        </member>
        <member name="M:Spike.Collections.IRecycler`1.Release(`0)">
            <summary>
            Releases an instance of a recyclable object back to the pool.
            </summary>
            <param name="instance">The instance of IRecyclable to release.</param>
        </member>
        <member name="M:Spike.Collections.ConcurrentPool`1.#ctor(System.String)">
            <summary>
            Constructs a ConcurrentPool object.
            </summary>
            <param name="name">The name for the <see cref="T:Spike.Collections.ConcurrentPool`1"/> instance.</param>
        </member>
        <member name="M:Spike.Collections.ConcurrentPool`1.#ctor(System.String,Spike.Collections.ConcurrentPool{`0}.CreateInstanceDelegate)">
            <summary>
            Constructs a ConcurrentPool object.
            </summary>
            <param name="name">The name for the ConcurrentPool instance.</param>
            <param name="constructor">The <see cref="T:Spike.Collections.ConcurrentPool`1.CreateInstanceDelegate"/> delegate that is used to construct the <see cref="T:Spike.IRecyclable"/> instance.</param>
        </member>
        <member name="M:Spike.Collections.ConcurrentPool`1.#ctor(System.String,System.Int32)">
            <summary>
            Constructs a ConcurrentPool object.
            </summary>
            <param name="name">The name for the ConcurrentPool instance.</param>
            <param name="initialCapacity">Initial pool capacity.</param>
        </member>
        <member name="M:Spike.Collections.ConcurrentPool`1.#ctor(System.String,Spike.Collections.ConcurrentPool{`0}.CreateInstanceDelegate,System.Int32)">
            <summary>
            Constructs a ConcurrentPool object.
            </summary>
            <param name="name">The name for the ConcurrentPool instance.</param>
            <param name="constructor">The <see cref="T:Spike.Collections.ConcurrentPool`1.CreateInstanceDelegate"/> delegate that is used to construct the <see cref="T:Spike.IRecyclable"/> instance.</param>
            <param name="initialCapacity">Initial pool capacity.</param>
        </member>
        <member name="M:Spike.Collections.ConcurrentPool`1.CreateInstance">
            <summary>
            Allocates a new instance of T.
            </summary>
            <returns>Allocated instance of T.</returns>
        </member>
        <member name="M:Spike.Collections.ConcurrentPool`1.Acquire">
            <summary>
            Acquires an instance of a recyclable object.
            </summary>
            <returns>The acquired instance.</returns>
        </member>
        <member name="M:Spike.Collections.ConcurrentPool`1.Release(`0)">
            <summary>
            Releases an instance of a recyclable object back to the pool.
            </summary>
            <param name="instance">The instance of IRecyclable to release.</param>
        </member>
        <member name="M:Spike.Collections.ConcurrentPool`1.Spike#Collections#IRecycler#Acquire">
            <summary>
            Acquires an instance of a recyclable object.
            </summary>
            <returns>The acquired instance.</returns>
        </member>
        <member name="M:Spike.Collections.ConcurrentPool`1.Spike#Collections#IRecycler#Release(Spike.IRecyclable)">
            <summary>
            Releases an instance of a recyclable object back to the pool.
            </summary>
            <param name="instance">The instance of IRecyclable to release.</param>
        </member>
        <member name="M:Spike.Collections.ConcurrentPool`1.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or
            resetting unmanaged resources.
            </summary>
        </member>
        <member name="M:Spike.Collections.ConcurrentPool`1.Dispose(System.Boolean)">
            <summary>
            Releases the unmanaged resources used by the ByteSTream class and optionally releases the managed resources.
            </summary>
            <param name="disposing"> 
            If set to true, release both managed and unmanaged resources, othewise release only unmanaged resources.
            </param>
        </member>
        <member name="M:Spike.Collections.ConcurrentPool`1.Finalize">
            <summary>
            Finalizes this concurrent pool
            </summary>
        </member>
        <member name="M:Spike.Collections.ConcurrentPool`1.ToString">
            <summary>
            Constructs a user-friendly diagnostics string for this pool.
            </summary>
            <returns>The diagnostincs string.</returns>
        </member>
        <member name="P:Spike.Collections.ConcurrentPool`1.Count">
            <summary>
            Gets the overall number of elements managed by this pool.
            </summary>
        </member>
        <member name="P:Spike.Collections.ConcurrentPool`1.AvailableCount">
            <summary>
            Gets the number of available elements currently contained in the pool.
            </summary>
        </member>
        <member name="P:Spike.Collections.ConcurrentPool`1.InUseCount">
            <summary>
            Gets the number of elements currently in use and not available in this pool.
            </summary>
        </member>
        <member name="P:Spike.Collections.ConcurrentPool`1.IsEmpty">
            <summary>
            Gets a value that indicates whether the available pool is empty.
            </summary>
        </member>
        <member name="T:Spike.Collections.ConcurrentPool`1.CreateInstanceDelegate">
            <summary>
            Creates an instance of T for the given recycler.
            </summary>
            <param name="recycler">The recycler that creates the instance.</param>
            <returns>The instance of T.</returns>
        </member>
        <member name="F:Spike.Diagnostics.ClassRestrictionType.None">
            <summary>
            No condition specified
            </summary>
        </member>
        <member name="F:Spike.Diagnostics.ClassRestrictionType.NoStateAllowed">
            <summary>
            No state allowed in this class
            </summary>
        </member>
        <member name="M:Spike.Diagnostics.ClassRestrictionAttribute.#ctor(Spike.Diagnostics.ClassRestrictionType)">
            <summary>
            Creates class implementation condition attribute
            </summary>
            <param name="type">The type of the condition to apply</param>
        </member>
        <member name="T:Spike.Network.NetTrace">
            <summary>
            Provides a set of methods and properties that help you trace the execution 
            of your networking code. This class cannot be inherited. This class is configured
            via <see cref="T:System.Diagnostics.Trace"/> class static properties.
            </summary>
        </member>
        <member name="M:Spike.Network.NetTrace.Assert(System.Boolean)">
            <summary>
            Checks for a condition; if the condition is false, displays a message box
            that shows the call stack.
            </summary>
            <param name="condition">The conditional expression to evaluate. If the condition is true, a failure
            message is not sent and the message box is not displayed.</param>
        </member>
        <member name="M:Spike.Network.NetTrace.Assert(System.Boolean,System.String)">
            <summary>
            Checks for a condition; if the condition is false, displays a message box
            that shows the call stack.
            </summary>
            <param name="condition">The conditional expression to evaluate. If the condition is true, a failure
            message is not sent and the message box is not displayed.</param>
            <param name="message">The message to send to the System.Diagnostics.Trace.Listeners collection.</param>
        </member>
        <member name="M:Spike.Network.NetTrace.Assert(System.Boolean,System.String,System.String)">
            <summary>
            Checks for a condition; if the condition is false, displays a message box
            that shows the call stack.
            </summary>
            <param name="condition">The conditional expression to evaluate. If the condition is true, a failure
            message is not sent and the message box is not displayed.</param>
            <param name="message">The message to send to the System.Diagnostics.Trace.Listeners collection.</param>
            <param name="detailMessage">The detailed message to send to the System.Diagnostics.Trace.Listeners collection.</param>
        </member>
        <member name="M:Spike.Network.NetTrace.Close">
            <summary>
            Flushes the output buffer, and then closes the System.Diagnostics.Trace.Listeners.
            </summary>
        </member>
        <member name="M:Spike.Network.NetTrace.Fail(System.String)">
            <summary>
            Emits the specified error message.
            </summary>
            <param name="message">A message to emit.</param>
        </member>
        <member name="M:Spike.Network.NetTrace.Fail(System.String,System.String)">
            <summary>
            Emits the specified error message.
            </summary>
            <param name="message">A message to emit.</param>
            <param name="detailMessage">A detailed message to emit.</param>
        </member>
        <member name="M:Spike.Network.NetTrace.Flush">
            <summary>
            Flushes the output buffer, and causes buffered data to be written to the
            System.Diagnostics.Trace.Listeners.
            </summary>
        </member>
        <member name="M:Spike.Network.NetTrace.Indent">
            <summary>
            Increases the current System.Diagnostics.Trace.IndentLevel by one.
            </summary>
        </member>
        <member name="M:Spike.Network.NetTrace.Refresh">
            <summary>
            Refreshes the trace configuration data.
            </summary>
        </member>
        <member name="M:Spike.Network.NetTrace.TraceError(System.String)">
            <summary>
            Writes an error message to the trace listeners in the System.Diagnostics.Trace.Listeners
            collection using the specified array of objects and formatting information.
            </summary>
            <param name="message">The error message to write.</param>
        </member>
        <member name="M:Spike.Network.NetTrace.TraceError(System.String,System.Object[])">
            <summary>
            Writes an error message to the trace listeners in the System.Diagnostics.Trace.Listeners
            collection using the specified array of objects and formatting information.
            </summary>
            <param name="format">A format string that contains zero or more format items, which correspond
            to objects in the args array.</param>
            <param name="args">An object array containing zero or more objects to format.</param>
        </member>
        <member name="M:Spike.Network.NetTrace.TraceInformation(System.String)">
            <summary>
            Writes an informational message to the trace listeners in the System.Diagnostics.Trace.Listeners
            collection using the specified array of objects and formatting information.
            </summary>
            <param name="message">The informative message to write.</param>
        </member>
        <member name="M:Spike.Network.NetTrace.TraceInformation(System.String,System.Object[])">
             <summary>
             Writes an informational message to the trace listeners in the System.Diagnostics.Trace.Listeners
             collection using the specified array of objects and formatting information.
             </summary>
             <param name="format">A format string that contains zero or more format items, which correspond
             to objects in the args array.
            </param>
             <param name="args">An object array containing zero or more objects to format.</param>
        </member>
        <member name="M:Spike.Network.NetTrace.TraceWarning(System.String)">
            <summary>
            Writes a warning message to the trace listeners in the System.Diagnostics.Trace.Listeners
            collection using the specified array of objects and formatting information.
            </summary>
            <param name="message">The warning message to write.</param>
        </member>
        <member name="M:Spike.Network.NetTrace.TraceWarning(System.String,System.Object[])">
             <summary>
             Writes a warning message to the trace listeners in the System.Diagnostics.Trace.Listeners
             collection using the specified array of objects and formatting information.
             </summary>
             <param name="format">A format string that contains zero or more format items, which correspond
             to objects in the args array.
            </param>
             <param name="args">An object array containing zero or more objects to format.</param>
        </member>
        <member name="M:Spike.Network.NetTrace.Unindent">
            <summary>
             Decreases the current System.Diagnostics.Trace.IndentLevel by one.
            </summary>
        </member>
        <member name="M:Spike.Network.NetTrace.Write(System.Object)">
            <summary>
            Writes the value of the object's System.Object.ToString() method to the trace
            listeners in the System.Diagnostics.Trace.Listeners collection.
            </summary>
            <param name="value">An System.Object whose name is sent to the System.Diagnostics.Trace.Listeners.</param>
        </member>
        <member name="M:Spike.Network.NetTrace.Write(System.String)">
            <summary>
            Writes a message to the trace listeners in the System.Diagnostics.Trace.Listeners
            collection.
            </summary>
            <param name="message">A message to write.</param>
        </member>
        <member name="M:Spike.Network.NetTrace.Write(System.Object,System.String)">
            <summary>
            Writes a category name and the value of the object's System.Object.ToString()
            method to the trace listeners in the System.Diagnostics.Trace.Listeners collection.
            </summary>
            <param name="value">An System.Object name is sent to the System.Diagnostics.Trace.Listeners.</param>
            <param name="category">A category name used to organize the output.</param>
        </member>
        <member name="M:Spike.Network.NetTrace.Write(System.String,System.String)">
            <summary>
            Writes a category name and a message to the trace listeners in the System.Diagnostics.Trace.Listeners
            collection.
            </summary>
            <param name="message">A message to write.</param>
            <param name="category">A category name used to organize the output.</param>
        </member>
        <member name="M:Spike.Network.NetTrace.Write(System.Object,Spike.Network.NetTraceCategory)">
            <summary>
            Writes a category name and the value of the object's System.Object.ToString()
            method to the trace listeners in the System.Diagnostics.Trace.Listeners collection.
            </summary>
            <param name="value">An System.Object name is sent to the System.Diagnostics.Trace.Listeners.</param>
            <param name="category">A category name used to organize the output.</param>
        </member>
        <member name="M:Spike.Network.NetTrace.Write(System.String,Spike.Network.NetTraceCategory)">
            <summary>
            Writes a category name and a message to the trace listeners in the System.Diagnostics.Trace.Listeners
            collection.
            </summary>
            <param name="message">A message to write.</param>
            <param name="category">A category name used to organize the output.</param>
        </member>
        <member name="M:Spike.Network.NetTrace.WriteIf(System.Boolean,System.Object)">
            <summary>
            Writes the value of the object's System.Object.ToString() method to the trace
            listeners in the System.Diagnostics.Trace.Listeners collection if a condition
            is true.
            </summary>
            <param name="condition">true to cause a message to be written; otherwise, false.</param>
            <param name="value">An System.Object whose name is sent to the System.Diagnostics.Trace.Listeners.</param>
        </member>
        <member name="M:Spike.Network.NetTrace.WriteIf(System.Boolean,System.String)">
            <summary>
            Writes a message to the trace listeners in the System.Diagnostics.Trace.Listeners
            collection if a condition is true.
            </summary>
            <param name="condition">true to cause a message to be written; otherwise, false.</param>
            <param name="message">A message to write.</param>
        </member>
        <member name="M:Spike.Network.NetTrace.WriteIf(System.Boolean,System.Object,System.String)">
            <summary>
            Writes a category name and the value of the object's System.Object.ToString()
            method to the trace listeners in the System.Diagnostics.Trace.Listeners collection
            if a condition is true.
            </summary>
            <param name="condition">true to cause a message to be written; otherwise, false.</param>
            <param name="value">An System.Object whose name is sent to the System.Diagnostics.Trace.Listeners.</param>
            <param name="category">A category name used to organize the output.</param>
        </member>
        <member name="M:Spike.Network.NetTrace.WriteIf(System.Boolean,System.String,System.String)">
            <summary>
            Writes a category name and message to the trace listeners in the System.Diagnostics.Trace.Listeners
            collection if a condition is true.
            </summary>
            <param name="condition">true to cause a message to be written; otherwise, false.</param>
            <param name="message">A message to write.</param>
            <param name="category">A category name used to organize the output.</param>
        </member>
        <member name="M:Spike.Network.NetTrace.WriteIf(System.Boolean,System.Object,Spike.Network.NetTraceCategory)">
            <summary>
            Writes a category name and the value of the object's System.Object.ToString()
            method to the trace listeners in the System.Diagnostics.Trace.Listeners collection
            if a condition is true.
            </summary>
            <param name="condition">true to cause a message to be written; otherwise, false.</param>
            <param name="value">An System.Object whose name is sent to the System.Diagnostics.Trace.Listeners.</param>
            <param name="category">A category name used to organize the output.</param>
        </member>
        <member name="M:Spike.Network.NetTrace.WriteIf(System.Boolean,System.String,Spike.Network.NetTraceCategory)">
            <summary>
            Writes a category name and message to the trace listeners in the System.Diagnostics.Trace.Listeners
            collection if a condition is true.
            </summary>
            <param name="condition">true to cause a message to be written; otherwise, false.</param>
            <param name="message">A message to write.</param>
            <param name="category">A category name used to organize the output.</param>
        </member>
        <member name="M:Spike.Network.NetTrace.WriteLine(System.Object)">
            <summary>
            Writes the value of the object's System.Object.ToString() method to the trace
            listeners in the System.Diagnostics.Trace.Listeners collection.
            </summary>
            <param name="value">An System.Object whose name is sent to the System.Diagnostics.Trace.Listeners.</param>
        </member>
        <member name="M:Spike.Network.NetTrace.WriteLine(System.String)">
            <summary>
            Writes a message to the trace listeners in the System.Diagnostics.Trace.Listeners
            collection.
            </summary>
            <param name="message">A message to write.</param>
        </member>
        <member name="M:Spike.Network.NetTrace.WriteLine(System.Object,System.String)">
            <summary>
            Writes a category name and the value of the object's System.Object.ToString()
            method to the trace listeners in the System.Diagnostics.Trace.Listeners collection.
            </summary>
            <param name="value">An System.Object name is sent to the System.Diagnostics.Trace.Listeners.</param>
            <param name="category">A category name used to organize the output.</param>
        </member>
        <member name="M:Spike.Network.NetTrace.WriteLine(System.String,System.String)">
            <summary>
            Writes a category name and a message to the trace listeners in the System.Diagnostics.Trace.Listeners
            collection.
            </summary>
            <param name="message">A message to write.</param>
            <param name="category">A category name used to organize the output.</param>
        </member>
        <member name="M:Spike.Network.NetTrace.WriteLine(System.Object,Spike.Network.NetTraceCategory)">
            <summary>
            Writes a category name and the value of the object's System.Object.ToString()
            method to the trace listeners in the System.Diagnostics.Trace.Listeners collection.
            </summary>
            <param name="value">An System.Object name is sent to the System.Diagnostics.Trace.Listeners.</param>
            <param name="category">A category name used to organize the output.</param>
        </member>
        <member name="M:Spike.Network.NetTrace.WriteLine(System.String,Spike.Network.NetTraceCategory)">
            <summary>
            Writes a category name and a message to the trace listeners in the System.Diagnostics.Trace.Listeners
            collection.
            </summary>
            <param name="message">A message to write.</param>
            <param name="category">A category name used to organize the output.</param>
        </member>
        <member name="M:Spike.Network.NetTrace.WriteLineIf(System.Boolean,System.Object)">
            <summary>
            Writes the value of the object's System.Object.ToString() method to the trace
            listeners in the System.Diagnostics.Trace.Listeners collection if a condition
            is true.
            </summary>
            <param name="condition">true to cause a message to be written; otherwise, false.</param>
            <param name="value">An System.Object whose name is sent to the System.Diagnostics.Trace.Listeners.</param>
        </member>
        <member name="M:Spike.Network.NetTrace.WriteLineIf(System.Boolean,System.String)">
            <summary>
            Writes a message to the trace listeners in the System.Diagnostics.Trace.Listeners
            collection if a condition is true.
            </summary>
            <param name="condition">true to cause a message to be written; otherwise, false.</param>
            <param name="message">A message to write.</param>
        </member>
        <member name="M:Spike.Network.NetTrace.WriteLineIf(System.Boolean,System.Object,System.String)">
            <summary>
            Writes a category name and the value of the object's System.Object.ToString()
            method to the trace listeners in the System.Diagnostics.Trace.Listeners collection
            if a condition is true.
            </summary>
            <param name="condition">true to cause a message to be written; otherwise, false.</param>
            <param name="value">An System.Object whose name is sent to the System.Diagnostics.Trace.Listeners.</param>
            <param name="category">A category name used to organize the output.</param>
        </member>
        <member name="M:Spike.Network.NetTrace.WriteLineIf(System.Boolean,System.String,System.String)">
            <summary>
            Writes a category name and message to the trace listeners in the System.Diagnostics.Trace.Listeners
            collection if a condition is true.
            </summary>
            <param name="condition">true to cause a message to be written; otherwise, false.</param>
            <param name="message">A message to write.</param>
            <param name="category">A category name used to organize the output.</param>
        </member>
        <member name="M:Spike.Network.NetTrace.WriteLineIf(System.Boolean,System.Object,Spike.Network.NetTraceCategory)">
            <summary>
            Writes a category name and the value of the object's System.Object.ToString()
            method to the trace listeners in the System.Diagnostics.Trace.Listeners collection
            if a condition is true.
            </summary>
            <param name="condition">true to cause a message to be written; otherwise, false.</param>
            <param name="value">An System.Object whose name is sent to the System.Diagnostics.Trace.Listeners.</param>
            <param name="category">A category name used to organize the output.</param>
        </member>
        <member name="M:Spike.Network.NetTrace.WriteLineIf(System.Boolean,System.String,Spike.Network.NetTraceCategory)">
            <summary>
            Writes a category name and message to the trace listeners in the System.Diagnostics.Trace.Listeners
            collection if a condition is true.
            </summary>
            <param name="condition">true to cause a message to be written; otherwise, false.</param>
            <param name="message">A message to write.</param>
            <param name="category">A category name used to organize the output.</param>
        </member>
        <member name="M:Spike.Network.NetTrace.GetCategoryName(Spike.Network.NetTraceCategory)">
            <summary>
            Gets the category string to print in the message.
            </summary>
        </member>
        <member name="M:Spike.Network.NetTrace.ValidateCategory(Spike.Network.NetTraceCategory)">
            <summary>
            Gets whether the specified category is enabled or not
            </summary>
        </member>
        <member name="P:Spike.Network.NetTrace.Listeners">
            <summary>
            Gets the collection of listeners that is monitoring the trace output. 
            This is a shortcut to <see cref="P:System.Diagnostics.Trace.Listeners"/> property.
            </summary>
        </member>
        <member name="P:Spike.Network.NetTrace.Enabled">
            <summary>
            Gets or sets whether spike network tracing is enabled or not.
            </summary>
        </member>
        <member name="P:Spike.Network.NetTrace.TraceSpike">
            <summary>
            Gets or sets whether Spike Tracer should be enabled or not.
            </summary>
        </member>
        <member name="P:Spike.Network.NetTrace.TraceHttp">
            <summary>
            Gets or sets whether HTTP Tracer should be enabled or not.
            </summary>
        </member>
        <member name="P:Spike.Network.NetTrace.TraceComet">
            <summary>
            Gets or sets whether COMET Tracer should be enabled or not.
            </summary>
        </member>
        <member name="P:Spike.Network.NetTrace.TraceRay">
            <summary>
            Gets or sets whether Spike Ray (HTTP Tunnel) Tracer should be enabled or not.
            </summary>
        </member>
        <member name="P:Spike.Network.NetTrace.TraceWebSocket">
            <summary>
            Gets or sets whether web sockets tracer should be enabled or not.
            </summary>
        </member>
        <member name="T:Spike.Network.NetTraceCategory">
            <summary>
            The enumeration for predefined internal spike net trace categories.
            </summary>
        </member>
        <member name="F:Spike.Network.NetTraceCategory.Spike">
            <summary>
            Spike message protocol tracer category
            </summary>
        </member>
        <member name="F:Spike.Network.NetTraceCategory.Http">
            <summary>
            HTTP tracer category
            </summary>
        </member>
        <member name="F:Spike.Network.NetTraceCategory.Comet">
            <summary>
            Spike Comet tracer category
            </summary>
        </member>
        <member name="F:Spike.Network.NetTraceCategory.Ray">
            <summary>
            Spike Ray (HTTP-Tunnel) protocol tracer category
            </summary>
        </member>
        <member name="F:Spike.Network.NetTraceCategory.WebSocket">
            <summary>
            HTTP WebSocket protocols tracer category
            </summary>
        </member>
        <member name="T:Spike.InvokeAtType">
            <summary>
            Enumeration that defines a state during which the target annotated method should be invoked.
            </summary>
        </member>
        <member name="F:Spike.InvokeAtType.Configure">
            <summary>
            Specifies that the target method should be invoked during the server configuration state.
            </summary>
        </member>
        <member name="F:Spike.InvokeAtType.Initialize">
            <summary>
            Specifies that the target method should be invoked during the server initialization state.
            </summary>
        </member>
        <member name="F:Spike.InvokeAtType.Terminate">
            <summary>
            Specifies that the target method should be invoked during the server termination state.
            </summary>
        </member>
        <member name="T:Spike.InvokeAtAttribute">
            <summary>
            Attribute that allows a target method to be annotated for automatic invoke.
            </summary>
        </member>
        <member name="M:Spike.InvokeAtAttribute.#ctor(Spike.InvokeAtType)">
            <summary>
            Attribute that allows a target method to be annotated for automatic invoke.
            </summary>
            <param name="type">Specifies a state during which the target annotated method should be invoked.</param>
        </member>
        <member name="M:Spike.InvokeAtAttribute.#ctor(Spike.InvokeAtType,System.Int32)">
            <summary>
            Attribute that allows a target method to be annotated for automatic invoke.
            </summary>
            <param name="type">Specifies a state during which the target annotated method should be invoked.</param>
            <param name="priority">Specifies the priority with which this method should be invoked.</param>
        </member>
        <member name="P:Spike.InvokeAtAttribute.Priority">
            <summary>
            Gets or sets the priority of the function to invoke
            </summary>
        </member>
        <member name="P:Spike.InvokeAtAttribute.Type">
            <summary>
            Gets or sets when the function should be invoked
            </summary>
        </member>
        <member name="T:Spike.InvokePriorityComparer">
            <summary>
            Performs priority comparison of the Invoke.
            </summary>
        </member>
        <member name="T:Spike.Network.ClientRegistry">
            <summary>
            Defines a class that maintains a registry of all currently connected clients
            </summary>
        </member>
        <member name="T:Spike.Collections.ConcurrentList`1">
            <summary>
            Represents a strongly typed list of objects that can be accessed by index.
            Provides methods to search, sort, and manipulate lists.
            
            Thread-safe and can be accessed by multiple threads on read.
            </summary>
            <typeparam name="T">The type of elements in the list.</typeparam>
        </member>
        <member name="M:Spike.Collections.ConcurrentList`1.#ctor">
            <summary>
            Initializes a new instance of the ConcurrentList&lt;T&gt; class that is empty and has the default initial capacity.
            </summary>
        </member>
        <member name="M:Spike.Collections.ConcurrentList`1.#ctor(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Initializes a new instance of the ConcurrentList&lt;T&gt; class that contains elements copied from the specified 
            collection and has sufficient capacity to accommodate the number of elements copied.
            <param name="collection">The collection whose elements are copied to the new list.</param>
            </summary>
        </member>
        <member name="M:Spike.Collections.ConcurrentList`1.#ctor(System.Int32)">
            <summary>
            I Initializes a new instance of the ConcurrentList&lt;T&gt; class that is empty and has the specified
            initial capacity.
            <param name="capacity">The number of elements that the new list can initially store.</param>
            </summary>
        </member>
        <member name="M:Spike.Collections.ConcurrentList`1.Add(`0)">
            <summary>
            Adds an object to the end of the ConcurrentList&lt;T&gt;.
            </summary>
            <param name="item">The object to be added to the end of the ConcurrentList&lt;T&gt;.
            The value can be null for reference types.</param>
        </member>
        <member name="M:Spike.Collections.ConcurrentList`1.Clear">
            <summary>
            Removes all elements from the ConcurrentList&lt;T&gt;.
            </summary>
        </member>
        <member name="M:Spike.Collections.ConcurrentList`1.Contains(`0)">
            <summary>
            Determines whether an element is in the ConcurrentList&lt;T&gt;.
            </summary>
            <param name="item">The object to locate in the ConcurrentList&lt;T&gt;. The value
            can be null for reference types.</param>
            <returns>true if item is found in the ConcurrentList&lt;T&gt;; otherwise, false.</returns>
        </member>
        <member name="M:Spike.Collections.ConcurrentList`1.CopyTo(`0[])">
            <summary>
            Copies the entire ConcurrentList&lt;T&gt;> to a compatible one-dimensional
            array, starting at the beginning of the target array.
            </summary>
            <param name="array">The one-dimensional System.Array that is the destination of the elements
            copied from ConcurrentList&lt;T&gt;. The System.Array must have
            zero-based indexing.</param>
        </member>
        <member name="M:Spike.Collections.ConcurrentList`1.CopyTo(`0[],System.Int32)">
            <summary>
            Copies the entire ConcurrentList&lt;T&gt; to a compatible one-dimensional
            array, starting at the specified index of the target array.
            </summary>
            <param name="array">The one-dimensional System.Array that is the destination of the elements
            copied from ConcurrentList&lt;T&gt;. The System.Array must have
            zero-based indexing.</param>
            <param name="arrayIndex">The zero-based index in array at which copying begins.</param>
        </member>
        <member name="M:Spike.Collections.ConcurrentList`1.Remove(`0)">
            <summary>
            Removes the first occurrence of a specific object from the ConcurrentList&lt;T&gt;.
            </summary>
            <param name="item">The object to remove from the ConcurrentList&lt;T&gt;. The value
            can be null for reference types.</param>
            <returns>true if item is successfully removed; otherwise, false. This method also
            returns false if item was not found in the ConcurrentList&lt;T&gt;.</returns>
        </member>
        <member name="M:Spike.Collections.ConcurrentList`1.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the ConcurrentList&lt;T&gt;.
            </summary>
            <returns>A thread-safe enumerator.</returns>
        </member>
        <member name="M:Spike.Collections.ConcurrentList`1.IndexOf(`0)">
            <summary>
            Searches for the specified object and returns the zero-based index of the
            first occurrence within the entire ConcurrentList&lt;T&gt;.
            </summary>
            <param name="item">The object to locate in the ConcurrentList&lt;T&gt;. The value
            can be null for reference types.</param>
            <returns>The zero-based index of the first occurrence of item within the entire ConcurrentList&lt;T&gt;,
            if found; otherwise, –1.</returns>
        </member>
        <member name="M:Spike.Collections.ConcurrentList`1.Insert(System.Int32,`0)">
            <summary>
            Inserts an element into the ConcurrentList&lt;T&gt; at the specified index.
            </summary>
            <param name="index">The zero-based index at which item should be inserted.</param>
            <param name="item">The object to insert. The value can be null for reference types.</param>
        </member>
        <member name="M:Spike.Collections.ConcurrentList`1.RemoveAt(System.Int32)">
            <summary>
            Removes the element at the specified index of the ConcurrentList&lt;T&gt;.
            </summary>
            <param name="index">The zero-based index of the element to remove.</param>
        </member>
        <member name="M:Spike.Collections.ConcurrentList`1.AsReadOnly">
            <summary>
            Returns a read-only System.Collections.Generic.IList&lt;T&gt; wrapper for the current collection.
            </summary>
            <returns>A System.Collections.ObjectModel.ReadOnlyCollection&lt;T&gt; that acts as a read-only
             wrapper around the current ConcurrentList&lt;T&gt;.</returns>
        </member>
        <member name="M:Spike.Collections.ConcurrentList`1.Find(System.Predicate{`0})">
            <summary>
            Searches for an element that matches the conditions defined by the specified
            predicate, and returns the first occurrence within the entire list.
            </summary>
            <param name="match">
            The System.Predicate&lt;T&gt; delegate that defines the conditions of the element
            to search for.
            </param>
            <returns>
            The first element that matches the conditions defined by the specified predicate,
            if found; otherwise, the default value for type T.
            </returns>
        </member>
        <member name="M:Spike.Collections.ConcurrentList`1.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Returns an enumerator that iterates through a collection.
            </summary>
            <returns>An <see cref="T:System.Collections.IEnumerator"/> object that can be used to iterate through the collection.</returns>
        </member>
        <member name="M:Spike.Collections.ConcurrentList`1.System#Collections#IList#Add(System.Object)">
            <summary>
            Adds an item to the System.Collections.IList.
            </summary>
            <param name="value">The object to add to the System.Collections.IList.</param>
            <returns>The position into which the new element was inserted, or -1 to indicate that
            the item was not inserted into the collection.</returns>
        </member>
        <member name="M:Spike.Collections.ConcurrentList`1.System#Collections#IList#Contains(System.Object)">
            <summary>
            Determines whether an element is in the ConcurrentList&lt;T&gt;.
            </summary>
            <param name="value">The object to locate in the ConcurrentList&lt;T&gt;. The value
            can be null for reference types.</param>
            <returns>true if item is found in the ConcurrentList&lt;T&gt;; otherwise, false.</returns>
        </member>
        <member name="M:Spike.Collections.ConcurrentList`1.System#Collections#IList#IndexOf(System.Object)">
            <summary>
            Searches for the specified object and returns the zero-based index of the
            first occurrence within the entire ConcurrentList&lt;T&gt;.
            </summary>
            <param name="value">The object to locate in the ConcurrentList&lt;T&gt;. The value
            can be null for reference types.</param>
            <returns>The zero-based index of the first occurrence of item within the entire ConcurrentList&lt;T&gt;,
            if found; otherwise, –1.</returns>
        </member>
        <member name="M:Spike.Collections.ConcurrentList`1.System#Collections#IList#Insert(System.Int32,System.Object)">
            <summary>
            Inserts an element into the ConcurrentList&lt;T&gt; at the specified index.
            </summary>
            <param name="index">The zero-based index at which item should be inserted.</param>
            <param name="value">The object to insert. The value can be null for reference types.</param>
        </member>
        <member name="M:Spike.Collections.ConcurrentList`1.System#Collections#IList#Remove(System.Object)">
            <summary>
            Removes the first occurrence of a specific object from the ConcurrentList&lt;T&gt;.
            </summary>
            <param name="value">The object to remove from the ConcurrentList&lt;T&gt;. The value
            can be null for reference types.</param>
            <returns>true if item is successfully removed; otherwise, false. This method also
            returns false if item was not found in the ConcurrentList&lt;T&gt;.</returns>
        </member>
        <member name="P:Spike.Collections.ConcurrentList`1.Count">
            <summary>
            Gets the number of elements actually contained in the list.
            </summary>
        </member>
        <member name="P:Spike.Collections.ConcurrentList`1.Item(System.Int32)">
            <summary>
            Gets or sets the element at the specified index.
            </summary>
            <param name="index">The zero-based index of the element to get or set.</param>
            <returns>The element at the specified index.</returns>
        </member>
        <member name="P:Spike.Collections.ConcurrentList`1.System#Collections#IList#Item(System.Int32)">
            <summary>
            Gets or sets the element at the specified index.
            </summary>
            <param name="index">The zero-based index of the element to get or set.</param>
            <returns>The element at the specified index.</returns>
        </member>
        <member name="P:Spike.Collections.ConcurrentList`1.System#Collections#IList#IsReadOnly">
            <summary>
            Gets a value indicating whether the System.Collections.IList is read-only.
            </summary>
        </member>
        <member name="P:Spike.Collections.ConcurrentList`1.System#Collections#IList#IsFixedSize">
            <summary>
            Gets a value indicating whether the System.Collections.IList has a fixed size.
            </summary>
        </member>
        <member name="T:Spike.Collections.ConcurrentList`1.ConcurrentEnumerator">
            <summary>
            A thread-safe IEnumerator implementation.
            </summary>
        </member>
        <member name="M:Spike.Collections.ConcurrentList`1.ConcurrentEnumerator.Dispose">
            <summary>
            Disposes the enumerator
            </summary>
        </member>
        <member name="M:Spike.Collections.ConcurrentList`1.ConcurrentEnumerator.MoveNext">
            <summary>
            Advances the enumerator to the next element of the collection.
            </summary>
            <returns>true if the enumerator was successfully advanced to the next element; false
            if the enumerator has passed the end of the collection.</returns>
        </member>
        <member name="M:Spike.Collections.ConcurrentList`1.ConcurrentEnumerator.Reset">
            <summary>
            Sets the enumerator to its initial position, which is before the first element
            in the collection.
            </summary>
        </member>
        <member name="P:Spike.Collections.ConcurrentList`1.ConcurrentEnumerator.Current">
            <summary>
            Gets the element in the collection at the current position of the enumerator.
            </summary>
        </member>
        <member name="P:Spike.Collections.ConcurrentList`1.ConcurrentEnumerator.System#Collections#IEnumerator#Current">
            <summary>
            Gets the element in the collection at the current position of the enumerator.
            </summary>
        </member>
        <member name="F:Spike.Network.ClientRegistry.QueueTimer">
            <summary>
            A timer used to process the queue.
            </summary>
        </member>
        <member name="M:Spike.Network.ClientRegistry.#ctor">
            <summary>
            Constructs a new instance of <see cref="T:Spike.Network.ClientRegistry"/> class. As there can be only one instance, it can be accessed from <see cref="T:Spike.Service"/> class.
            </summary>
        </member>
        <member name="M:Spike.Network.ClientRegistry.OnClientConnect(Spike.ClientConnectEventArgs)">
            <summary>
            Invoked when a client is connected.
            </summary>
        </member>
        <member name="M:Spike.Network.ClientRegistry.OnClientDisconnect(Spike.ClientDisconnectEventArgs)">
            <summary>
            Invoked when a client is disconnected.
            </summary>
        </member>
        <member name="M:Spike.Network.ClientRegistry.Enqueue(System.Action)">
            <summary>
            Enqueues an action to the action queue.
            </summary>
        </member>
        <member name="M:Spike.Network.ClientRegistry.OnProcessQueue">
            <summary>
            Invoked when the add/remove queue should be processed.
            </summary>
        </member>
        <member name="M:Spike.Network.ClientRegistry.Dispose(System.Boolean)">
            <summary>
            Releases the unmanaged resources used by the ByteSTream class and optionally releases the managed resources.
            </summary>
            <param name="disposing"> If set to true, release both managed and unmanaged resources, othewise release only unmanaged resources. </param>
        </member>
        <member name="T:Spike.Network.Http.CometException">
            <summary>
            Defines a Comet exception
            </summary>
        </member>
        <member name="M:Spike.Network.Http.CometException.#ctor(System.String)">
            <summary>
            Constructs a new <see cref="T:Spike.Network.Http.CometException"/> instance.
            </summary>
            <param name="message">The message of the exception.</param>
        </member>
        <member name="T:Spike.Network.Http.CometHeart">
            <summary>
            Defines the class that issues comet heartbeats.
            </summary>
        </member>
        <member name="M:Spike.Network.Http.CometHeart.HookHeartbeat(Spike.IClient)">
            <summary>
            Hooks up heartbeat events
            </summary>
        </member>
        <member name="M:Spike.Network.Http.CometHeart.OnCometHeartbeat(Spike.IClient)">
            <summary>
            Invoked when a comet heartbeat should be issued.
            </summary>
            <param name="client">The target client.</param>
        </member>
        <member name="T:Spike.Network.Http.WebSocketFactory">
            <summary>
            WebSocket factory that constructs a protocol handler for a particular websocket protocol
            </summary>
        </member>
        <member name="M:Spike.Network.Http.WebSocketFactory.GetHandler(Spike.Network.Http.HttpRequest,System.Action{System.String},System.Action)">
            <summary>
            Builds a websocket handler for the incoming http request.
            </summary>
            <param name="request">There upgrade request that upgrades the connection to a websocket one.</param>
            <param name="onMessage">A delegate to be invoked on each incoming message.</param>
            <param name="onClose">A delecate to be invoked when a connection is closed.</param>
            <returns>The websocket protocol handler constructed.</returns>
        </member>
        <member name="M:Spike.Network.Http.WebSocketFactory.GetVersion(Spike.Network.Http.HttpRequest)">
            <summary>
            Attempts to detect the version of the websocket protocol
            </summary>
            <param name="request">Incoming HTTP Request</param>
            <returns>The version of the protocol to use</returns>
        </member>
        <member name="T:Spike.Network.Http.WebSocketHybi13Upgrade">
            <summary>
            Represents a handler for a websocket connection upgrade of hybi13 implementation.
            </summary>
        </member>
        <member name="M:Spike.Network.Http.WebSocketHybi13Upgrade.Upgrade(Spike.Network.ProcessingContext,Spike.Network.Http.HttpContext)">
            <summary>
            Upgrades the connection to the particular protocol. Handles the handshake.
            </summary>
            <param name="context"><see cref="T:Spike.Network.ProcessingContext"/> for the current connection.</param>
            <param name="httpContext"><see cref="T:Spike.Network.Http.HttpContext"/> for the current connection.</param>
        </member>
        <member name="T:Spike.Network.Http.WebSocketFrameType">
            <summary>
            Defines a type of a websocket frame
            </summary>
        </member>
        <member name="F:Spike.Network.Http.WebSocketFrameType.Continuation">
            <summary>
            Represents a websocket frame which is a continuation of a previous frame.
            </summary>
        </member>
        <member name="F:Spike.Network.Http.WebSocketFrameType.Text">
            <summary>
            Represents a websocket textual frame.
            </summary>
        </member>
        <member name="F:Spike.Network.Http.WebSocketFrameType.Binary">
            <summary>
            Represents a websocket binary frame.
            </summary>
        </member>
        <member name="F:Spike.Network.Http.WebSocketFrameType.Close">
            <summary>
            Represents a websocket frame which is used to close the connection.
            </summary>
        </member>
        <member name="F:Spike.Network.Http.WebSocketFrameType.Ping">
            <summary>
            Represents a websocket frame which is used to ping the remote end point.
            </summary>
        </member>
        <member name="F:Spike.Network.Http.WebSocketFrameType.Pong">
            <summary>
            Represents a websocket frame which is used to reply to the ping of the remote end point.
            </summary>
        </member>
        <member name="T:Spike.Network.Http.WebSocketException">
            <summary>
            Defines a web socket exception
            </summary>
        </member>
        <member name="M:Spike.Network.Http.WebSocketException.#ctor(System.String)">
            <summary>
            Constructs a new <see cref="T:Spike.Network.Http.WebSocketException"/> instance.
            </summary>
            <param name="message">The message of the error.</param>
        </member>
        <member name="T:Spike.Network.Direction">
            <summary>
            Defines a direction of the operation
            </summary>
        </member>
        <member name="F:Spike.Network.Direction.Pull">
            <summary>
            Client performs a request, server replies
            </summary>
        </member>
        <member name="F:Spike.Network.Direction.Push">
            <summary>
            Server informs a client about something
            </summary>
        </member>
        <member name="T:Spike.Network.CompressionTarget">
            <summary>
            Defines the target direction of the integrated compression.
            </summary>
        </member>
        <member name="F:Spike.Network.CompressionTarget.None">
            <summary>
            The operation will not be compressed.
            </summary>
        </member>
        <member name="F:Spike.Network.CompressionTarget.Both">
            <summary>
            The incoming and outgoing packets should be compressed. The client and server are compressing and decompressing.
            </summary>
        </member>
        <member name="F:Spike.Network.CompressionTarget.Incoming">
            <summary>
            Only the incoming packets should be compressed. The client compresses, server decompresses.
            </summary>
        </member>
        <member name="F:Spike.Network.CompressionTarget.Outgoing">
            <summary>
            Only the outgoing packets should be compressed. The server compresses, client decompresses.
            </summary>
        </member>
        <member name="M:Spike.Network.Http.CometExtensions.EncodeAsJSONP(System.String,System.String)">
            <summary>
            Encodes as JSONP String for socket.io
            </summary>
        </member>
        <member name="M:Spike.Network.Http.CometExtensions.SendXhrAcknowledge(Spike.Channel)">
            <summary>
            Sends the XHR acknowledge response to the client.
            </summary>
        </member>
        <member name="M:Spike.Network.Http.CometExtensions.SendHeartbeat(Spike.IClient)">
            <summary>
            Sends the heartbeat response to the client.
            </summary>
        </member>
        <member name="M:Spike.Network.Http.CometExtensions.SendConnectEvent(Spike.Channel,System.Boolean)">
            <summary>
            Send socket.io connect event.
            </summary>
        </member>
        <member name="T:Spike.Network.Http.RayHttpHeaders">
            <summary>
            Represents minimal Http headers used for Ray Http Tunneling.
            </summary>
        </member>
        <member name="T:Spike.Network.StringPacket">
            <summary>
            Defines a custom packet compiled with a StringBuilder.
            </summary>
        </member>
        <member name="M:Spike.Network.StringPacket.#ctor(System.Text.Encoding)">
            <summary>
            Constructs a new <see cref="T:Spike.Network.StringPacket"/> instance.
            </summary>
            <param name="encoding">The encoding used to write the string values.</param>
        </member>
        <member name="M:Spike.Network.StringPacket.#ctor(System.Text.Encoding,System.String)">
            <summary>
            Constructs a new <see cref="T:Spike.Network.StringPacket"/> instance.
            </summary>
            <param name="encoding">The encoding used to write the string values.</param>
            <param name="initialValue">Initial string value to write in this packet.</param>
        </member>
        <member name="M:Spike.Network.StringPacket.Recycle">
            <summary>
            Recycles (resets) the object to the original state.
            </summary>
        </member>
        <member name="P:Spike.Network.StringPacket.StringBuilder">
            <summary>
            Gets the string builder used to compile this packet.
            </summary>
        </member>
        <member name="P:Spike.Network.StringPacket.Encoding">
            <summary>
            Gets the encoding used to compile the packet.
            </summary>
        </member>
        <member name="M:Spike.Network.Http.RayHttpHeaders.Create(System.Int32)">
            <summary>
            Creates an instance of the http header packet.
            </summary>
        </member>
        <member name="M:Spike.Network.Http.RayHttpHeaders.#ctor">
            <summary>
            Constructs a new RayHttpHeaders object instance.
            </summary>
        </member>
        <member name="T:Spike.Network.ClientBase">
            <summary>
            Represents a client that is bound to a single connection.
            </summary>
        </member>
        <member name="T:Spike.IClient">
            <summary>
            Defines the contract that represents a remote client.
            </summary>
        </member>
        <member name="T:Spike.ICredentialsSupplier">
            <summary>
            Defines a contract that allows granting/revoking the network credentials.
            </summary>
        </member>
        <member name="M:Spike.ICredentialsSupplier.SupplyCredentials(System.Uri,System.String,System.Net.NetworkCredential)">
            <summary>
            Adds a System.Net.NetworkCredential instance to the credential supplier for
            use with protocols and associates it with a Uniform Resource
            Identifier (URI) prefix and authentication protocol.
            </summary>
            <param name="uriPrefix">
            A System.Uri that specifies the URI prefix of the resources that the credential
            grants access to.
            </param>
            <param name="authType">The authentication scheme used by the resource named in uriPrefix.</param>
            <param name="cred">The System.Net.NetworkCredential to add to the credential cache.</param>
        </member>
        <member name="M:Spike.ICredentialsSupplier.RevokeCredentials(System.Uri,System.String)">
            <summary>
            Deletes a System.Net.NetworkCredential instance from the supplier if it is associated
            with the specified Uniform Resource Identifier (URI) prefix and authentication
            protocol.
            </summary>
            <param name="uriPrefix">
            A System.Uri that specifies the URI prefix of the resources that the credential
            is used for.
            </param>
            <param name="authType">The authentication scheme used by the host named in uriPrefix.</param>
        </member>
        <member name="M:Spike.IClient.BindChannel(Spike.Channel)">
            <summary>
            Binds a channel to this <see cref="T:Spike.IClient"/> object instance.
            </summary>
            <param name="channel">The channel to bind to this client.</param>
        </member>
        <member name="M:Spike.IClient.UnbindChannel(Spike.Channel)">
            <summary>
            Unbinds a channel from this <see cref="T:Spike.IClient"/> object instance.
            </summary>
            <param name="channel">The channel to unbind from this client.</param>
        </member>
        <member name="M:Spike.IClient.Send(Spike.Network.Packet)">
            <summary>
            Sends the packet to the remote client end-point.
            </summary>
            <param name="packet">The packet to send to the remote end-point.</param>
        </member>
        <member name="M:Spike.IClient.ValidateCredentials(Spike.Channel,System.Net.NetworkCredential)">
            <summary>
            Validates the credentials provided by the specified channel.
            </summary>
            <param name="channel">The channel that provided the credentials.</param>
            <param name="credential">The credential to validate.</param>
            <returns>Whether the credentials are valid or not.</returns>
        </member>
        <member name="M:Spike.IClient.ValidateSecurity(Spike.Network.OperationInfo,Spike.Network.Packet)">
            <summary>
            Validates whether this <see cref="T:Spike.IClient"/> can call the specified operation.
            </summary>
            <param name="operation">The target operation that is requeted.</param>
            <param name="request">The incoming request packet.</param>
            <returns>Whether the operation is allowed to be called or not.</returns>
        </member>
        <member name="E:Spike.IClient.Connect">
            <summary>
            Event that is issued when a client has a first connected channel.
            </summary>
        </member>
        <member name="E:Spike.IClient.Disconnect">
            <summary>
            Event that is issued when a client was disconnected and about to be disposed.
            </summary>
        </member>
        <member name="P:Spike.IClient.Channel">
            <summary>
            Gets the currently active channel for this client. This channel can be used for
            sending outgoing messages only.
            </summary>
        </member>
        <member name="P:Spike.IClient.Route">
            <summary>
            Gets or sets the route for the current client. If not null, a client must get the 
            most current route before sending a new packet through this client instance.
            </summary>
        </member>
        <member name="P:Spike.IClient.IsVirtual">
            <summary>
            Gets or sets whether this <see cref="T:Spike.IClient"/> instance is virtual and should not be
            disposed when the last channel disconnects.
            </summary>
        </member>
        <member name="P:Spike.IClient.Item(System.String)">
            <summary>
            Gets the indexer for optional storage of various objects.
            </summary>
            <param name="name">The name of the object.</param>
        </member>
        <member name="T:Spike.IHeartbeatSupplier">
            <summary>
            Defines a contract that allows the target that implements the object issue and configure
            heartbeats. A heartbeat is a message sent between machines at a regular interval of the 
            order of seconds. If a heartbeat isn't received for a time -- usually a few heartbeat 
            intervals -- the machine that should have sent the heartbeat is assumed to have failed. 
            </summary>
        </member>
        <member name="P:Spike.IHeartbeatSupplier.HeartbeatInterval">
            <summary>
            Gets or sets the interval on which the heartbeat message should be sent.
            </summary>
        </member>
        <member name="P:Spike.IHeartbeatSupplier.HeartbeatReceived">
            <summary>
            Gets or sets the time when the client echoed back the heartbeat.
            </summary>
        </member>
        <member name="E:Spike.IHeartbeatSupplier.Heartbeat">
            <summary>
            Event that is issued when a heartbeat message should be sent.
            </summary>
        </member>
        <member name="M:Spike.Network.ClientBase.BindChannel(Spike.Channel)">
            <summary>
            Binds a channel to this <see cref="T:Spike.IClient"/> object instance.
            </summary>
            <param name="channel">The channel to bind to this client.</param>
        </member>
        <member name="M:Spike.Network.ClientBase.UnbindChannel(Spike.Channel)">
            <summary>
            Unbinds a channel from this <see cref="T:Spike.IClient"/> object instance.
            </summary>
            <param name="channel">The channel to unbind from this client.</param>
        </member>
        <member name="M:Spike.Network.ClientBase.ValidateCredentials(Spike.Channel,System.Net.NetworkCredential)">
            <summary>
            Validates the credentials provided by the specified channel.
            </summary>
            <param name="channel">The channel that provided the credentials.</param>
            <param name="credential">The credential to validate.</param>
            <returns>Whether the credentials are valid or not.</returns>
        </member>
        <member name="M:Spike.Network.ClientBase.ValidateSecurity(Spike.Network.OperationInfo,Spike.Network.Packet)">
            <summary>
            Validates whether this <see cref="T:Spike.IClient"/> can call the specified operation.
            </summary>
            <param name="operation">The target operation that is requeted.</param>
            <param name="request">The incoming request packet.</param>
            <returns>Whether the operation is allowed to be called or not.</returns>
        </member>
        <member name="M:Spike.Network.ClientBase.Send(Spike.Network.Packet)">
            <summary>
            Sends the packet to the remote client end-point.
            </summary>
            <param name="packet">The packet to send to the remote end-point.</param>
        </member>
        <member name="M:Spike.Network.ClientBase.SupplyCredentials(System.Uri,System.String,System.Net.NetworkCredential)">
            <summary>
            Adds a <see cref="T:System.Net.NetworkCredential"/> instance to the credential supplier for
            use with protocols and associates it with a Uniform Resource
            Identifier (URI) prefix and authentication protocol.
            </summary>
            <param name="uriPrefix">
            A System.Uri that specifies the URI prefix of the resources that the credential
            grants access to.
            </param>
            <param name="authType">The authentication scheme used by the resource named in uriPrefix.</param>
            <param name="cred">The System.Net.NetworkCredential to add to the credential cache.</param>
        </member>
        <member name="M:Spike.Network.ClientBase.RevokeCredentials(System.Uri,System.String)">
            <summary>
            Deletes a <see cref="T:System.Net.NetworkCredential"/> instance from the supplier if it is associated
            with the specified Uniform Resource Identifier (URI) prefix and authentication
            protocol.
            </summary>
            <param name="uriPrefix">
            A System.Uri that specifies the URI prefix of the resources that the credential
            is used for.
            </param>
            <param name="authType">The authentication scheme used by the host named in uriPrefix.</param>
        </member>
        <member name="M:Spike.Network.ClientBase.GetCredential(System.Uri,System.String)">
            <summary>
            Returns a <see cref="T:System.Net.NetworkCredential"/> object that is associated with the
            specified URI, and authentication type.
            </summary>
            <param name="uriPrefix">The System.Uri that the client is providing authentication for. Ignored by the default implementation.</param>
            <param name="authType">The type of authentication.</param>
            <returns>
            The System.Net.NetworkCredential that is associated with the specified URI
            and authentication type, or, if no credentials are available, null.
            </returns>
        </member>
        <member name="M:Spike.Network.ClientBase.OnHeartbeat">
            <summary>
            Invoked when a heartbeat should be issued. The base implementation of this method
            fires the Heartbeat event.
            </summary>
        </member>
        <member name="M:Spike.Network.ClientBase.Dispose(System.Boolean)">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or
            resetting unmanaged resources.
            </summary>
        </member>
        <member name="M:Spike.Network.ClientBase.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or
            resetting unmanaged resources.
            </summary>
        </member>
        <member name="M:Spike.Network.ClientBase.Finalize">
            <summary>
            Finalizer, cleans up the connection if Dispose was never called.
            </summary>
        </member>
        <member name="E:Spike.Network.ClientBase.Connect">
            <summary>
            Event that is issued when a client has a first connected channel.
            </summary>
        </member>
        <member name="E:Spike.Network.ClientBase.Disconnect">
            <summary>
            Event that is issued when a client was disconnected and about to be disposed.
            </summary>
        </member>
        <member name="P:Spike.Network.ClientBase.Route">
            <summary>
            Gets or sets the route for the current client. If not null, a client must get the 
            most current route before sending a new packet through this client instance.
            </summary>
        </member>
        <member name="P:Spike.Network.ClientBase.IsVirtual">
            <summary>
            Gets or sets whether this <see cref="T:Spike.IClient"/> instance is virtual and should not be
            disposed when the last channel disconnects.
            </summary>
        </member>
        <member name="P:Spike.Network.ClientBase.Item(System.String)">
            <summary>
            Gets the indexer for optional storage of various objects.
            </summary>
            <param name="name">The name of the object.</param>
        </member>
        <member name="P:Spike.Network.ClientBase.Channel">
            <summary>
            Gets the currently active channel for this client. This channel can be used for
            sending outgoing messages only.
            </summary>
        </member>
        <member name="P:Spike.Network.ClientBase.HeartbeatInterval">
            <summary>
            Gets or sets the interval on which the heartbeat message should be sent.
            </summary>
        </member>
        <member name="P:Spike.Network.ClientBase.HeartbeatReceived">
            <summary>
            Gets or sets the time when the client echoed back the heartbeat.
            </summary>
        </member>
        <member name="E:Spike.Network.ClientBase.Heartbeat">
            <summary>
            Event that is issued when a heartbeat message should be sent.
            </summary>
        </member>
        <member name="T:Spike.Network.ClientBindingException">
            <summary>
            Defines the exception that occured during <see cref="T:Spike.IClient"/> binding/unbinding.
            </summary>
        </member>
        <member name="M:Spike.Network.ClientBindingException.#ctor">
            <summary>
            Constructs <see cref="T:Spike.Network.ClientBindingException"/> object
            </summary>
        </member>
        <member name="M:Spike.Network.ClientBindingException.#ctor(System.String)">
            <summary>
            Constructs <see cref="T:Spike.Network.ClientBindingException"/> object
            </summary>
            <param name="message">The message of the exception</param>
        </member>
        <member name="M:Spike.Network.ClientBindingException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Serialization constructor for the <see cref="T:Spike.Network.ClientBindingException"/>
            </summary>
            <param name="info">The serialization info instance</param>
            <param name="context">The serialization streaming context</param>
        </member>
        <member name="T:Spike.Network.SingleChannelClient">
            <summary>
            Represents a client that is bound to a single channel.
            </summary>
        </member>
        <member name="M:Spike.Network.SingleChannelClient.#ctor">
            <summary>
            Constructs the unbound <see cref="T:Spike.Network.SingleChannelClient"/> object.
            </summary>
        </member>
        <member name="M:Spike.Network.SingleChannelClient.Send(Spike.Network.Packet)">
            <summary>
            Sends the packet to the remote client end-point.
            </summary>
            <param name="packet">The packet to send to the remote end-point.</param>
        </member>
        <member name="M:Spike.Network.SingleChannelClient.BindChannel(Spike.Channel)">
            <summary>
            Binds a channel to this <see cref="T:Spike.IClient"/> object instance.
            </summary>
            <param name="channel">The channel to bind to this client.</param>
        </member>
        <member name="M:Spike.Network.SingleChannelClient.UnbindChannel(Spike.Channel)">
            <summary>
            Unbinds a channel from this <see cref="T:Spike.IClient"/> object instance.
            </summary>
            <param name="channel">The channel to unbind from this client.</param>
        </member>
        <member name="M:Spike.Network.SingleChannelClient.ToString">
            <summary>
            Converts the value of the current object to its equivalent string representation.
            </summary>
            <returns>A string representation of the current object.</returns>
        </member>
        <member name="P:Spike.Network.SingleChannelClient.Channel">
            <summary>
            Gets the currently active channel for this client. This channel can be used for
            sending outgoing messages only.
            </summary>
        </member>
        <member name="T:Spike.Network.OperationInfo">
            <summary>
            Main container for all operation medatada
            </summary>
        </member>
        <member name="F:Spike.Network.OperationInfo.RequestPool">
            <summary>
            Pool that manages request packet instances.
            </summary>
        </member>
        <member name="F:Spike.Network.OperationInfo.InformPool">
            <summary>
            Pool that manages inform packet instances.
            </summary>
        </member>
        <member name="M:Spike.Network.OperationInfo.#ctor(System.String,System.Boolean,System.String,Spike.Network.CompressionTarget,Spike.Network.Direction,System.Type,Spike.Network.CreatePacketInstance,System.Type,Spike.Network.CreatePacketInstance)">
            <summary>
            Constructs an instance of <see cref="T:Spike.Network.OperationInfo"/> class with the complete set of medatata.
            </summary>
            <param name="operationKey">The key of the operation, a unique identifier.</param>
            <param name="supressSecurity">Whether the log-in security should be supressed, allowing the operation to be executed also by anonymous connection</param>
            <param name="role">The role required to access the operation (if not specified, the DefaultRole.Defaults are used).</param>
            <param name="compress">Whether a compression should be applyed to the packet. </param>
            <param name="direction">The direction of the packet, default is Pull (request/reply). Other possibility is Push (server inform).</param>
            <param name="requestPacketType">The type of the request packet. Used only for pull operations.</param>
            <param name="requestActivator">The activator that allows an instance of request packet to be created. Used only for pull operations.</param>
            <param name="informPacketType">The type of the inform packet.</param>
            <param name="informActivator">The activator that allows an instance of inform packet to be created.</param>
        </member>
        <member name="F:Spike.Network.OperationInfo.OperationKey">
            <summary>
            Gets the key of the operation, a unique identifier.
            </summary>
        </member>
        <member name="F:Spike.Network.OperationInfo.SuppressSecurity">
             <summary>
            Gets whether the log-in security should be supressed, allowing the operation to be executed also by anonymous connection. Default is false.
             </summary>
        </member>
        <member name="F:Spike.Network.OperationInfo.Role">
            <summary>
            Gets the role required to access the operation (if not specified, the DefaultRole.Defaults are used).
            </summary>
        </member>
        <member name="F:Spike.Network.OperationInfo.Compress">
            <summary>
            Gets whether a compression should be applyed to the packet. 
            </summary>
        </member>
        <member name="F:Spike.Network.OperationInfo.Direction">
            <summary>
            Gets the direction of the packet, default is Pull (request/reply). Other possibility is Push (server inform).
            </summary>
        </member>
        <member name="F:Spike.Network.OperationInfo.RequestPacketType">
            <summary>
            The type of the request packet.
            </summary>
        </member>
        <member name="F:Spike.Network.OperationInfo.RequestPacketFields">
            <summary>
            The amount of fields in the request packet.
            </summary>
        </member>
        <member name="F:Spike.Network.OperationInfo.RequestPacketActivator">
            <summary>
            An activator (constructor) delegate that creates an instance of a request packet.
            </summary>
        </member>
        <member name="F:Spike.Network.OperationInfo.InformPacketType">
            <summary>
            The type of the inform packet.
            </summary>
        </member>
        <member name="F:Spike.Network.OperationInfo.InformPacketFields">
            <summary>
            The amount of fields in the inform packet.
            </summary>
        </member>
        <member name="F:Spike.Network.OperationInfo.InformPacketActivator">
            <summary>
            An activator (constructor) delegate that creates an instance of an inform packet.
            </summary>
        </member>
        <member name="F:Spike.Network.OperationInfo.PacketHandler">
            <summary>
            A handler for packet
            </summary>
        </member>
        <member name="M:Spike.Network.OperationInfo.AcquireRequest(Spike.Channel)">
            <summary>
            Creates an instance of a request packet for this operation.
            </summary>
            <param name="origin">The connection the packet originated from to assign to the acquired packet.</param>
            <returns>The acquired instance of the request packet.</returns>
        </member>
        <member name="M:Spike.Network.OperationInfo.AcquireInform">
            <summary>
            Creates an instance of an inform packet for this operation.
            </summary>
            <returns>The acquired instance</returns>
        </member>
        <member name="M:Spike.Network.OperationInfo.ToString">
            <summary>
             Returns a <see cref="T:System.String"/> that represents the current <see cref="T:Spike.Network.OperationInfo"/> object.
            </summary>
            <returns></returns>
        </member>
        <member name="T:Spike.Network.PacketReaderPool">
            <summary>
            Represents a pool of packet readers.
            </summary>
        </member>
        <member name="F:Spike.Network.PacketReaderPool.Default">
            <summary>
            Gets the default PacketReaderPool.
            </summary>
        </member>
        <member name="M:Spike.Network.PacketReaderPool.#ctor">
            <summary>
            Default constructor for the PacketReaderPool
            </summary>
        </member>
        <member name="M:Spike.Network.PacketReaderPool.Acquire(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Acquires a <see cref="T:Spike.Network.PacketReader"/> instance.
            </summary>
            <returns>Returns the acquired instance.</returns>
        </member>
        <member name="M:Spike.Network.PacketReaderPool.Acquire">
            <summary>
            Acquires a <see cref="T:Spike.Network.PacketReader"/> instance.
            </summary>
            <returns>Returns the acquired instance.</returns>
        </member>
        <member name="T:Spike.Network.PacketWriterPool">
            <summary>
            Represents a pool of packet writers.
            </summary>
        </member>
        <member name="F:Spike.Network.PacketWriterPool.Default">
            <summary>
            Gets the default PacketWriterPool.
            </summary>
        </member>
        <member name="M:Spike.Network.PacketWriterPool.#ctor">
            <summary>
            Default constructor for the PacketWriterPool
            </summary>
        </member>
        <member name="M:Spike.Network.PacketWriterPool.Acquire(Spike.Network.ByteStream)">
            <summary>
            Acquires a PacketWriter instance for a particular packet.
            </summary>
            <returns>Returns the acquired instance.</returns>
        </member>
        <member name="M:Spike.Network.PacketWriterPool.Acquire">
            <summary>
            Acquires a <see cref="T:Spike.Network.PacketWriter"/> instance.
            </summary>
            <returns>Returns the acquired instance.</returns>
        </member>
        <member name="T:Spike.Network.ByteStreamPool">
            <summary>
            Represents a pool of <see cref="T:Spike.Network.ByteStream"/> instances.
            </summary>
        </member>
        <member name="F:Spike.Network.ByteStreamPool.Default">
            <summary>
            Gets the default ByteStreamPool.
            </summary>
        </member>
        <member name="M:Spike.Network.ByteStreamPool.#ctor">
            <summary>
            Default constructor for the ByteStreamPool. We use large initial capacity in order 
            to reduce memory fragmentation.
            </summary>
        </member>
        <member name="M:Spike.Network.ByteStreamPool.Acquire">
            <summary>
            Acquires an instance of the byte stream from the internal pool.
            </summary>
            <returns>The acquired bytestream instance.</returns>
        </member>
        <member name="M:Spike.Network.ByteStreamPool.Acquire(System.Int32)">
            <summary>
            Acquires an instance of the byte stream from the internal pool with a specified
            left padding. To the specified number of bytes, the value 0x00 is written.
            </summary>
            <param name="padding">Number of bytes to skip in the beginning of the stream.</param>
            <returns>The acquired bytestream instance.</returns>
        </member>
        <member name="T:Spike.Network.EmptyPacket">
            <summary>
            Defines an empty packet of any type.
            </summary>
        </member>
        <member name="M:Spike.Network.EmptyPacket.#ctor">
            <summary>
            Constructs a new <see cref="T:Spike.Network.EmptyPacket"/> instance.
            </summary>
        </member>
        <member name="T:Spike.Network.EmptySecpPacket">
            <summary>
            Defines an empty SECP packet.
            </summary>
        </member>
        <member name="M:Spike.Network.EmptySecpPacket.#ctor(Spike.Network.PacketKey)">
            <summary>
            Constructs a new <see cref="T:Spike.Network.EmptyPacket"/> instance.
            </summary>
            <param name="operationKey">The operation key to be written in the header.</param>
        </member>
        <member name="M:Spike.Network.EmptySecpPacket.Read(Spike.Network.PacketReader)">
            <summary>
            Serializes this packet to a binary stream.
            </summary>
            <param name="Reader">PacketReader used to serialize the packet.</param>
        </member>
        <member name="M:Spike.Network.EmptySecpPacket.Write(Spike.Network.PacketWriter)">
            <summary>
            Deserializes this packet from a binary stream.
            </summary>
            <param name="Writer">PacketWriter used to deserialize the packet.</param>
        </member>
        <member name="T:Spike.Network.SendQueue">
            <summary>
            Represents a send queue which is used to send the date to the remote endpoints.
            </summary>
        </member>
        <member name="M:Spike.Network.SendQueue.#ctor">
            <summary>
            Constructs a new instance of <see cref="T:Spike.Network.SendQueue"/>
            </summary>
        </member>
        <member name="M:Spike.Network.SendQueue.TryFlush">
            <summary>
            Attempts to flash the queue and prepares a <see cref="T:Spike.Network.SendQueue.SendGram"/> instance with the data to
            be sent to the client.
            </summary>
            <returns>Returns the <see cref="T:Spike.Network.SendQueue.SendGram"/> instance with the data to send if available, null otherwise.</returns>
        </member>
        <member name="M:Spike.Network.SendQueue.TryDequeue">
            <summary>
            Attempts to dequeue the pending data.
            </summary>
            <returns>Returns the <see cref="T:Spike.Network.SendQueue.SendGram"/> instance with the data to send if available, null otherwise.</returns>
        </member>
        <member name="M:Spike.Network.SendQueue.Enqueue(Spike.Network.BufferSegment)">
            <summary>
            Enqueues a <see cref="T:Spike.Network.BufferSegment"/> instance to this <see cref="T:Spike.Network.SendQueue"/> and returns a <see cref="T:Spike.Network.SendQueue.SendGram"/> if 
            there is available data to send.
            </summary>
            <param name="segment">The <see cref="T:Spike.Network.BufferSegment"/> instance to enqueue.</param>
            <returns>Returns the <see cref="T:Spike.Network.SendQueue.SendGram"/> instance with the data to send if available, null otherwise.</returns>
        </member>
        <member name="M:Spike.Network.SendQueue.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or
            resetting unmanaged resources.
            </summary>
        </member>
        <member name="M:Spike.Network.SendQueue.Finalize">
            <summary>
            Finalizer for the <see cref="T:Spike.Network.SendQueue"/> object.
            </summary>
        </member>
        <member name="P:Spike.Network.SendQueue.IsFlushReady">
            <summary>
            Gets whether this <see cref="T:Spike.Network.SendQueue"/> can be flushed or not.
            </summary>
        </member>
        <member name="P:Spike.Network.SendQueue.IsEmpty">
            <summary>
            Gets whether this <see cref="T:Spike.Network.SendQueue"/>  is currently empty or not.
            </summary>
        </member>
        <member name="T:Spike.Network.SendQueue.SendGram">
            <summary>
            Represents a piece of data which is to be send to the remote endpoint.
            </summary>
        </member>
        <member name="M:Spike.Network.SendQueue.SendGram.Acquire">
            <summary>
            Acquires a new instance of a SendGram class.
            </summary>
            <returns>Returns the acquired instance.</returns>
        </member>
        <member name="M:Spike.Network.SendQueue.SendGram.Enqueue(Spike.Network.BufferSegment)">
            <summary>
            Enqueue a buffer segment to add to send vector.
            </summary>
            <param name="segment">The segment to send.</param>
        </member>
        <member name="M:Spike.Network.SendQueue.SendGram.Merge(System.Byte[]@)">
            <summary>
            Merges all array segments into a unique buffer.
            </summary>
            <param name="merged">Returns the resulted byte array.</param>
            <returns>Returns the length of the resulted array.</returns>
        </member>
        <member name="M:Spike.Network.SendQueue.SendGram.Recycle">
            <summary>
            Releases all streams
            </summary>
        </member>
        <member name="P:Spike.Network.SendQueue.SendGram.Size">
            <summary>
            Gets current size of the gram, in bytes.
            </summary>
        </member>
        <member name="P:Spike.Network.SendQueue.SendGram.IsFull">
            <summary>
            Gets whether this send gram is completely filled for one send operation.
            </summary>
        </member>
        <member name="P:Spike.Network.SendQueue.SendGram.Buffers">
            <summary>
            Gets current buffes vector of the gram.
            </summary>
        </member>
        <member name="T:Spike.Network.CapacityExceededException">
            <summary>
            Represents an exception which is invoked when the send queue capacity is exceeded.
            </summary>
        </member>
        <member name="M:Spike.Network.CapacityExceededException.#ctor">
            <summary>
            Constructs a new <see cref="T:Spike.Network.CapacityExceededException"/> instance.
            </summary>
        </member>
        <member name="T:Spike.Network.PacketPool`1">
            <summary>
            A generic, strongly-typed pool for instances of packets.
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:Spike.Network.PacketPool`1.#ctor(System.String,Spike.Collections.ConcurrentPool{`0}.CreateInstanceDelegate)">
            <summary>
            Creates a new instance of a packet pool.
            </summary>
            <param name="name">The name of the pool.</param>
            <param name="constructor">Provides a mechanism to create the packet instance.</param>
        </member>
        <member name="T:Spike.Network.PacketPool">
            <summary>
            A generic pool for instances of packets.
            </summary>
        </member>
        <member name="M:Spike.Network.PacketPool.#ctor(System.String,Spike.Collections.ConcurrentPool{Spike.Network.Packet}.CreateInstanceDelegate)">
            <summary>
            Creates a new instance of a packet pool.
            </summary>
            <param name="name">The name of the pool.</param>
            <param name="constructor">Provides a mechanism to create the packet instance.</param>
        </member>
        <member name="M:Spike.Network.SocketExtensions.BeginSendGram(System.Net.Sockets.Socket,Spike.Network.SendQueue.SendGram,System.Net.EndPoint,System.AsyncCallback)">
            <summary>
            Sends data asynchronously to a specific remote host.
            </summary>
            <param name="source">The socket that initiates the send</param>
            <param name="gram">A buffer of type <see cref="T:Spike.Network.SendQueue.SendGram"/> that contains the data to send.</param>
            <param name="remoteEndPoint">An <see cref="T:System.Net.EndPoint"/> that represents the remote device.</param>
            <param name="callback">The <see cref="T:System.AsyncCallback"/> delegate.</param>
            <returns> An <see cref="T:System.IAsyncResult"/> that references the asynchronous send.</returns>
        </member>
        <member name="M:Spike.Network.SocketExtensions.BeginSendGram(System.Net.Sockets.Socket,Spike.Network.SendQueue.SendGram,System.AsyncCallback)">
            <summary>
            Sends data asynchronously to a connected System.Net.Sockets.Socket.
            </summary>
            <param name="source">The socket that initiates the send.</param>
            <param name="gram">A buffer of type <see cref="T:Spike.Network.SendQueue.SendGram"/> that contains the data to send.</param>
            <param name="callback">The <see cref="T:System.AsyncCallback"/> delegate.</param>
            <returns> An <see cref="T:System.IAsyncResult"/> that references the asynchronous send.</returns>
        </member>
        <member name="T:Spike.ReleaseInstanceDelegate">
            <summary>
            The <see cref="T:Spike.ReleaseInstanceDelegate"/> delegate is used as a callback to return an object back to the pool.
            </summary>
        </member>
        <member name="T:Spike.Collections.ReadOnlyCollection`1">
            <summary>
            A view allows to view a particular collection in a read-only mode
            </summary>
        </member>
        <member name="T:Spike.Collections.IViewCollection`1">
            <summary>
            A view allows to view a particular collection in a read-only mode
            </summary>
        </member>
        <member name="M:Spike.Collections.IViewCollection`1.ForEach(System.Action{`0})">
            <summary>
            Executes an action for each item in the collection 
            </summary>
            <param name="action">Action to execute</param>
        </member>
        <member name="P:Spike.Collections.IViewCollection`1.Count">
            <summary>
            Gets the count of the elements in the collection
            </summary>
        </member>
        <member name="M:Spike.Collections.ReadOnlyCollection`1.#ctor(System.Collections.Generic.ICollection{`0})">
            <summary>
            Constructs a new read-only collection view.
            </summary>
            <param name="target">The target collection to construct the view for.</param>
        </member>
        <member name="M:Spike.Collections.ReadOnlyCollection`1.ForEach(System.Action{`0})">
            <summary>
            Executes an action for each element of the collection.
            </summary>
            <param name="action">The action to execute.</param>
        </member>
        <member name="M:Spike.Collections.ReadOnlyCollection`1.GetEnumerator">
            <summary>
            Gets the enumerator for this collection
            </summary>
            <returns>The enumerator.</returns>
        </member>
        <member name="P:Spike.Collections.ReadOnlyCollection`1.Count">
            <summary>
            Gets the element count in the collection.
            </summary>
        </member>
        <member name="T:Spike.Collections.ReadOnlyArrayList`1">
            <summary>
            A view allows to view a particular collection in a read-only mode
            </summary>
        </member>
        <member name="M:Spike.Collections.IArrayList`1.Add(`0)">
            <summary>
            Adds the item into a free space in the Items array and returns the handle to the item
            </summary>
            <param name="item">Item to add to Items array</param>
            <returns>Handle to the added item</returns>
        </member>
        <member name="M:Spike.Collections.IArrayList`1.Add(`0@)">
            <summary>
            Adds the item into a free space in the Items array and returns the handle to the item
            </summary>
            <param name="item">Item to add to Items array</param>
            <returns>Handle to the added item</returns>
        </member>
        <member name="M:Spike.Collections.IArrayList`1.AddRange(`0[])">
            <summary>
             Adds a range of items into free spaces in the Items array
            </summary>
            <param name="items">Range of items to add</param>
        </member>
        <member name="M:Spike.Collections.IArrayList`1.ForEach(System.Action{`0})">
            <summary>
            Executes an action for each item in the collection 
            Note: Internally uses a for loop.
            </summary>
            <param name="action">Action to execute</param>
        </member>
        <member name="M:Spike.Collections.IArrayList`1.Remove(System.Int32)">
            <summary>
            Removes an item from a collection by its handle
            </summary>
            <param name="handle">Handle of the item to remove</param>
        </member>
        <member name="M:Spike.Collections.IArrayList`1.HasElementAt(System.Int32)">
            <summary>
            Checks whether there is an element in use at a given position
            </summary>
            <param name="handle">The handle to check</param>
            <returns>True if there is an element in this position, otherwise false</returns>
        </member>
        <member name="M:Spike.Collections.IArrayList`1.Clear">
            <summary>
            Clears the list
            </summary>
        </member>
        <member name="T:Spike.Collections.ReadOnlyList`1">
            <summary>
            A view allows to view a particular collection in a read-only mode
            </summary>
        </member>
        <member name="M:Spike.Collections.ReadOnlyList`1.#ctor(System.Collections.Generic.IList{`0})">
            <summary>
            Constructs a new read-only collection view.
            </summary>
            <param name="target">The target collection to construct the view for.</param>
        </member>
        <member name="M:Spike.Collections.ReadOnlyList`1.ForEach(System.Action{`0})">
            <summary>
            Executes an action for each element of the collection.
            </summary>
            <param name="action">The action to execute.</param>
        </member>
        <member name="M:Spike.Collections.ReadOnlyList`1.GetEnumerator">
            <summary>
            Gets the enumerator for this collection
            </summary>
            <returns>The enumerator.</returns>
        </member>
        <member name="P:Spike.Collections.ReadOnlyList`1.Count">
            <summary>
            Gets the element count in the collection.
            </summary>
        </member>
        <member name="T:Spike.Compression.ICompressor">
            <summary>
            Represents a contract for a real-time compression mechanism.
            </summary>
        </member>
        <member name="M:Spike.Compression.ICompressor.Compress(System.Byte[],System.Int32,System.Int32,System.IO.MemoryStream)">
            <summary>
            Compresses the data using LibLZF algorithm
            </summary>
            <param name="input">Reference to the data to compress</param>
            <param name="inputOffset">The offset in the input array where the compression should start</param>
            <param name="inputLength">Lenght of the data to compress</param>
            <param name="output">The stream where the compressor should compress to</param>
            <returns>The size of the compressed archive in the output buffer</returns>
        </member>
        <member name="M:Spike.Compression.ICompressor.Decompress(System.Byte[],System.Int32,System.Int32,System.IO.MemoryStream)">
            <summary>
            Decompresses the data using LibLZF algorithm
            </summary>
            <param name="input">Reference to the data to decompress</param>
            <param name="inputOffset">Offset in the input array where the decompression should begin</param>
            <param name="inputLength">Lenght of the data to decompress</param>
            <param name="output">The stream to decompress to</param>
            <returns>Returns decompressed size</returns>
        </member>
        <member name="T:Spike.Diagnostics.IValueContainer">
            <summary>
            Represents a container for a value.
            </summary>
        </member>
        <member name="P:Spike.Diagnostics.IValueContainer.Value">
            <summary>
            Gets current (latest) value of the container
            </summary>
        </member>
        <member name="T:Spike.Diagnostics.IPerfCrossSection">
            <summary>
            Represents a cross-section.
            </summary>
        </member>
        <member name="M:Spike.Diagnostics.IPerfCrossSection.Average">
            <summary>
            Gets the average of the window
            </summary>
        </member>
        <member name="M:Spike.Diagnostics.IPerfCrossSection.Min">
            <summary>
            Gets the minimum value of the window
            </summary>
        </member>
        <member name="M:Spike.Diagnostics.IPerfCrossSection.Max">
            <summary>
            Gets the maximum value of the window
            </summary>
        </member>
        <member name="M:Spike.Diagnostics.IPerfCrossSection.Sample(System.Double)">
            <summary>
            Collects a sample and puts it to the cross-section
            </summary>
        </member>
        <member name="T:Spike.Diagnostics.IPerfCounter">
            <summary>
            Represents a counter.
            </summary>
        </member>
        <member name="M:Spike.Diagnostics.IPerfCounter.Increment">
            <summary>
            Increments the performance counter by one
            </summary>
        </member>
        <member name="M:Spike.Diagnostics.IPerfCounter.Decrement">
            <summary>
            Decrements the performance counter by one
            </summary>
        </member>
        <member name="M:Spike.Diagnostics.IPerfCounter.IncrementBy(System.Int64)">
            <summary>
            Increments the performance counter by the value
            </summary>
            <param name="value">The value to increment the counter by</param>
        </member>
        <member name="T:Spike.Diagnostics.IPerfMonitor">
            <summary>
            Represents a performance monitor (counter + cross-section).
            </summary>
        </member>
        <member name="M:Spike.Diagnostics.IPerfMonitor.Sample">
            <summary>
            Adds a sample to the counter, using NextValue() of the performance counter
            </summary>
        </member>
        <member name="P:Spike.Diagnostics.IPerfMonitor.Enabled">
            <summary>
            Gets or sets whether current PerfMonitor is enabled or not
            </summary>
        </member>
        <member name="P:Spike.Diagnostics.IPerfMonitor.MonitorName">
            <summary>
            Gets the name of the monitor
            </summary>
        </member>
        <member name="P:Spike.Diagnostics.IPerfMonitor.MonitorHelp">
            <summary>
            Gets the help description of the monitor
            </summary>
        </member>
        <member name="T:Spike.Diagnostics.PerfMonitor">
            <summary>
            Represents a performance monitor. Under the hood uses .Net performance counters to get the measures from.
            </summary>
        </member>
        <member name="T:Spike.Diagnostics.PerfCrossSection">
            <summary>
            Represents a sliding window cross section
            </summary>
        </member>
        <member name="M:Spike.Diagnostics.PerfCrossSection.#ctor(System.Int32)">
            <summary>
            Constructs a new instance of <see cref="T:Spike.Diagnostics.PerfCrossSection"/>
            </summary>
            <param name="windowSize">The size of the window for the cross-section. </param>
        </member>
        <member name="M:Spike.Diagnostics.PerfCrossSection.Sample(System.Double)">
            <summary>
            Collects a sample
            </summary>
        </member>
        <member name="M:Spike.Diagnostics.PerfCrossSection.Delta(System.Double)">
            <summary>
            Collects a delta sample
            </summary>
        </member>
        <member name="M:Spike.Diagnostics.PerfCrossSection.CumulativeDelta(System.Double)">
            <summary>
            Collects a cumulative delta sample, where the base should be substracted
            </summary>
        </member>
        <member name="M:Spike.Diagnostics.PerfCrossSection.Average">
            <summary>
            Gets the average of the window
            </summary>
        </member>
        <member name="M:Spike.Diagnostics.PerfCrossSection.Min">
            <summary>
            Gets the minimum value of the window
            </summary>
        </member>
        <member name="M:Spike.Diagnostics.PerfCrossSection.Max">
            <summary>
            Gets the maximum value of the window
            </summary>
        </member>
        <member name="P:Spike.Diagnostics.PerfCrossSection.Value">
            <summary>
            Gets current (latest) value of the sampler
            </summary>
        </member>
        <member name="M:Spike.Diagnostics.PerfMonitor.#ctor(System.String,System.String)">
            <summary>
            Constructs a new instance of <see cref="T:Spike.Diagnostics.PerfMonitor"/>.
            </summary>
            <param name="categoryName">The category name for the performance counter.</param>
            <param name="counterName">The performance counter name to use.</param>
        </member>
        <member name="M:Spike.Diagnostics.PerfMonitor.#ctor(System.String,System.String,System.String)">
            <summary>
            Constructs a new instance of <see cref="T:Spike.Diagnostics.PerfMonitor"/>.
            </summary>
            <param name="categoryName">The category name for the performance counter.</param>
            <param name="counterName">The performance counter name to use.</param>
            <param name="instanceName">The instance name of the performance counter to use.</param>
        </member>
        <member name="M:Spike.Diagnostics.PerfMonitor.Increment">
            <summary>
            Increments the performance counter.
            </summary>
        </member>
        <member name="M:Spike.Diagnostics.PerfMonitor.Decrement">
            <summary>
            Decrements the performance counter.
            </summary>
        </member>
        <member name="M:Spike.Diagnostics.PerfMonitor.IncrementBy(System.Int64)">
            <summary>
            Increments the performance counter by a given value.
            </summary>
            <param name="value">The value to increment the performance counter by.</param>
        </member>
        <member name="M:Spike.Diagnostics.PerfMonitor.Sample">
            <summary>
            Adds a sample to the counter, using NextValue() of the performance counter
            </summary>
        </member>
        <member name="M:Spike.Diagnostics.PerfMonitor.ToString">
            <summary>
            Converts to a string representation of the value.
            </summary>
            <returns>A string representation of the value.</returns>
        </member>
        <member name="P:Spike.Diagnostics.PerfMonitor.Enabled">
            <summary>
            Gets or sets whether current PerfMonitor is enabled or not
            </summary>
        </member>
        <member name="P:Spike.Diagnostics.PerfMonitor.MonitorName">
            <summary>
            Gets the name of the monitor
            </summary>
        </member>
        <member name="P:Spike.Diagnostics.PerfMonitor.MonitorHelp">
            <summary>
            Gets the help description of the monitor
            </summary>
        </member>
        <member name="T:Spike.Diagnostics.Monitoring">
            <summary>
            Provides global statistics and monitoring
            </summary>
        </member>
        <member name="M:Spike.Diagnostics.Monitoring.Initialize">
            <summary>
            Automatically called by Spike to initialize the monitoring.
            </summary>
        </member>
        <member name="M:Spike.Diagnostics.Monitoring.Terminate">
            <summary>
            Automatically called by Spike to stop the monitoring.
            </summary>
        </member>
        <member name="F:Spike.Diagnostics.Monitoring.ProcessName">
            <summary>
            Gets the name of the process
            </summary>
        </member>
        <member name="F:Spike.Diagnostics.Monitoring.ProcessInfo">
            <summary>
            Gets current process information
            </summary>
        </member>
        <member name="F:Spike.Diagnostics.Monitoring.StartupDate">
            <summary>
            Gets the date-time of the service startup
            </summary>
        </member>
        <member name="F:Spike.Diagnostics.Monitoring.PacketsIncoming">
            <summary>
            Gets the total amount of incoming packets since the service startup
            </summary>
        </member>
        <member name="F:Spike.Diagnostics.Monitoring.PacketsOutgoing">
            <summary>
            Gets the total amount of outgoing packets since the service startup
            </summary>
        </member>
        <member name="F:Spike.Diagnostics.Monitoring.BytesIncoming">
            <summary>
            Gets the total amount of incoming number of bytes since the service startup
            </summary>
        </member>
        <member name="F:Spike.Diagnostics.Monitoring.BytesOutgoing">
            <summary>
            Gets the total amount of outgoing number of bytes since the service startup
            </summary>
        </member>
        <member name="F:Spike.Diagnostics.Monitoring.AveragePPSIncoming">
            <summary>
            Gets the average amount of incoming packets per second
            </summary>
        </member>
        <member name="F:Spike.Diagnostics.Monitoring.AveragePPSOutgoing">
            <summary>
            Gets the average amount of outgoing packets per second
            </summary>
        </member>
        <member name="F:Spike.Diagnostics.Monitoring.AverageBPSIncoming">
            <summary>
            Gets the average amount of incoming bytes per second
            </summary>
        </member>
        <member name="F:Spike.Diagnostics.Monitoring.AverageBPSOutgoing">
            <summary>
            Gets the average amount of outgoing bytes per second
            </summary>
        </member>
        <member name="F:Spike.Diagnostics.Monitoring.AverageWorkingSet">
            <summary>
            Gets the average working set.
            </summary>
        </member>
        <member name="F:Spike.Diagnostics.Monitoring.AverageCpuUsage">
            <summary>
            Gets the average global cpu usage.
            </summary>
        </member>
        <member name="F:Spike.Diagnostics.Monitoring.UsedByteArrays">
            <summary>
            Gets the total amount of currently used byte arrays
            </summary>
        </member>
        <member name="F:Spike.Diagnostics.Monitoring.MemoryPools">
            <summary>
            Gets the memory pools registry used by this server.
            </summary>
        </member>
        <member name="F:Spike.Diagnostics.Monitoring.TrafficMonitor">
            <summary>
            Gets the traffic monitor
            </summary>
        </member>
        <member name="F:Spike.Diagnostics.Monitoring.ProcessorUserTime">
            <summary>
            Gets the performance monitor for Processor User Time
            </summary>
        </member>
        <member name="F:Spike.Diagnostics.Monitoring.ProcessorPrivilegedTime">
            <summary>
            Gets the performance monitor for Processor Privileged Time
            </summary>
        </member>
        <member name="F:Spike.Diagnostics.Monitoring.ProcessorInterruptTime">
            <summary>
            Gets the performance monitor for Processor Interrupt Time
            </summary>
        </member>
        <member name="F:Spike.Diagnostics.Monitoring.ProcessorTime">
            <summary>
            Gets the performance monitor for Processor Time
            </summary>
        </member>
        <member name="F:Spike.Diagnostics.Monitoring.ProcessUserTime">
            <summary>
            Gets the performance monitor for Process User Time
            </summary>
        </member>
        <member name="F:Spike.Diagnostics.Monitoring.ProcessPrivilegedTime">
            <summary>
            Gets the performance monitor for Process Privileged Time
            </summary>
        </member>
        <member name="F:Spike.Diagnostics.Monitoring.ProcessProcessorTime">
            <summary>
            Gets the performance monitor for Process Processor Time
            </summary>
        </member>
        <member name="F:Spike.Diagnostics.Monitoring.ProcessThreadCount">
            <summary>
            Gets the performance monitor for Process User Time
            </summary>
        </member>
        <member name="F:Spike.Diagnostics.Monitoring.ProcessVirtualBytes">
            <summary>
            Gets the performance monitor for Process Virtual Bytes
            </summary>
        </member>
        <member name="F:Spike.Diagnostics.Monitoring.ProcessWorkingSet">
            <summary>
            Gets the performance monitor for Process Working Set
            </summary>
        </member>
        <member name="F:Spike.Diagnostics.Monitoring.ProcessPrivateBytes">
            <summary>
            Gets the performance monitor for Process Private Bytes
            </summary>
        </member>
        <member name="F:Spike.Diagnostics.Monitoring.CLRMemoryGen0Collections">
            <summary>
            Gets the performance monitor for Process .NET CLR Memory Gen 0 Collections
            </summary>
        </member>
        <member name="F:Spike.Diagnostics.Monitoring.CLRMemoryGen1Collections">
            <summary>
            Gets the performance monitor for Process .NET CLR Memory Gen 1 Collections
            </summary>
        </member>
        <member name="F:Spike.Diagnostics.Monitoring.CLRMemoryGen2Collections">
            <summary>
            Gets the performance monitor for Process .NET CLR Memory Gen 2 Collections
            </summary>
        </member>
        <member name="F:Spike.Diagnostics.Monitoring.CLRMemoryPromotedMemoryFromGen0">
            <summary>
            Gets the performance monitor for Process .NET CLR Promoted Memory from Gen 0
            </summary>
        </member>
        <member name="F:Spike.Diagnostics.Monitoring.CLRMemoryPromotedMemoryFromGen1">
            <summary>
            Gets the performance monitor for Process .NET CLR Promoted Memory from Gen 1
            </summary>
        </member>
        <member name="F:Spike.Diagnostics.Monitoring.CLRMemoryGen0PromotedBytesPerSec">
            <summary>
            Gets the performance monitor for Process .NET CLR Gen 0 Promoted Bytes/Sec
            </summary>
        </member>
        <member name="F:Spike.Diagnostics.Monitoring.CLRMemoryGen1PromotedBytesPerSec">
            <summary>
            Gets the performance monitor for Process .NET CLR Gen 1 Promoted Bytes/Sec
            </summary>
        </member>
        <member name="F:Spike.Diagnostics.Monitoring.CLRMemoryPromotedFinalizationMemoryFromGen0">
            <summary>
            Gets the performance monitor for Process .NET CLR Promoted Finalization-Memory from Gen 0
            </summary>
        </member>
        <member name="F:Spike.Diagnostics.Monitoring.CLRMemoryGen0HeapSize">
            <summary>
            Gets the performance monitor for Process .NET CLR Gen 0 heap size
            </summary>
        </member>
        <member name="F:Spike.Diagnostics.Monitoring.CLRMemoryGen1HeapSize">
            <summary>
            Gets the performance monitor for Process .NET CLR Gen 1 heap size
            </summary>
        </member>
        <member name="F:Spike.Diagnostics.Monitoring.CLRMemoryGen2HeapSize">
            <summary>
            Gets the performance monitor for Process .NET CLR Gen 2 heap size
            </summary>
        </member>
        <member name="F:Spike.Diagnostics.Monitoring.CLRMemoryLargeObjectHeapSize">
            <summary>
            Gets the performance monitor for Process .NET CLR Large Object Heap size
            </summary>
        </member>
        <member name="F:Spike.Diagnostics.Monitoring.CLRMemoryFinalizationSurvivors">
            <summary>
            Gets the performance monitor for Process .NET CLR Finalization Survivors
            </summary>
        </member>
        <member name="F:Spike.Diagnostics.Monitoring.CLRMemoryGCHandles">
            <summary>
            Gets the performance monitor for Process .NET CLR # GC Handles
            </summary>
        </member>
        <member name="F:Spike.Diagnostics.Monitoring.CLRMemoryAllocatedBytesPerSec">
            <summary>
            Gets the performance monitor for Process .NET CLR Allocated Bytes/sec
            </summary>
        </member>
        <member name="F:Spike.Diagnostics.Monitoring.CLRMemoryInducedGC">
            <summary>
            Gets the performance monitor for Process .NET CLR # Induced GC
            </summary>
        </member>
        <member name="F:Spike.Diagnostics.Monitoring.CLRMemoryTimeInGC">
            <summary>
            Gets the performance monitor for Process .NET CLR % Time in GC
            </summary>
        </member>
        <member name="F:Spike.Diagnostics.Monitoring.CLRMemoryBytesInAllHeaps">
            <summary>
            Gets the performance monitor for Process .NET CLR # Bytes in all Heaps
            </summary>
        </member>
        <member name="F:Spike.Diagnostics.Monitoring.CLRMemoryTotalCommittedBytes">
            <summary>
            Gets the performance monitor for Process .NET CLR # Total committed Bytes
            </summary>
        </member>
        <member name="F:Spike.Diagnostics.Monitoring.CLRMemoryTotalReservedBytes">
            <summary>
            Gets the performance monitor for Process .NET CLR # Total reserved Bytes
            </summary>
        </member>
        <member name="F:Spike.Diagnostics.Monitoring.CLRMemoryPinnedObjects">
            <summary>
            Gets the performance monitor for Process .NET CLR # of Pinned Objects
            </summary>
        </member>
        <member name="F:Spike.Diagnostics.Monitoring.CLRMemorySinkBlocksInUse">
            <summary>
            Gets the performance monitor for Process .NET CLR # of Sink Blocks in use
            </summary>
        </member>
        <member name="P:Spike.Diagnostics.Monitoring.Uptime">
            <summary>
            Gets the current uptime of the service.
            </summary>
        </member>
        <member name="P:Spike.Diagnostics.Monitoring.ProcessFileName">
            <summary>
            Gets the file name of the current process.
            </summary>
        </member>
        <member name="T:Spike.Timer">
            <summary>
            Provides a mechanism for executing a method at specified intervals. All timers are executed in the same Thread.
            </summary>
        </member>
        <member name="M:Spike.Timer.#ctor(System.TimeSpan)">
            <summary>
            Constructs a new <see cref="T:Spike.Timer"/> instance.
            </summary>
            <param name="delay">The delay before the start of the timer.</param>
        </member>
        <member name="M:Spike.Timer.#ctor(System.TimeSpan,System.TimeSpan)">
            <summary>
            Constructs a new <see cref="T:Spike.Timer"/> instance.
            </summary>
            <param name="delay">The delay before the start of the timer.</param>
            <param name="interval">The interval between two ticks.</param>
        </member>
        <member name="M:Spike.Timer.#ctor(System.TimeSpan,System.TimeSpan,System.Int32)">
            <summary>
            Constructs a new <see cref="T:Spike.Timer"/> instance.
            </summary>
            <param name="delay">The delay before the start of the timer.</param>
            <param name="interval">The interval between two ticks.</param>
            <param name="count">The amount of ticks after which the timer should stop.</param>
        </member>
        <member name="M:Spike.Timer.ToString">
            <summary>
            Returns a string representation of the <see cref="T:Spike.Timer"/> instance.
            </summary>
            <returns>Returns a string representation of the <see cref="T:Spike.Timer"/> instance.</returns>
        </member>
        <member name="M:Spike.Timer.Start">
            <summary>
            Starts the timer.
            </summary>
        </member>
        <member name="M:Spike.Timer.Stop">
            <summary>
            Stops the timer.
            </summary>
        </member>
        <member name="M:Spike.Timer.Restart">
            <summary>
            Restarts the timer.
            </summary>
        </member>
        <member name="M:Spike.Timer.OnTick">
            <summary>
            Main timer method that is called on every tick.
            </summary>
        </member>
        <member name="M:Spike.Timer.Slice">
            <summary>
            Slices the timer thread.
            </summary>
        </member>
        <member name="M:Spike.Timer.GetPriority(System.TimeSpan)">
            <summary>
            Computes timer priority based on the given interval.
            </summary>
            <param name="interval">The interval between two ticks.</param>
            <returns>The computed priority of the timer.</returns>
        </member>
        <member name="M:Spike.Timer.DelayCall(System.TimeSpan,Spike.TimerCallback)">
            <summary>
            Invokes the specified callback function after the specified delay.
            </summary>
            <param name="delay">Specifies the amount of time to wait before invoking the callback.</param>
            <param name="callback">Specifies the callback to invoke.</param>
            <returns>Returns the timer object used for this operation.</returns>
        </member>
        <member name="M:Spike.Timer.DelayCall(System.TimeSpan,Spike.TimerStateCallback,System.Object)">
            <summary>
            Invokes the specified callback function after the specified delay. 
            </summary>
            <param name="delay">Specifies the amount of time to wait before invoking the callback.</param>
            <param name="callback">Specifies the callback to invoke.</param>
            <param name="state">Specifies a state object which will be passed to the callback function.</param>
            <returns>Returns the timer object used for this operation.</returns>
        </member>
        <member name="M:Spike.Timer.DelayCall``1(System.TimeSpan,Spike.TimerStateCallback{``0},``0)">
            <summary>
            Invokes the specified callback function after the specified delay.
            </summary>
            <param name="delay">Specifies the amount of time to wait before invoking the callback.</param>
            <param name="callback">Specifies the callback to invoke.</param>
            <param name="state">Specifies a state object which will be passed to the callback function.</param>
            <returns>Returns the timer object used for this operation.</returns>
        </member>
        <member name="M:Spike.Timer.PeriodicCall(System.TimeSpan,Spike.TimerCallback)">
            <summary>
            Invokes repeatedly the specified callback function on the specified interval and/or delay.
            </summary>
            <param name="interval">Specifies the interval of the repetition.</param>
            <param name="callback">Specifies the callback to invoke.</param>
            <returns>Returns the timer object used for this operation.</returns>
        </member>
        <member name="M:Spike.Timer.PeriodicCall(System.TimeSpan,System.TimeSpan,Spike.TimerCallback)">
            <summary>
            Invokes repeatedly the specified callback function on the specified interval and/or delay.
            </summary>
            <param name="delay">Specifies the amount of time to wait before invoking the first callback.</param>
            <param name="interval">Specifies the interval of the repetition.</param>
            <param name="callback">Specifies the callback to invoke.</param>
            <returns>Returns the timer object used for this operation.</returns>
        </member>
        <member name="M:Spike.Timer.PeriodicCall(System.TimeSpan,System.TimeSpan,System.Int32,Spike.TimerCallback)">
            <summary>
            Invokes repeatedly the specified callback function on the specified interval and/or delay.
            </summary>
            <param name="delay">Specifies the amount of time to wait before invoking the first callback.</param>
            <param name="interval">Specifies the interval of the repetition.</param>
            <param name="count">Specifies the maximum amount of calls. (0 = unlimited)</param>
            <param name="callback">Specifies the callback to invoke.</param>
            <returns>Returns the timer object used for this operation.</returns>
        </member>
        <member name="M:Spike.Timer.PeriodicCall(System.TimeSpan,System.Int32,Spike.TimerCallback)">
            <summary>
            Invokes repeatedly the specified callback function on the specified interval and/or delay.
            </summary>
            <param name="interval">Specifies the interval of the repetition.</param>
            <param name="count">Specifies the maximum amount of calls. (0 = unlimited)</param>
            <param name="callback">Specifies the callback to invoke.</param>
            <returns>Returns the timer object used for this operation.</returns>
        </member>
        <member name="M:Spike.Timer.PeriodicCall(System.TimeSpan,Spike.TimerStateCallback,System.Object)">
            <summary>
            Invokes repeatedly the specified callback function on the specified interval and/or delay.
            </summary>
            <param name="interval">Specifies the interval of the repetition.</param>
            <param name="callback">Specifies the callback to invoke.</param>
            <param name="state">Specifies a state object which will be passed to the callback function.</param>
            <returns>Returns the timer object used for this operation.</returns>
        </member>
        <member name="M:Spike.Timer.PeriodicCall(System.TimeSpan,System.TimeSpan,Spike.TimerStateCallback,System.Object)">
            <summary>
            Invokes repeatedly the specified callback function on the specified interval and/or delay.
            </summary>
            <param name="delay">Specifies the amount of time to wait before invoking the first callback.</param>
            <param name="interval">Specifies the interval of the repetition.</param>
            <param name="callback">Specifies the callback to invoke.</param>
            <param name="state">Specifies a state object which will be passed to the callback function.</param>
            <returns>Returns the timer object used for this operation.</returns>
        </member>
        <member name="M:Spike.Timer.PeriodicCall(System.TimeSpan,System.TimeSpan,System.Int32,Spike.TimerStateCallback,System.Object)">
            <summary>
            Invokes repeatedly the specified callback function on the specified interval and/or delay.
            </summary>
            <param name="delay">Specifies the amount of time to wait before invoking the first callback.</param>
            <param name="interval">Specifies the interval of the repetition.</param>
            <param name="count">Specifies the maximum amount of calls. (0 = unlimited)</param>
            <param name="callback">Specifies the callback to invoke.</param>
            <param name="state">Specifies a state object which will be passed to the callback function.</param>
            <returns>Returns the timer object used for this operation.</returns>
        </member>
        <member name="M:Spike.Timer.PeriodicCall(System.TimeSpan,System.Int32,Spike.TimerStateCallback,System.Object)">
            <summary>
            Invokes repeatedly the specified callback function on the specified interval and/or delay.
            </summary>
            <param name="interval">Specifies the interval of the repetition.</param>
            <param name="count">Specifies the maximum amount of calls. (0 = unlimited)</param>
            <param name="callback">Specifies the callback to invoke.</param>
            <param name="state">Specifies a state object which will be passed to the callback function.</param>
            <returns>Returns the timer object used for this operation.</returns>
        </member>
        <member name="M:Spike.Timer.PeriodicCall``1(System.TimeSpan,Spike.TimerStateCallback{``0},``0)">
            <summary>
            Invokes repeatedly the specified callback function on the specified interval and/or delay.
            </summary>
            <param name="interval">Specifies the interval of the repetition.</param>
            <param name="callback">Specifies the callback to invoke.</param>
            <param name="state">Specifies a state object which will be passed to the callback function.</param>
            <returns>Returns the timer object used for this operation.</returns>
        </member>
        <member name="M:Spike.Timer.PeriodicCall``1(System.TimeSpan,System.TimeSpan,Spike.TimerStateCallback{``0},``0)">
            <summary>
            Invokes repeatedly the specified callback function on the specified interval and/or delay.
            </summary>
            <param name="delay">Specifies the amount of time to wait before invoking the first callback.</param>
            <param name="interval">Specifies the interval of the repetition.</param>
            <param name="callback">Specifies the callback to invoke.</param>
            <param name="state">Specifies a state object which will be passed to the callback function.</param>
            <returns>Returns the timer object used for this operation.</returns>
        </member>
        <member name="M:Spike.Timer.PeriodicCall``1(System.TimeSpan,System.TimeSpan,System.Int32,Spike.TimerStateCallback{``0},``0)">
            <summary>
            Invokes repeatedly the specified callback function on the specified interval and/or delay.
            </summary>
            <param name="delay">Specifies the amount of time to wait before invoking the first callback.</param>
            <param name="interval">Specifies the interval of the repetition.</param>
            <param name="count">Specifies the maximum amount of calls. (0 = unlimited)</param>
            <param name="callback">Specifies the callback to invoke.</param>
            <param name="state">Specifies a state object which will be passed to the callback function.</param>
            <returns>Returns the timer object used for this operation.</returns>
        </member>
        <member name="M:Spike.Timer.PeriodicCall``1(System.TimeSpan,System.Int32,Spike.TimerStateCallback{``0},``0)">
            <summary>
            Invokes repeatedly the specified callback function on the specified interval and/or delay.
            </summary>
            <param name="interval">Specifies the interval of the repetition.</param>
            <param name="count">Specifies the maximum amount of calls. (0 = unlimited)</param>
            <param name="callback">Specifies the callback to invoke.</param>
            <param name="state">Specifies a state object which will be passed to the callback function.</param>
            <returns>Returns the timer object used for this operation.</returns>
        </member>
        <member name="E:Spike.Timer.OnError">
            <summary>
            Invoked if the timer OnTick() method has thrown an exception.
            </summary>
        </member>
        <member name="P:Spike.Timer.Priority">
            <summary>
            Gets or sets the priority of this timer.
            </summary>
        </member>
        <member name="P:Spike.Timer.Next">
            <summary>
            Gets the time of next callback execution.
            </summary>
        </member>
        <member name="P:Spike.Timer.Delay">
            <summary>
            Gets or sets the delay of the timer.
            </summary>
        </member>
        <member name="P:Spike.Timer.Interval">
            <summary>
            Gets or sets the interval of the timer.
            </summary>
        </member>
        <member name="P:Spike.Timer.Running">
            <summary>
            Gets or sets whether this timer is running or not.
            </summary>
        </member>
        <member name="P:Spike.Timer.BreakCount">
            <summary>
            Gets or sets the break count (the maximum amount of timers to be sliced at once)
            </summary>
        </member>
        <member name="P:Spike.Timer.IdleCycleInterval">
            <summary>
            Gets or sets the idle interval on which a new cycle should be forced
            </summary>
        </member>
        <member name="P:Spike.Timer.Now">
            <summary>
            Gets the current time (an approximation)
            </summary>
        </member>
        <member name="P:Spike.Timer.UtcNow">
            <summary>
            Gets the current universal time (an approximation)
            </summary>
        </member>
        <member name="P:Spike.Timer.Count">
            <summary>
            Gets the amount of active timers
            </summary>
        </member>
        <member name="T:Spike.Mathematics.RandomMT">
            <summary>
            <para>A Pseudo-Random Number Generator (PRNG) - Mersenne Twister</para>
            
            <para>The Mersenne Twister (MT) is a pseudorandom number generator (PRNG) 
            developed by Makoto Matsumoto and Takuji Nishimura[1][2] during 1996-1997. MT has the following merits:</para>
            
            <para> - It is designed with consideration on the flaws of various existing generators.</para>
            <para> - Far longer period and far higher order of equidistribution than any other implemented generators. 
               (It has been proven that the period is 2^19937-1 and 623-dimensional equidistribution property is assured.)</para>
            <para> - Fast generation. (Although it depends on the system, it is reported that MT is sometimes faster
               than the standard ANSI-C library in a system with pipeline and cache memory.)</para>
            <para> - Efficient use of the memory.</para>
            </summary>
        </member>
        <member name="M:Spike.Mathematics.RandomMT.#ctor">
            <summary>
            Creates a new instance of Mersenne Twister Pseudo-Random Number Generator 
            </summary>
        </member>
        <member name="M:Spike.Mathematics.RandomMT.#ctor(System.UInt64)">
            <summary>
            Creates a new instance of Mersenne Twister Pseudo-Random Number Generator 
            </summary>
            <param name="seed">The seed for the generator</param>
        </member>
        <member name="M:Spike.Mathematics.RandomMT.Next">
            <summary>
            Returns a nonnegative random number.
            </summary>
            <returns> A 32-bit signed integer greater than or equal to zero and less than System.Int32.MaxValue.</returns>
        </member>
        <member name="M:Spike.Mathematics.RandomMT.Next(System.Int32)">
            <summary>
            Returns a nonnegative random number less than the specified maximum.
            </summary>
            <param name="maxValue">The exclusive upper bound of the random number to be generated. maxValue
            must be greater than or equal to zero.</param>
            <returns>A 32-bit signed integer greater than or equal to zero, and less than maxValue;
            that is, the range of return values ordinarily includes zero but not maxValue.
            However, if maxValue equals zero, maxValue is returned.</returns>
        </member>
        <member name="M:Spike.Mathematics.RandomMT.Next(System.Int32,System.Int32)">
            <summary>
            Returns a random number within a specified range.
            </summary>
            <param name="minValue">The inclusive lower bound of the random number returned.</param>
            <param name="maxValue">The exclusive upper bound of the random number returned. maxValue must be
            greater than or equal to minValue.</param>
            <returns>A 32-bit signed integer greater than or equal to minValue and less than maxValue;
            that is, the range of return values includes minValue but not maxValue. If
            minValue equals maxValue, minValue is returned.</returns>
        </member>
        <member name="M:Spike.Mathematics.RandomMT.RollDice(System.Int32,System.Int32)">
            <summary>
            Returns a random number emulating a custom fair dice
            </summary>
            <param name="face">Number of faces in the dice</param>
            <param name="numberOfDices">Number of dices to throw</param>
            <returns>A 32-bit signed integer in the specified range.</returns>
        </member>
        <member name="M:Spike.Mathematics.RandomMT.HeadsOrTails">
            <summary>
            Returns a random boolean value
            </summary>
            <returns>A boolean value, randomly generated</returns>
        </member>
        <member name="M:Spike.Mathematics.RandomMT.D6(System.Int32)">
            <summary>
            Returns a random number emulating a custom 6-faced fair dice.
            </summary>
            <param name="numberOfDices">Number of dices to throw</param>
            <returns>A 32-bit signed integer in the specified range.</returns>
        </member>
        <member name="M:Spike.Mathematics.RandomMT.D8(System.Int32)">
            <summary>
            Returns a random number emulating a custom 8-faced fair dice.
            </summary>
            <param name="numberOfDices">Number of dices to throw</param>
            <returns>A 32-bit signed integer in the specified range.</returns>
        </member>
        <member name="M:Spike.Mathematics.RandomMT.D10(System.Int32)">
            <summary>
            Returns a random number emulating a custom 10-faced fair dice.
            </summary>
            <param name="numberOfDices">Number of dices to throw</param>
            <returns>A 32-bit signed integer in the specified range.</returns>
        </member>
        <member name="M:Spike.Mathematics.RandomMT.D12(System.Int32)">
            <summary>
            Returns a random number emulating a custom 12-faced fair dice.
            </summary>
            <param name="numberOfDices">Number of dices to throw</param>
            <returns>A 32-bit signed integer in the specified range.</returns>
        </member>
        <member name="M:Spike.Mathematics.RandomMT.D20(System.Int32)">
            <summary>
            Returns a random number emulating a custom 20-faced fair dice.
            </summary>
            <param name="numberOfDices">Number of dices to throw</param>
            <returns>A 32-bit signed integer in the specified range.</returns>
        </member>
        <member name="M:Spike.Mathematics.RandomMT.D25(System.Int32)">
            <summary>
            Returns a random number emulating a custom 25-faced fair dice.
            </summary>
            <param name="numberOfDices">Number of dices to throw</param>
            <returns>A 32-bit signed integer in the specified range.</returns>
        </member>
        <member name="T:Spike.Compression.LZF">
            <summary>
            Improved C# LZF Compressor, a very small data compression library. The compression algorithm is extremely fast. 
            </summary>
        </member>
        <member name="F:Spike.Compression.LZF.HashTable">
            <summary>
            Hashtable, thac can be allocated only once
            </summary>
        </member>
        <member name="M:Spike.Compression.LZF.Recycle">
            <summary>
            Recycles (resets) the object to the original state.
            </summary>
        </member>
        <member name="M:Spike.Compression.LZF.Compress(System.Byte[],System.Int32,System.Int32,System.IO.MemoryStream)">
            <summary>
            Compresses the data using LibLZF algorithm
            </summary>
            <param name="input">Reference to the data to compress</param>
            <param name="inputOffset">The offset in the input array where the compression should start</param>
            <param name="inputLength">Lenght of the data to compress</param>
            <param name="output">The stream where the compressor should compress to</param>
            <returns>The size of the compressed archive in the output buffer</returns>
        </member>
        <member name="M:Spike.Compression.LZF.Decompress(System.Byte[],System.Int32,System.Int32,System.IO.MemoryStream)">
            <summary>
            Decompresses the data using LibLZF algorithm
            </summary>
            <param name="input">Reference to the data to decompress</param>
            <param name="inputOffset">Offset in the input array where the decompression should begin</param>
            <param name="inputLength">Lenght of the data to decompress</param>
            <param name="output">The stream to decompress to</param>
            <returns>Returns decompressed size</returns>
        </member>
        <member name="M:Spike.Network.Http.HttpContextPool.#ctor">
            <summary>
            Default constructor for the HttpContextPool
            </summary>
        </member>
        <member name="F:Spike.Network.Http.HttpContextPool.Default">
            <summary>
            A poof of HttpContexts used for requests data-containment
            </summary>
        </member>
        <member name="M:Spike.Network.Http.HttpContextPool.Acquire(Spike.Channel)">
            <summary>
            Acquires an instance of HttpContext and binds it to a connection.
            </summary>
            <param name="connection">The connection for this HttpContext.</param>
            <returns>The acquired instance.</returns>
        </member>
        <member name="T:Spike.TcpChannel">
            <summary>
            Class that represents a TCP network connection
            </summary>
        </member>
        <member name="T:Spike.Channel">
            <summary>
            Class that represents a network connection
            </summary>
        </member>
        <member name="M:Spike.Channel.FlushAll">
            <summary>
            Flushes all connections, ensuring the data is sent to the remote clients.
            </summary>
        </member>
        <member name="F:Spike.Channel.DisposedChannels">
            <summary>
            A queue which contains disposed channels to be collected.
            </summary>
        </member>
        <member name="F:Spike.Channel.ReceiveBufferPool">
            <summary>
            An instance of a <see cref="T:Spike.Collections.BufferPool"/> used for reception.
            </summary>
        </member>
        <member name="M:Spike.Channel.#ctor">
            <summary>
            Constructs a new <see cref="T:Spike.Channel"/> instance.
            </summary>
        </member>
        <member name="M:Spike.Channel.OnAfterConstruct">
            <summary>
            Invoked when the channel is fully constructed and is ready to be used.
            The base implementation binds the client.
            </summary>
        </member>
        <member name="M:Spike.Channel.Send(Spike.Network.Packet)">
            <summary>
            Sends a <see cref="T:Spike.Network.Packet"/> through this channel.
            </summary>
            <param name="p">The packet to send through the channel.</param>
        </member>
        <member name="M:Spike.Channel.Flush">
            <summary>
            Flushes and sends all the pending packets.
            </summary>
            <returns>Whether the flush was completed or not.</returns>
        </member>
        <member name="M:Spike.Channel.CheckAlive">
            <summary>
            Checks whether the underlying network mechanism is alive or not.
            </summary>
            <returns>Whether the underlying network mechanism is alive or not.</returns>
        </member>
        <member name="M:Spike.Channel.Pause">
            <summary>
            Pauses the channel, suspending all communication.
            </summary>
        </member>
        <member name="M:Spike.Channel.Resume">
            <summary>
            Resumes previously paused channel.
            </summary>
        </member>
        <member name="M:Spike.Channel.OnDispose(System.Boolean)">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or
            resetting unmanaged resources.
            </summary>
        </member>
        <member name="M:Spike.Channel.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or
            resetting unmanaged resources.
            </summary>
        </member>
        <member name="M:Spike.Channel.Finalize">
            <summary>
            Finalizer, cleans up the connection if Dispose was never called.
            </summary>
        </member>
        <member name="M:Spike.Channel.Close">
            <summary>
            Closes the connection and ensures that the pending data is transmitted to the client end-point.
            </summary>
        </member>
        <member name="P:Spike.Channel.Instances">
            <summary>
            Gets the list of currently running connections.
            </summary>
        </member>
        <member name="P:Spike.Channel.CoalesceSleep">
            <summary>
            Gets or sets the coalesce sleep interval for all channels.
            </summary>
        </member>
        <member name="P:Spike.Channel.GlobalTimeout">
            <summary>
            Gets or sets the global timeout of the session.
            </summary>
        </member>
        <member name="P:Spike.Channel.Client">
            <summary>
            Gets or sets the <see cref="T:Spike.IClient"/> that this connection is bound to.
            </summary>
        </member>
        <member name="P:Spike.Channel.ConnectedOn">
            <summary>
            Gets the time of the creation of this connection.
            </summary>
        </member>
        <member name="P:Spike.Channel.ConnectedFor">
            <summary>
            Gets the current duration of this connection.
            </summary>
        </member>
        <member name="P:Spike.Channel.Address">
            <summary>
            Gets the IP Address of the remote endpoint of this connection.
            </summary>
        </member>
        <member name="P:Spike.Channel.IsRunning">
            <summary>
            Gets wether the connection is currently running.
            </summary>
        </member>
        <member name="P:Spike.Channel.BlockAllPackets">
            <summary>
            Gets or sets wether all packets received from this connection should be blocked.
            </summary>
        </member>
        <member name="P:Spike.Channel.Timeout">
            <summary>
            Gets or sets the timeout of this connection.
            </summary>
        </member>
        <member name="P:Spike.Channel.NextCheckActivity">
            <summary>
            Gets or sets when the next activity check should be performed.
            </summary>
        </member>
        <member name="P:Spike.Channel.Encoding">
            <summary>
            Gets the <see cref="T:Spike.Network.ProcessingSettings"/> used to encode outgoing messages.
            </summary>
        </member>
        <member name="P:Spike.Channel.Decoding">
            <summary>
            Gets the <see cref="T:Spike.Network.ProcessingSettings"/> used to decode incoming messages.
            </summary>
        </member>
        <member name="P:Spike.Channel.SendQueue">
            <summary>
            Gets the <see cref="P:Spike.Channel.SendQueue"/> used to send outgoing messages.
            </summary>
        </member>
        <member name="T:Spike.Channel.AsyncState">
            <summary>
            Represents a state of the channel.
            </summary>
        </member>
        <member name="F:Spike.Channel.AsyncState.Pending">
            <summary>
            Channel is pending.
            </summary>
        </member>
        <member name="F:Spike.Channel.AsyncState.Paused">
            <summary>
            Channel is paused.
            </summary>
        </member>
        <member name="M:Spike.TcpChannel.#ctor(System.Net.Sockets.Socket)">
            <summary>
            Constructs a new instance of <see cref="T:Spike.TcpChannel"/>.
            </summary>
            <param name="socket">The socket to construct the channel on.</param>
        </member>
        <member name="M:Spike.TcpChannel.Send(Spike.Network.Packet)">
            <summary>
            Sends a <see cref="T:Spike.Network.Packet"/> through this channel.
            </summary>
            <param name="p">The packet to send through the channel.</param>
        </member>
        <member name="M:Spike.TcpChannel.Flush">
            <summary>
            Flushes and sends all the pending packets.
            </summary>
            <returns>Whether the flush was completed or not.</returns>
        </member>
        <member name="M:Spike.TcpChannel.CheckAlive">
            <summary>
            Checks whether the underlying network mechanism is alive or not.
            </summary>
            <returns>Whether the underlying network mechanism is alive or not.</returns>
        </member>
        <member name="M:Spike.TcpChannel.Pause">
            <summary>
            Pauses the channel, suspending all communication.
            </summary>
        </member>
        <member name="M:Spike.TcpChannel.Resume">
            <summary>
            Resumes previously paused channel.
            </summary>
        </member>
        <member name="M:Spike.TcpChannel.Start">
            <summary>
            Starts listening on this <see cref="T:Spike.TcpChannel"/>.
            </summary>
        </member>
        <member name="M:Spike.TcpChannel.OnDispose(System.Boolean)">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or
            resetting unmanaged resources.
            </summary>
        </member>
        <member name="M:Spike.TcpChannel.ToString">
            <summary>
            Returns a string representation of this <see cref="T:Spike.Channel"/> instance.
            </summary>
            <returns>The string representation of this <see cref="T:Spike.Channel"/> instance</returns>
        </member>
        <member name="P:Spike.TcpChannel.Socket">
            <summary>
            Gets the underlying socket
            </summary>
        </member>
        <member name="T:Spike.Network.Http.IHttpSecurity">
            <summary>
            Defines the contract that Spike implements to validate HTTP security mechanisms
            </summary>
        </member>
        <member name="M:Spike.Network.Http.IHttpSecurity.Authorize(Spike.Network.Http.HttpContext)">
            <summary>
            Enables processing of HTTP Web requests by a custom HttpHandler that implements
            the IHttpHandler interface.
            </summary>
            <param name="context">An HttpContext object that provides references to the intrinsic
            server objects (for example, Request, Response, Session, and Server) used
            to service HTTP requests.</param>
            <returns>Returns whether the authorization is issued or not</returns>
        </member>
        <member name="T:Spike.Network.Http.ISecureHttpHandler">
            <summary>
            Defines the contract that Spike implements to synchronously process secure HTTP
            Web requests using custom HTTP handlers.
            </summary>
        </member>
        <member name="P:Spike.Network.Http.ISecureHttpHandler.Security">
            <summary>
            Gets or sets the security mechanism to use
            </summary>
        </member>
        <member name="T:Spike.Network.Http.HttpMimeMap">
            <summary>
            Represents a Extention-to-MIME map
            </summary>
        </member>
        <member name="M:Spike.Network.Http.HttpMimeMap.#ctor">
            <summary>
            Constructs a new instance of <see cref="T:Spike.Network.Http.HttpMimeMap"/> class.
            </summary>
        </member>
        <member name="M:Spike.Network.Http.HttpMimeMap.Add(System.String,System.String)">
            <summary>
            Adds a MIME type by extension to the lookup table
            </summary>
            <param name="extension">Extension to add</param>
            <param name="mimeType">Mime type for the extension</param>
        </member>
        <member name="M:Spike.Network.Http.HttpMimeMap.ContainsExtension(System.String)">
            <summary>
            Checks whether the lookup table contains the extension
            </summary>
            <param name="extension">File extension to check</param>
            <returns>True if found, otherwise false</returns>
        </member>
        <member name="M:Spike.Network.Http.HttpMimeMap.GetMime(System.String)">
            <summary>
            Gets a mime type for a particular extension
            </summary>
            <param name="extension">Extension to get the mime</param>
            <returns>Returns mime type string, and default .* value if not found</returns>
        </member>
        <member name="T:Spike.Network.Http.HttpUtility">
            <summary>
            Provides methods for encoding and decoding URLs when processing Web requests.
            </summary>
        </member>
        <member name="M:Spike.Network.Http.HttpUtility.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Spike.Network.Http.HttpUtility"/> class.
            </summary>
        </member>
        <member name="M:Spike.Network.Http.HttpUtility.GetSubDomain(System.Uri)">
            <summary>
            Retrieves the subdomain from the specified URL.
            </summary>
            <param name="url">The URL from which to retrieve the subdomain.</param>
            <returns>The subdomain if it exist, otherwise null.</returns>
        </member>
        <member name="M:Spike.Network.Http.HttpUtility.GetSubDomain(System.String)">
            <summary>
            Retrieves the subdomain from the specified URL.
            </summary>
            <param name="host">The URL from which to retrieve the subdomain.</param>
            <returns>The subdomain if it exist, otherwise null.</returns>
        </member>
        <member name="M:Spike.Network.Http.HttpUtility.HtmlAttributeEncode(System.String,System.IO.TextWriter)">
            <summary>
            Minimally converts a string into an HTML-encoded string and sends the encoded string to a TextWriter output stream.
            </summary>
            <param name="s">The string to encode</param>
            <param name="output">A TextWriter output stream.</param>
        </member>
        <member name="M:Spike.Network.Http.HttpUtility.HtmlAttributeEncode(System.String)">
            <summary>
            Minimally converts a string to an HTML-encoded string
            </summary>
            <param name="s">The string to encode.</param>
            <returns>An encoded string.</returns>
        </member>
        <member name="M:Spike.Network.Http.HttpUtility.UrlDecode(System.String)">
            <summary>
            Converts a string that has been encoded for transmission in a URL into a decoded string.
            </summary>
            <param name="str">The string to decode.</param>
            <returns>A decoded string.</returns>
        </member>
        <member name="M:Spike.Network.Http.HttpUtility.UrlDecode(System.String,System.Text.Encoding)">
            <summary>
            Converts a URL-encoded string into a decoded string, using the specified encoding object.
            </summary>
            <param name="s">The string to decode.</param>
            <param name="e">The Encoding that specifies the decoding scheme.</param>
            <returns>A decoded string.</returns>
        </member>
        <member name="M:Spike.Network.Http.HttpUtility.UrlDecode(System.Byte[],System.Text.Encoding)">
            <summary>
            Converts a URL-encoded byte array into a decoded string using the specified decoding object
            </summary>
            <param name="bytes">The array of bytes to decode.</param>
            <param name="e">The Encoding that specifies the decoding scheme.</param>
            <returns>A decoded string.</returns>
        </member>
        <member name="M:Spike.Network.Http.HttpUtility.UrlDecode(System.Byte[],System.Int32,System.Int32,System.Text.Encoding)">
            <summary>
            Converts a URL-encoded byte array into a decoded string using the specified encoding object, starting at the specified position in the array, and continuing for the specified number of bytes.
            </summary>
            <param name="bytes">The array of bytes to decode.</param>
            <param name="offset">The position in the byte to begin decoding.</param>
            <param name="count">The number of bytes to decode.</param>
            <param name="e"> Encoding object that specifies the decoding scheme.</param>
            <returns>A decoded string.</returns>
        </member>
        <member name="M:Spike.Network.Http.HttpUtility.UrlDecodeToBytes(System.Byte[])">
            <summary>
            Converts a URL-encoded array of bytes into a decoded array of bytes.
            </summary>
            <param name="bytes">The array of bytes to decode.</param>
            <returns>A decoded array of bytes.</returns>
        </member>
        <member name="M:Spike.Network.Http.HttpUtility.UrlDecodeToBytes(System.String)">
            <summary>
            Converts a URL-encoded string into a decoded array of bytes.
            </summary>
            <param name="str">The string to decode.</param>
            <returns>A decoded array of bytes.</returns>
        </member>
        <member name="M:Spike.Network.Http.HttpUtility.UrlDecodeToBytes(System.String,System.Text.Encoding)">
            <summary>
            Converts a URL-encoded string into a decoded array of bytes using the specified decoding object.
            </summary>
            <param name="str">The string to decode.</param>
            <param name="e">The Encoding object that specifies the decoding scheme.</param>
            <returns>A decoded array of bytes.</returns>
        </member>
        <member name="M:Spike.Network.Http.HttpUtility.UrlDecodeToBytes(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Converts a URL-encoded array of bytes into a decoded array of bytes, starting at the specified position in the array and continuing for the specified number of bytes.
            </summary>
            <param name="bytes">The array of bytes to decode.</param>
            <param name="offset">The position in the byte array at which to begin decoding.</param>
            <param name="count">The number of bytes to decode.</param>
            <returns>A decoded array of bytes.</returns>
        </member>
        <member name="M:Spike.Network.Http.HttpUtility.UrlEncode(System.String)">
            <summary>
            Encodes a URL string.
            </summary>
            <param name="str">The text to encode.</param>
            <returns>An encoded string.</returns>
        </member>
        <member name="M:Spike.Network.Http.HttpUtility.UrlEncode(System.String,System.Text.Encoding)">
            <summary>
            Encodes a URL string using the specified encoding object.
            </summary>
            <param name="s">The text to encode.</param>
            <param name="e">The Encoding object that specifies the encoding scheme.</param>
            <returns>An encoded string.</returns>
        </member>
        <member name="M:Spike.Network.Http.HttpUtility.UrlEncode(System.Byte[])">
            <summary>
            Converts a byte array into an encoded URL string.
            </summary>
            <param name="bytes">The array of bytes to encode.</param>
            <returns>An encoded string.</returns>
        </member>
        <member name="M:Spike.Network.Http.HttpUtility.UrlEncode(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Converts a byte array into a URL-encoded string, starting at the specified position in the array and continuing for the specified number of bytes.
            </summary>
            <param name="bytes">The array of bytes to encode.</param>
            <param name="offset">The position in the byte array at which to begin encoding.</param>
            <param name="count">The number of bytes to encode.</param>
            <returns>An encoded string.</returns>
        </member>
        <member name="M:Spike.Network.Http.HttpUtility.UrlEncodeToBytes(System.String)">
            <summary>
            Converts a string into a URL-encoded array of bytes.
            </summary>
            <param name="str"></param>
            <returns>An encoded array of bytes.</returns>
        </member>
        <member name="M:Spike.Network.Http.HttpUtility.UrlEncodeToBytes(System.String,System.Text.Encoding)">
            <summary>
            Converts a string into a URL-encoded array of bytes using the specified encoding object.
            </summary>
            <param name="str">The string to encode</param>
            <param name="e">The Encoding that specifies the encoding scheme.</param>
            <returns>An encoded array of bytes.</returns>
        </member>
        <member name="M:Spike.Network.Http.HttpUtility.UrlEncodeToBytes(System.Byte[])">
            <summary>
            Converts an array of bytes into a URL-encoded array of bytes.
            </summary>
            <param name="bytes">The array of bytes to encode.</param>
            <returns>An encoded array of bytes.</returns>
        </member>
        <member name="M:Spike.Network.Http.HttpUtility.UrlEncodeToBytes(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Converts an array of bytes into a URL-encoded array of bytes, starting at the specified position in the array and continuing for the specified number of bytes.
            </summary>
            <param name="bytes">The array of bytes to encode.</param>
            <param name="offset">The position in the byte array at which to begin encoding.</param>
            <param name="count">The number of bytes to encode.</param>
            <returns>An encoded array of bytes.</returns>
        </member>
        <member name="M:Spike.Network.Http.HttpUtility.UrlEncodeUnicode(System.String)">
            <summary>
            Converts a string into a Unicode string.
            </summary>
            <param name="str">The string to convert.</param>
            <returns>A Unicode string in %UnicodeValue notation.</returns>
        </member>
        <member name="M:Spike.Network.Http.HttpUtility.UrlEncodeUnicodeToBytes(System.String)">
            <summary>
            Converts a Unicode string into an array of bytes.
            </summary>
            <param name="str">The string to convert.</param>
            <returns>A byte array.</returns>
        </member>
        <member name="M:Spike.Network.Http.HttpUtility.UrlPathEncode(System.String)">
            <summary>
            Encodes a URL Path.
            </summary>
            <param name="value">The path to encode.</param>
            <returns>Encoded url path.</returns>
        </member>
        <member name="M:Spike.Network.Http.HttpUtility.HtmlDecode(System.String)">
            <summary>
            Decodes an HTML-encoded string and returns the decoded string.
            </summary>
            <param name="s">The HTML string to decode. </param>
            <returns>The decoded text.</returns>
        </member>
        <member name="M:Spike.Network.Http.HttpUtility.HtmlDecode(System.String,System.IO.TextWriter)">
            <summary>
            Decodes an HTML-encoded string and sends the resulting output to a TextWriter output stream.
            </summary>
            <param name="s">The HTML string to decode</param>
            <param name="output">The TextWriter output stream containing the decoded string. </param>
        </member>
        <member name="M:Spike.Network.Http.HttpUtility.HtmlEncode(System.String)">
            <summary>
            HTML-encodes a string and returns the encoded string.
            </summary>
            <param name="s">The text string to encode. </param>
            <returns>The HTML-encoded text.</returns>
        </member>
        <member name="M:Spike.Network.Http.HttpUtility.HtmlEncode(System.String,System.IO.TextWriter)">
            <summary>
            HTML-encodes a string and sends the resulting output to a TextWriter output stream.
            </summary>
            <param name="s">The string to encode. </param>
            <param name="output">The TextWriter output stream containing the encoded string. </param>
        </member>
        <member name="M:Spike.Network.Http.HttpUtility.ParseQueryString(System.Byte[])">
            <summary>
            Parses a query string into a NameValueCollection using UTF8 encoding.
            </summary>
            <param name="content">The query string to parse.</param>
            <returns>A NameValueCollection of query parameters and values.</returns>
        </member>
        <member name="M:Spike.Network.Http.HttpUtility.ParseQueryString(System.String)">
            <summary>
            Parses a query string into a NameValueCollection using UTF8 encoding.
            </summary>
            <param name="query">The query string to parse.</param>
            <returns>A NameValueCollection of query parameters and values.</returns>
        </member>
        <member name="M:Spike.Network.Http.HttpUtility.ParseQueryString(System.String,System.Text.Encoding)">
            <summary>
            Parses a query string into a NameValueCollection using the specified Encoding.
            </summary>
            <param name="query">The query string to parse.</param>
            <param name="encoding">The Encoding to use.</param>
            <returns>A NameValueCollection of query parameters and values.</returns>
        </member>
        <member name="M:Spike.Network.Http.HttpUtility.ParseUrl(System.String,System.String@,System.String@)">
            <summary>
            Parses the URL and returns the base and the query parts.
            </summary>
            <param name="url">The url string to parse.</param>
            <param name="page">The page (base) part as output argument.</param>
            <param name="query">The query part as output argument.</param>
            <returns>Whether the URL was parsed successfuly or not.</returns>
        </member>
        <member name="M:Spike.Network.Http.HttpUtility.GetPageBase(System.String)">
            <summary>
            Parses the URL and returns the base/page part.
            </summary>
            <param name="url">The url string to parse.</param>
            <returns>The base/page part.</returns>
        </member>
        <member name="M:Spike.Network.Http.HttpUtility.GetQuery(System.String)">
            <summary>
            Parses the URL and returns the query string part.
            </summary>
            <param name="url">The url string to parse.</param>
            <returns>The query string part</returns>
        </member>
        <member name="M:Spike.Network.Http.HttpUtility.IsHttp(System.Byte[])">
            <summary>
            Checks if the buffer starts as a http request
            </summary>
        </member>
        <member name="M:Spike.Network.Http.HttpUtility.Get(System.String,System.Int32,System.String@)">
            <summary>
            Issues a GET http request and returns the answer string.
            </summary>
            <param name="url">The url of the http request.</param>
            <param name="timeout">Timeout for operation.</param>
            <param name="answer">The parsed answer string</param>
            <returns>Whether it returned 200 or not.</returns>
        </member>
        <member name="M:Spike.Network.Http.HttpUtility.Post(System.String,System.Int32,System.String,System.String@)">
            <summary>
            Issues a POST http request and returns the answer string.
            </summary>
            <param name="url">The url of the http request.</param>
            <param name="timeout">Timeout for operation.</param>
            <param name="body">The body to embed in the post.</param>
            <param name="answer">The parsed answer string</param>
            <returns>Whether it returned 200 or not.</returns>
        </member>
        <member name="T:Spike.Network.Http.HttpVerb">
            <summary>
            Represents a HTTP verb (GET, POST...).
            </summary>
        </member>
        <member name="F:Spike.Network.Http.HttpVerb.Unknown">
            <summary>
            Unknown HTTP Verb.
            </summary>
        </member>
        <member name="F:Spike.Network.Http.HttpVerb.Get">
            <summary>
            <para>The GET method means retrieve whatever information (in the form of an entity) is identified by the Request-URI.
            If the Request-URI refers to a data-producing process, it is the produced data which shall be returned as the entity 
            in the response and not the source text of the process, unless that text happens to be the output of the process.</para>
            
            <para>The semantics of the GET method change to a "conditional GET" if the request message includes an 
            If-Modified-Since, If-Unmodified-Since, If-Match, If-None-Match, or If-Range header field. A conditional GET 
            method requests that the entity be transferred only under the circumstances described by the conditional header
            field(s). The conditional GET method is intended to reduce unnecessary network usage by allowing cached entities
            to be refreshed without requiring multiple requests or transferring data already held by the client.</para>
            
            <para>The semantics of the GET method change to a "partial GET" if the request message includes a Range header field.
            A partial GET requests that only part of the entity be transferred, as described in section 14.35. The partial GET 
            method is intended to reduce unnecessary network usage by allowing partially-retrieved entities to be completed 
            without transferring data already held by the client.</para>
            
            <para>The response to a GET request is cacheable if and only if it meets the requirements for HTTP caching 
            described in section 13.</para>
            
            <para>See section 15.1.3 for security considerations when used for forms.</para>
            </summary>
        </member>
        <member name="F:Spike.Network.Http.HttpVerb.Post">
            <summary>
            <para>The POST method is used to request that the origin server accept the entity enclosed in the request as a new
            subordinate of the resource identified by the Request-URI in the Request-Line. POST is designed to allow a 
            uniform method to cover the following functions:</para>
            <list type="bullet">
                  <item><description>Annotation of existing resources;</description></item>
                  <item><description>Posting a message to a bulletin board, newsgroup, mailing list,
                    or similar group of articles;</description></item>
                  <item><description>Providing a block of data, such as the result of submitting a
                    form, to a data-handling process;</description></item>
                  <item><description>Extending a database through an append operation.</description></item>
                  
            </list>
            
                  
            <para>The actual function performed by the POST method is determined by the server and is usually dependent on the 
            Request-URI. The posted entity is subordinate to that URI in the same way that a file is subordinate to a directory 
            containing it, a news article is subordinate to a newsgroup to which it is posted, or a record is subordinate
            to a database.</para>
            
            <para>The action performed by the POST method might not result in a resource that can be identified by a URI. In this
            case, either 200 (OK) or 204 (No Content) is the appropriate response status, depending on whether or not the response
            includes an entity that describes the result.</para>
            
            <para>If a resource has been created on the origin server, the response SHOULD be 201 (Created) and contain an entity
            which describes the status of the request and refers to the new resource, and a Location header (see section 14.30).
            Responses to this method are not cacheable, unless the response includes appropriate Cache-Control or Expires 
            header fields. However, the 303 (See Other) response can be used to direct the user agent to retrieve a
            cacheable resource.</para>
            <para>POST requests MUST obey the message transmission requirements set out in section 8.2.</para>
            </summary>
        </member>
        <member name="F:Spike.Network.Http.HttpVerb.Put">
            <summary>
            <para>The PUT method requests that the enclosed entity be stored under the supplied Request-URI. If the Request-URI
            refers to an already existing resource, the enclosed entity SHOULD be considered as a modified version of the one 
            residing on the origin server. If the Request-URI does not point to an existing resource, and that URI is capable 
            of being defined as a new resource by the requesting user agent, the origin server can create the resource with 
            that URI. If a new resource is created, the origin server MUST inform the user agent via the 201 (Created) response.
            If an existing resource is modified, either the 200 (OK) or 204 (No Content) response codes SHOULD be sent to 
            indicate successful completion of the request. If the resource could not be created or modified with the Request-URI, 
            an appropriate error response SHOULD be given that reflects the nature of the problem. The recipient of the entity 
            MUST NOT ignore any Content-* (e.g. Content-Range) headers that it does not understand or implement and MUST return 
            a 501 (Not Implemented) response in such cases.</para>
            
            <para>If the request passes through a cache and the Request-URI identifies one or more currently cached entities, 
            those entries SHOULD be treated as stale. Responses to this method are not cacheable.</para>
            
            <para>The fundamental difference between the POST and PUT requests is reflected in the different meaning of 
            the Request-URI. The URI in a POST request identifies the resource that will handle the enclosed entity. That 
            resource might be a data-accepting process, a gateway to some other protocol, or a separate entity that accepts
            annotations. In contrast, the URI in a PUT request identifies the entity enclosed with the request -- the user
            agent knows what URI is intended and the server MUST NOT attempt to apply the request to some other resource. 
            If the server desires that the request be applied to a different URI,
            it MUST send a 301 (Moved Permanently) response; the user agent MAY then make its own decision regarding whether 
            or not to redirect the request.</para>
            
            <para>A single resource MAY be identified by many different URIs. For example, an article might have a URI for
            identifying "the current version" which is separate from the URI identifying each particular version. In this 
            case, a PUT request on a general URI might result in several other URIs being defined by the origin server.</para>
            <para>HTTP/1.1 does not define how a PUT method affects the state of an origin server.</para>
            
            <para>PUT requests MUST obey the message transmission requirements set out in section 8.2.</para>
            
            <para>Unless otherwise specified for a particular entity-header, the entity-headers in the PUT request SHOULD
            be applied to the resource created or modified by the PUT.</para>
            </summary>
        </member>
        <member name="F:Spike.Network.Http.HttpVerb.Head">
            <summary>
            <para>The HEAD method is identical to GET except that the server MUST NOT return a message-body in the
            response. The metainformation contained in the HTTP headers in response to a HEAD request SHOULD be 
            identical to the information sent in response to a GET request. This method can be used for obtaining
            metainformation about the entity implied by the request without transferring the entity-body itself. This 
            method is often used for testing hypertext links for validity, accessibility, and recent modification.</para>
            
            <para>The response to a HEAD request MAY be cacheable in the sense that the information contained in the 
            response MAY be used to update a previously cached entity from that resource. If the new field values indicate 
            that the cached entity differs from the current entity (as would be indicated by a change in Content-Length,
            Content-MD5, ETag or Last-Modified), then the cache MUST treat the cache entry as stale.</para>
            </summary>
        </member>
        <member name="F:Spike.Network.Http.HttpVerb.Delete">
            <summary>
            <para>The DELETE method requests that the origin server delete the resource identified by the Request-URI.
            This method MAY be overridden by human intervention (or other means) on the origin server. The client 
            cannot be guaranteed that the operation has been carried out, even if the status code returned from the
            origin server indicates that the action has been completed successfully. However, the server SHOULD NOT 
            indicate success unless, at the time the response is given, it intends to delete the resource or move it to 
            an inaccessible location.</para>
            
            <para>A successful response SHOULD be 200 (OK) if the response includes an entity describing the status, 202
            (Accepted) if the action has not yet been enacted, or 204 (No Content) if the action has been enacted but 
            the response does not include an entity.</para>
            
            <para>If the request passes through a cache and the Request-URI identifies one or more currently cached 
            entities, those entries SHOULD be treated as stale. Responses to this method are not cacheable.</para>
            </summary>
        </member>
        <member name="F:Spike.Network.Http.HttpVerb.Options">
            <summary>
            <para>The OPTIONS method represents a request for information about the communication options available on the
            request/response chain identified by the Request-URI. This method allows the client to determine the options 
            and/or requirements associated with a resource, or the capabilities of a server, without implying a resource
            action or initiating a resource retrieval.</para>
            
            <para>Responses to this method are not cacheable.</para>
            
            <para>If the OPTIONS request includes an entity-body (as indicated by the presence of Content-Length or 
            Transfer-Encoding), then the media type MUST be indicated by a Content-Type field. Although this specification 
            does not define any use for such a body, future extensions to HTTP might use the OPTIONS body to make more
            detailed queries on the server. A server that does not support such an extension MAY discard the request body.</para>
            
            <para>If the Request-URI is an asterisk ("*"), the OPTIONS request is intended to apply to the server in general
            rather than to a specific resource. Since a server's communication options typically depend on the resource,
            the "*" request is only useful as a "ping" or "no-op" type of method; it does nothing beyond allowing the 
            client to test the capabilities of the server. For example, this can be used to test a proxy for HTTP/1.1
            compliance (or lack thereof).</para>
            
            <para>If the Request-URI is not an asterisk, the OPTIONS request applies only to the options that are 
            available when communicating with that resource.</para>
            <para>A 200 response SHOULD include any header fields that indicate optional features implemented by the
            server and applicable to that resource (e.g., Allow), possibly including extensions not defined by this 
            specification. The response body, if any, SHOULD also include information about the communication options.
            The format for such a body is not defined by this specification, but might be defined by future extensions 
            to HTTP. Content negotiation MAY be used to select the appropriate response format. If no response body is
            included, the response MUST include a Content-Length field with a field-value of "0".</para>
            
            <para>The Max-Forwards request-header field MAY be used to target a specific proxy in the request chain.
            When a proxy receives an OPTIONS request on an absoluteURI for which request forwarding is permitted,
            the proxy MUST check for a Max-Forwards field. If the Max-Forwards field-value is zero ("0"), the proxy 
            MUST NOT forward the message; instead, the proxy SHOULD respond with its own communication options. If 
            the Max-Forwards field-value is an integer greater than zero, the proxy MUST decrement the field-value 
            when it forwards the request. If no Max-Forwards field is present in the request, then the forwarded 
            request MUST NOT include a Max-Forwards field.</para>
            </summary>
        </member>
        <member name="F:Spike.Network.Http.HttpVerb.Trace">
            <summary>
            <para>The TRACE method is used to invoke a remote, application-layer loop- back of the request message. The final
            recipient of the request SHOULD reflect the message received back to the client as the entity-body of a 200 (OK)
            response. The final recipient is either the origin server or the first proxy or gateway to receive a Max-Forwards
            value of zero (0) in the request (see section 14.31). A TRACE request MUST NOT include an entity.</para>
            
            <para>TRACE allows the client to see what is being received at the other end of the request chain and use that 
            data for testing or diagnostic information. The value of the Via header field (section 14.45) is of particular 
            interest, since it acts as a trace of the request chain. Use of the Max-Forwards header field allows the client
            to limit the length of the request chain, which is useful for testing a chain of proxies forwarding messages in
            an infinite loop.</para>
            
            <para>If the request is valid, the response SHOULD contain the entire request message in the entity-body, with a 
            Content-Type of "message/http". Responses to this method MUST NOT be cached.</para>
            </summary>
        </member>
        <member name="F:Spike.Network.Http.HttpVerb.Connect">
            <summary>
            This specification reserves the method name CONNECT for use with a proxy that can dynamically switch to being a
            tunnel (e.g. SSL tunneling).
            </summary>
        </member>
        <member name="T:Spike.Network.Http.HttpBasicSecurityBase">
            <summary>
            Represents a base class for the contract that Spike implements to validate HTTP security mechanisms.
            </summary>
        </member>
        <member name="M:Spike.Network.Http.HttpBasicSecurityBase.Validate(Spike.Channel,System.String,System.String)">
            <summary>
            Validates the client credentials
            </summary>
            <param name="channel">The channel that have provided the credentials.</param>
            <param name="username">User name sent by the client</param>
            <param name="password">Password sent by the client</param>
            <returns>Whether the authentication was successfull or not</returns>
        </member>
        <member name="M:Spike.Network.Http.HttpBasicSecurityBase.Authorize(Spike.Network.Http.HttpContext)">
            <summary>
            Enables processing of HTTP Web requests by a custom HttpHandler that implements
            the IHttpHandler interface.
            </summary>
            <param name="context">An HttpContext object that provides references to the intrinsic
            server objects (for example, Request, Response, Session, and Server) used
            to service HTTP requests.</param>
            <returns>Returns whether the authorization is issued or not</returns>
        </member>
        <member name="T:Spike.Network.Http.DefaultHttpBasicSecurity">
            <summary>
            Defines a default http basic security validation mechanism.
            </summary>
        </member>
        <member name="F:Spike.Network.Http.DefaultHttpBasicSecurity.Instance">
            <summary>
            Gets a reusable instance of the security mechanism
            </summary>
        </member>
        <member name="M:Spike.Network.Http.DefaultHttpBasicSecurity.Validate(Spike.Channel,System.String,System.String)">
            <summary>
            Validates the client credentials
            </summary>
            <param name="channel">The channel whose credentials should be validated.</param>
            <param name="username">User name sent by the client</param>
            <param name="password">Password sent by the client</param>
            <returns>Whether the authentication was successfull or not</returns>
        </member>
        <member name="T:Spike.NetBinding">
            <summary>
            Defines a network binding 
            </summary>
        </member>
        <member name="T:Spike.IBinding">
            <summary>
            Defines a binding of an end point, a network listener and a message processor
            </summary>
        </member>
        <member name="P:Spike.IBinding.EndPoint">
            <summary>
            Gets or sets the EndPoint used for listening
            </summary>
        </member>
        <member name="P:Spike.IBinding.Listener">
            <summary>
            Gets or sets the listener used to listen on the EndPoint
            </summary>
        </member>
        <member name="M:Spike.NetBinding.#ctor(System.Net.EndPoint,Spike.IListener)">
            <summary>
            Creates a new network binding.
            </summary>
            <param name="endPoint">The local end-point to create the binding for.</param>
            <param name="listener">The listener used to accept incoming connections.</param>
        </member>
        <member name="M:Spike.NetBinding.ToString">
            <summary>
            Convers the <see cref="T:Spike.NetBinding"/> to a string representation.
            </summary>
            <returns>A string representation of <see cref="T:Spike.NetBinding"/> instance.</returns>
        </member>
        <member name="P:Spike.NetBinding.EndPoint">
            <summary>
            Gets the EndPoint used for listening
            </summary>
        </member>
        <member name="P:Spike.NetBinding.Listener">
            <summary>
            Gets the listener used to listen on the EndPoint
            </summary>
        </member>
        <member name="T:Spike.TcpBinding">
            <summary>
            Represents a TCP/IP Binding with a custom message processor.
            </summary>
        </member>
        <member name="M:Spike.TcpBinding.#ctor(System.Net.EndPoint)">
            <summary>
            Creates a new network binding.
            </summary>
            <param name="endPoint">The local end-point to create the binding for.</param>
        </member>
        <member name="M:Spike.TcpBinding.#ctor(System.Net.IPAddress,System.Int32)">
            <summary>
            Creates a new network binding.
            </summary>
            <param name="address">The local address to create the binding for.</param>
            <param name="port">The local port to create the binding for.</param>
        </member>
        <member name="M:Spike.TcpBinding.#ctor(System.Int32)">
            <summary>
            Creates a new network binding.
            </summary>
            <param name="port">The local port to create the binding for.</param>
        </member>
        <member name="T:Spike.Network.NetConfig">
            <summary>
            Represents network configuration options.
            </summary>
        </member>
        <member name="F:Spike.Network.NetConfig.AutoResolveUrl">
            <summary>
            A URL used for auto-resolving public of the IP address.
            </summary>
        </member>
        <member name="F:Spike.Network.NetConfig.AutoDetect">
            <summary>
            Whether the public IP address should be auto-detected or not.
            </summary>
        </member>
        <member name="M:Spike.Network.NetConfig.Initialize">
            <summary>
            Performs the initialization and hooks up the events. Called automatically by Spike-Engine.
            </summary>
        </member>
        <member name="M:Spike.Network.NetConfig.SetPublicAddress(System.String)">
            <summary>
            Sets public IP Address by resolving the address passed in
            </summary>
            <param name="address">The address value to resolve as the public IP address</param>
        </member>
        <member name="M:Spike.Network.NetConfig.Resolve(System.String,System.Net.IPAddress@)">
            <summary>
            Resolves the address
            </summary>
        </member>
        <member name="M:Spike.Network.NetConfig.FindPublicAddress">
            <summary>
            Finds a public IP Address, simply by querying some external website which yields back the IP
            </summary>
        </member>
        <member name="M:Spike.Network.NetConfig.OnClientConnect(Spike.ClientConnectEventArgs)">
            <summary>
            Invoked when a client is connected
            </summary>
        </member>
        <member name="M:Spike.Network.NetConfig.OnClientDisconnect(Spike.ClientDisconnectEventArgs)">
            <summary>
            Invoked when a client is disconnected
            </summary>
        </member>
        <member name="P:Spike.Network.NetConfig.PublicAddress">
            <summary>
            Gets or sets public IP address.
            </summary>
        </member>
        <member name="P:Spike.Network.NetConfig.LocalAddress">
            <summary>
            Gets the local IP address.
            </summary>
        </member>
        <member name="P:Spike.Network.NetConfig.LogConnectionEvents">
            <summary>
            Gets or sets whether the connection/disconnection events should be written to the log.
            </summary>
        </member>
        <member name="P:Spike.Network.NetConfig.PublicHttpEndpoints">
            <summary>
            Gets publicly accessible Http Endpoints
            </summary>
        </member>
        <member name="M:Spike.Network.SupportedTypes.IsSimple(System.Type)">
            <summary>
            Gets whether the type is a simple type.
            </summary>
            <param name="type">The type to check.</param>
            <returns>Whether the type is simple or not.</returns>
        </member>
        <member name="M:Spike.Network.SupportedTypes.IsComplex(System.Type)">
            <summary>
            Gets whether the type is a complex type.
            </summary>
            <param name="type">The type to check.</param>
            <returns>Whether the type is complex or not.</returns>
        </member>
        <member name="M:Spike.Network.SupportedTypes.IsCollection(System.Type)">
            <summary>
            Gets whether the type is a collection type.
            </summary>
            <param name="type">The type to check.</param>
            <returns>Whether the type is collection or not.</returns>
        </member>
        <member name="T:Spike.Network.ByteStream">
            <summary>
            Represents a stream of bytes.
            </summary>
        </member>
        <member name="M:Spike.Network.ByteStream.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Spike.Network.ByteStream"/> class with an expandable
            capacity initialized to zero.
            </summary>
        </member>
        <member name="M:Spike.Network.ByteStream.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Spike.Network.ByteStream"/> class with an expandable
            capacity initialized as specified.
            </summary>
            <param name="capacity">The initial size of the internal array in bytes.</param>
        </member>
        <member name="M:Spike.Network.ByteStream.#ctor(System.String,System.Text.Encoding)">
            <summary>
            Initializes a new instance of the <see cref="T:Spike.Network.ByteStream"/> class and writes a string data to the underlying buffer.
            </summary>
            <param name="text">String data to write.</param>
            <param name="encoding">Encoding to use for writing the string data.</param>
        </member>
        <member name="M:Spike.Network.ByteStream.#ctor(System.Byte[],System.Boolean)">
            <summary>
            Initializes a new non-resizable instance of the <see cref="T:Spike.Network.ByteStream"/> class
            based on the specified region of a byte array, with the <see cref="T:Spike.Network.ByteStream"/> CanWrite
            property set as specified.
            </summary>
            <param name="bytes">The array of unsigned bytes from which to create this stream.</param>
            <param name="writable">The setting of the <see cref="T:Spike.Network.ByteStream"/> CanWrite property, which determines whether the stream supports writing.</param>
        </member>
        <member name="M:Spike.Network.ByteStream.#ctor(System.Byte[])">
            <summary>
            Initializes a new resizable instance of the <see cref="T:Spike.Network.ByteStream"/> class
            based on the specified byte array.
            </summary>
            <param name="bytes">The array of unsigned bytes from which to create the current stream.</param>
        </member>
        <member name="M:Spike.Network.ByteStream.Write(System.Byte[])">
            <summary>
            Writes a block of bytes to the current stream using data read from buffer.
            </summary>
            <param name="bytes">The buffer to write data from.</param>
        </member>
        <member name="M:Spike.Network.ByteStream.Recycle">
            <summary>
            Recycles (resets) the object to the original state.
            </summary>
        </member>
        <member name="M:Spike.Network.ByteStream.Bind(Spike.ReleaseInstanceDelegate)">
            <summary>
            Binds an <see cref="T:Spike.ReleaseInstanceDelegate"/> which releases the <see cref="T:Spike.IRecyclable"/> object
            instance back to the pool.
            </summary>
            <param name="releaser">The <see cref="T:Spike.ReleaseInstanceDelegate"/> delegate to bind.</param>
        </member>
        <member name="M:Spike.Network.ByteStream.OnAcquire">
            <summary>
            Invoked when a pool acquires the instance. 
            </summary>
        </member>
        <member name="M:Spike.Network.ByteStream.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or
            resetting unmanaged resources.
            </summary>
        </member>
        <member name="M:Spike.Network.ByteStream.TryRelease">
            <summary>
            Attempts to release this instance back to the pool. If the instance is not pooled, nothing will be done.
            </summary>
        </member>
        <member name="M:Spike.Network.ByteStream.Finalize">
            <summary>
            Finalizer for the recyclable object.
            </summary>
        </member>
        <member name="P:Spike.Network.ByteStream.IsPooled">
            <summary>
            Gets whether this <see cref="T:Spike.Network.ByteStream"/> object is pooled or not.
            </summary>
        </member>
        <member name="T:Spike.Network.SocketPump">
            <summary>
            Represents a central socket manager.
            </summary>
        </member>
        <member name="M:Spike.Network.SocketPump.#ctor">
            <summary>
            Constructs a <see cref="T:Spike.Network.SocketPump"/> instance.
            </summary>
        </member>
        <member name="M:Spike.Network.SocketPump.AddBinding(Spike.IBinding)">
            <summary>
            Add a new binding
            </summary>
            <param name="binding">Binding to add</param>
        </member>
        <member name="M:Spike.Network.SocketPump.Bind">
            <summary>
            Using the configured bindings, binds all listeners.
            </summary>
        </member>
        <member name="M:Spike.Network.SocketPump.Slice">
            <summary>
            Performs a time slice on the object.
            </summary>
        </member>
        <member name="M:Spike.Network.SocketPump.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or
            resetting unmanaged resources.
            </summary>
        </member>
        <member name="M:Spike.Network.SocketPump.Dispose(System.Boolean)">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or
            resetting unmanaged resources.
            </summary>
            <param name="disposing">Whether it is a call from Dispose() method or from a finalizer.</param>
        </member>
        <member name="M:Spike.Network.SocketPump.Finalize">
            <summary>
            Finalizer for the recyclable object.
            </summary>
        </member>
        <member name="P:Spike.Network.SocketPump.Bindings">
            <summary>
            Gets all the bindings that are configured
            </summary>
        </member>
        <member name="P:Spike.Network.SocketPump.Listeners">
            <summary>
            Gets all defined listeners
            </summary>
        </member>
        <member name="P:Spike.Network.SocketPump.EndPoints">
            <summary>
            Gets all defined end points
            </summary>
        </member>
        <member name="F:Spike.Network.PacketHeader.TotalSize">
            <summary>
            Total size of the header for each packet
            </summary>
        </member>
        <member name="F:Spike.Network.PacketHeader.PacketLengthSize">
            <summary>
            Size of the header bytes that determine Lenght of the packet
            </summary>
        </member>
        <member name="F:Spike.Network.PacketHeader.PacketKeySize">
            <summary>
            Size of the header data to add to the message length
            </summary>
        </member>
        <member name="T:Spike.Network.TcpListener">
            <summary>
            Represents a <see cref="T:Spike.IListener"/> used to accept new TCP/IP connections.
            </summary>
        </member>
        <member name="T:Spike.IListener">
            <summary>
            Defines a network transport layer listener
            </summary>
        </member>
        <member name="M:Spike.IListener.Listen(System.Net.EndPoint)">
            <summary>
            Sets the listener in listening state on a particular end-point
            </summary>
            <param name="endpoint">End-point to listen to</param>
        </member>
        <member name="M:Spike.IListener.Slice">
            <summary>
            Slices the transport layer, getting all newly created connections
            </summary>
        </member>
        <member name="F:Spike.Network.TcpListener.EmptySockets">
            <summary>
            Empty socket list
            </summary>
        </member>
        <member name="M:Spike.Network.TcpListener.Listen(System.Net.EndPoint)">
            <summary>
            Sets the listener in listening state on a particular end-point
            </summary>
            <param name="endpoint">End-point to listen to</param>
        </member>
        <member name="M:Spike.Network.TcpListener.Slice">
            <summary>
            Slices the listener, getting all newly created sockets
            </summary>
        </member>
        <member name="M:Spike.Network.TcpListener.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or
            resetting unmanaged resources.
            </summary>
        </member>
        <member name="T:Spike.Providers.ClientProvider">
            <summary>
            Represents a provider for the <see cref="T:Spike.IClient"/> related functionnality.
            </summary>
        </member>
        <member name="M:Spike.Providers.ClientProvider.GetDefaultClient(Spike.Channel)">
            <summary>
            Gets a default client for a newly created channel.
            </summary>
            <param name="channel">The channel that have been just created.</param>
            <returns>The client to bind to the channel</returns>
        </member>
        <member name="T:Spike.Providers.DefaultClientProvider">
            <summary>
            Represents a provider for the <see cref="T:Spike.IClient"/> related functionnality.
            </summary>
        </member>
        <member name="M:Spike.Providers.DefaultClientProvider.GetDefaultClient(Spike.Channel)">
            <summary>
            Gets a default client for a newly created channel.
            </summary>
            <param name="channel">The channel that have been just created.</param>
            <returns>The client to bind to the channel</returns>
        </member>
        <member name="T:Spike.Providers.MetadataProvider">
            <summary>
            Represents a MetaData provider which provides Assembies and Types metadata 
            on which the server operates
            </summary>
        </member>
        <member name="M:Spike.Providers.MetadataProvider.AutoResolveModules">
            <summary>
            Attempts to resolve module assemblies automatically.
            </summary>
        </member>
        <member name="M:Spike.Providers.MetadataProvider.RegisterAssembly(System.Reflection.Assembly)">
            <summary>
            Registers a module assembly to the provider.
            </summary>
            <param name="assembly">The assembly to register.</param>
        </member>
        <member name="M:Spike.Providers.MetadataProvider.UnregisterAssembly(System.Reflection.Assembly)">
            <summary>
            Removes the module assembly from the provider.
            </summary>
            <param name="assembly">The assembly to unregister.</param>
        </member>
        <member name="M:Spike.Providers.MetadataProvider.GetTypesByAttribute(System.Type)">
            <summary>
            Gets all types containing a given attribute
            </summary>
            <param name="attribute">The attribute to lookup for</param>
            <returns>Returns a read-only collection of found types</returns>
        </member>
        <member name="M:Spike.Providers.MetadataProvider.GetTypesByAttribute(System.String)">
            <summary>
            Gets all types containing a given attribute
            </summary>
            <param name="attributeName">The attribute name to lookup for</param>
            <returns>Returns a read-only collection of found types</returns>
        </member>
        <member name="M:Spike.Providers.MetadataProvider.GetTypesByInterface(System.Type)">
            <summary>
            Gets all types implementing a given interface
            </summary>
            <param name="interfaceType">The interface to lookup for</param>
            <returns>Returns a read-only collection of found types</returns>
        </member>
        <member name="M:Spike.Providers.MetadataProvider.GetTypesByInterface(System.String)">
            <summary>
            Gets all types implementing a given interface
            </summary>
            <param name="interfaceName">The interface name to lookup for</param>
            <returns>Returns a read-only collection of found types</returns>
        </member>
        <member name="P:Spike.Providers.MetadataProvider.Assemblies">
            <summary>
            Gets the list of all registered assemblies in the provider.
            </summary>
        </member>
        <member name="P:Spike.Providers.MetadataProvider.Types">
            <summary>
            Gets the list of all types in the provider.
            </summary>
        </member>
        <member name="T:Spike.Providers.DefaultMetadataProvider">
            <summary>
            Represents a default implementation of a <see cref="T:Spike.Providers.MetadataProvider"/>.
            </summary>
        </member>
        <member name="M:Spike.Providers.DefaultMetadataProvider.AutoResolveModules">
            <summary>
            Attempts to resolve module assemblies automatically
            </summary>
        </member>
        <member name="M:Spike.Providers.DefaultMetadataProvider.RegisterAssembly(System.Reflection.Assembly)">
            <summary>
            Registers an assembly to the provider
            </summary>
            <param name="assembly">The assembly to register</param>
        </member>
        <member name="M:Spike.Providers.DefaultMetadataProvider.UnregisterAssembly(System.Reflection.Assembly)">
            <summary>
            Removes an assembly from the provider
            </summary>
            <param name="assembly">The assembly to unregister</param>
        </member>
        <member name="M:Spike.Providers.DefaultMetadataProvider.Dispose(System.Boolean)">
            <summary>
            Frees the metadata.
            </summary>
        </member>
        <member name="P:Spike.Providers.DefaultMetadataProvider.Assemblies">
            <summary>
            Gets the list of all registered assemblies in the provider
            </summary>
        </member>
        <member name="P:Spike.Providers.DefaultMetadataProvider.Types">
            <summary>
            Gets the list of all types in the provider
            </summary>
        </member>
        <member name="T:Spike.Providers.SecurityProvider">
            <summary>
            Represents a provider that provides a security mechanism for Spike Engine.
            </summary>
        </member>
        <member name="F:Spike.Providers.SecurityProvider.DefaultSpikeCredentialsUri">
            <summary>
            Gets the default spike credentials Uri, used for Spike operation security validation.
            </summary>
        </member>
        <member name="F:Spike.Providers.SecurityProvider.DefaultSpikeAuthType">
            <summary>
            Gets the default spike authentication type.
            </summary>
        </member>
        <member name="M:Spike.Providers.SecurityProvider.ValidateCredentials(Spike.IClient,Spike.Channel,System.Net.NetworkCredential)">
            <summary>
            Validates the credentials provided by the specified channel.
            </summary>
            <param name="client">The client that attempts to validate the credentials.</param>
            <param name="channel">The channel that provided the credentials.</param>
            <param name="credential">The credential to validate.</param>
            <returns>Whether the credentials are valid or not.</returns>
        </member>
        <member name="M:Spike.Providers.SecurityProvider.ValidateSecurity(Spike.IClient,Spike.Network.OperationInfo,Spike.Network.Packet)">
            <summary>
            Validates whether this <see cref="T:Spike.IClient"/> can call the specified operation.
            </summary>
            <param name="client">The client that attempts to validate the security.</param>
            <param name="operation">The target operation that is requeted.</param>
            <param name="request">The incoming request packet.</param>
            <returns>Whether the operation is allowed to be called or not.</returns>
        </member>
        <member name="M:Spike.Providers.SecurityProvider.CreateSessionToken">
            <summary>
            Generates a secure session token.
            </summary>
            <returns>Returns a secure session token.</returns>
        </member>
        <member name="T:Spike.Providers.DefaultSecurityProvider">
            <summary>
            Represents a provider that provides the default security mechanism for Spike Engine.
            </summary>
        </member>
        <member name="M:Spike.Providers.DefaultSecurityProvider.#ctor">
            <summary>
            Constructs a new <see cref="T:Spike.Providers.DefaultSecurityProvider"/> instance.
            </summary>
        </member>
        <member name="M:Spike.Providers.DefaultSecurityProvider.ValidateCredentials(Spike.IClient,Spike.Channel,System.Net.NetworkCredential)">
            <summary>
            Validates the credentials provided by the specified channel.
            </summary>
            <param name="client">The client that attempts to validate the credentials.</param>
            <param name="channel">The channel that provided the credentials.</param>
            <param name="credential">The credential to validate.</param>
            <returns>Whether the credentials are valid or not.</returns>
        </member>
        <member name="M:Spike.Providers.DefaultSecurityProvider.ValidateSecurity(Spike.IClient,Spike.Network.OperationInfo,Spike.Network.Packet)">
            <summary>
            Validates whether this <see cref="T:Spike.IClient"/> can call the specified operation.
            </summary>
            <param name="client">The client that attempts to validate the security.</param>
            <param name="operation">The target operation that is requeted.</param>
            <param name="request">The incoming request packet.</param>
            <returns>Whether the operation is allowed to be called or not.</returns>
        </member>
        <member name="P:Spike.Providers.DefaultSecurityProvider.FilePath">
            <summary>
            Gets the full path to the Security.xml file.
            </summary>
        </member>
        <member name="P:Spike.Providers.DefaultSecurityProvider.Users">
            <summary>
            Gets the collection of all users.
            </summary>
        </member>
        <member name="T:Spike.PeriodicWriter">
            <summary>
            Represents an implementation of a stream writer which performs the writes asynchronously and writes on a specific interval, minimizing the I/O calls.
            </summary>
        </member>
        <member name="M:Spike.PeriodicWriter.#ctor(System.String,System.Boolean)">
            <summary>
            Initializes a new instance of the System.IO.StreamWriter class for the specified
            file on the specified path, using the default encoding and buffer size. If
            the file exists, it can be either overwritten or appended to. If the file
            does not exist, this constructor creates a new file.
            </summary>
            <param name="path">The complete file path to write to.</param>
            <param name="append">Determines whether data is to be appended to the file. If the file exists
            and append is false, the file is overwritten. If the file exists and append
            is true, the data is appended to the file. Otherwise, a new file is created.</param>
        </member>
        <member name="M:Spike.PeriodicWriter.Enqueue(System.Action)">
            <summary>
            Checks if the write thread is there and we can write.
            </summary>
        </member>
        <member name="M:Spike.PeriodicWriter.ProcessMessageQueue">
            <summary>
            Writes the messages on the disk.
            </summary>
        </member>
        <member name="M:Spike.PeriodicWriter.Write(System.Char)">
            <summary>
            Writes a character to the stream.
            </summary>
            <param name="value">The character to write to the text stream.</param>
        </member>
        <member name="M:Spike.PeriodicWriter.Write(System.String)">
            <summary>
            Writes a string to the stream.
            </summary>
            <param name="value">The string to write to the stream. If value is null, nothing is written.</param>
        </member>
        <member name="M:Spike.PeriodicWriter.Write(System.Char[])">
            <summary>
            Writes a character array to the stream.
            </summary>
            <param name="buffer">A character array containing the data to write.</param>
        </member>
        <member name="M:Spike.PeriodicWriter.Write(System.Char[],System.Int32,System.Int32)">
            <summary>
             Writes a subarray of characters to the stream.
            </summary>
            <param name="buffer">A character array containing the data to write.</param>
            <param name="index">The index into buffer at which to begin writing.</param>
            <param name="count">The number of characters to read from buffer.</param>
        </member>
        <member name="M:Spike.PeriodicWriter.Dispose(System.Boolean)">
            <summary>
            Releases the unmanaged resources used by the System.IO.StreamWriter and optionally
            releases the managed resources.
            </summary>
            <param name="disposing">true to release both managed and unmanaged resources; false to release only
            unmanaged resources.</param>
        </member>
        <member name="P:Spike.PeriodicWriter.Interval">
            <summary>
            Gets or sets the inteval of writes
            </summary>
        </member>
        <member name="T:Spike.AtomicBoolean">
            <summary>
            Represents an atomic boolean.
            </summary>
        </member>
        <member name="T:Spike.IAtomicValue`1">
            <summary>
            Represents a contract for a value that can be assigned in an atomic way.
            </summary>
            <typeparam name="T">The type of the underlying value.</typeparam>
        </member>
        <member name="M:Spike.IAtomicValue`1.Assign(`0)">
            <summary>
            Atomically assigns a value to the structure
            </summary>
            <param name="value">The value to assign atomically</param>
        </member>
        <member name="M:Spike.IAtomicValue`1.Assign(System.Func{`0,`0})">
            <summary>
            Atomically pefroms a computation and assigns it to the atomic value
            </summary>
            <param name="computation">Computation to execute atomically</param>
        </member>
        <member name="P:Spike.IAtomicValue`1.Value">
            <summary>
            Gets the value of the atomic structure
            </summary>
        </member>
        <member name="M:Spike.AtomicBoolean.Assign(System.Boolean)">
            <summary>
            Atomically pefroms an assignment operation to the atomic value
            </summary>
            <param name="value">Value to set</param>
        </member>
        <member name="M:Spike.AtomicBoolean.SetTrue">
            <summary>
            Atomically assignes a true value to this <see cref="T:Spike.AtomicBoolean"/> reference.
            </summary>
        </member>
        <member name="M:Spike.AtomicBoolean.SetFalse">
            <summary>
            Atomically assignes a false value to this <see cref="T:Spike.AtomicBoolean"/> reference.
            </summary>
        </member>
        <member name="M:Spike.AtomicBoolean.Assign(System.Func{System.Boolean,System.Boolean})">
            <summary>
            Atomically pefroms a computation and assigns it to the atomic value
            </summary>
            <param name="computation">Computation to execute atomically</param>
        </member>
        <member name="M:Spike.AtomicBoolean.CompareExchange(System.Boolean,System.Boolean)">
            <summary>
            If the current value == the expected value of Atomically set the value to the given updated value.
            </summary>
            <param name="value1"></param>
            <param name="value2"></param>
            <returns></returns>
        </member>
        <member name="M:Spike.AtomicBoolean.Invert">
            <summary>
            Performs an atomic negation of the value (Unary operator "!")
            </summary>
        </member>
        <member name="M:Spike.AtomicBoolean.op_Equality(Spike.AtomicBoolean,Spike.AtomicBoolean)">
            <summary>
            Compares the equality of two values.
            </summary>
            <param name="left">Left parameter to compare.</param>
            <param name="right">Right parameter to compare.</param>
            <returns>Returns whether left and right parameters are equals or not.</returns>
        </member>
        <member name="M:Spike.AtomicBoolean.op_Equality(Spike.AtomicBoolean,System.Boolean)">
            <summary>
            Compares the equality of two values.
            </summary>
            <param name="left">Left parameter to compare.</param>
            <param name="right">Right parameter to compare.</param>
            <returns>Returns whether left and right parameters are equals or not.</returns>
        </member>
        <member name="M:Spike.AtomicBoolean.op_Inequality(Spike.AtomicBoolean,Spike.AtomicBoolean)">
            <summary>
            Checks for inequality of two values.
            </summary>
            <param name="left">Left parameter to compare.</param>
            <param name="right">Right parameter to compare.</param>
            <returns>Returns true whether left and right parameters are not equals, otherwise false.</returns>
        </member>
        <member name="M:Spike.AtomicBoolean.op_Inequality(Spike.AtomicBoolean,System.Boolean)">
            <summary>
            Checks for inequality of two values.
            </summary>
            <param name="left">Left parameter to compare.</param>
            <param name="right">Right parameter to compare.</param>
            <returns>Returns true whether left and right parameters are not equals, otherwise false.</returns>
        </member>
        <member name="M:Spike.AtomicBoolean.op_Explicit(Spike.AtomicBoolean)~System.Boolean">
            <summary>
            Converts the atomic value to a non-atomic one.
            </summary>
            <param name="value">The value to convert.</param>
            <returns>The converted value.</returns>
        </member>
        <member name="M:Spike.AtomicBoolean.op_Implicit(System.Boolean)~Spike.AtomicBoolean">
            <summary>
            Converts the non-atomic value to an atomic one.
            </summary>
            <param name="value">The value to convert.</param>
            <returns>The converted value.</returns>
        </member>
        <member name="M:Spike.AtomicBoolean.ToString">
            <summary>
            Converts the value of this instance to its equivalent string representation.
            </summary>
        </member>
        <member name="M:Spike.AtomicBoolean.Equals(System.Object)">
            <summary>
            Returns a value indicating whether this instance is equal to a specified value
            </summary>
        </member>
        <member name="M:Spike.AtomicBoolean.GetHashCode">
            <summary>
            Returns the hash code for this instance.
            </summary>
            <returns>A 32-bit signed integer hash code.</returns>
        </member>
        <member name="P:Spike.AtomicBoolean.Value">
            <summary>
            Gets the value of the atomic structure
            </summary>
        </member>
        <member name="T:Spike.AtomicByte">
            <summary>
            Represents an atomic byte value.
            </summary>
        </member>
        <member name="M:Spike.AtomicByte.Assign(System.Byte)">
            <summary>
            Atomically pefroms an assignment operation to the atomic value
            </summary>
            <param name="value">Value to set</param>
        </member>
        <member name="M:Spike.AtomicByte.Assign(System.Func{System.Byte,System.Byte})">
            <summary>
            Atomically pefroms a computation and assigns it to the atomic value
            </summary>
            <param name="computation">Computation to execute atomically</param>
        </member>
        <member name="M:Spike.AtomicByte.Add(System.Byte)">
            <summary>
            Performs an atomic addition of the given value to the current atomic value.
            </summary>
            <param name="value">The value to add to the current atomic value.</param>
        </member>
        <member name="M:Spike.AtomicByte.Subtract(System.Byte)">
            <summary>
            Performs an atomic subtraction of the given value from the current atomic value.
            </summary>
            <param name="value">The value to subtract from the current atomic value.</param>
        </member>
        <member name="M:Spike.AtomicByte.Multiply(System.Byte)">
            <summary>
            Performs an atomic multiplication of the given value and the current atomic value.
            </summary>
            <param name="value">The value to multiply the current atomic value.</param>
        </member>
        <member name="M:Spike.AtomicByte.Divide(System.Byte)">
            <summary>
            Performs an atomic division of the current atomic value by the given value.
            </summary>
            <param name="value">The value to divide the current atomic value by.</param>
        </member>
        <member name="M:Spike.AtomicByte.CompareExchange(System.Byte,System.Byte)">
            <summary>
            Compares two values for equality and, if they are equal, replaces one of the values.
            </summary>
            <param name="value1">First value to compare.</param>
            <param name="value2">Second value to compare.</param>
            <returns>The original value in value1.</returns>
        </member>
        <member name="M:Spike.AtomicByte.Decrement">
            <summary>
            Atomically decrements current value.
            </summary>
        </member>
        <member name="M:Spike.AtomicByte.Increment">
            <summary>
            Atomically increments the current value.
            </summary>
        </member>
        <member name="M:Spike.AtomicByte.LeftShift(System.Int32)">
            <summary>
            Atomically performs a left shift operation by the given value.
            </summary>
            <param name="value">The amount to atomically shift by.</param>
        </member>
        <member name="M:Spike.AtomicByte.RightShift(System.Int32)">
            <summary>
            Atomically performs a right shift operation by the given value.
            </summary>
            <param name="value">The amount to atomically shift by.</param>
        </member>
        <member name="M:Spike.AtomicByte.OneComplement">
            <summary>
            Atomically computes one's completement of the current value.
            </summary>
        </member>
        <member name="M:Spike.AtomicByte.BitwiseAnd(System.Byte)">
            <summary>
            Atomically computes bitewise AND on the current value.
            </summary>
            <param name="value">Value to compute the AND operation with.</param>
        </member>
        <member name="M:Spike.AtomicByte.BitwiseInclusiveOr(System.Byte)">
            <summary>
            Atomically computes bitewise OR on the current value.
            </summary>
            <param name="value">Value to compute the OR operation with.</param>
        </member>
        <member name="M:Spike.AtomicByte.BitwiseExclusiveOr(System.Byte)">
            <summary>
            Atomically computes exclusive bitewise OR on the current value.
            </summary>
            <param name="value">Value to compute the exclusive OR operation with.</param>
        </member>
        <member name="M:Spike.AtomicByte.op_RightShift(Spike.AtomicByte,System.Int32)">
            <summary>
            Performs a bitwise shift and returns a new atomic value for the result of the operation.
            </summary>
            <param name="left">The left operand.</param>
            <param name="right">The amount of bytes to shift.</param>
            <returns>A new atomic value that represents the result of the operation.</returns>
        </member>
        <member name="M:Spike.AtomicByte.op_LeftShift(Spike.AtomicByte,System.Int32)">
            <summary>
            Performs a bitwise shift and returns a new atomic value for the result of the operation.
            </summary>
            <param name="left">The left operand.</param>
            <param name="right">The amount of bytes to shift.</param>
            <returns>A new atomic value that represents the result of the operation.</returns>
        </member>
        <member name="M:Spike.AtomicByte.op_Addition(Spike.AtomicByte,System.Byte)">
            <summary>
            Performs an addition and returns a new atomic value for the result of the operation.
            </summary>
            <param name="left">The left operand.</param>
            <param name="right">The value to add.</param>
            <returns>A new atomic value that represents the result of the operation.</returns>
        </member>
        <member name="M:Spike.AtomicByte.op_Addition(Spike.AtomicByte,Spike.AtomicByte)">
            <summary>
            Performs an addition and returns a new atomic value for the result of the operation.
            </summary>
            <param name="left">The left operand.</param>
            <param name="right">The value to add.</param>
            <returns>A new atomic value that represents the result of the operation.</returns>
        </member>
        <member name="M:Spike.AtomicByte.op_Subtraction(Spike.AtomicByte,System.Byte)">
            <summary>
            Performs a subtraction and returns a new atomic value for the result of the operation.
            </summary>
            <param name="left">The left operand.</param>
            <param name="right">The value to subtract.</param>
            <returns>A new atomic value that represents the result of the operation.</returns>
        </member>
        <member name="M:Spike.AtomicByte.op_Subtraction(Spike.AtomicByte,Spike.AtomicByte)">
            <summary>
            Performs a subtraction and returns a new atomic value for the result of the operation.
            </summary>
            <param name="left">The left operand.</param>
            <param name="right">The value to subtract.</param>
            <returns>A new atomic value that represents the result of the operation.</returns>
        </member>
        <member name="M:Spike.AtomicByte.op_Multiply(Spike.AtomicByte,System.Byte)">
            <summary>
            Performs a multiplication and returns a new atomic value for the result of the operation.
            </summary>
            <param name="left">The left operand.</param>
            <param name="right">The value to multiply by.</param>
            <returns>A new atomic value that represents the result of the operation.</returns>
        </member>
        <member name="M:Spike.AtomicByte.op_Multiply(Spike.AtomicByte,Spike.AtomicByte)">
            <summary>
            Performs a multiplication and returns a new atomic value for the result of the operation.
            </summary>
            <param name="left">The left operand.</param>
            <param name="right">The value to multiply by.</param>
            <returns>A new atomic value that represents the result of the operation.</returns>
        </member>
        <member name="M:Spike.AtomicByte.op_Division(Spike.AtomicByte,System.Byte)">
            <summary>
            Performs a division and returns a new atomic value for the result of the operation.
            </summary>
            <param name="left">The left operand.</param>
            <param name="right">The value to divide by.</param>
            <returns>A new atomic value that represents the result of the operation.</returns>
        </member>
        <member name="M:Spike.AtomicByte.op_Division(Spike.AtomicByte,Spike.AtomicByte)">
            <summary>
            Performs a division and returns a new atomic value for the result of the operation.
            </summary>
            <param name="left">The left operand.</param>
            <param name="right">The value to divide by.</param>
            <returns>A new atomic value that represents the result of the operation.</returns>
        </member>
        <member name="M:Spike.AtomicByte.op_Modulus(Spike.AtomicByte,System.Byte)">
            <summary>
            Performs a modulo operation and returns a new atomic value for the result of the operation.
            </summary>
            <param name="left">The left operand.</param>
            <param name="right">The value to divide by.</param>
            <returns>A new atomic value that represents the result of the operation.</returns>
        </member>
        <member name="M:Spike.AtomicByte.op_Modulus(Spike.AtomicByte,Spike.AtomicByte)">
            <summary>
            Performs a modulo operation and returns a new atomic value for the result of the operation.
            </summary>
            <param name="left">The left operand.</param>
            <param name="right">The value to divide by.</param>
            <returns>A new atomic value that represents the result of the operation.</returns>
        </member>
        <member name="M:Spike.AtomicByte.op_BitwiseAnd(Spike.AtomicByte,System.Byte)">
            <summary>
            Performs a bitwise and operation and returns a new atomic value for the result of the operation.
            </summary>
            <param name="left">The left operand.</param>
            <param name="right">The right operand.</param>
            <returns>A new atomic value that represents the result of the operation.</returns>
        </member>
        <member name="M:Spike.AtomicByte.op_BitwiseAnd(Spike.AtomicByte,Spike.AtomicByte)">
            <summary>
            Performs a bitwise and operation and returns a new atomic value for the result of the operation.
            </summary>
            <param name="left">The left operand.</param>
            <param name="right">The right operand.</param>
            <returns>A new atomic value that represents the result of the operation.</returns>
        </member>
        <member name="M:Spike.AtomicByte.op_BitwiseOr(Spike.AtomicByte,System.Byte)">
            <summary>
            Performs a bitwise OR operation and returns a new atomic value for the result of the operation.
            </summary>
            <param name="left">The left operand.</param>
            <param name="right">The right operand.</param>
            <returns>A new atomic value that represents the result of the operation.</returns>
        </member>
        <member name="M:Spike.AtomicByte.op_BitwiseOr(Spike.AtomicByte,Spike.AtomicByte)">
            <summary>
            Performs a bitwise OR operation and returns a new atomic value for the result of the operation.
            </summary>
            <param name="left">The left operand.</param>
            <param name="right">The right operand.</param>
            <returns>A new atomic value that represents the result of the operation.</returns>
        </member>
        <member name="M:Spike.AtomicByte.op_ExclusiveOr(Spike.AtomicByte,System.Byte)">
            <summary>
            Performs a bitwise exclusive OR operation and returns a new atomic value for the result of the operation.
            </summary>
            <param name="left">The left operand.</param>
            <param name="right">The right operand.</param>
            <returns>A new atomic value that represents the result of the operation.</returns>
        </member>
        <member name="M:Spike.AtomicByte.op_ExclusiveOr(Spike.AtomicByte,Spike.AtomicByte)">
            <summary>
            Performs a bitwise exclusive OR operation and returns a new atomic value for the result of the operation.
            </summary>
            <param name="left">The left operand.</param>
            <param name="right">The right operand.</param>
            <returns>A new atomic value that represents the result of the operation.</returns>
        </member>
        <member name="M:Spike.AtomicByte.op_OnesComplement(Spike.AtomicByte)">
            <summary>
            Performs a bitwise complement operation and returns a new atomic value for the result of the operation.
            </summary>
            <param name="value">The value to compute the complement of.</param>
            <returns>A new atomic value that represents the result of the operation.</returns>
        </member>
        <member name="M:Spike.AtomicByte.op_Increment(Spike.AtomicByte)">
            <summary>
            Atomically increments the current value.
            </summary>
            <param name="value">The value to increment.</param>
            <returns>Incremented value</returns>
        </member>
        <member name="M:Spike.AtomicByte.op_Decrement(Spike.AtomicByte)">
            <summary>
            Atomically decrements the current value.
            </summary>
            <param name="value">The value to decrements.</param>
            <returns>Decremented value</returns>
        </member>
        <member name="M:Spike.AtomicByte.op_Equality(Spike.AtomicByte,Spike.AtomicByte)">
            <summary>
            Compares the equality of two values.
            </summary>
            <param name="left">Left parameter to compare.</param>
            <param name="right">Right parameter to compare.</param>
            <returns>Returns whether left and right parameters are equals or not.</returns>
        </member>
        <member name="M:Spike.AtomicByte.op_Equality(Spike.AtomicByte,System.Byte)">
            <summary>
            Compares the equality of two values.
            </summary>
            <param name="left">Left parameter to compare.</param>
            <param name="right">Right parameter to compare.</param>
            <returns>Returns whether left and right parameters are equals or not.</returns>
        </member>
        <member name="M:Spike.AtomicByte.op_Inequality(Spike.AtomicByte,Spike.AtomicByte)">
            <summary>
            Checks for inequality of two values.
            </summary>
            <param name="left">Left parameter to compare.</param>
            <param name="right">Right parameter to compare.</param>
            <returns>Returns true whether left and right parameters are not equals, otherwise false.</returns>
        </member>
        <member name="M:Spike.AtomicByte.op_Inequality(Spike.AtomicByte,System.Byte)">
            <summary>
            Checks for inequality of two values.
            </summary>
            <param name="left">Left parameter to compare.</param>
            <param name="right">Right parameter to compare.</param>
            <returns>Returns true whether left and right parameters are not equals, otherwise false.</returns>
        </member>
        <member name="M:Spike.AtomicByte.op_LessThan(Spike.AtomicByte,Spike.AtomicByte)">
            <summary>
            Checks whether the left argument is smaller than the right one.
            </summary>
            <param name="left">Left parameter to compare.</param>
            <param name="right">Right parameter to compare.</param>
            <returns>True if the left argument is smaller than the right one, false otherwise.</returns>
        </member>
        <member name="M:Spike.AtomicByte.op_LessThan(Spike.AtomicByte,System.Byte)">
            <summary>
            Checks whether the left argument is smaller than the right one.
            </summary>
            <param name="left">Left parameter to compare.</param>
            <param name="right">Right parameter to compare.</param>
            <returns>True if the left argument is smaller than the right one, false otherwise.</returns>
        </member>
        <member name="M:Spike.AtomicByte.op_GreaterThan(Spike.AtomicByte,Spike.AtomicByte)">
            <summary>
            Checks whether the left argument is bigger than the right one.
            </summary>
            <param name="left">Left parameter to compare.</param>
            <param name="right">Right parameter to compare.</param>
            <returns>True if the left argument is bigger than the right one, false otherwise.</returns>
        </member>
        <member name="M:Spike.AtomicByte.op_GreaterThan(Spike.AtomicByte,System.Byte)">
            <summary>
            Checks whether the left argument is bigger than the right one.
            </summary>
            <param name="left">Left parameter to compare.</param>
            <param name="right">Right parameter to compare.</param>
            <returns>True if the left argument is bigger than the right one, false otherwise.</returns>
        </member>
        <member name="M:Spike.AtomicByte.op_LessThanOrEqual(Spike.AtomicByte,Spike.AtomicByte)">
            <summary>
            Checks whether the left argument is smaller or equals than the right one.
            </summary>
            <param name="left">Left parameter to compare.</param>
            <param name="right">Right parameter to compare.</param>
            <returns>True if the left argument is smaller or equals than the right one, false otherwise.</returns>
        </member>
        <member name="M:Spike.AtomicByte.op_LessThanOrEqual(Spike.AtomicByte,System.Byte)">
            <summary>
            Checks whether the left argument is smaller or equals than the right one.
            </summary>
            <param name="left">Left parameter to compare.</param>
            <param name="right">Right parameter to compare.</param>
            <returns>True if the left argument is smaller or equals than the right one, false otherwise.</returns>
        </member>
        <member name="M:Spike.AtomicByte.op_GreaterThanOrEqual(Spike.AtomicByte,Spike.AtomicByte)">
            <summary>
            Checks whether the left argument is bigger or equals than the right one.
            </summary>
            <param name="left">Left parameter to compare.</param>
            <param name="right">Right parameter to compare.</param>
            <returns>True if the left argument is bigger or equals than the right one, false otherwise.</returns>
        </member>
        <member name="M:Spike.AtomicByte.op_GreaterThanOrEqual(Spike.AtomicByte,System.Byte)">
            <summary>
            Checks whether the left argument is bigger or equals than the right one.
            </summary>
            <param name="left">Left parameter to compare.</param>
            <param name="right">Right parameter to compare.</param>
            <returns>True if the left argument is bigger or equals than the right one, false otherwise.</returns>
        </member>
        <member name="M:Spike.AtomicByte.op_Explicit(Spike.AtomicByte)~System.Byte">
            <summary>
            Converts the atomic value to a non-atomic one.
            </summary>
            <param name="value">The value to convert.</param>
            <returns>The converted value.</returns>
        </member>
        <member name="M:Spike.AtomicByte.op_Implicit(System.Byte)~Spike.AtomicByte">
            <summary>
            Converts the non-atomic value to an atomic one.
            </summary>
            <param name="value">The value to convert.</param>
            <returns>The converted value.</returns>
        </member>
        <member name="M:Spike.AtomicByte.ToString">
            <summary>
            Converts the value of this instance to its equivalent string representation.
            </summary>
        </member>
        <member name="M:Spike.AtomicByte.Equals(System.Object)">
            <summary>
            Returns a value indicating whether this instance is equal to a specified value
            </summary>
        </member>
        <member name="M:Spike.AtomicByte.GetHashCode">
            <summary>
            Returns the hash code for this instance.
            </summary>
            <returns>A 32-bit signed integer hash code.</returns>
        </member>
        <member name="M:Spike.AtomicByte.CompareTo(Spike.AtomicByte)">
            <summary>
            Compares this instance to a specified value and returns an indication of their relative values.
            </summary>
            <param name="value">A value to compare.</param>
            <returns>A signed integer that indicates the relative order of this instance and value.Return
            Value Description Less than zero This instance is less than value. Zero This
            instance is equal to value. Greater than zero This instance is greater than value.
            </returns>
        </member>
        <member name="M:Spike.AtomicByte.CompareTo(System.Object)">
            <summary>
            Compares this instance to a specified value and returns an indication of their relative values.
            </summary>
            <param name="target">A value to compare.</param>
            <returns>A signed integer that indicates the relative order of this instance and value.Return
            Value Description Less than zero This instance is less than value. Zero This
            instance is equal to value. Greater than zero This instance is greater than value.
            </returns>
        </member>
        <member name="P:Spike.AtomicByte.Value">
            <summary>
            Gets the value of the atomic structure
            </summary>
        </member>
        <member name="T:Spike.AtomicChar">
            <summary>
            Represents an atomic char value.
            </summary>
        </member>
        <member name="M:Spike.AtomicChar.Assign(System.Char)">
            <summary>
            Atomically pefroms an assignment operation to the atomic value
            </summary>
            <param name="value">Value to set</param>
        </member>
        <member name="M:Spike.AtomicChar.Assign(System.Func{System.Char,System.Char})">
            <summary>
            Atomically pefroms a computation and assigns it to the atomic value
            </summary>
            <param name="computation">Computation to execute atomically</param>
        </member>
        <member name="M:Spike.AtomicChar.Add(System.Char)">
            <summary>
            Performs an atomic addition of the given value to the current atomic value.
            </summary>
            <param name="value">The value to add to the current atomic value.</param>
        </member>
        <member name="M:Spike.AtomicChar.Subtract(System.Char)">
            <summary>
            Performs an atomic subtraction of the given value from the current atomic value.
            </summary>
            <param name="value">The value to subtract from the current atomic value.</param>
        </member>
        <member name="M:Spike.AtomicChar.Multiply(System.Char)">
            <summary>
            Performs an atomic multiplication of the given value and the current atomic value.
            </summary>
            <param name="value">The value to multiply the current atomic value.</param>
        </member>
        <member name="M:Spike.AtomicChar.Divide(System.Char)">
            <summary>
            Performs an atomic division of the current atomic value by the given value.
            </summary>
            <param name="value">The value to divide the current atomic value by.</param>
        </member>
        <member name="M:Spike.AtomicChar.CompareExchange(System.Char,System.Char)">
            <summary>
            Compares two values for equality and, if they are equal, replaces one of the values.
            </summary>
            <param name="value1">First value to compare.</param>
            <param name="value2">Second value to compare.</param>
            <returns>The original value in value1.</returns>
        </member>
        <member name="M:Spike.AtomicChar.Decrement">
            <summary>
            Atomically decrements current value.
            </summary>
        </member>
        <member name="M:Spike.AtomicChar.Increment">
            <summary>
            Atomically increments the current value.
            </summary>
        </member>
        <member name="M:Spike.AtomicChar.LeftShift(System.Int32)">
            <summary>
            Atomically performs a left shift operation by the given value.
            </summary>
            <param name="value">The amount to atomically shift by.</param>
        </member>
        <member name="M:Spike.AtomicChar.RightShift(System.Int32)">
            <summary>
            Atomically performs a right shift operation by the given value.
            </summary>
            <param name="value">The amount to atomically shift by.</param>
        </member>
        <member name="M:Spike.AtomicChar.OneComplement">
            <summary>
            Atomically computes one's completement of the current value.
            </summary>
        </member>
        <member name="M:Spike.AtomicChar.BitwiseAnd(System.Char)">
            <summary>
            Atomically computes bitewise AND on the current value.
            </summary>
            <param name="value">Value to compute the AND operation with.</param>
        </member>
        <member name="M:Spike.AtomicChar.BitwiseInclusiveOR(System.Char)">
            <summary>
            Atomically computes bitewise OR on the current value.
            </summary>
            <param name="value">Value to compute the OR operation with.</param>
        </member>
        <member name="M:Spike.AtomicChar.BitwiseExclusiveOr(System.Char)">
            <summary>
            Atomically computes exclusive bitewise OR on the current value.
            </summary>
            <param name="value">Value to compute the exclusive OR operation with.</param>
        </member>
        <member name="M:Spike.AtomicChar.op_RightShift(Spike.AtomicChar,System.Int32)">
            <summary>
            Performs a bitwise shift and returns a new atomic value for the result of the operation.
            </summary>
            <param name="left">The left operand.</param>
            <param name="right">The amount of bytes to shift.</param>
            <returns>A new atomic value that represents the result of the operation.</returns>
        </member>
        <member name="M:Spike.AtomicChar.op_LeftShift(Spike.AtomicChar,System.Int32)">
            <summary>
            Performs a bitwise shift and returns a new atomic value for the result of the operation.
            </summary>
            <param name="left">The left operand.</param>
            <param name="right">The amount of bytes to shift.</param>
            <returns>A new atomic value that represents the result of the operation.</returns>
        </member>
        <member name="M:Spike.AtomicChar.op_Addition(Spike.AtomicChar,System.Char)">
            <summary>
            Performs an addition and returns a new atomic value for the result of the operation.
            </summary>
            <param name="left">The left operand.</param>
            <param name="right">The value to add.</param>
            <returns>A new atomic value that represents the result of the operation.</returns>
        </member>
        <member name="M:Spike.AtomicChar.op_Addition(Spike.AtomicChar,Spike.AtomicChar)">
            <summary>
            Performs an addition and returns a new atomic value for the result of the operation.
            </summary>
            <param name="left">The left operand.</param>
            <param name="right">The value to add.</param>
            <returns>A new atomic value that represents the result of the operation.</returns>
        </member>
        <member name="M:Spike.AtomicChar.op_Subtraction(Spike.AtomicChar,System.Char)">
            <summary>
            Performs a subtraction and returns a new atomic value for the result of the operation.
            </summary>
            <param name="left">The left operand.</param>
            <param name="right">The value to subtract.</param>
            <returns>A new atomic value that represents the result of the operation.</returns>
        </member>
        <member name="M:Spike.AtomicChar.op_Subtraction(Spike.AtomicChar,Spike.AtomicChar)">
            <summary>
            Performs a subtraction and returns a new atomic value for the result of the operation.
            </summary>
            <param name="left">The left operand.</param>
            <param name="right">The value to subtract.</param>
            <returns>A new atomic value that represents the result of the operation.</returns>
        </member>
        <member name="M:Spike.AtomicChar.op_Multiply(Spike.AtomicChar,System.Char)">
            <summary>
            Performs a multiplication and returns a new atomic value for the result of the operation.
            </summary>
            <param name="left">The left operand.</param>
            <param name="right">The value to multiply by.</param>
            <returns>A new atomic value that represents the result of the operation.</returns>
        </member>
        <member name="M:Spike.AtomicChar.op_Multiply(Spike.AtomicChar,Spike.AtomicChar)">
            <summary>
            Performs a multiplication and returns a new atomic value for the result of the operation.
            </summary>
            <param name="left">The left operand.</param>
            <param name="right">The value to multiply by.</param>
            <returns>A new atomic value that represents the result of the operation.</returns>
        </member>
        <member name="M:Spike.AtomicChar.op_Division(Spike.AtomicChar,System.Char)">
            <summary>
            Performs a division and returns a new atomic value for the result of the operation.
            </summary>
            <param name="left">The left operand.</param>
            <param name="right">The value to divide by.</param>
            <returns>A new atomic value that represents the result of the operation.</returns>
        </member>
        <member name="M:Spike.AtomicChar.op_Division(Spike.AtomicChar,Spike.AtomicChar)">
            <summary>
            Performs a division and returns a new atomic value for the result of the operation.
            </summary>
            <param name="left">The left operand.</param>
            <param name="right">The value to divide by.</param>
            <returns>A new atomic value that represents the result of the operation.</returns>
        </member>
        <member name="M:Spike.AtomicChar.op_Modulus(Spike.AtomicChar,System.Char)">
            <summary>
            Performs a modulo operation and returns a new atomic value for the result of the operation.
            </summary>
            <param name="left">The left operand.</param>
            <param name="right">The value to divide by.</param>
            <returns>A new atomic value that represents the result of the operation.</returns>
        </member>
        <member name="M:Spike.AtomicChar.op_Modulus(Spike.AtomicChar,Spike.AtomicChar)">
            <summary>
            Performs a modulo operation and returns a new atomic value for the result of the operation.
            </summary>
            <param name="left">The left operand.</param>
            <param name="right">The value to divide by.</param>
            <returns>A new atomic value that represents the result of the operation.</returns>
        </member>
        <member name="M:Spike.AtomicChar.op_BitwiseAnd(Spike.AtomicChar,System.Char)">
            <summary>
            Performs a bitwise and operation and returns a new atomic value for the result of the operation.
            </summary>
            <param name="left">The left operand.</param>
            <param name="right">The right operand.</param>
            <returns>A new atomic value that represents the result of the operation.</returns>
        </member>
        <member name="M:Spike.AtomicChar.op_BitwiseAnd(Spike.AtomicChar,Spike.AtomicChar)">
            <summary>
            Performs a bitwise and operation and returns a new atomic value for the result of the operation.
            </summary>
            <param name="left">The left operand.</param>
            <param name="right">The right operand.</param>
            <returns>A new atomic value that represents the result of the operation.</returns>
        </member>
        <member name="M:Spike.AtomicChar.op_BitwiseOr(Spike.AtomicChar,System.Char)">
            <summary>
            Performs a bitwise OR operation and returns a new atomic value for the result of the operation.
            </summary>
            <param name="left">The left operand.</param>
            <param name="right">The right operand.</param>
            <returns>A new atomic value that represents the result of the operation.</returns>
        </member>
        <member name="M:Spike.AtomicChar.op_BitwiseOr(Spike.AtomicChar,Spike.AtomicChar)">
            <summary>
            Performs a bitwise OR operation and returns a new atomic value for the result of the operation.
            </summary>
            <param name="left">The left operand.</param>
            <param name="right">The right operand.</param>
            <returns>A new atomic value that represents the result of the operation.</returns>
        </member>
        <member name="M:Spike.AtomicChar.op_ExclusiveOr(Spike.AtomicChar,System.Char)">
            <summary>
            Performs a bitwise exclusive OR operation and returns a new atomic value for the result of the operation.
            </summary>
            <param name="left">The left operand.</param>
            <param name="right">The right operand.</param>
            <returns>A new atomic value that represents the result of the operation.</returns>
        </member>
        <member name="M:Spike.AtomicChar.op_ExclusiveOr(Spike.AtomicChar,Spike.AtomicChar)">
            <summary>
            Performs a bitwise exclusive OR operation and returns a new atomic value for the result of the operation.
            </summary>
            <param name="left">The left operand.</param>
            <param name="right">The right operand.</param>
            <returns>A new atomic value that represents the result of the operation.</returns>
        </member>
        <member name="M:Spike.AtomicChar.op_OnesComplement(Spike.AtomicChar)">
            <summary>
            Performs a bitwise complement operation and returns a new atomic value for the result of the operation.
            </summary>
            <param name="value">The value to compute the complement of.</param>
            <returns>A new atomic value that represents the result of the operation.</returns>
        </member>
        <member name="M:Spike.AtomicChar.op_Increment(Spike.AtomicChar)">
            <summary>
            Atomically increments the current value.
            </summary>
            <param name="value">The value to increment.</param>
            <returns>Incremented value</returns>
        </member>
        <member name="M:Spike.AtomicChar.op_Decrement(Spike.AtomicChar)">
            <summary>
            Atomically decrements the current value.
            </summary>
            <param name="value">The value to decrements.</param>
            <returns>Decremented value</returns>
        </member>
        <member name="M:Spike.AtomicChar.op_Equality(Spike.AtomicChar,Spike.AtomicChar)">
            <summary>
            Compares the equality of two values.
            </summary>
            <param name="left">Left parameter to compare.</param>
            <param name="right">Right parameter to compare.</param>
            <returns>Returns whether left and right parameters are equals or not.</returns>
        </member>
        <member name="M:Spike.AtomicChar.op_Equality(Spike.AtomicChar,System.Char)">
            <summary>
            Compares the equality of two values.
            </summary>
            <param name="left">Left parameter to compare.</param>
            <param name="right">Right parameter to compare.</param>
            <returns>Returns whether left and right parameters are equals or not.</returns>
        </member>
        <member name="M:Spike.AtomicChar.op_Inequality(Spike.AtomicChar,Spike.AtomicChar)">
            <summary>
            Checks for inequality of two values.
            </summary>
            <param name="left">Left parameter to compare.</param>
            <param name="right">Right parameter to compare.</param>
            <returns>Returns true whether left and right parameters are not equals, otherwise false.</returns>
        </member>
        <member name="M:Spike.AtomicChar.op_Inequality(Spike.AtomicChar,System.Char)">
            <summary>
            Checks for inequality of two values.
            </summary>
            <param name="left">Left parameter to compare.</param>
            <param name="right">Right parameter to compare.</param>
            <returns>Returns true whether left and right parameters are not equals, otherwise false.</returns>
        </member>
        <member name="M:Spike.AtomicChar.op_LessThan(Spike.AtomicChar,Spike.AtomicChar)">
            <summary>
            Checks whether the left argument is smaller than the right one.
            </summary>
            <param name="left">Left parameter to compare.</param>
            <param name="right">Right parameter to compare.</param>
            <returns>True if the left argument is smaller than the right one, false otherwise.</returns>
        </member>
        <member name="M:Spike.AtomicChar.op_LessThan(Spike.AtomicChar,System.Char)">
            <summary>
            Checks whether the left argument is smaller than the right one.
            </summary>
            <param name="left">Left parameter to compare.</param>
            <param name="right">Right parameter to compare.</param>
            <returns>True if the left argument is smaller than the right one, false otherwise.</returns>
        </member>
        <member name="M:Spike.AtomicChar.op_GreaterThan(Spike.AtomicChar,Spike.AtomicChar)">
            <summary>
            Checks whether the left argument is bigger than the right one.
            </summary>
            <param name="left">Left parameter to compare.</param>
            <param name="right">Right parameter to compare.</param>
            <returns>True if the left argument is bigger than the right one, false otherwise.</returns>
        </member>
        <member name="M:Spike.AtomicChar.op_GreaterThan(Spike.AtomicChar,System.Char)">
            <summary>
            Checks whether the left argument is bigger than the right one.
            </summary>
            <param name="left">Left parameter to compare.</param>
            <param name="right">Right parameter to compare.</param>
            <returns>True if the left argument is bigger than the right one, false otherwise.</returns>
        </member>
        <member name="M:Spike.AtomicChar.op_LessThanOrEqual(Spike.AtomicChar,Spike.AtomicChar)">
            <summary>
            Checks whether the left argument is smaller or equals than the right one.
            </summary>
            <param name="left">Left parameter to compare.</param>
            <param name="right">Right parameter to compare.</param>
            <returns>True if the left argument is smaller or equals than the right one, false otherwise.</returns>
        </member>
        <member name="M:Spike.AtomicChar.op_LessThanOrEqual(Spike.AtomicChar,System.Char)">
            <summary>
            Checks whether the left argument is smaller or equals than the right one.
            </summary>
            <param name="left">Left parameter to compare.</param>
            <param name="right">Right parameter to compare.</param>
            <returns>True if the left argument is smaller or equals than the right one, false otherwise.</returns>
        </member>
        <member name="M:Spike.AtomicChar.op_GreaterThanOrEqual(Spike.AtomicChar,Spike.AtomicChar)">
            <summary>
            Checks whether the left argument is bigger or equals than the right one.
            </summary>
            <param name="left">Left parameter to compare.</param>
            <param name="right">Right parameter to compare.</param>
            <returns>True if the left argument is bigger or equals than the right one, false otherwise.</returns>
        </member>
        <member name="M:Spike.AtomicChar.op_GreaterThanOrEqual(Spike.AtomicChar,System.Char)">
            <summary>
            Checks whether the left argument is bigger or equals than the right one.
            </summary>
            <param name="left">Left parameter to compare.</param>
            <param name="right">Right parameter to compare.</param>
            <returns>True if the left argument is bigger or equals than the right one, false otherwise.</returns>
        </member>
        <member name="M:Spike.AtomicChar.op_Explicit(Spike.AtomicChar)~System.Char">
            <summary>
            Converts the atomic value to a non-atomic one.
            </summary>
            <param name="value">The value to convert.</param>
            <returns>The converted value.</returns>
        </member>
        <member name="M:Spike.AtomicChar.op_Implicit(System.Char)~Spike.AtomicChar">
            <summary>
            Converts the non-atomic value to an atomic one.
            </summary>
            <param name="value">The value to convert.</param>
            <returns>The converted value.</returns>
        </member>
        <member name="M:Spike.AtomicChar.ToString">
            <summary>
            Converts the value of this instance to its equivalent string representation.
            </summary>
        </member>
        <member name="M:Spike.AtomicChar.Equals(System.Object)">
            <summary>
            Returns a value indicating whether this instance is equal to a specified value
            </summary>
        </member>
        <member name="M:Spike.AtomicChar.GetHashCode">
            <summary>
            Returns the hash code for this instance.
            </summary>
            <returns>A 32-bit signed integer hash code.</returns>
        </member>
        <member name="M:Spike.AtomicChar.CompareTo(Spike.AtomicChar)">
            <summary>
            Compares this instance to a specified value and returns an indication of their relative values.
            </summary>
            <param name="value">A value to compare.</param>
            <returns>A signed integer that indicates the relative order of this instance and value.Return
            Value Description Less than zero This instance is less than value. Zero This
            instance is equal to value. Greater than zero This instance is greater than value.
            </returns>
        </member>
        <member name="M:Spike.AtomicChar.CompareTo(System.Object)">
            <summary>
            Compares this instance to a specified value and returns an indication of their relative values.
            </summary>
            <param name="target">A value to compare.</param>
            <returns>A signed integer that indicates the relative order of this instance and value.Return
            Value Description Less than zero This instance is less than value. Zero This
            instance is equal to value. Greater than zero This instance is greater than value.
            </returns>
        </member>
        <member name="P:Spike.AtomicChar.Value">
            <summary>
            Gets the value of the atomic structure
            </summary>
        </member>
        <member name="T:Spike.AtomicDouble">
            <summary>
            Represents an atomic double-precision floating point value.
            </summary>
        </member>
        <member name="M:Spike.AtomicDouble.Assign(System.Double)">
            <summary>
            Atomically pefroms an assignment operation to the atomic value
            </summary>
            <param name="value">Value to set</param>
        </member>
        <member name="M:Spike.AtomicDouble.Assign(System.Func{System.Double,System.Double})">
            <summary>
            Atomically pefroms a computation and assigns it to the atomic value
            </summary>
            <param name="computation">Computation to execute atomically</param>
        </member>
        <member name="M:Spike.AtomicDouble.Add(System.Double)">
            <summary>
            Performs an atomic addition of the given value to the current atomic value.
            </summary>
            <param name="value">The value to add to the current atomic value.</param>
        </member>
        <member name="M:Spike.AtomicDouble.Subtract(System.Double)">
            <summary>
            Performs an atomic subtraction of the given value from the current atomic value.
            </summary>
            <param name="value">The value to subtract from the current atomic value.</param>
        </member>
        <member name="M:Spike.AtomicDouble.Multiply(System.Double)">
            <summary>
            Performs an atomic multiplication of the given value and the current atomic value.
            </summary>
            <param name="value">The value to multiply the current atomic value.</param>
        </member>
        <member name="M:Spike.AtomicDouble.Divide(System.Double)">
            <summary>
            Performs an atomic division of the current atomic value by the given value.
            </summary>
            <param name="value">The value to divide the current atomic value by.</param>
        </member>
        <member name="M:Spike.AtomicDouble.CompareExchange(System.Double,System.Double)">
            <summary>
            Compares two values for equality and, if they are equal, replaces one of the values.
            </summary>
            <param name="value1">First value to compare.</param>
            <param name="value2">Second value to compare.</param>
            <returns>The original value in value1.</returns>
        </member>
        <member name="M:Spike.AtomicDouble.Decrement">
            <summary>
            Atomically decrements current value.
            </summary>
        </member>
        <member name="M:Spike.AtomicDouble.Increment">
            <summary>
            Atomically increments the current value.
            </summary>
        </member>
        <member name="M:Spike.AtomicDouble.Negate">
            <summary>
            Atomically negates the value.
            </summary>
        </member>
        <member name="M:Spike.AtomicDouble.op_Addition(Spike.AtomicDouble,System.Double)">
            <summary>
            Performs an addition and returns a new atomic value for the result of the operation.
            </summary>
            <param name="left">The left operand.</param>
            <param name="right">The value to add.</param>
            <returns>A new atomic value that represents the result of the operation.</returns>
        </member>
        <member name="M:Spike.AtomicDouble.op_Addition(Spike.AtomicDouble,System.Single)">
            <summary>
            Performs an addition and returns a new atomic value for the result of the operation.
            </summary>
            <param name="left">The left operand.</param>
            <param name="right">The value to add.</param>
            <returns>A new atomic value that represents the result of the operation.</returns>
        </member>
        <member name="M:Spike.AtomicDouble.op_Addition(Spike.AtomicDouble,Spike.AtomicDouble)">
            <summary>
            Performs an addition and returns a new atomic value for the result of the operation.
            </summary>
            <param name="left">The left operand.</param>
            <param name="right">The value to add.</param>
            <returns>A new atomic value that represents the result of the operation.</returns>
        </member>
        <member name="M:Spike.AtomicDouble.op_Subtraction(Spike.AtomicDouble,System.Double)">
            <summary>
            Performs a subtraction and returns a new atomic value for the result of the operation.
            </summary>
            <param name="left">The left operand.</param>
            <param name="right">The value to subtract.</param>
            <returns>A new atomic value that represents the result of the operation.</returns>
        </member>
        <member name="M:Spike.AtomicDouble.op_Subtraction(Spike.AtomicDouble,System.Single)">
            <summary>
            Performs a subtraction and returns a new atomic value for the result of the operation.
            </summary>
            <param name="left">The left operand.</param>
            <param name="right">The value to subtract.</param>
            <returns>A new atomic value that represents the result of the operation.</returns>
        </member>
        <member name="M:Spike.AtomicDouble.op_Subtraction(Spike.AtomicDouble,Spike.AtomicDouble)">
            <summary>
            Performs a subtraction and returns a new atomic value for the result of the operation.
            </summary>
            <param name="left">The left operand.</param>
            <param name="right">The value to subtract.</param>
            <returns>A new atomic value that represents the result of the operation.</returns>
        </member>
        <member name="M:Spike.AtomicDouble.op_Multiply(Spike.AtomicDouble,System.Double)">
            <summary>
            Performs a multiplication and returns a new atomic value for the result of the operation.
            </summary>
            <param name="left">The left operand.</param>
            <param name="right">The value to multiply by.</param>
            <returns>A new atomic value that represents the result of the operation.</returns>
        </member>
        <member name="M:Spike.AtomicDouble.op_Multiply(Spike.AtomicDouble,System.Single)">
            <summary>
            Performs a multiplication and returns a new atomic value for the result of the operation.
            </summary>
            <param name="left">The left operand.</param>
            <param name="right">The value to multiply by.</param>
            <returns>A new atomic value that represents the result of the operation.</returns>
        </member>
        <member name="M:Spike.AtomicDouble.op_Multiply(Spike.AtomicDouble,Spike.AtomicDouble)">
            <summary>
            Performs a multiplication and returns a new atomic value for the result of the operation.
            </summary>
            <param name="left">The left operand.</param>
            <param name="right">The value to multiply by.</param>
            <returns>A new atomic value that represents the result of the operation.</returns>
        </member>
        <member name="M:Spike.AtomicDouble.op_Division(Spike.AtomicDouble,System.Double)">
            <summary>
            Performs a division and returns a new atomic value for the result of the operation.
            </summary>
            <param name="left">The left operand.</param>
            <param name="right">The value to divide by.</param>
            <returns>A new atomic value that represents the result of the operation.</returns>
        </member>
        <member name="M:Spike.AtomicDouble.op_Division(Spike.AtomicDouble,System.Single)">
            <summary>
            Performs a division and returns a new atomic value for the result of the operation.
            </summary>
            <param name="left">The left operand.</param>
            <param name="right">The value to divide by.</param>
            <returns>A new atomic value that represents the result of the operation.</returns>
        </member>
        <member name="M:Spike.AtomicDouble.op_Division(Spike.AtomicDouble,Spike.AtomicDouble)">
            <summary>
            Performs a division and returns a new atomic value for the result of the operation.
            </summary>
            <param name="left">The left operand.</param>
            <param name="right">The value to divide by.</param>
            <returns>A new atomic value that represents the result of the operation.</returns>
        </member>
        <member name="M:Spike.AtomicDouble.op_Modulus(Spike.AtomicDouble,System.Double)">
            <summary>
            Performs a modulo operation and returns a new atomic value for the result of the operation.
            </summary>
            <param name="left">The left operand.</param>
            <param name="right">The value to divide by.</param>
            <returns>A new atomic value that represents the result of the operation.</returns>
        </member>
        <member name="M:Spike.AtomicDouble.op_Modulus(Spike.AtomicDouble,System.Single)">
            <summary>
            Performs a modulo operation and returns a new atomic value for the result of the operation.
            </summary>
            <param name="left">The left operand.</param>
            <param name="right">The value to divide by.</param>
            <returns>A new atomic value that represents the result of the operation.</returns>
        </member>
        <member name="M:Spike.AtomicDouble.op_Modulus(Spike.AtomicDouble,Spike.AtomicDouble)">
            <summary>
            Performs a modulo operation and returns a new atomic value for the result of the operation.
            </summary>
            <param name="left">The left operand.</param>
            <param name="right">The value to divide by.</param>
            <returns>A new atomic value that represents the result of the operation.</returns>
        </member>
        <member name="M:Spike.AtomicDouble.op_UnaryNegation(Spike.AtomicDouble)">
            <summary>
            Performs a negate operation and returns a new atomic value for the result of the operation.
            </summary>
            <param name="value">The value to negate.</param>
            <returns>A new atomic value that represents the result of the operation.</returns>
        </member>
        <member name="M:Spike.AtomicDouble.op_Increment(Spike.AtomicDouble)">
            <summary>
            Atomically increments the current value.
            </summary>
            <param name="value">The value to increment.</param>
            <returns>Incremented value</returns>
        </member>
        <member name="M:Spike.AtomicDouble.op_Decrement(Spike.AtomicDouble)">
            <summary>
            Atomically decrements the current value.
            </summary>
            <param name="value">The value to decrements.</param>
            <returns>Decremented value</returns>
        </member>
        <member name="M:Spike.AtomicDouble.op_Equality(Spike.AtomicDouble,Spike.AtomicDouble)">
            <summary>
            Compares the equality of two values.
            </summary>
            <param name="left">Left parameter to compare.</param>
            <param name="right">Right parameter to compare.</param>
            <returns>Returns whether left and right parameters are equals or not.</returns>
        </member>
        <member name="M:Spike.AtomicDouble.op_Equality(Spike.AtomicDouble,System.Double)">
            <summary>
            Compares the equality of two values.
            </summary>
            <param name="left">Left parameter to compare.</param>
            <param name="right">Right parameter to compare.</param>
            <returns>Returns whether left and right parameters are equals or not.</returns>
        </member>
        <member name="M:Spike.AtomicDouble.op_Equality(Spike.AtomicDouble,System.Single)">
            <summary>
            Compares the equality of two values.
            </summary>
            <param name="left">Left parameter to compare.</param>
            <param name="right">Right parameter to compare.</param>
            <returns>Returns whether left and right parameters are equals or not.</returns>
        </member>
        <member name="M:Spike.AtomicDouble.op_Inequality(Spike.AtomicDouble,Spike.AtomicDouble)">
            <summary>
            Checks for inequality of two values.
            </summary>
            <param name="left">Left parameter to compare.</param>
            <param name="right">Right parameter to compare.</param>
            <returns>Returns true whether left and right parameters are not equals, otherwise false.</returns>
        </member>
        <member name="M:Spike.AtomicDouble.op_Inequality(Spike.AtomicDouble,System.Double)">
            <summary>
            Checks for inequality of two values.
            </summary>
            <param name="left">Left parameter to compare.</param>
            <param name="right">Right parameter to compare.</param>
            <returns>Returns true whether left and right parameters are not equals, otherwise false.</returns>
        </member>
        <member name="M:Spike.AtomicDouble.op_Inequality(Spike.AtomicDouble,System.Single)">
            <summary>
            Checks for inequality of two values.
            </summary>
            <param name="left">Left parameter to compare.</param>
            <param name="right">Right parameter to compare.</param>
            <returns>Returns true whether left and right parameters are not equals, otherwise false.</returns>
        </member>
        <member name="M:Spike.AtomicDouble.op_LessThan(Spike.AtomicDouble,Spike.AtomicDouble)">
            <summary>
            Checks whether the left argument is smaller than the right one.
            </summary>
            <param name="left">Left parameter to compare.</param>
            <param name="right">Right parameter to compare.</param>
            <returns>True if the left argument is smaller than the right one, false otherwise.</returns>
        </member>
        <member name="M:Spike.AtomicDouble.op_LessThan(Spike.AtomicDouble,System.Double)">
            <summary>
            Checks whether the left argument is smaller than the right one.
            </summary>
            <param name="left">Left parameter to compare.</param>
            <param name="right">Right parameter to compare.</param>
            <returns>True if the left argument is smaller than the right one, false otherwise.</returns>
        </member>
        <member name="M:Spike.AtomicDouble.op_LessThan(Spike.AtomicDouble,System.Single)">
            <summary>
            Checks whether the left argument is smaller than the right one.
            </summary>
            <param name="left">Left parameter to compare.</param>
            <param name="right">Right parameter to compare.</param>
            <returns>True if the left argument is smaller than the right one, false otherwise.</returns>
        </member>
        <member name="M:Spike.AtomicDouble.op_GreaterThan(Spike.AtomicDouble,Spike.AtomicDouble)">
            <summary>
            Checks whether the left argument is bigger than the right one.
            </summary>
            <param name="left">Left parameter to compare.</param>
            <param name="right">Right parameter to compare.</param>
            <returns>True if the left argument is bigger than the right one, false otherwise.</returns>
        </member>
        <member name="M:Spike.AtomicDouble.op_GreaterThan(Spike.AtomicDouble,System.Double)">
            <summary>
            Checks whether the left argument is bigger than the right one.
            </summary>
            <param name="left">Left parameter to compare.</param>
            <param name="right">Right parameter to compare.</param>
            <returns>True if the left argument is bigger than the right one, false otherwise.</returns>
        </member>
        <member name="M:Spike.AtomicDouble.op_GreaterThan(Spike.AtomicDouble,System.Single)">
            <summary>
            Checks whether the left argument is bigger than the right one.
            </summary>
            <param name="left">Left parameter to compare.</param>
            <param name="right">Right parameter to compare.</param>
            <returns>True if the left argument is bigger than the right one, false otherwise.</returns>
        </member>
        <member name="M:Spike.AtomicDouble.op_LessThanOrEqual(Spike.AtomicDouble,Spike.AtomicDouble)">
            <summary>
            Checks whether the left argument is smaller or equals than the right one.
            </summary>
            <param name="left">Left parameter to compare.</param>
            <param name="right">Right parameter to compare.</param>
            <returns>True if the left argument is smaller or equals than the right one, false otherwise.</returns>
        </member>
        <member name="M:Spike.AtomicDouble.op_LessThanOrEqual(Spike.AtomicDouble,System.Double)">
            <summary>
            Checks whether the left argument is smaller or equals than the right one.
            </summary>
            <param name="left">Left parameter to compare.</param>
            <param name="right">Right parameter to compare.</param>
            <returns>True if the left argument is smaller or equals than the right one, false otherwise.</returns>
        </member>
        <member name="M:Spike.AtomicDouble.op_LessThanOrEqual(Spike.AtomicDouble,System.Single)">
            <summary>
            Checks whether the left argument is smaller or equals than the right one.
            </summary>
            <param name="left">Left parameter to compare.</param>
            <param name="right">Right parameter to compare.</param>
            <returns>True if the left argument is smaller or equals than the right one, false otherwise.</returns>
        </member>
        <member name="M:Spike.AtomicDouble.op_GreaterThanOrEqual(Spike.AtomicDouble,Spike.AtomicDouble)">
            <summary>
            Checks whether the left argument is bigger or equals than the right one.
            </summary>
            <param name="left">Left parameter to compare.</param>
            <param name="right">Right parameter to compare.</param>
            <returns>True if the left argument is bigger or equals than the right one, false otherwise.</returns>
        </member>
        <member name="M:Spike.AtomicDouble.op_GreaterThanOrEqual(Spike.AtomicDouble,System.Double)">
            <summary>
            Checks whether the left argument is bigger or equals than the right one.
            </summary>
            <param name="left">Left parameter to compare.</param>
            <param name="right">Right parameter to compare.</param>
            <returns>True if the left argument is bigger or equals than the right one, false otherwise.</returns>
        </member>
        <member name="M:Spike.AtomicDouble.op_GreaterThanOrEqual(Spike.AtomicDouble,System.Single)">
            <summary>
            Checks whether the left argument is bigger or equals than the right one.
            </summary>
            <param name="left">Left parameter to compare.</param>
            <param name="right">Right parameter to compare.</param>
            <returns>True if the left argument is bigger or equals than the right one, false otherwise.</returns>
        </member>
        <member name="M:Spike.AtomicDouble.op_Explicit(Spike.AtomicDouble)~System.Double">
            <summary>
            Converts the atomic value to a non-atomic one.
            </summary>
            <param name="value">The value to convert.</param>
            <returns>The converted value.</returns>
        </member>
        <member name="M:Spike.AtomicDouble.op_Implicit(System.Double)~Spike.AtomicDouble">
            <summary>
            Converts the non-atomic value to an atomic one.
            </summary>
            <param name="value">The value to convert.</param>
            <returns>The converted value.</returns>
        </member>
        <member name="M:Spike.AtomicDouble.op_Implicit(System.Single)~Spike.AtomicDouble">
            <summary>
            Converts the non-atomic value to an atomic one.
            </summary>
            <param name="value">The value to convert.</param>
            <returns>The converted value.</returns>
        </member>
        <member name="M:Spike.AtomicDouble.ToString">
            <summary>
            Converts the value of this instance to its equivalent string representation.
            </summary>
        </member>
        <member name="M:Spike.AtomicDouble.Equals(System.Object)">
            <summary>
            Returns a value indicating whether this instance is equal to a specified value
            </summary>
        </member>
        <member name="M:Spike.AtomicDouble.GetHashCode">
            <summary>
            Returns the hash code for this instance.
            </summary>
            <returns>A 32-bit signed integer hash code.</returns>
        </member>
        <member name="M:Spike.AtomicDouble.CompareTo(Spike.AtomicDouble)">
            <summary>
            Compares this instance to a specified value and returns an indication of their relative values.
            </summary>
            <param name="value">A value to compare.</param>
            <returns>A signed integer that indicates the relative order of this instance and value.Return
            Value Description Less than zero This instance is less than value. Zero This
            instance is equal to value. Greater than zero This instance is greater than value.
            </returns>
        </member>
        <member name="M:Spike.AtomicDouble.CompareTo(System.Object)">
            <summary>
            Compares this instance to a specified value and returns an indication of their relative values.
            </summary>
            <param name="target">A value to compare.</param>
            <returns>A signed integer that indicates the relative order of this instance and value.Return
            Value Description Less than zero This instance is less than value. Zero This
            instance is equal to value. Greater than zero This instance is greater than value.
            </returns>
        </member>
        <member name="P:Spike.AtomicDouble.Value">
            <summary>
            Gets the value of the atomic structure
            </summary>
        </member>
        <member name="T:Spike.AtomicSingle">
            <summary>
            Represents an atomic floating-point value.
            </summary>
        </member>
        <member name="M:Spike.AtomicSingle.Assign(System.Single)">
            <summary>
            Atomically pefroms an assignment operation to the atomic value
            </summary>
            <param name="value">Value to set</param>
        </member>
        <member name="M:Spike.AtomicSingle.Assign(System.Func{System.Single,System.Single})">
            <summary>
            Atomically pefroms a computation and assigns it to the atomic value
            </summary>
            <param name="computation">Computation to execute atomically</param>
        </member>
        <member name="M:Spike.AtomicSingle.Add(System.Single)">
            <summary>
            Performs an atomic addition of the given value to the current atomic value.
            </summary>
            <param name="value">The value to add to the current atomic value.</param>
        </member>
        <member name="M:Spike.AtomicSingle.Subtract(System.Single)">
            <summary>
            Performs an atomic subtraction of the given value from the current atomic value.
            </summary>
            <param name="value">The value to subtract from the current atomic value.</param>
        </member>
        <member name="M:Spike.AtomicSingle.Multiply(System.Single)">
            <summary>
            Performs an atomic multiplication of the given value and the current atomic value.
            </summary>
            <param name="value">The value to multiply the current atomic value.</param>
        </member>
        <member name="M:Spike.AtomicSingle.Divide(System.Single)">
            <summary>
            Performs an atomic division of the current atomic value by the given value.
            </summary>
            <param name="value">The value to divide the current atomic value by.</param>
        </member>
        <member name="M:Spike.AtomicSingle.CompareExchange(System.Single,System.Single)">
            <summary>
            Compares two values for equality and, if they are equal, replaces one of the values.
            </summary>
            <param name="value1">First value to compare.</param>
            <param name="value2">Second value to compare.</param>
            <returns>The original value in value1.</returns>
        </member>
        <member name="M:Spike.AtomicSingle.Decrement">
            <summary>
            Atomically decrements current value.
            </summary>
        </member>
        <member name="M:Spike.AtomicSingle.Increment">
            <summary>
            Atomically increments the current value.
            </summary>
        </member>
        <member name="M:Spike.AtomicSingle.Negate">
            <summary>
            Atomically negates the value.
            </summary>
        </member>
        <member name="M:Spike.AtomicSingle.op_Addition(Spike.AtomicSingle,System.Single)">
            <summary>
            Performs an addition and returns a new atomic value for the result of the operation.
            </summary>
            <param name="left">The left operand.</param>
            <param name="right">The value to add.</param>
            <returns>A new atomic value that represents the result of the operation.</returns>
        </member>
        <member name="M:Spike.AtomicSingle.op_Addition(Spike.AtomicSingle,Spike.AtomicSingle)">
            <summary>
            Performs an addition and returns a new atomic value for the result of the operation.
            </summary>
            <param name="left">The left operand.</param>
            <param name="right">The value to add.</param>
            <returns>A new atomic value that represents the result of the operation.</returns>
        </member>
        <member name="M:Spike.AtomicSingle.op_Subtraction(Spike.AtomicSingle,System.Single)">
            <summary>
            Performs a subtraction and returns a new atomic value for the result of the operation.
            </summary>
            <param name="left">The left operand.</param>
            <param name="right">The value to subtract.</param>
            <returns>A new atomic value that represents the result of the operation.</returns>
        </member>
        <member name="M:Spike.AtomicSingle.op_Subtraction(Spike.AtomicSingle,Spike.AtomicSingle)">
            <summary>
            Performs a subtraction and returns a new atomic value for the result of the operation.
            </summary>
            <param name="left">The left operand.</param>
            <param name="right">The value to subtract.</param>
            <returns>A new atomic value that represents the result of the operation.</returns>
        </member>
        <member name="M:Spike.AtomicSingle.op_Multiply(Spike.AtomicSingle,System.Single)">
            <summary>
            Performs a multiplication and returns a new atomic value for the result of the operation.
            </summary>
            <param name="left">The left operand.</param>
            <param name="right">The value to multiply by.</param>
            <returns>A new atomic value that represents the result of the operation.</returns>
        </member>
        <member name="M:Spike.AtomicSingle.op_Multiply(Spike.AtomicSingle,Spike.AtomicSingle)">
            <summary>
            Performs a multiplication and returns a new atomic value for the result of the operation.
            </summary>
            <param name="left">The left operand.</param>
            <param name="right">The value to multiply by.</param>
            <returns>A new atomic value that represents the result of the operation.</returns>
        </member>
        <member name="M:Spike.AtomicSingle.op_Division(Spike.AtomicSingle,System.Single)">
            <summary>
            Performs a division and returns a new atomic value for the result of the operation.
            </summary>
            <param name="left">The left operand.</param>
            <param name="right">The value to divide by.</param>
            <returns>A new atomic value that represents the result of the operation.</returns>
        </member>
        <member name="M:Spike.AtomicSingle.op_Division(Spike.AtomicSingle,Spike.AtomicSingle)">
            <summary>
            Performs a division and returns a new atomic value for the result of the operation.
            </summary>
            <param name="left">The left operand.</param>
            <param name="right">The value to divide by.</param>
            <returns>A new atomic value that represents the result of the operation.</returns>
        </member>
        <member name="M:Spike.AtomicSingle.op_Modulus(Spike.AtomicSingle,System.Single)">
            <summary>
            Performs a modulo operation and returns a new atomic value for the result of the operation.
            </summary>
            <param name="left">The left operand.</param>
            <param name="right">The value to divide by.</param>
            <returns>A new atomic value that represents the result of the operation.</returns>
        </member>
        <member name="M:Spike.AtomicSingle.op_Modulus(Spike.AtomicSingle,Spike.AtomicSingle)">
            <summary>
            Performs a modulo operation and returns a new atomic value for the result of the operation.
            </summary>
            <param name="left">The left operand.</param>
            <param name="right">The value to divide by.</param>
            <returns>A new atomic value that represents the result of the operation.</returns>
        </member>
        <member name="M:Spike.AtomicSingle.op_UnaryNegation(Spike.AtomicSingle)">
            <summary>
            Performs a negate operation and returns a new atomic value for the result of the operation.
            </summary>
            <param name="value">The value to negate.</param>
            <returns>A new atomic value that represents the result of the operation.</returns>
        </member>
        <member name="M:Spike.AtomicSingle.op_Increment(Spike.AtomicSingle)">
            <summary>
            Atomically increments the current value.
            </summary>
            <param name="value">The value to increment.</param>
            <returns>Incremented value</returns>
        </member>
        <member name="M:Spike.AtomicSingle.op_Decrement(Spike.AtomicSingle)">
            <summary>
            Atomically decrements the current value.
            </summary>
            <param name="value">The value to decrements.</param>
            <returns>Decremented value</returns>
        </member>
        <member name="M:Spike.AtomicSingle.op_Equality(Spike.AtomicSingle,Spike.AtomicSingle)">
            <summary>
            Compares the equality of two values.
            </summary>
            <param name="left">Left parameter to compare.</param>
            <param name="right">Right parameter to compare.</param>
            <returns>Returns whether left and right parameters are equals or not.</returns>
        </member>
        <member name="M:Spike.AtomicSingle.op_Equality(Spike.AtomicSingle,System.Single)">
            <summary>
            Compares the equality of two values.
            </summary>
            <param name="left">Left parameter to compare.</param>
            <param name="right">Right parameter to compare.</param>
            <returns>Returns whether left and right parameters are equals or not.</returns>
        </member>
        <member name="M:Spike.AtomicSingle.op_Inequality(Spike.AtomicSingle,Spike.AtomicSingle)">
            <summary>
            Checks for inequality of two values.
            </summary>
            <param name="left">Left parameter to compare.</param>
            <param name="right">Right parameter to compare.</param>
            <returns>Returns true whether left and right parameters are not equals, otherwise false.</returns>
        </member>
        <member name="M:Spike.AtomicSingle.op_Inequality(Spike.AtomicSingle,System.Single)">
            <summary>
            Checks for inequality of two values.
            </summary>
            <param name="left">Left parameter to compare.</param>
            <param name="right">Right parameter to compare.</param>
            <returns>Returns true whether left and right parameters are not equals, otherwise false.</returns>
        </member>
        <member name="M:Spike.AtomicSingle.op_LessThan(Spike.AtomicSingle,Spike.AtomicSingle)">
            <summary>
            Checks whether the left argument is smaller than the right one.
            </summary>
            <param name="left">Left parameter to compare.</param>
            <param name="right">Right parameter to compare.</param>
            <returns>True if the left argument is smaller than the right one, false otherwise.</returns>
        </member>
        <member name="M:Spike.AtomicSingle.op_LessThan(Spike.AtomicSingle,System.Single)">
            <summary>
            Checks whether the left argument is smaller than the right one.
            </summary>
            <param name="left">Left parameter to compare.</param>
            <param name="right">Right parameter to compare.</param>
            <returns>True if the left argument is smaller than the right one, false otherwise.</returns>
        </member>
        <member name="M:Spike.AtomicSingle.op_GreaterThan(Spike.AtomicSingle,Spike.AtomicSingle)">
            <summary>
            Checks whether the left argument is bigger than the right one.
            </summary>
            <param name="left">Left parameter to compare.</param>
            <param name="right">Right parameter to compare.</param>
            <returns>True if the left argument is bigger than the right one, false otherwise.</returns>
        </member>
        <member name="M:Spike.AtomicSingle.op_GreaterThan(Spike.AtomicSingle,System.Single)">
            <summary>
            Checks whether the left argument is bigger than the right one.
            </summary>
            <param name="left">Left parameter to compare.</param>
            <param name="right">Right parameter to compare.</param>
            <returns>True if the left argument is bigger than the right one, false otherwise.</returns>
        </member>
        <member name="M:Spike.AtomicSingle.op_LessThanOrEqual(Spike.AtomicSingle,Spike.AtomicSingle)">
            <summary>
            Checks whether the left argument is smaller or equals than the right one.
            </summary>
            <param name="left">Left parameter to compare.</param>
            <param name="right">Right parameter to compare.</param>
            <returns>True if the left argument is smaller or equals than the right one, false otherwise.</returns>
        </member>
        <member name="M:Spike.AtomicSingle.op_LessThanOrEqual(Spike.AtomicSingle,System.Single)">
            <summary>
            Checks whether the left argument is smaller or equals than the right one.
            </summary>
            <param name="left">Left parameter to compare.</param>
            <param name="right">Right parameter to compare.</param>
            <returns>True if the left argument is smaller or equals than the right one, false otherwise.</returns>
        </member>
        <member name="M:Spike.AtomicSingle.op_GreaterThanOrEqual(Spike.AtomicSingle,Spike.AtomicSingle)">
            <summary>
            Checks whether the left argument is bigger or equals than the right one.
            </summary>
            <param name="left">Left parameter to compare.</param>
            <param name="right">Right parameter to compare.</param>
            <returns>True if the left argument is bigger or equals than the right one, false otherwise.</returns>
        </member>
        <member name="M:Spike.AtomicSingle.op_GreaterThanOrEqual(Spike.AtomicSingle,System.Single)">
            <summary>
            Checks whether the left argument is bigger or equals than the right one.
            </summary>
            <param name="left">Left parameter to compare.</param>
            <param name="right">Right parameter to compare.</param>
            <returns>True if the left argument is bigger or equals than the right one, false otherwise.</returns>
        </member>
        <member name="M:Spike.AtomicSingle.op_Explicit(Spike.AtomicSingle)~System.Single">
            <summary>
            Converts the atomic value to a non-atomic one.
            </summary>
            <param name="value">The value to convert.</param>
            <returns>The converted value.</returns>
        </member>
        <member name="M:Spike.AtomicSingle.op_Implicit(System.Single)~Spike.AtomicSingle">
            <summary>
            Converts the non-atomic value to an atomic one.
            </summary>
            <param name="value">The value to convert.</param>
            <returns>The converted value.</returns>
        </member>
        <member name="M:Spike.AtomicSingle.ToString">
            <summary>
            Converts the value of this instance to its equivalent string representation.
            </summary>
        </member>
        <member name="M:Spike.AtomicSingle.Equals(System.Object)">
            <summary>
            Returns a value indicating whether this instance is equal to a specified value
            </summary>
        </member>
        <member name="M:Spike.AtomicSingle.GetHashCode">
            <summary>
            Returns the hash code for this instance.
            </summary>
            <returns>A 32-bit signed integer hash code.</returns>
        </member>
        <member name="M:Spike.AtomicSingle.CompareTo(Spike.AtomicSingle)">
            <summary>
            Compares this instance to a specified value and returns an indication of their relative values.
            </summary>
            <param name="value">A value to compare.</param>
            <returns>A signed integer that indicates the relative order of this instance and value.Return
            Value Description Less than zero This instance is less than value. Zero This
            instance is equal to value. Greater than zero This instance is greater than value.
            </returns>
        </member>
        <member name="M:Spike.AtomicSingle.CompareTo(System.Object)">
            <summary>
            Compares this instance to a specified value and returns an indication of their relative values.
            </summary>
            <param name="target">A value to compare.</param>
            <returns>A signed integer that indicates the relative order of this instance and value.Return
            Value Description Less than zero This instance is less than value. Zero This
            instance is equal to value. Greater than zero This instance is greater than value.
            </returns>
        </member>
        <member name="P:Spike.AtomicSingle.Value">
            <summary>
            Gets the value of the atomic structure
            </summary>
        </member>
        <member name="T:Spike.AtomicInt32">
            <summary>
            Represents an atomic 32 bytes integer value.
            </summary>
        </member>
        <member name="M:Spike.AtomicInt32.Assign(System.Int32)">
            <summary>
            Atomically pefroms an assignment operation to the atomic value
            </summary>
            <param name="value">Value to set</param>
        </member>
        <member name="M:Spike.AtomicInt32.Assign(System.Func{System.Int32,System.Int32})">
            <summary>
            Atomically pefroms a computation and assigns it to the atomic value
            </summary>
            <param name="computation">Computation to execute atomically</param>
        </member>
        <member name="M:Spike.AtomicInt32.Add(System.Int32)">
            <summary>
            Performs an atomic addition of the given value to the current atomic value.
            </summary>
            <param name="value">The value to add to the current atomic value.</param>
        </member>
        <member name="M:Spike.AtomicInt32.Subtract(System.Int32)">
            <summary>
            Performs an atomic subtraction of the given value from the current atomic value.
            </summary>
            <param name="value">The value to subtract from the current atomic value.</param>
        </member>
        <member name="M:Spike.AtomicInt32.Multiply(System.Int32)">
            <summary>
            Performs an atomic multiplication of the given value and the current atomic value.
            </summary>
            <param name="value">The value to multiply the current atomic value.</param>
        </member>
        <member name="M:Spike.AtomicInt32.Divide(System.Int32)">
            <summary>
            Performs an atomic division of the current atomic value by the given value.
            </summary>
            <param name="value">The value to divide the current atomic value by.</param>
        </member>
        <member name="M:Spike.AtomicInt32.CompareExchange(System.Int32,System.Int32)">
            <summary>
            Compares two values for equality and, if they are equal, replaces one of the values.
            </summary>
            <param name="value1">First value to compare.</param>
            <param name="value2">Second value to compare.</param>
            <returns>The original value in value1.</returns>
        </member>
        <member name="M:Spike.AtomicInt32.Decrement">
            <summary>
            Atomically decrements current value.
            </summary>
        </member>
        <member name="M:Spike.AtomicInt32.Increment">
            <summary>
            Atomically increments the current value.
            </summary>
        </member>
        <member name="M:Spike.AtomicInt32.LeftShift(System.Int32)">
            <summary>
            Atomically performs a left shift operation by the given value.
            </summary>
            <param name="value">The amount to atomically shift by.</param>
        </member>
        <member name="M:Spike.AtomicInt32.RightShift(System.Int32)">
            <summary>
            Atomically performs a right shift operation by the given value.
            </summary>
            <param name="value">The amount to atomically shift by.</param>
        </member>
        <member name="M:Spike.AtomicInt32.Negate">
            <summary>
            Atomically negates the value.
            </summary>
        </member>
        <member name="M:Spike.AtomicInt32.OneComplement">
            <summary>
            Atomically computes one's completement of the current value.
            </summary>
        </member>
        <member name="M:Spike.AtomicInt32.BitwiseAnd(System.Int32)">
            <summary>
            Atomically computes bitewise AND on the current value.
            </summary>
            <param name="value">Value to compute the AND operation with.</param>
        </member>
        <member name="M:Spike.AtomicInt32.BitwiseInclusiveOr(System.Int32)">
            <summary>
            Atomically computes bitewise OR on the current value.
            </summary>
            <param name="value">Value to compute the OR operation with.</param>
        </member>
        <member name="M:Spike.AtomicInt32.BitwiseExclusiveOr(System.Int32)">
            <summary>
            Atomically computes exclusive bitewise OR on the current value.
            </summary>
            <param name="value">Value to compute the exclusive OR operation with.</param>
        </member>
        <member name="M:Spike.AtomicInt32.op_RightShift(Spike.AtomicInt32,System.Int32)">
            <summary>
            Performs a bitwise shift and returns a new atomic value for the result of the operation.
            </summary>
            <param name="left">The left operand.</param>
            <param name="right">The amount of bytes to shift.</param>
            <returns>A new atomic value that represents the result of the operation.</returns>
        </member>
        <member name="M:Spike.AtomicInt32.op_LeftShift(Spike.AtomicInt32,System.Int32)">
            <summary>
            Performs a bitwise shift and returns a new atomic value for the result of the operation.
            </summary>
            <param name="left">The left operand.</param>
            <param name="right">The amount of bytes to shift.</param>
            <returns>A new atomic value that represents the result of the operation.</returns>
        </member>
        <member name="M:Spike.AtomicInt32.op_Addition(Spike.AtomicInt32,System.Int32)">
            <summary>
            Performs an addition and returns a new atomic value for the result of the operation.
            </summary>
            <param name="left">The left operand.</param>
            <param name="right">The value to add.</param>
            <returns>A new atomic value that represents the result of the operation.</returns>
        </member>
        <member name="M:Spike.AtomicInt32.op_Addition(Spike.AtomicInt32,Spike.AtomicInt32)">
            <summary>
            Performs an addition and returns a new atomic value for the result of the operation.
            </summary>
            <param name="left">The left operand.</param>
            <param name="right">The value to add.</param>
            <returns>A new atomic value that represents the result of the operation.</returns>
        </member>
        <member name="M:Spike.AtomicInt32.op_Subtraction(Spike.AtomicInt32,System.Int32)">
            <summary>
            Performs a subtraction and returns a new atomic value for the result of the operation.
            </summary>
            <param name="left">The left operand.</param>
            <param name="right">The value to subtract.</param>
            <returns>A new atomic value that represents the result of the operation.</returns>
        </member>
        <member name="M:Spike.AtomicInt32.op_Subtraction(Spike.AtomicInt32,Spike.AtomicInt32)">
            <summary>
            Performs a subtraction and returns a new atomic value for the result of the operation.
            </summary>
            <param name="left">The left operand.</param>
            <param name="right">The value to subtract.</param>
            <returns>A new atomic value that represents the result of the operation.</returns>
        </member>
        <member name="M:Spike.AtomicInt32.op_Multiply(Spike.AtomicInt32,System.Int32)">
            <summary>
            Performs a multiplication and returns a new atomic value for the result of the operation.
            </summary>
            <param name="left">The left operand.</param>
            <param name="right">The value to multiply by.</param>
            <returns>A new atomic value that represents the result of the operation.</returns>
        </member>
        <member name="M:Spike.AtomicInt32.op_Multiply(Spike.AtomicInt32,Spike.AtomicInt32)">
            <summary>
            Performs a multiplication and returns a new atomic value for the result of the operation.
            </summary>
            <param name="left">The left operand.</param>
            <param name="right">The value to multiply by.</param>
            <returns>A new atomic value that represents the result of the operation.</returns>
        </member>
        <member name="M:Spike.AtomicInt32.op_Division(Spike.AtomicInt32,System.Int32)">
            <summary>
            Performs a division and returns a new atomic value for the result of the operation.
            </summary>
            <param name="left">The left operand.</param>
            <param name="right">The value to divide by.</param>
            <returns>A new atomic value that represents the result of the operation.</returns>
        </member>
        <member name="M:Spike.AtomicInt32.op_Division(Spike.AtomicInt32,Spike.AtomicInt32)">
            <summary>
            Performs a division and returns a new atomic value for the result of the operation.
            </summary>
            <param name="left">The left operand.</param>
            <param name="right">The value to divide by.</param>
            <returns>A new atomic value that represents the result of the operation.</returns>
        </member>
        <member name="M:Spike.AtomicInt32.op_Modulus(Spike.AtomicInt32,System.Int32)">
            <summary>
            Performs a modulo operation and returns a new atomic value for the result of the operation.
            </summary>
            <param name="left">The left operand.</param>
            <param name="right">The value to divide by.</param>
            <returns>A new atomic value that represents the result of the operation.</returns>
        </member>
        <member name="M:Spike.AtomicInt32.op_Modulus(Spike.AtomicInt32,Spike.AtomicInt32)">
            <summary>
            Performs a modulo operation and returns a new atomic value for the result of the operation.
            </summary>
            <param name="left">The left operand.</param>
            <param name="right">The value to divide by.</param>
            <returns>A new atomic value that represents the result of the operation.</returns>
        </member>
        <member name="M:Spike.AtomicInt32.op_BitwiseAnd(Spike.AtomicInt32,System.Int32)">
            <summary>
            Performs a bitwise and operation and returns a new atomic value for the result of the operation.
            </summary>
            <param name="left">The left operand.</param>
            <param name="right">The right operand.</param>
            <returns>A new atomic value that represents the result of the operation.</returns>
        </member>
        <member name="M:Spike.AtomicInt32.op_BitwiseAnd(Spike.AtomicInt32,Spike.AtomicInt32)">
            <summary>
            Performs a bitwise and operation and returns a new atomic value for the result of the operation.
            </summary>
            <param name="left">The left operand.</param>
            <param name="right">The right operand.</param>
            <returns>A new atomic value that represents the result of the operation.</returns>
        </member>
        <member name="M:Spike.AtomicInt32.op_BitwiseOr(Spike.AtomicInt32,System.Int32)">
            <summary>
            Performs a bitwise OR operation and returns a new atomic value for the result of the operation.
            </summary>
            <param name="left">The left operand.</param>
            <param name="right">The right operand.</param>
            <returns>A new atomic value that represents the result of the operation.</returns>
        </member>
        <member name="M:Spike.AtomicInt32.op_BitwiseOr(Spike.AtomicInt32,Spike.AtomicInt32)">
            <summary>
            Performs a bitwise OR operation and returns a new atomic value for the result of the operation.
            </summary>
            <param name="left">The left operand.</param>
            <param name="right">The right operand.</param>
            <returns>A new atomic value that represents the result of the operation.</returns>
        </member>
        <member name="M:Spike.AtomicInt32.op_ExclusiveOr(Spike.AtomicInt32,System.Int32)">
            <summary>
            Performs a bitwise exclusive OR operation and returns a new atomic value for the result of the operation.
            </summary>
            <param name="left">The left operand.</param>
            <param name="right">The right operand.</param>
            <returns>A new atomic value that represents the result of the operation.</returns>
        </member>
        <member name="M:Spike.AtomicInt32.op_ExclusiveOr(Spike.AtomicInt32,Spike.AtomicInt32)">
            <summary>
            Performs a bitwise exclusive OR operation and returns a new atomic value for the result of the operation.
            </summary>
            <param name="left">The left operand.</param>
            <param name="right">The right operand.</param>
            <returns>A new atomic value that represents the result of the operation.</returns>
        </member>
        <member name="M:Spike.AtomicInt32.op_UnaryNegation(Spike.AtomicInt32)">
            <summary>
            Performs a negate operation and returns a new atomic value for the result of the operation.
            </summary>
            <param name="value">The value to negate.</param>
            <returns>A new atomic value that represents the result of the operation.</returns>
        </member>
        <member name="M:Spike.AtomicInt32.op_OnesComplement(Spike.AtomicInt32)">
            <summary>
            Performs a bitwise complement operation and returns a new atomic value for the result of the operation.
            </summary>
            <param name="value">The value to compute the complement of.</param>
            <returns>A new atomic value that represents the result of the operation.</returns>
        </member>
        <member name="M:Spike.AtomicInt32.op_Increment(Spike.AtomicInt32)">
            <summary>
            Atomically increments the current value.
            </summary>
            <param name="value">The value to increment.</param>
            <returns>Incremented value</returns>
        </member>
        <member name="M:Spike.AtomicInt32.op_Decrement(Spike.AtomicInt32)">
            <summary>
            Atomically decrements the current value.
            </summary>
            <param name="value">The value to decrements.</param>
            <returns>Decremented value</returns>
        </member>
        <member name="M:Spike.AtomicInt32.op_Equality(Spike.AtomicInt32,Spike.AtomicInt32)">
            <summary>
            Compares the equality of two values.
            </summary>
            <param name="left">Left parameter to compare.</param>
            <param name="right">Right parameter to compare.</param>
            <returns>Returns whether left and right parameters are equals or not.</returns>
        </member>
        <member name="M:Spike.AtomicInt32.op_Equality(Spike.AtomicInt32,System.Int32)">
            <summary>
            Compares the equality of two values.
            </summary>
            <param name="left">Left parameter to compare.</param>
            <param name="right">Right parameter to compare.</param>
            <returns>Returns whether left and right parameters are equals or not.</returns>
        </member>
        <member name="M:Spike.AtomicInt32.op_Inequality(Spike.AtomicInt32,Spike.AtomicInt32)">
            <summary>
            Checks for inequality of two values.
            </summary>
            <param name="left">Left parameter to compare.</param>
            <param name="right">Right parameter to compare.</param>
            <returns>Returns true whether left and right parameters are not equals, otherwise false.</returns>
        </member>
        <member name="M:Spike.AtomicInt32.op_Inequality(Spike.AtomicInt32,System.Int32)">
            <summary>
            Checks for inequality of two values.
            </summary>
            <param name="left">Left parameter to compare.</param>
            <param name="right">Right parameter to compare.</param>
            <returns>Returns true whether left and right parameters are not equals, otherwise false.</returns>
        </member>
        <member name="M:Spike.AtomicInt32.op_LessThan(Spike.AtomicInt32,Spike.AtomicInt32)">
            <summary>
            Checks whether the left argument is smaller than the right one.
            </summary>
            <param name="left">Left parameter to compare.</param>
            <param name="right">Right parameter to compare.</param>
            <returns>True if the left argument is smaller than the right one, false otherwise.</returns>
        </member>
        <member name="M:Spike.AtomicInt32.op_LessThan(Spike.AtomicInt32,System.Int32)">
            <summary>
            Checks whether the left argument is smaller than the right one.
            </summary>
            <param name="left">Left parameter to compare.</param>
            <param name="right">Right parameter to compare.</param>
            <returns>True if the left argument is smaller than the right one, false otherwise.</returns>
        </member>
        <member name="M:Spike.AtomicInt32.op_GreaterThan(Spike.AtomicInt32,Spike.AtomicInt32)">
            <summary>
            Checks whether the left argument is bigger than the right one.
            </summary>
            <param name="left">Left parameter to compare.</param>
            <param name="right">Right parameter to compare.</param>
            <returns>True if the left argument is bigger than the right one, false otherwise.</returns>
        </member>
        <member name="M:Spike.AtomicInt32.op_GreaterThan(Spike.AtomicInt32,System.Int32)">
            <summary>
            Checks whether the left argument is bigger than the right one.
            </summary>
            <param name="left">Left parameter to compare.</param>
            <param name="right">Right parameter to compare.</param>
            <returns>True if the left argument is bigger than the right one, false otherwise.</returns>
        </member>
        <member name="M:Spike.AtomicInt32.op_LessThanOrEqual(Spike.AtomicInt32,Spike.AtomicInt32)">
            <summary>
            Checks whether the left argument is smaller or equals than the right one.
            </summary>
            <param name="left">Left parameter to compare.</param>
            <param name="right">Right parameter to compare.</param>
            <returns>True if the left argument is smaller or equals than the right one, false otherwise.</returns>
        </member>
        <member name="M:Spike.AtomicInt32.op_LessThanOrEqual(Spike.AtomicInt32,System.Int32)">
            <summary>
            Checks whether the left argument is smaller or equals than the right one.
            </summary>
            <param name="left">Left parameter to compare.</param>
            <param name="right">Right parameter to compare.</param>
            <returns>True if the left argument is smaller or equals than the right one, false otherwise.</returns>
        </member>
        <member name="M:Spike.AtomicInt32.op_GreaterThanOrEqual(Spike.AtomicInt32,Spike.AtomicInt32)">
            <summary>
            Checks whether the left argument is bigger or equals than the right one.
            </summary>
            <param name="left">Left parameter to compare.</param>
            <param name="right">Right parameter to compare.</param>
            <returns>True if the left argument is bigger or equals than the right one, false otherwise.</returns>
        </member>
        <member name="M:Spike.AtomicInt32.op_GreaterThanOrEqual(Spike.AtomicInt32,System.Int32)">
            <summary>
            Checks whether the left argument is bigger or equals than the right one.
            </summary>
            <param name="left">Left parameter to compare.</param>
            <param name="right">Right parameter to compare.</param>
            <returns>True if the left argument is bigger or equals than the right one, false otherwise.</returns>
        </member>
        <member name="M:Spike.AtomicInt32.op_Explicit(Spike.AtomicInt32)~System.Int32">
            <summary>
            Converts the atomic value to a non-atomic one.
            </summary>
            <param name="value">The value to convert.</param>
            <returns>The converted value.</returns>
        </member>
        <member name="M:Spike.AtomicInt32.op_Implicit(System.Int32)~Spike.AtomicInt32">
            <summary>
            Converts the non-atomic value to an atomic one.
            </summary>
            <param name="value">The value to convert.</param>
            <returns>The converted value.</returns>
        </member>
        <member name="M:Spike.AtomicInt32.ToString">
            <summary>
            Converts the value of this instance to its equivalent string representation.
            </summary>
        </member>
        <member name="M:Spike.AtomicInt32.Equals(System.Object)">
            <summary>
            Returns a value indicating whether this instance is equal to a specified value
            </summary>
        </member>
        <member name="M:Spike.AtomicInt32.GetHashCode">
            <summary>
            Returns the hash code for this instance.
            </summary>
            <returns>A 32-bit signed integer hash code.</returns>
        </member>
        <member name="M:Spike.AtomicInt32.CompareTo(Spike.AtomicInt32)">
            <summary>
            Compares this instance to a specified value and returns an indication of their relative values.
            </summary>
            <param name="value">A value to compare.</param>
            <returns>A signed integer that indicates the relative order of this instance and value.Return
            Value Description Less than zero This instance is less than value. Zero This
            instance is equal to value. Greater than zero This instance is greater than value.
            </returns>
        </member>
        <member name="M:Spike.AtomicInt32.CompareTo(System.Object)">
            <summary>
            Compares this instance to a specified value and returns an indication of their relative values.
            </summary>
            <param name="target">A value to compare.</param>
            <returns>A signed integer that indicates the relative order of this instance and value.Return
            Value Description Less than zero This instance is less than value. Zero This
            instance is equal to value. Greater than zero This instance is greater than value.
            </returns>
        </member>
        <member name="P:Spike.AtomicInt32.Value">
            <summary>
            Gets the value of the atomic structure
            </summary>
        </member>
        <member name="T:Spike.AtomicInt64">
            <summary>
            Represents an atomic 64 bytes integer value.
            </summary>
        </member>
        <member name="M:Spike.AtomicInt64.Assign(System.Int64)">
            <summary>
            Atomically pefroms an assignment operation to the atomic value
            </summary>
            <param name="value">Value to set</param>
        </member>
        <member name="M:Spike.AtomicInt64.Assign(System.Func{System.Int64,System.Int64})">
            <summary>
            Atomically pefroms a computation and assigns it to the atomic value
            </summary>
            <param name="computation">Computation to execute atomically</param>
        </member>
        <member name="M:Spike.AtomicInt64.Add(System.Int64)">
            <summary>
            Performs an atomic addition of the given value to the current atomic value.
            </summary>
            <param name="value">The value to add to the current atomic value.</param>
        </member>
        <member name="M:Spike.AtomicInt64.Subtract(System.Int64)">
            <summary>
            Performs an atomic subtraction of the given value from the current atomic value.
            </summary>
            <param name="value">The value to subtract from the current atomic value.</param>
        </member>
        <member name="M:Spike.AtomicInt64.Multiply(System.Int64)">
            <summary>
            Performs an atomic multiplication of the given value and the current atomic value.
            </summary>
            <param name="value">The value to multiply the current atomic value.</param>
        </member>
        <member name="M:Spike.AtomicInt64.Divide(System.Int64)">
            <summary>
            Performs an atomic division of the current atomic value by the given value.
            </summary>
            <param name="value">The value to divide the current atomic value by.</param>
        </member>
        <member name="M:Spike.AtomicInt64.CompareExchange(System.Int64,System.Int64)">
            <summary>
            Compares two values for equality and, if they are equal, replaces one of the values.
            </summary>
            <param name="value1">First value to compare.</param>
            <param name="value2">Second value to compare.</param>
            <returns>The original value in value1.</returns>
        </member>
        <member name="M:Spike.AtomicInt64.Decrement">
            <summary>
            Atomically decrements current value.
            </summary>
        </member>
        <member name="M:Spike.AtomicInt64.Increment">
            <summary>
            Atomically increments the current value.
            </summary>
        </member>
        <member name="M:Spike.AtomicInt64.LeftShift(System.Int32)">
            <summary>
            Atomically performs a left shift operation by the given value.
            </summary>
            <param name="value">The amount to atomically shift by.</param>
        </member>
        <member name="M:Spike.AtomicInt64.RightShift(System.Int32)">
            <summary>
            Atomically performs a right shift operation by the given value.
            </summary>
            <param name="value">The amount to atomically shift by.</param>
        </member>
        <member name="M:Spike.AtomicInt64.Negate">
            <summary>
            Atomically negates the value.
            </summary>
        </member>
        <member name="M:Spike.AtomicInt64.OneComplement">
            <summary>
            Atomically computes one's completement of the current value.
            </summary>
        </member>
        <member name="M:Spike.AtomicInt64.BitwiseAnd(System.Int64)">
            <summary>
            Atomically computes bitewise AND on the current value.
            </summary>
            <param name="value">Value to compute the AND operation with.</param>
        </member>
        <member name="M:Spike.AtomicInt64.BitwiseInclusiveOr(System.Int64)">
            <summary>
            Atomically computes bitewise OR on the current value.
            </summary>
            <param name="value">Value to compute the OR operation with.</param>
        </member>
        <member name="M:Spike.AtomicInt64.BitwiseExclusiveOr(System.Int64)">
            <summary>
            Atomically computes exclusive bitewise OR on the current value.
            </summary>
            <param name="value">Value to compute the exclusive OR operation with.</param>
        </member>
        <member name="M:Spike.AtomicInt64.op_RightShift(Spike.AtomicInt64,System.Int32)">
            <summary>
            Performs a bitwise shift and returns a new atomic value for the result of the operation.
            </summary>
            <param name="left">The left operand.</param>
            <param name="right">The amount of bytes to shift.</param>
            <returns>A new atomic value that represents the result of the operation.</returns>
        </member>
        <member name="M:Spike.AtomicInt64.op_LeftShift(Spike.AtomicInt64,System.Int32)">
            <summary>
            Performs a bitwise shift and returns a new atomic value for the result of the operation.
            </summary>
            <param name="left">The left operand.</param>
            <param name="right">The amount of bytes to shift.</param>
            <returns>A new atomic value that represents the result of the operation.</returns>
        </member>
        <member name="M:Spike.AtomicInt64.op_Addition(Spike.AtomicInt64,System.Int64)">
            <summary>
            Performs an addition and returns a new atomic value for the result of the operation.
            </summary>
            <param name="left">The left operand.</param>
            <param name="right">The value to add.</param>
            <returns>A new atomic value that represents the result of the operation.</returns>
        </member>
        <member name="M:Spike.AtomicInt64.op_Addition(Spike.AtomicInt64,System.Int32)">
            <summary>
            Performs an addition and returns a new atomic value for the result of the operation.
            </summary>
            <param name="left">The left operand.</param>
            <param name="right">The value to add.</param>
            <returns>A new atomic value that represents the result of the operation.</returns>
        </member>
        <member name="M:Spike.AtomicInt64.op_Addition(Spike.AtomicInt64,Spike.AtomicInt64)">
            <summary>
            Performs an addition and returns a new atomic value for the result of the operation.
            </summary>
            <param name="left">The left operand.</param>
            <param name="right">The value to add.</param>
            <returns>A new atomic value that represents the result of the operation.</returns>
        </member>
        <member name="M:Spike.AtomicInt64.op_Subtraction(Spike.AtomicInt64,System.Int64)">
            <summary>
            Performs a subtraction and returns a new atomic value for the result of the operation.
            </summary>
            <param name="left">The left operand.</param>
            <param name="right">The value to subtract.</param>
            <returns>A new atomic value that represents the result of the operation.</returns>
        </member>
        <member name="M:Spike.AtomicInt64.op_Subtraction(Spike.AtomicInt64,System.Int32)">
            <summary>
            Performs a subtraction and returns a new atomic value for the result of the operation.
            </summary>
            <param name="left">The left operand.</param>
            <param name="right">The value to subtract.</param>
            <returns>A new atomic value that represents the result of the operation.</returns>
        </member>
        <member name="M:Spike.AtomicInt64.op_Subtraction(Spike.AtomicInt64,Spike.AtomicInt64)">
            <summary>
            Performs a subtraction and returns a new atomic value for the result of the operation.
            </summary>
            <param name="left">The left operand.</param>
            <param name="right">The value to subtract.</param>
            <returns>A new atomic value that represents the result of the operation.</returns>
        </member>
        <member name="M:Spike.AtomicInt64.op_Multiply(Spike.AtomicInt64,System.Int64)">
            <summary>
            Performs a multiplication and returns a new atomic value for the result of the operation.
            </summary>
            <param name="left">The left operand.</param>
            <param name="right">The value to multiply by.</param>
            <returns>A new atomic value that represents the result of the operation.</returns>
        </member>
        <member name="M:Spike.AtomicInt64.op_Multiply(Spike.AtomicInt64,System.Int32)">
            <summary>
            Performs a multiplication and returns a new atomic value for the result of the operation.
            </summary>
            <param name="left">The left operand.</param>
            <param name="right">The value to multiply by.</param>
            <returns>A new atomic value that represents the result of the operation.</returns>
        </member>
        <member name="M:Spike.AtomicInt64.op_Multiply(Spike.AtomicInt64,Spike.AtomicInt64)">
            <summary>
            Performs a multiplication and returns a new atomic value for the result of the operation.
            </summary>
            <param name="left">The left operand.</param>
            <param name="right">The value to multiply by.</param>
            <returns>A new atomic value that represents the result of the operation.</returns>
        </member>
        <member name="M:Spike.AtomicInt64.op_Division(Spike.AtomicInt64,System.Int64)">
            <summary>
            Performs a division and returns a new atomic value for the result of the operation.
            </summary>
            <param name="left">The left operand.</param>
            <param name="right">The value to divide by.</param>
            <returns>A new atomic value that represents the result of the operation.</returns>
        </member>
        <member name="M:Spike.AtomicInt64.op_Division(Spike.AtomicInt64,System.Int32)">
            <summary>
            Performs a division and returns a new atomic value for the result of the operation.
            </summary>
            <param name="left">The left operand.</param>
            <param name="right">The value to divide by.</param>
            <returns>A new atomic value that represents the result of the operation.</returns>
        </member>
        <member name="M:Spike.AtomicInt64.op_Division(Spike.AtomicInt64,Spike.AtomicInt64)">
            <summary>
            Performs a division and returns a new atomic value for the result of the operation.
            </summary>
            <param name="left">The left operand.</param>
            <param name="right">The value to divide by.</param>
            <returns>A new atomic value that represents the result of the operation.</returns>
        </member>
        <member name="M:Spike.AtomicInt64.op_Modulus(Spike.AtomicInt64,System.Int64)">
            <summary>
            Performs a modulo operation and returns a new atomic value for the result of the operation.
            </summary>
            <param name="left">The left operand.</param>
            <param name="right">The value to divide by.</param>
            <returns>A new atomic value that represents the result of the operation.</returns>
        </member>
        <member name="M:Spike.AtomicInt64.op_Modulus(Spike.AtomicInt64,System.Int32)">
            <summary>
            Performs a modulo operation and returns a new atomic value for the result of the operation.
            </summary>
            <param name="left">The left operand.</param>
            <param name="right">The value to divide by.</param>
            <returns>A new atomic value that represents the result of the operation.</returns>
        </member>
        <member name="M:Spike.AtomicInt64.op_Modulus(Spike.AtomicInt64,Spike.AtomicInt64)">
            <summary>
            Performs a modulo operation and returns a new atomic value for the result of the operation.
            </summary>
            <param name="left">The left operand.</param>
            <param name="right">The value to divide by.</param>
            <returns>A new atomic value that represents the result of the operation.</returns>
        </member>
        <member name="M:Spike.AtomicInt64.op_BitwiseAnd(Spike.AtomicInt64,System.Int64)">
            <summary>
            Performs a bitwise and operation and returns a new atomic value for the result of the operation.
            </summary>
            <param name="left">The left operand.</param>
            <param name="right">The right operand.</param>
            <returns>A new atomic value that represents the result of the operation.</returns>
        </member>
        <member name="M:Spike.AtomicInt64.op_BitwiseAnd(Spike.AtomicInt64,System.Int32)">
            <summary>
            Performs a bitwise and operation and returns a new atomic value for the result of the operation.
            </summary>
            <param name="left">The left operand.</param>
            <param name="right">The right operand.</param>
            <returns>A new atomic value that represents the result of the operation.</returns>
        </member>
        <member name="M:Spike.AtomicInt64.op_BitwiseAnd(Spike.AtomicInt64,Spike.AtomicInt64)">
            <summary>
            Performs a bitwise and operation and returns a new atomic value for the result of the operation.
            </summary>
            <param name="left">The left operand.</param>
            <param name="right">The right operand.</param>
            <returns>A new atomic value that represents the result of the operation.</returns>
        </member>
        <member name="M:Spike.AtomicInt64.op_BitwiseOr(Spike.AtomicInt64,System.Int64)">
            <summary>
            Performs a bitwise OR operation and returns a new atomic value for the result of the operation.
            </summary>
            <param name="left">The left operand.</param>
            <param name="right">The right operand.</param>
            <returns>A new atomic value that represents the result of the operation.</returns>
        </member>
        <member name="M:Spike.AtomicInt64.op_BitwiseOr(Spike.AtomicInt64,System.Int32)">
            <summary>
            Performs a bitwise OR operation and returns a new atomic value for the result of the operation.
            </summary>
            <param name="left">The left operand.</param>
            <param name="right">The right operand.</param>
            <returns>A new atomic value that represents the result of the operation.</returns>
        </member>
        <member name="M:Spike.AtomicInt64.op_BitwiseOr(Spike.AtomicInt64,Spike.AtomicInt64)">
            <summary>
            Performs a bitwise OR operation and returns a new atomic value for the result of the operation.
            </summary>
            <param name="left">The left operand.</param>
            <param name="right">The right operand.</param>
            <returns>A new atomic value that represents the result of the operation.</returns>
        </member>
        <member name="M:Spike.AtomicInt64.op_ExclusiveOr(Spike.AtomicInt64,System.Int64)">
            <summary>
            Performs a bitwise exclusive OR operation and returns a new atomic value for the result of the operation.
            </summary>
            <param name="left">The left operand.</param>
            <param name="right">The right operand.</param>
            <returns>A new atomic value that represents the result of the operation.</returns>
        </member>
        <member name="M:Spike.AtomicInt64.op_ExclusiveOr(Spike.AtomicInt64,System.Int32)">
            <summary>
            Performs a bitwise exclusive OR operation and returns a new atomic value for the result of the operation.
            </summary>
            <param name="left">The left operand.</param>
            <param name="right">The right operand.</param>
            <returns>A new atomic value that represents the result of the operation.</returns>
        </member>
        <member name="M:Spike.AtomicInt64.op_ExclusiveOr(Spike.AtomicInt64,Spike.AtomicInt64)">
            <summary>
            Performs a bitwise exclusive OR operation and returns a new atomic value for the result of the operation.
            </summary>
            <param name="left">The left operand.</param>
            <param name="right">The right operand.</param>
            <returns>A new atomic value that represents the result of the operation.</returns>
        </member>
        <member name="M:Spike.AtomicInt64.op_UnaryNegation(Spike.AtomicInt64)">
            <summary>
            Performs a negate operation and returns a new atomic value for the result of the operation.
            </summary>
            <param name="value">The value to negate.</param>
            <returns>A new atomic value that represents the result of the operation.</returns>
        </member>
        <member name="M:Spike.AtomicInt64.op_OnesComplement(Spike.AtomicInt64)">
            <summary>
            Performs a bitwise complement operation and returns a new atomic value for the result of the operation.
            </summary>
            <param name="value">The value to compute the complement of.</param>
            <returns>A new atomic value that represents the result of the operation.</returns>
        </member>
        <member name="M:Spike.AtomicInt64.op_Increment(Spike.AtomicInt64)">
            <summary>
            Atomically increments the current value.
            </summary>
            <param name="value">The value to increment.</param>
            <returns>Incremented value</returns>
        </member>
        <member name="M:Spike.AtomicInt64.op_Decrement(Spike.AtomicInt64)">
            <summary>
            Atomically decrements the current value.
            </summary>
            <param name="value">The value to decrements.</param>
            <returns>Decremented value</returns>
        </member>
        <member name="M:Spike.AtomicInt64.op_Equality(Spike.AtomicInt64,Spike.AtomicInt64)">
            <summary>
            Compares the equality of two values.
            </summary>
            <param name="left">Left parameter to compare.</param>
            <param name="right">Right parameter to compare.</param>
            <returns>Returns whether left and right parameters are equals or not.</returns>
        </member>
        <member name="M:Spike.AtomicInt64.op_Equality(Spike.AtomicInt64,System.Int64)">
            <summary>
            Compares the equality of two values.
            </summary>
            <param name="left">Left parameter to compare.</param>
            <param name="right">Right parameter to compare.</param>
            <returns>Returns whether left and right parameters are equals or not.</returns>
        </member>
        <member name="M:Spike.AtomicInt64.op_Equality(Spike.AtomicInt64,System.Int32)">
            <summary>
            Compares the equality of two values.
            </summary>
            <param name="left">Left parameter to compare.</param>
            <param name="right">Right parameter to compare.</param>
            <returns>Returns whether left and right parameters are equals or not.</returns>
        </member>
        <member name="M:Spike.AtomicInt64.op_Inequality(Spike.AtomicInt64,Spike.AtomicInt64)">
            <summary>
            Checks for inequality of two values.
            </summary>
            <param name="left">Left parameter to compare.</param>
            <param name="right">Right parameter to compare.</param>
            <returns>Returns true whether left and right parameters are not equals, otherwise false.</returns>
        </member>
        <member name="M:Spike.AtomicInt64.op_Inequality(Spike.AtomicInt64,System.Int64)">
            <summary>
            Checks for inequality of two values.
            </summary>
            <param name="left">Left parameter to compare.</param>
            <param name="right">Right parameter to compare.</param>
            <returns>Returns true whether left and right parameters are not equals, otherwise false.</returns>
        </member>
        <member name="M:Spike.AtomicInt64.op_Inequality(Spike.AtomicInt64,System.Int32)">
            <summary>
            Checks for inequality of two values.
            </summary>
            <param name="left">Left parameter to compare.</param>
            <param name="right">Right parameter to compare.</param>
            <returns>Returns true whether left and right parameters are not equals, otherwise false.</returns>
        </member>
        <member name="M:Spike.AtomicInt64.op_LessThan(Spike.AtomicInt64,Spike.AtomicInt64)">
            <summary>
            Checks whether the left argument is smaller than the right one.
            </summary>
            <param name="left">Left parameter to compare.</param>
            <param name="right">Right parameter to compare.</param>
            <returns>True if the left argument is smaller than the right one, false otherwise.</returns>
        </member>
        <member name="M:Spike.AtomicInt64.op_LessThan(Spike.AtomicInt64,System.Int64)">
            <summary>
            Checks whether the left argument is smaller than the right one.
            </summary>
            <param name="left">Left parameter to compare.</param>
            <param name="right">Right parameter to compare.</param>
            <returns>True if the left argument is smaller than the right one, false otherwise.</returns>
        </member>
        <member name="M:Spike.AtomicInt64.op_LessThan(Spike.AtomicInt64,System.Int32)">
            <summary>
            Checks whether the left argument is smaller than the right one.
            </summary>
            <param name="left">Left parameter to compare.</param>
            <param name="right">Right parameter to compare.</param>
            <returns>True if the left argument is smaller than the right one, false otherwise.</returns>
        </member>
        <member name="M:Spike.AtomicInt64.op_GreaterThan(Spike.AtomicInt64,Spike.AtomicInt64)">
            <summary>
            Checks whether the left argument is bigger than the right one.
            </summary>
            <param name="left">Left parameter to compare.</param>
            <param name="right">Right parameter to compare.</param>
            <returns>True if the left argument is bigger than the right one, false otherwise.</returns>
        </member>
        <member name="M:Spike.AtomicInt64.op_GreaterThan(Spike.AtomicInt64,System.Int64)">
            <summary>
            Checks whether the left argument is bigger than the right one.
            </summary>
            <param name="left">Left parameter to compare.</param>
            <param name="right">Right parameter to compare.</param>
            <returns>True if the left argument is bigger than the right one, false otherwise.</returns>
        </member>
        <member name="M:Spike.AtomicInt64.op_GreaterThan(Spike.AtomicInt64,System.Int32)">
            <summary>
            Checks whether the left argument is bigger than the right one.
            </summary>
            <param name="left">Left parameter to compare.</param>
            <param name="right">Right parameter to compare.</param>
            <returns>True if the left argument is bigger than the right one, false otherwise.</returns>
        </member>
        <member name="M:Spike.AtomicInt64.op_LessThanOrEqual(Spike.AtomicInt64,Spike.AtomicInt64)">
            <summary>
            Checks whether the left argument is smaller or equals than the right one.
            </summary>
            <param name="left">Left parameter to compare.</param>
            <param name="right">Right parameter to compare.</param>
            <returns>True if the left argument is smaller or equals than the right one, false otherwise.</returns>
        </member>
        <member name="M:Spike.AtomicInt64.op_LessThanOrEqual(Spike.AtomicInt64,System.Int64)">
            <summary>
            Checks whether the left argument is smaller or equals than the right one.
            </summary>
            <param name="left">Left parameter to compare.</param>
            <param name="right">Right parameter to compare.</param>
            <returns>True if the left argument is smaller or equals than the right one, false otherwise.</returns>
        </member>
        <member name="M:Spike.AtomicInt64.op_LessThanOrEqual(Spike.AtomicInt64,System.Int32)">
            <summary>
            Checks whether the left argument is smaller or equals than the right one.
            </summary>
            <param name="left">Left parameter to compare.</param>
            <param name="right">Right parameter to compare.</param>
            <returns>True if the left argument is smaller or equals than the right one, false otherwise.</returns>
        </member>
        <member name="M:Spike.AtomicInt64.op_GreaterThanOrEqual(Spike.AtomicInt64,Spike.AtomicInt64)">
            <summary>
            Checks whether the left argument is bigger or equals than the right one.
            </summary>
            <param name="left">Left parameter to compare.</param>
            <param name="right">Right parameter to compare.</param>
            <returns>True if the left argument is bigger or equals than the right one, false otherwise.</returns>
        </member>
        <member name="M:Spike.AtomicInt64.op_GreaterThanOrEqual(Spike.AtomicInt64,System.Int64)">
            <summary>
            Checks whether the left argument is bigger or equals than the right one.
            </summary>
            <param name="left">Left parameter to compare.</param>
            <param name="right">Right parameter to compare.</param>
            <returns>True if the left argument is bigger or equals than the right one, false otherwise.</returns>
        </member>
        <member name="M:Spike.AtomicInt64.op_GreaterThanOrEqual(Spike.AtomicInt64,System.Int32)">
            <summary>
            Checks whether the left argument is bigger or equals than the right one.
            </summary>
            <param name="left">Left parameter to compare.</param>
            <param name="right">Right parameter to compare.</param>
            <returns>True if the left argument is bigger or equals than the right one, false otherwise.</returns>
        </member>
        <member name="M:Spike.AtomicInt64.op_Explicit(Spike.AtomicInt64)~System.Int64">
            <summary>
            Converts the atomic value to a non-atomic one.
            </summary>
            <param name="value">The value to convert.</param>
            <returns>The converted value.</returns>
        </member>
        <member name="M:Spike.AtomicInt64.op_Implicit(System.Int64)~Spike.AtomicInt64">
            <summary>
            Converts the non-atomic value to an atomic one.
            </summary>
            <param name="value">The value to convert.</param>
            <returns>The converted value.</returns>
        </member>
        <member name="M:Spike.AtomicInt64.op_Implicit(System.Int32)~Spike.AtomicInt64">
            <summary>
            Converts the non-atomic value to an atomic one.
            </summary>
            <param name="value">The value to convert.</param>
            <returns>The converted value.</returns>
        </member>
        <member name="M:Spike.AtomicInt64.ToString">
            <summary>
            Converts the value of this instance to its equivalent string representation.
            </summary>
        </member>
        <member name="M:Spike.AtomicInt64.Equals(System.Object)">
            <summary>
            Returns a value indicating whether this instance is equal to a specified value
            </summary>
        </member>
        <member name="M:Spike.AtomicInt64.GetHashCode">
            <summary>
            Returns the hash code for this instance.
            </summary>
            <returns>A 32-bit signed integer hash code.</returns>
        </member>
        <member name="M:Spike.AtomicInt64.CompareTo(Spike.AtomicInt64)">
            <summary>
            Compares this instance to a specified value and returns an indication of their relative values.
            </summary>
            <param name="value">A value to compare.</param>
            <returns>A signed integer that indicates the relative order of this instance and value.Return
            Value Description Less than zero This instance is less than value. Zero This
            instance is equal to value. Greater than zero This instance is greater than value.
            </returns>
        </member>
        <member name="M:Spike.AtomicInt64.CompareTo(System.Object)">
            <summary>
            Compares this instance to a specified value and returns an indication of their relative values.
            </summary>
            <param name="target">A value to compare.</param>
            <returns>A signed integer that indicates the relative order of this instance and value.Return
            Value Description Less than zero This instance is less than value. Zero This
            instance is equal to value. Greater than zero This instance is greater than value.
            </returns>
        </member>
        <member name="P:Spike.AtomicInt64.Value">
            <summary>
            Gets the value of the atomic structure
            </summary>
        </member>
        <member name="T:Spike.AtomicRef`1">
            <summary>
            Represents an atomic reference to an object integer value.
            </summary>
        </member>
        <member name="M:Spike.AtomicRef`1.#ctor(`0)">
            <summary>
            Constructs a new <see cref="T:Spike.AtomicRef`1"/> instance.
            </summary>
            <param name="objectT">The target object reference.</param>
        </member>
        <member name="M:Spike.AtomicRef`1.Assign(`0)">
            <summary>
            Atomically pefroms an assignment operation to the atomic value
            </summary>
            <param name="value">Value to set</param>
        </member>
        <member name="M:Spike.AtomicRef`1.Assign(System.Func{`0,`0})">
            <summary>
            Atomically pefroms a computation and assigns it to the atomic value
            </summary>
            <param name="computation">Computation to execute atomically</param>
        </member>
        <member name="M:Spike.AtomicRef`1.CompareExchange(`0,`0)">
            <summary>
            Compares two values for equality and, if they are equal, replaces one of the values.
            </summary>
            <param name="value1">First value to compare.</param>
            <param name="value2">Second value to compare.</param>
            <returns>The original value in value1.</returns>
        </member>
        <member name="M:Spike.AtomicRef`1.op_Equality(Spike.AtomicRef{`0},Spike.AtomicRef{`0})">
            <summary>
            Compares the equality of two values.
            </summary>
            <param name="left">Left parameter to compare.</param>
            <param name="right">Right parameter to compare.</param>
            <returns>Returns whether left and right parameters are equals or not.</returns>
        </member>
        <member name="M:Spike.AtomicRef`1.op_Equality(Spike.AtomicRef{`0},`0)">
            <summary>
            Compares the equality of two values.
            </summary>
            <param name="left">Left parameter to compare.</param>
            <param name="right">Right parameter to compare.</param>
            <returns>Returns whether left and right parameters are equals or not.</returns>
        </member>
        <member name="M:Spike.AtomicRef`1.op_Inequality(Spike.AtomicRef{`0},Spike.AtomicRef{`0})">
            <summary>
            Checks for inequality of two values.
            </summary>
            <param name="left">Left parameter to compare.</param>
            <param name="right">Right parameter to compare.</param>
            <returns>Returns true whether left and right parameters are not equals, otherwise false.</returns>
        </member>
        <member name="M:Spike.AtomicRef`1.op_Inequality(Spike.AtomicRef{`0},`0)">
            <summary>
            Checks for inequality of two values.
            </summary>
            <param name="left">Left parameter to compare.</param>
            <param name="right">Right parameter to compare.</param>
            <returns>Returns true whether left and right parameters are not equals, otherwise false.</returns>
        </member>
        <member name="M:Spike.AtomicRef`1.op_Explicit(Spike.AtomicRef{`0})~`0">
            <summary>
            Converts the atomic value to a non-atomic one.
            </summary>
            <param name="value">The value to convert.</param>
            <returns>The converted value.</returns>
        </member>
        <member name="M:Spike.AtomicRef`1.op_Implicit(`0)~Spike.AtomicRef{`0}">
            <summary>
            Converts the non-atomic value to an atomic one.
            </summary>
            <param name="value">The value to convert.</param>
            <returns>The converted value.</returns>
        </member>
        <member name="M:Spike.AtomicRef`1.ToString">
            <summary>
            Converts the value of this instance to its equivalent string representation.
            </summary>
        </member>
        <member name="M:Spike.AtomicRef`1.Equals(System.Object)">
            <summary>
            Returns a value indicating whether this instance is equal to a specified value
            </summary>
        </member>
        <member name="M:Spike.AtomicRef`1.GetHashCode">
            <summary>
            Returns the hash code for this instance.
            </summary>
            <returns>A 32-bit signed integer hash code.</returns>
        </member>
        <member name="P:Spike.AtomicRef`1.Value">
            <summary>
            Gets the value of the atomic structure
            </summary>
        </member>
        <member name="T:Spike.AtomicSByte">
            <summary>
            Represents an atomic signed byte value.
            </summary>
        </member>
        <member name="M:Spike.AtomicSByte.Assign(System.SByte)">
            <summary>
            Atomically pefroms an assignment operation to the atomic value
            </summary>
            <param name="value">Value to set</param>
        </member>
        <member name="M:Spike.AtomicSByte.Assign(System.Func{System.SByte,System.SByte})">
            <summary>
            Atomically pefroms a computation and assigns it to the atomic value
            </summary>
            <param name="computation">Computation to execute atomically</param>
        </member>
        <member name="M:Spike.AtomicSByte.Add(System.SByte)">
            <summary>
            Performs an atomic addition of the given value to the current atomic value.
            </summary>
            <param name="value">The value to add to the current atomic value.</param>
        </member>
        <member name="M:Spike.AtomicSByte.Subtract(System.SByte)">
            <summary>
            Performs an atomic subtraction of the given value from the current atomic value.
            </summary>
            <param name="value">The value to subtract from the current atomic value.</param>
        </member>
        <member name="M:Spike.AtomicSByte.Multiply(System.SByte)">
            <summary>
            Performs an atomic multiplication of the given value and the current atomic value.
            </summary>
            <param name="value">The value to multiply the current atomic value.</param>
        </member>
        <member name="M:Spike.AtomicSByte.Divide(System.SByte)">
            <summary>
            Performs an atomic division of the current atomic value by the given value.
            </summary>
            <param name="value">The value to divide the current atomic value by.</param>
        </member>
        <member name="M:Spike.AtomicSByte.CompareExchange(System.SByte,System.SByte)">
            <summary>
            Compares two values for equality and, if they are equal, replaces one of the values.
            </summary>
            <param name="value1">First value to compare.</param>
            <param name="value2">Second value to compare.</param>
            <returns>The original value in value1.</returns>
        </member>
        <member name="M:Spike.AtomicSByte.Decrement">
            <summary>
            Atomically decrements current value.
            </summary>
        </member>
        <member name="M:Spike.AtomicSByte.Increment">
            <summary>
            Atomically increments the current value.
            </summary>
        </member>
        <member name="M:Spike.AtomicSByte.LeftShift(System.Int32)">
            <summary>
            Atomically performs a left shift operation by the given value.
            </summary>
            <param name="value">The amount to atomically shift by.</param>
        </member>
        <member name="M:Spike.AtomicSByte.RightShift(System.Int32)">
            <summary>
            Atomically performs a right shift operation by the given value.
            </summary>
            <param name="value">The amount to atomically shift by.</param>
        </member>
        <member name="M:Spike.AtomicSByte.OneComplement">
            <summary>
            Atomically computes one's completement of the current value.
            </summary>
        </member>
        <member name="M:Spike.AtomicSByte.BitwiseAnd(System.SByte)">
            <summary>
            Atomically computes bitewise AND on the current value.
            </summary>
            <param name="value">Value to compute the AND operation with.</param>
        </member>
        <member name="M:Spike.AtomicSByte.BitwiseInclusiveOr(System.SByte)">
            <summary>
            Atomically computes bitewise OR on the current value.
            </summary>
            <param name="value">Value to compute the OR operation with.</param>
        </member>
        <member name="M:Spike.AtomicSByte.BitwiseExclusiveOr(System.SByte)">
            <summary>
            Atomically computes exclusive bitewise OR on the current value.
            </summary>
            <param name="value">Value to compute the exclusive OR operation with.</param>
        </member>
        <member name="M:Spike.AtomicSByte.op_RightShift(Spike.AtomicSByte,System.Int32)">
            <summary>
            Performs a bitwise shift and returns a new atomic value for the result of the operation.
            </summary>
            <param name="left">The left operand.</param>
            <param name="right">The amount of bytes to shift.</param>
            <returns>A new atomic value that represents the result of the operation.</returns>
        </member>
        <member name="M:Spike.AtomicSByte.op_LeftShift(Spike.AtomicSByte,System.Int32)">
            <summary>
            Performs a bitwise shift and returns a new atomic value for the result of the operation.
            </summary>
            <param name="left">The left operand.</param>
            <param name="right">The amount of bytes to shift.</param>
            <returns>A new atomic value that represents the result of the operation.</returns>
        </member>
        <member name="M:Spike.AtomicSByte.op_Addition(Spike.AtomicSByte,System.SByte)">
            <summary>
            Performs an addition and returns a new atomic value for the result of the operation.
            </summary>
            <param name="left">The left operand.</param>
            <param name="right">The value to add.</param>
            <returns>A new atomic value that represents the result of the operation.</returns>
        </member>
        <member name="M:Spike.AtomicSByte.op_Addition(Spike.AtomicSByte,Spike.AtomicSByte)">
            <summary>
            Performs an addition and returns a new atomic value for the result of the operation.
            </summary>
            <param name="left">The left operand.</param>
            <param name="right">The value to add.</param>
            <returns>A new atomic value that represents the result of the operation.</returns>
        </member>
        <member name="M:Spike.AtomicSByte.op_Subtraction(Spike.AtomicSByte,System.SByte)">
            <summary>
            Performs a subtraction and returns a new atomic value for the result of the operation.
            </summary>
            <param name="left">The left operand.</param>
            <param name="right">The value to subtract.</param>
            <returns>A new atomic value that represents the result of the operation.</returns>
        </member>
        <member name="M:Spike.AtomicSByte.op_Subtraction(Spike.AtomicSByte,Spike.AtomicSByte)">
            <summary>
            Performs a subtraction and returns a new atomic value for the result of the operation.
            </summary>
            <param name="left">The left operand.</param>
            <param name="right">The value to subtract.</param>
            <returns>A new atomic value that represents the result of the operation.</returns>
        </member>
        <member name="M:Spike.AtomicSByte.op_Multiply(Spike.AtomicSByte,System.SByte)">
            <summary>
            Performs a multiplication and returns a new atomic value for the result of the operation.
            </summary>
            <param name="left">The left operand.</param>
            <param name="right">The value to multiply by.</param>
            <returns>A new atomic value that represents the result of the operation.</returns>
        </member>
        <member name="M:Spike.AtomicSByte.op_Multiply(Spike.AtomicSByte,Spike.AtomicSByte)">
            <summary>
            Performs a multiplication and returns a new atomic value for the result of the operation.
            </summary>
            <param name="left">The left operand.</param>
            <param name="right">The value to multiply by.</param>
            <returns>A new atomic value that represents the result of the operation.</returns>
        </member>
        <member name="M:Spike.AtomicSByte.op_Division(Spike.AtomicSByte,System.SByte)">
            <summary>
            Performs a division and returns a new atomic value for the result of the operation.
            </summary>
            <param name="left">The left operand.</param>
            <param name="right">The value to divide by.</param>
            <returns>A new atomic value that represents the result of the operation.</returns>
        </member>
        <member name="M:Spike.AtomicSByte.op_Division(Spike.AtomicSByte,Spike.AtomicSByte)">
            <summary>
            Performs a division and returns a new atomic value for the result of the operation.
            </summary>
            <param name="left">The left operand.</param>
            <param name="right">The value to divide by.</param>
            <returns>A new atomic value that represents the result of the operation.</returns>
        </member>
        <member name="M:Spike.AtomicSByte.op_Modulus(Spike.AtomicSByte,System.SByte)">
            <summary>
            Performs a modulo operation and returns a new atomic value for the result of the operation.
            </summary>
            <param name="left">The left operand.</param>
            <param name="right">The value to divide by.</param>
            <returns>A new atomic value that represents the result of the operation.</returns>
        </member>
        <member name="M:Spike.AtomicSByte.op_Modulus(Spike.AtomicSByte,Spike.AtomicSByte)">
            <summary>
            Performs a modulo operation and returns a new atomic value for the result of the operation.
            </summary>
            <param name="left">The left operand.</param>
            <param name="right">The value to divide by.</param>
            <returns>A new atomic value that represents the result of the operation.</returns>
        </member>
        <member name="M:Spike.AtomicSByte.op_BitwiseAnd(Spike.AtomicSByte,System.SByte)">
            <summary>
            Performs a bitwise and operation and returns a new atomic value for the result of the operation.
            </summary>
            <param name="left">The left operand.</param>
            <param name="right">The right operand.</param>
            <returns>A new atomic value that represents the result of the operation.</returns>
        </member>
        <member name="M:Spike.AtomicSByte.op_BitwiseAnd(Spike.AtomicSByte,Spike.AtomicSByte)">
            <summary>
            Performs a bitwise and operation and returns a new atomic value for the result of the operation.
            </summary>
            <param name="left">The left operand.</param>
            <param name="right">The right operand.</param>
            <returns>A new atomic value that represents the result of the operation.</returns>
        </member>
        <member name="M:Spike.AtomicSByte.op_BitwiseOr(Spike.AtomicSByte,System.SByte)">
            <summary>
            Performs a bitwise OR operation and returns a new atomic value for the result of the operation.
            </summary>
            <param name="left">The left operand.</param>
            <param name="right">The right operand.</param>
            <returns>A new atomic value that represents the result of the operation.</returns>
        </member>
        <member name="M:Spike.AtomicSByte.op_BitwiseOr(Spike.AtomicSByte,Spike.AtomicSByte)">
            <summary>
            Performs a bitwise OR operation and returns a new atomic value for the result of the operation.
            </summary>
            <param name="left">The left operand.</param>
            <param name="right">The right operand.</param>
            <returns>A new atomic value that represents the result of the operation.</returns>
        </member>
        <member name="M:Spike.AtomicSByte.op_ExclusiveOr(Spike.AtomicSByte,System.SByte)">
            <summary>
            Performs a bitwise exclusive OR operation and returns a new atomic value for the result of the operation.
            </summary>
            <param name="left">The left operand.</param>
            <param name="right">The right operand.</param>
            <returns>A new atomic value that represents the result of the operation.</returns>
        </member>
        <member name="M:Spike.AtomicSByte.op_ExclusiveOr(Spike.AtomicSByte,Spike.AtomicSByte)">
            <summary>
            Performs a bitwise exclusive OR operation and returns a new atomic value for the result of the operation.
            </summary>
            <param name="left">The left operand.</param>
            <param name="right">The right operand.</param>
            <returns>A new atomic value that represents the result of the operation.</returns>
        </member>
        <member name="M:Spike.AtomicSByte.op_OnesComplement(Spike.AtomicSByte)">
            <summary>
            Performs a bitwise complement operation and returns a new atomic value for the result of the operation.
            </summary>
            <param name="value">The value to compute the complement of.</param>
            <returns>A new atomic value that represents the result of the operation.</returns>
        </member>
        <member name="M:Spike.AtomicSByte.op_Increment(Spike.AtomicSByte)">
            <summary>
            Atomically increments the current value.
            </summary>
            <param name="value">The value to increment.</param>
            <returns>Incremented value</returns>
        </member>
        <member name="M:Spike.AtomicSByte.op_Decrement(Spike.AtomicSByte)">
            <summary>
            Atomically decrements the current value.
            </summary>
            <param name="value">The value to decrements.</param>
            <returns>Decremented value</returns>
        </member>
        <member name="M:Spike.AtomicSByte.op_Equality(Spike.AtomicSByte,Spike.AtomicSByte)">
            <summary>
            Compares the equality of two values.
            </summary>
            <param name="left">Left parameter to compare.</param>
            <param name="right">Right parameter to compare.</param>
            <returns>Returns whether left and right parameters are equals or not.</returns>
        </member>
        <member name="M:Spike.AtomicSByte.op_Equality(Spike.AtomicSByte,System.SByte)">
            <summary>
            Compares the equality of two values.
            </summary>
            <param name="left">Left parameter to compare.</param>
            <param name="right">Right parameter to compare.</param>
            <returns>Returns whether left and right parameters are equals or not.</returns>
        </member>
        <member name="M:Spike.AtomicSByte.op_Inequality(Spike.AtomicSByte,Spike.AtomicSByte)">
            <summary>
            Checks for inequality of two values.
            </summary>
            <param name="left">Left parameter to compare.</param>
            <param name="right">Right parameter to compare.</param>
            <returns>Returns true whether left and right parameters are not equals, otherwise false.</returns>
        </member>
        <member name="M:Spike.AtomicSByte.op_Inequality(Spike.AtomicSByte,System.SByte)">
            <summary>
            Checks for inequality of two values.
            </summary>
            <param name="left">Left parameter to compare.</param>
            <param name="right">Right parameter to compare.</param>
            <returns>Returns true whether left and right parameters are not equals, otherwise false.</returns>
        </member>
        <member name="M:Spike.AtomicSByte.op_LessThan(Spike.AtomicSByte,Spike.AtomicSByte)">
            <summary>
            Checks whether the left argument is smaller than the right one.
            </summary>
            <param name="left">Left parameter to compare.</param>
            <param name="right">Right parameter to compare.</param>
            <returns>True if the left argument is smaller than the right one, false otherwise.</returns>
        </member>
        <member name="M:Spike.AtomicSByte.op_LessThan(Spike.AtomicSByte,System.SByte)">
            <summary>
            Checks whether the left argument is smaller than the right one.
            </summary>
            <param name="left">Left parameter to compare.</param>
            <param name="right">Right parameter to compare.</param>
            <returns>True if the left argument is smaller than the right one, false otherwise.</returns>
        </member>
        <member name="M:Spike.AtomicSByte.op_GreaterThan(Spike.AtomicSByte,Spike.AtomicSByte)">
            <summary>
            Checks whether the left argument is bigger than the right one.
            </summary>
            <param name="left">Left parameter to compare.</param>
            <param name="right">Right parameter to compare.</param>
            <returns>True if the left argument is bigger than the right one, false otherwise.</returns>
        </member>
        <member name="M:Spike.AtomicSByte.op_GreaterThan(Spike.AtomicSByte,System.SByte)">
            <summary>
            Checks whether the left argument is bigger than the right one.
            </summary>
            <param name="left">Left parameter to compare.</param>
            <param name="right">Right parameter to compare.</param>
            <returns>True if the left argument is bigger than the right one, false otherwise.</returns>
        </member>
        <member name="M:Spike.AtomicSByte.op_LessThanOrEqual(Spike.AtomicSByte,Spike.AtomicSByte)">
            <summary>
            Checks whether the left argument is smaller or equals than the right one.
            </summary>
            <param name="left">Left parameter to compare.</param>
            <param name="right">Right parameter to compare.</param>
            <returns>True if the left argument is smaller or equals than the right one, false otherwise.</returns>
        </member>
        <member name="M:Spike.AtomicSByte.op_LessThanOrEqual(Spike.AtomicSByte,System.SByte)">
            <summary>
            Checks whether the left argument is smaller or equals than the right one.
            </summary>
            <param name="left">Left parameter to compare.</param>
            <param name="right">Right parameter to compare.</param>
            <returns>True if the left argument is smaller or equals than the right one, false otherwise.</returns>
        </member>
        <member name="M:Spike.AtomicSByte.op_GreaterThanOrEqual(Spike.AtomicSByte,Spike.AtomicSByte)">
            <summary>
            Checks whether the left argument is bigger or equals than the right one.
            </summary>
            <param name="left">Left parameter to compare.</param>
            <param name="right">Right parameter to compare.</param>
            <returns>True if the left argument is bigger or equals than the right one, false otherwise.</returns>
        </member>
        <member name="M:Spike.AtomicSByte.op_GreaterThanOrEqual(Spike.AtomicSByte,System.SByte)">
            <summary>
            Checks whether the left argument is bigger or equals than the right one.
            </summary>
            <param name="left">Left parameter to compare.</param>
            <param name="right">Right parameter to compare.</param>
            <returns>True if the left argument is bigger or equals than the right one, false otherwise.</returns>
        </member>
        <member name="M:Spike.AtomicSByte.op_Explicit(Spike.AtomicSByte)~System.SByte">
            <summary>
            Converts the atomic value to a non-atomic one.
            </summary>
            <param name="value">The value to convert.</param>
            <returns>The converted value.</returns>
        </member>
        <member name="M:Spike.AtomicSByte.op_Implicit(System.SByte)~Spike.AtomicSByte">
            <summary>
            Converts the non-atomic value to an atomic one.
            </summary>
            <param name="value">The value to convert.</param>
            <returns>The converted value.</returns>
        </member>
        <member name="M:Spike.AtomicSByte.ToString">
            <summary>
            Converts the value of this instance to its equivalent string representation.
            </summary>
        </member>
        <member name="M:Spike.AtomicSByte.Equals(System.Object)">
            <summary>
            Returns a value indicating whether this instance is equal to a specified value
            </summary>
        </member>
        <member name="M:Spike.AtomicSByte.GetHashCode">
            <summary>
            Returns the hash code for this instance.
            </summary>
            <returns>A 32-bit signed integer hash code.</returns>
        </member>
        <member name="M:Spike.AtomicSByte.CompareTo(Spike.AtomicSByte)">
            <summary>
            Compares this instance to a specified value and returns an indication of their relative values.
            </summary>
            <param name="value">A value to compare.</param>
            <returns>A signed integer that indicates the relative order of this instance and value.Return
            Value Description Less than zero This instance is less than value. Zero This
            instance is equal to value. Greater than zero This instance is greater than value.
            </returns>
        </member>
        <member name="M:Spike.AtomicSByte.CompareTo(System.Object)">
            <summary>
            Compares this instance to a specified value and returns an indication of their relative values.
            </summary>
            <param name="target">A value to compare.</param>
            <returns>A signed integer that indicates the relative order of this instance and value.Return
            Value Description Less than zero This instance is less than value. Zero This
            instance is equal to value. Greater than zero This instance is greater than value.
            </returns>
        </member>
        <member name="P:Spike.AtomicSByte.Value">
            <summary>
            Gets the value of the atomic structure
            </summary>
        </member>
        <member name="T:Spike.AtomicInt16">
            <summary>
            Represents an atomic 16 bytes integer value.
            </summary>
        </member>
        <member name="M:Spike.AtomicInt16.Assign(System.Int16)">
            <summary>
            Atomically pefroms an assignment operation to the atomic value
            </summary>
            <param name="value">Value to set</param>
        </member>
        <member name="M:Spike.AtomicInt16.Assign(System.Func{System.Int16,System.Int16})">
            <summary>
            Atomically pefroms a computation and assigns it to the atomic value
            </summary>
            <param name="computation">Computation to execute atomically</param>
        </member>
        <member name="M:Spike.AtomicInt16.Add(System.Int16)">
            <summary>
            Performs an atomic addition of the given value to the current atomic value.
            </summary>
            <param name="value">The value to add to the current atomic value.</param>
        </member>
        <member name="M:Spike.AtomicInt16.Subtract(System.Int16)">
            <summary>
            Performs an atomic subtraction of the given value from the current atomic value.
            </summary>
            <param name="value">The value to subtract from the current atomic value.</param>
        </member>
        <member name="M:Spike.AtomicInt16.Multiply(System.Int16)">
            <summary>
            Performs an atomic multiplication of the given value and the current atomic value.
            </summary>
            <param name="value">The value to multiply the current atomic value.</param>
        </member>
        <member name="M:Spike.AtomicInt16.Divide(System.Int16)">
            <summary>
            Performs an atomic division of the current atomic value by the given value.
            </summary>
            <param name="value">The value to divide the current atomic value by.</param>
        </member>
        <member name="M:Spike.AtomicInt16.CompareExchange(System.Int16,System.Int16)">
            <summary>
            Compares two values for equality and, if they are equal, replaces one of the values.
            </summary>
            <param name="value1">First value to compare.</param>
            <param name="value2">Second value to compare.</param>
            <returns>The original value in value1.</returns>
        </member>
        <member name="M:Spike.AtomicInt16.Decrement">
            <summary>
            Atomically decrements current value.
            </summary>
        </member>
        <member name="M:Spike.AtomicInt16.Increment">
            <summary>
            Atomically increments the current value.
            </summary>
        </member>
        <member name="M:Spike.AtomicInt16.LeftShift(System.Int32)">
            <summary>
            Atomically performs a left shift operation by the given value.
            </summary>
            <param name="value">The amount to atomically shift by.</param>
        </member>
        <member name="M:Spike.AtomicInt16.RightShift(System.Int32)">
            <summary>
            Atomically performs a right shift operation by the given value.
            </summary>
            <param name="value">The amount to atomically shift by.</param>
        </member>
        <member name="M:Spike.AtomicInt16.OneComplement">
            <summary>
            Atomically computes one's completement of the current value.
            </summary>
        </member>
        <member name="M:Spike.AtomicInt16.BitwiseAnd(System.Int16)">
            <summary>
            Atomically computes bitewise AND on the current value.
            </summary>
            <param name="value">Value to compute the AND operation with.</param>
        </member>
        <member name="M:Spike.AtomicInt16.BitwiseInclusiveOr(System.Int16)">
            <summary>
            Atomically computes bitewise OR on the current value.
            </summary>
            <param name="value">Value to compute the OR operation with.</param>
        </member>
        <member name="M:Spike.AtomicInt16.BitwiseExclusiveOr(System.Int16)">
            <summary>
            Atomically computes exclusive bitewise OR on the current value.
            </summary>
            <param name="value">Value to compute the exclusive OR operation with.</param>
        </member>
        <member name="M:Spike.AtomicInt16.op_RightShift(Spike.AtomicInt16,System.Int32)">
            <summary>
            Performs a bitwise shift and returns a new atomic value for the result of the operation.
            </summary>
            <param name="left">The left operand.</param>
            <param name="right">The amount of bytes to shift.</param>
            <returns>A new atomic value that represents the result of the operation.</returns>
        </member>
        <member name="M:Spike.AtomicInt16.op_LeftShift(Spike.AtomicInt16,System.Int32)">
            <summary>
            Performs a bitwise shift and returns a new atomic value for the result of the operation.
            </summary>
            <param name="left">The left operand.</param>
            <param name="right">The amount of bytes to shift.</param>
            <returns>A new atomic value that represents the result of the operation.</returns>
        </member>
        <member name="M:Spike.AtomicInt16.op_Addition(Spike.AtomicInt16,System.Int16)">
            <summary>
            Performs an addition and returns a new atomic value for the result of the operation.
            </summary>
            <param name="left">The left operand.</param>
            <param name="right">The value to add.</param>
            <returns>A new atomic value that represents the result of the operation.</returns>
        </member>
        <member name="M:Spike.AtomicInt16.op_Addition(Spike.AtomicInt16,Spike.AtomicInt16)">
            <summary>
            Performs an addition and returns a new atomic value for the result of the operation.
            </summary>
            <param name="left">The left operand.</param>
            <param name="right">The value to add.</param>
            <returns>A new atomic value that represents the result of the operation.</returns>
        </member>
        <member name="M:Spike.AtomicInt16.op_Subtraction(Spike.AtomicInt16,System.Int16)">
            <summary>
            Performs a subtraction and returns a new atomic value for the result of the operation.
            </summary>
            <param name="left">The left operand.</param>
            <param name="right">The value to subtract.</param>
            <returns>A new atomic value that represents the result of the operation.</returns>
        </member>
        <member name="M:Spike.AtomicInt16.op_Subtraction(Spike.AtomicInt16,Spike.AtomicInt16)">
            <summary>
            Performs a subtraction and returns a new atomic value for the result of the operation.
            </summary>
            <param name="left">The left operand.</param>
            <param name="right">The value to subtract.</param>
            <returns>A new atomic value that represents the result of the operation.</returns>
        </member>
        <member name="M:Spike.AtomicInt16.op_Multiply(Spike.AtomicInt16,System.Int16)">
            <summary>
            Performs a multiplication and returns a new atomic value for the result of the operation.
            </summary>
            <param name="left">The left operand.</param>
            <param name="right">The value to multiply by.</param>
            <returns>A new atomic value that represents the result of the operation.</returns>
        </member>
        <member name="M:Spike.AtomicInt16.op_Multiply(Spike.AtomicInt16,Spike.AtomicInt16)">
            <summary>
            Performs a multiplication and returns a new atomic value for the result of the operation.
            </summary>
            <param name="left">The left operand.</param>
            <param name="right">The value to multiply by.</param>
            <returns>A new atomic value that represents the result of the operation.</returns>
        </member>
        <member name="M:Spike.AtomicInt16.op_Division(Spike.AtomicInt16,System.Int16)">
            <summary>
            Performs a division and returns a new atomic value for the result of the operation.
            </summary>
            <param name="left">The left operand.</param>
            <param name="right">The value to divide by.</param>
            <returns>A new atomic value that represents the result of the operation.</returns>
        </member>
        <member name="M:Spike.AtomicInt16.op_Division(Spike.AtomicInt16,Spike.AtomicInt16)">
            <summary>
            Performs a division and returns a new atomic value for the result of the operation.
            </summary>
            <param name="left">The left operand.</param>
            <param name="right">The value to divide by.</param>
            <returns>A new atomic value that represents the result of the operation.</returns>
        </member>
        <member name="M:Spike.AtomicInt16.op_Modulus(Spike.AtomicInt16,System.Int16)">
            <summary>
            Performs a modulo operation and returns a new atomic value for the result of the operation.
            </summary>
            <param name="left">The left operand.</param>
            <param name="right">The value to divide by.</param>
            <returns>A new atomic value that represents the result of the operation.</returns>
        </member>
        <member name="M:Spike.AtomicInt16.op_Modulus(Spike.AtomicInt16,Spike.AtomicInt16)">
            <summary>
            Performs a modulo operation and returns a new atomic value for the result of the operation.
            </summary>
            <param name="left">The left operand.</param>
            <param name="right">The value to divide by.</param>
            <returns>A new atomic value that represents the result of the operation.</returns>
        </member>
        <member name="M:Spike.AtomicInt16.op_BitwiseAnd(Spike.AtomicInt16,System.Int16)">
            <summary>
            Performs a bitwise and operation and returns a new atomic value for the result of the operation.
            </summary>
            <param name="left">The left operand.</param>
            <param name="right">The right operand.</param>
            <returns>A new atomic value that represents the result of the operation.</returns>
        </member>
        <member name="M:Spike.AtomicInt16.op_BitwiseAnd(Spike.AtomicInt16,Spike.AtomicInt16)">
            <summary>
            Performs a bitwise and operation and returns a new atomic value for the result of the operation.
            </summary>
            <param name="left">The left operand.</param>
            <param name="right">The right operand.</param>
            <returns>A new atomic value that represents the result of the operation.</returns>
        </member>
        <member name="M:Spike.AtomicInt16.op_BitwiseOr(Spike.AtomicInt16,System.Int16)">
            <summary>
            Performs a bitwise OR operation and returns a new atomic value for the result of the operation.
            </summary>
            <param name="left">The left operand.</param>
            <param name="right">The right operand.</param>
            <returns>A new atomic value that represents the result of the operation.</returns>
        </member>
        <member name="M:Spike.AtomicInt16.op_BitwiseOr(Spike.AtomicInt16,Spike.AtomicInt16)">
            <summary>
            Performs a bitwise OR operation and returns a new atomic value for the result of the operation.
            </summary>
            <param name="left">The left operand.</param>
            <param name="right">The right operand.</param>
            <returns>A new atomic value that represents the result of the operation.</returns>
        </member>
        <member name="M:Spike.AtomicInt16.op_ExclusiveOr(Spike.AtomicInt16,System.Int16)">
            <summary>
            Performs a bitwise exclusive OR operation and returns a new atomic value for the result of the operation.
            </summary>
            <param name="left">The left operand.</param>
            <param name="right">The right operand.</param>
            <returns>A new atomic value that represents the result of the operation.</returns>
        </member>
        <member name="M:Spike.AtomicInt16.op_ExclusiveOr(Spike.AtomicInt16,Spike.AtomicInt16)">
            <summary>
            Performs a bitwise exclusive OR operation and returns a new atomic value for the result of the operation.
            </summary>
            <param name="left">The left operand.</param>
            <param name="right">The right operand.</param>
            <returns>A new atomic value that represents the result of the operation.</returns>
        </member>
        <member name="M:Spike.AtomicInt16.op_OnesComplement(Spike.AtomicInt16)">
            <summary>
            Performs a bitwise complement operation and returns a new atomic value for the result of the operation.
            </summary>
            <param name="value">The value to compute the complement of.</param>
            <returns>A new atomic value that represents the result of the operation.</returns>
        </member>
        <member name="M:Spike.AtomicInt16.op_Increment(Spike.AtomicInt16)">
            <summary>
            Atomically increments the current value.
            </summary>
            <param name="value">The value to increment.</param>
            <returns>Incremented value</returns>
        </member>
        <member name="M:Spike.AtomicInt16.op_Decrement(Spike.AtomicInt16)">
            <summary>
            Atomically decrements the current value.
            </summary>
            <param name="value">The value to decrements.</param>
            <returns>Decremented value</returns>
        </member>
        <member name="M:Spike.AtomicInt16.op_Equality(Spike.AtomicInt16,Spike.AtomicInt16)">
            <summary>
            Compares the equality of two values.
            </summary>
            <param name="left">Left parameter to compare.</param>
            <param name="right">Right parameter to compare.</param>
            <returns>Returns whether left and right parameters are equals or not.</returns>
        </member>
        <member name="M:Spike.AtomicInt16.op_Equality(Spike.AtomicInt16,System.Int16)">
            <summary>
            Compares the equality of two values.
            </summary>
            <param name="left">Left parameter to compare.</param>
            <param name="right">Right parameter to compare.</param>
            <returns>Returns whether left and right parameters are equals or not.</returns>
        </member>
        <member name="M:Spike.AtomicInt16.op_Inequality(Spike.AtomicInt16,Spike.AtomicInt16)">
            <summary>
            Checks for inequality of two values.
            </summary>
            <param name="left">Left parameter to compare.</param>
            <param name="right">Right parameter to compare.</param>
            <returns>Returns true whether left and right parameters are not equals, otherwise false.</returns>
        </member>
        <member name="M:Spike.AtomicInt16.op_Inequality(Spike.AtomicInt16,System.Int16)">
            <summary>
            Checks for inequality of two values.
            </summary>
            <param name="left">Left parameter to compare.</param>
            <param name="right">Right parameter to compare.</param>
            <returns>Returns true whether left and right parameters are not equals, otherwise false.</returns>
        </member>
        <member name="M:Spike.AtomicInt16.op_LessThan(Spike.AtomicInt16,Spike.AtomicInt16)">
            <summary>
            Checks whether the left argument is smaller than the right one.
            </summary>
            <param name="left">Left parameter to compare.</param>
            <param name="right">Right parameter to compare.</param>
            <returns>True if the left argument is smaller than the right one, false otherwise.</returns>
        </member>
        <member name="M:Spike.AtomicInt16.op_LessThan(Spike.AtomicInt16,System.Int16)">
            <summary>
            Checks whether the left argument is smaller than the right one.
            </summary>
            <param name="left">Left parameter to compare.</param>
            <param name="right">Right parameter to compare.</param>
            <returns>True if the left argument is smaller than the right one, false otherwise.</returns>
        </member>
        <member name="M:Spike.AtomicInt16.op_GreaterThan(Spike.AtomicInt16,Spike.AtomicInt16)">
            <summary>
            Checks whether the left argument is bigger than the right one.
            </summary>
            <param name="left">Left parameter to compare.</param>
            <param name="right">Right parameter to compare.</param>
            <returns>True if the left argument is bigger than the right one, false otherwise.</returns>
        </member>
        <member name="M:Spike.AtomicInt16.op_GreaterThan(Spike.AtomicInt16,System.Int16)">
            <summary>
            Checks whether the left argument is bigger than the right one.
            </summary>
            <param name="left">Left parameter to compare.</param>
            <param name="right">Right parameter to compare.</param>
            <returns>True if the left argument is bigger than the right one, false otherwise.</returns>
        </member>
        <member name="M:Spike.AtomicInt16.op_LessThanOrEqual(Spike.AtomicInt16,Spike.AtomicInt16)">
            <summary>
            Checks whether the left argument is smaller or equals than the right one.
            </summary>
            <param name="left">Left parameter to compare.</param>
            <param name="right">Right parameter to compare.</param>
            <returns>True if the left argument is smaller or equals than the right one, false otherwise.</returns>
        </member>
        <member name="M:Spike.AtomicInt16.op_LessThanOrEqual(Spike.AtomicInt16,System.Int16)">
            <summary>
            Checks whether the left argument is smaller or equals than the right one.
            </summary>
            <param name="left">Left parameter to compare.</param>
            <param name="right">Right parameter to compare.</param>
            <returns>True if the left argument is smaller or equals than the right one, false otherwise.</returns>
        </member>
        <member name="M:Spike.AtomicInt16.op_GreaterThanOrEqual(Spike.AtomicInt16,Spike.AtomicInt16)">
            <summary>
            Checks whether the left argument is bigger or equals than the right one.
            </summary>
            <param name="left">Left parameter to compare.</param>
            <param name="right">Right parameter to compare.</param>
            <returns>True if the left argument is bigger or equals than the right one, false otherwise.</returns>
        </member>
        <member name="M:Spike.AtomicInt16.op_GreaterThanOrEqual(Spike.AtomicInt16,System.Int16)">
            <summary>
            Checks whether the left argument is bigger or equals than the right one.
            </summary>
            <param name="left">Left parameter to compare.</param>
            <param name="right">Right parameter to compare.</param>
            <returns>True if the left argument is bigger or equals than the right one, false otherwise.</returns>
        </member>
        <member name="M:Spike.AtomicInt16.op_Explicit(Spike.AtomicInt16)~System.Int16">
            <summary>
            Converts the atomic value to a non-atomic one.
            </summary>
            <param name="value">The value to convert.</param>
            <returns>The converted value.</returns>
        </member>
        <member name="M:Spike.AtomicInt16.op_Implicit(System.Int16)~Spike.AtomicInt16">
            <summary>
            Converts the non-atomic value to an atomic one.
            </summary>
            <param name="value">The value to convert.</param>
            <returns>The converted value.</returns>
        </member>
        <member name="M:Spike.AtomicInt16.ToString">
            <summary>
            Converts the value of this instance to its equivalent string representation.
            </summary>
        </member>
        <member name="M:Spike.AtomicInt16.Equals(System.Object)">
            <summary>
            Returns a value indicating whether this instance is equal to a specified value
            </summary>
        </member>
        <member name="M:Spike.AtomicInt16.GetHashCode">
            <summary>
            Returns the hash code for this instance.
            </summary>
            <returns>A 32-bit signed integer hash code.</returns>
        </member>
        <member name="M:Spike.AtomicInt16.CompareTo(Spike.AtomicInt16)">
            <summary>
            Compares this instance to a specified value and returns an indication of their relative values.
            </summary>
            <param name="value">A value to compare.</param>
            <returns>A signed integer that indicates the relative order of this instance and value.Return
            Value Description Less than zero This instance is less than value. Zero This
            instance is equal to value. Greater than zero This instance is greater than value.
            </returns>
        </member>
        <member name="M:Spike.AtomicInt16.CompareTo(System.Object)">
            <summary>
            Compares this instance to a specified value and returns an indication of their relative values.
            </summary>
            <param name="target">A value to compare.</param>
            <returns>A signed integer that indicates the relative order of this instance and value.Return
            Value Description Less than zero This instance is less than value. Zero This
            instance is equal to value. Greater than zero This instance is greater than value.
            </returns>
        </member>
        <member name="P:Spike.AtomicInt16.Value">
            <summary>
            Gets the value of the atomic structure
            </summary>
        </member>
        <member name="T:Spike.AtomicUInt32">
            <summary>
            Represents an atomic unsigned 23 bytes integer value.
            </summary>
        </member>
        <member name="M:Spike.AtomicUInt32.Assign(System.UInt32)">
            <summary>
            Atomically pefroms an assignment operation to the atomic value
            </summary>
            <param name="value">Value to set</param>
        </member>
        <member name="M:Spike.AtomicUInt32.Assign(System.Func{System.UInt32,System.UInt32})">
            <summary>
            Atomically pefroms a computation and assigns it to the atomic value
            </summary>
            <param name="computation">Computation to execute atomically</param>
        </member>
        <member name="M:Spike.AtomicUInt32.Add(System.UInt32)">
            <summary>
            Performs an atomic addition of the given value to the current atomic value.
            </summary>
            <param name="value">The value to add to the current atomic value.</param>
        </member>
        <member name="M:Spike.AtomicUInt32.Subtract(System.UInt32)">
            <summary>
            Performs an atomic subtraction of the given value from the current atomic value.
            </summary>
            <param name="value">The value to subtract from the current atomic value.</param>
        </member>
        <member name="M:Spike.AtomicUInt32.Multiply(System.UInt32)">
            <summary>
            Performs an atomic multiplication of the given value and the current atomic value.
            </summary>
            <param name="value">The value to multiply the current atomic value.</param>
        </member>
        <member name="M:Spike.AtomicUInt32.Divide(System.UInt32)">
            <summary>
            Performs an atomic division of the current atomic value by the given value.
            </summary>
            <param name="value">The value to divide the current atomic value by.</param>
        </member>
        <member name="M:Spike.AtomicUInt32.CompareExchange(System.UInt32,System.UInt32)">
            <summary>
            Compares two values for equality and, if they are equal, replaces one of the values.
            </summary>
            <param name="value1">First value to compare.</param>
            <param name="value2">Second value to compare.</param>
            <returns>The original value in value1.</returns>
        </member>
        <member name="M:Spike.AtomicUInt32.Decrement">
            <summary>
            Atomically decrements current value.
            </summary>
        </member>
        <member name="M:Spike.AtomicUInt32.Increment">
            <summary>
            Atomically increments the current value.
            </summary>
        </member>
        <member name="M:Spike.AtomicUInt32.LeftShift(System.Int32)">
            <summary>
            Atomically performs a left shift operation by the given value.
            </summary>
            <param name="value">The amount to atomically shift by.</param>
        </member>
        <member name="M:Spike.AtomicUInt32.RightShift(System.Int32)">
            <summary>
            Atomically performs a right shift operation by the given value.
            </summary>
            <param name="value">The amount to atomically shift by.</param>
        </member>
        <member name="M:Spike.AtomicUInt32.OneComplement">
            <summary>
            Atomically computes one's completement of the current value.
            </summary>
        </member>
        <member name="M:Spike.AtomicUInt32.BitwiseAnd(System.UInt32)">
            <summary>
            Atomically computes bitewise AND on the current value.
            </summary>
            <param name="value">Value to compute the AND operation with.</param>
        </member>
        <member name="M:Spike.AtomicUInt32.BitwiseInclusiveOr(System.UInt32)">
            <summary>
            Atomically computes bitewise OR on the current value.
            </summary>
            <param name="value">Value to compute the OR operation with.</param>
        </member>
        <member name="M:Spike.AtomicUInt32.BitwiseExclusiveOr(System.UInt32)">
            <summary>
            Atomically computes exclusive bitewise OR on the current value.
            </summary>
            <param name="value">Value to compute the exclusive OR operation with.</param>
        </member>
        <member name="M:Spike.AtomicUInt32.op_RightShift(Spike.AtomicUInt32,System.Int32)">
            <summary>
            Performs a bitwise shift and returns a new atomic value for the result of the operation.
            </summary>
            <param name="left">The left operand.</param>
            <param name="right">The amount of bytes to shift.</param>
            <returns>A new atomic value that represents the result of the operation.</returns>
        </member>
        <member name="M:Spike.AtomicUInt32.op_LeftShift(Spike.AtomicUInt32,System.Int32)">
            <summary>
            Performs a bitwise shift and returns a new atomic value for the result of the operation.
            </summary>
            <param name="left">The left operand.</param>
            <param name="right">The amount of bytes to shift.</param>
            <returns>A new atomic value that represents the result of the operation.</returns>
        </member>
        <member name="M:Spike.AtomicUInt32.op_Addition(Spike.AtomicUInt32,System.UInt32)">
            <summary>
            Performs an addition and returns a new atomic value for the result of the operation.
            </summary>
            <param name="left">The left operand.</param>
            <param name="right">The value to add.</param>
            <returns>A new atomic value that represents the result of the operation.</returns>
        </member>
        <member name="M:Spike.AtomicUInt32.op_Addition(Spike.AtomicUInt32,Spike.AtomicUInt32)">
            <summary>
            Performs an addition and returns a new atomic value for the result of the operation.
            </summary>
            <param name="left">The left operand.</param>
            <param name="right">The value to add.</param>
            <returns>A new atomic value that represents the result of the operation.</returns>
        </member>
        <member name="M:Spike.AtomicUInt32.op_Subtraction(Spike.AtomicUInt32,System.UInt32)">
            <summary>
            Performs a subtraction and returns a new atomic value for the result of the operation.
            </summary>
            <param name="left">The left operand.</param>
            <param name="right">The value to subtract.</param>
            <returns>A new atomic value that represents the result of the operation.</returns>
        </member>
        <member name="M:Spike.AtomicUInt32.op_Subtraction(Spike.AtomicUInt32,Spike.AtomicUInt32)">
            <summary>
            Performs a subtraction and returns a new atomic value for the result of the operation.
            </summary>
            <param name="left">The left operand.</param>
            <param name="right">The value to subtract.</param>
            <returns>A new atomic value that represents the result of the operation.</returns>
        </member>
        <member name="M:Spike.AtomicUInt32.op_Multiply(Spike.AtomicUInt32,System.UInt32)">
            <summary>
            Performs a multiplication and returns a new atomic value for the result of the operation.
            </summary>
            <param name="left">The left operand.</param>
            <param name="right">The value to multiply by.</param>
            <returns>A new atomic value that represents the result of the operation.</returns>
        </member>
        <member name="M:Spike.AtomicUInt32.op_Multiply(Spike.AtomicUInt32,Spike.AtomicUInt32)">
            <summary>
            Performs a multiplication and returns a new atomic value for the result of the operation.
            </summary>
            <param name="left">The left operand.</param>
            <param name="right">The value to multiply by.</param>
            <returns>A new atomic value that represents the result of the operation.</returns>
        </member>
        <member name="M:Spike.AtomicUInt32.op_Division(Spike.AtomicUInt32,System.UInt32)">
            <summary>
            Performs a division and returns a new atomic value for the result of the operation.
            </summary>
            <param name="left">The left operand.</param>
            <param name="right">The value to divide by.</param>
            <returns>A new atomic value that represents the result of the operation.</returns>
        </member>
        <member name="M:Spike.AtomicUInt32.op_Division(Spike.AtomicUInt32,Spike.AtomicUInt32)">
            <summary>
            Performs a division and returns a new atomic value for the result of the operation.
            </summary>
            <param name="left">The left operand.</param>
            <param name="right">The value to divide by.</param>
            <returns>A new atomic value that represents the result of the operation.</returns>
        </member>
        <member name="M:Spike.AtomicUInt32.op_Modulus(Spike.AtomicUInt32,System.UInt32)">
            <summary>
            Performs a modulo operation and returns a new atomic value for the result of the operation.
            </summary>
            <param name="left">The left operand.</param>
            <param name="right">The value to divide by.</param>
            <returns>A new atomic value that represents the result of the operation.</returns>
        </member>
        <member name="M:Spike.AtomicUInt32.op_Modulus(Spike.AtomicUInt32,Spike.AtomicUInt32)">
            <summary>
            Performs a modulo operation and returns a new atomic value for the result of the operation.
            </summary>
            <param name="left">The left operand.</param>
            <param name="right">The value to divide by.</param>
            <returns>A new atomic value that represents the result of the operation.</returns>
        </member>
        <member name="M:Spike.AtomicUInt32.op_BitwiseAnd(Spike.AtomicUInt32,System.UInt32)">
            <summary>
            Performs a bitwise and operation and returns a new atomic value for the result of the operation.
            </summary>
            <param name="left">The left operand.</param>
            <param name="right">The right operand.</param>
            <returns>A new atomic value that represents the result of the operation.</returns>
        </member>
        <member name="M:Spike.AtomicUInt32.op_BitwiseAnd(Spike.AtomicUInt32,Spike.AtomicUInt32)">
            <summary>
            Performs a bitwise and operation and returns a new atomic value for the result of the operation.
            </summary>
            <param name="left">The left operand.</param>
            <param name="right">The right operand.</param>
            <returns>A new atomic value that represents the result of the operation.</returns>
        </member>
        <member name="M:Spike.AtomicUInt32.op_BitwiseOr(Spike.AtomicUInt32,System.UInt32)">
            <summary>
            Performs a bitwise OR operation and returns a new atomic value for the result of the operation.
            </summary>
            <param name="left">The left operand.</param>
            <param name="right">The right operand.</param>
            <returns>A new atomic value that represents the result of the operation.</returns>
        </member>
        <member name="M:Spike.AtomicUInt32.op_BitwiseOr(Spike.AtomicUInt32,Spike.AtomicUInt32)">
            <summary>
            Performs a bitwise OR operation and returns a new atomic value for the result of the operation.
            </summary>
            <param name="left">The left operand.</param>
            <param name="right">The right operand.</param>
            <returns>A new atomic value that represents the result of the operation.</returns>
        </member>
        <member name="M:Spike.AtomicUInt32.op_ExclusiveOr(Spike.AtomicUInt32,System.UInt32)">
            <summary>
            Performs a bitwise exclusive OR operation and returns a new atomic value for the result of the operation.
            </summary>
            <param name="left">The left operand.</param>
            <param name="right">The right operand.</param>
            <returns>A new atomic value that represents the result of the operation.</returns>
        </member>
        <member name="M:Spike.AtomicUInt32.op_ExclusiveOr(Spike.AtomicUInt32,Spike.AtomicUInt32)">
            <summary>
            Performs a bitwise exclusive OR operation and returns a new atomic value for the result of the operation.
            </summary>
            <param name="left">The left operand.</param>
            <param name="right">The right operand.</param>
            <returns>A new atomic value that represents the result of the operation.</returns>
        </member>
        <member name="M:Spike.AtomicUInt32.op_OnesComplement(Spike.AtomicUInt32)">
            <summary>
            Performs a bitwise complement operation and returns a new atomic value for the result of the operation.
            </summary>
            <param name="value">The value to compute the complement of.</param>
            <returns>A new atomic value that represents the result of the operation.</returns>
        </member>
        <member name="M:Spike.AtomicUInt32.op_Increment(Spike.AtomicUInt32)">
            <summary>
            Atomically increments the current value.
            </summary>
            <param name="value">The value to increment.</param>
            <returns>Incremented value</returns>
        </member>
        <member name="M:Spike.AtomicUInt32.op_Decrement(Spike.AtomicUInt32)">
            <summary>
            Atomically decrements the current value.
            </summary>
            <param name="value">The value to decrements.</param>
            <returns>Decremented value</returns>
        </member>
        <member name="M:Spike.AtomicUInt32.op_Equality(Spike.AtomicUInt32,Spike.AtomicUInt32)">
            <summary>
            Compares the equality of two values.
            </summary>
            <param name="left">Left parameter to compare.</param>
            <param name="right">Right parameter to compare.</param>
            <returns>Returns whether left and right parameters are equals or not.</returns>
        </member>
        <member name="M:Spike.AtomicUInt32.op_Equality(Spike.AtomicUInt32,System.UInt32)">
            <summary>
            Compares the equality of two values.
            </summary>
            <param name="left">Left parameter to compare.</param>
            <param name="right">Right parameter to compare.</param>
            <returns>Returns whether left and right parameters are equals or not.</returns>
        </member>
        <member name="M:Spike.AtomicUInt32.op_Inequality(Spike.AtomicUInt32,Spike.AtomicUInt32)">
            <summary>
            Checks for inequality of two values.
            </summary>
            <param name="left">Left parameter to compare.</param>
            <param name="right">Right parameter to compare.</param>
            <returns>Returns true whether left and right parameters are not equals, otherwise false.</returns>
        </member>
        <member name="M:Spike.AtomicUInt32.op_Inequality(Spike.AtomicUInt32,System.UInt32)">
            <summary>
            Checks for inequality of two values.
            </summary>
            <param name="left">Left parameter to compare.</param>
            <param name="right">Right parameter to compare.</param>
            <returns>Returns true whether left and right parameters are not equals, otherwise false.</returns>
        </member>
        <member name="M:Spike.AtomicUInt32.op_LessThan(Spike.AtomicUInt32,Spike.AtomicUInt32)">
            <summary>
            Checks whether the left argument is smaller than the right one.
            </summary>
            <param name="left">Left parameter to compare.</param>
            <param name="right">Right parameter to compare.</param>
            <returns>True if the left argument is smaller than the right one, false otherwise.</returns>
        </member>
        <member name="M:Spike.AtomicUInt32.op_LessThan(Spike.AtomicUInt32,System.UInt32)">
            <summary>
            Checks whether the left argument is smaller than the right one.
            </summary>
            <param name="left">Left parameter to compare.</param>
            <param name="right">Right parameter to compare.</param>
            <returns>True if the left argument is smaller than the right one, false otherwise.</returns>
        </member>
        <member name="M:Spike.AtomicUInt32.op_GreaterThan(Spike.AtomicUInt32,Spike.AtomicUInt32)">
            <summary>
            Checks whether the left argument is bigger than the right one.
            </summary>
            <param name="left">Left parameter to compare.</param>
            <param name="right">Right parameter to compare.</param>
            <returns>True if the left argument is bigger than the right one, false otherwise.</returns>
        </member>
        <member name="M:Spike.AtomicUInt32.op_GreaterThan(Spike.AtomicUInt32,System.UInt32)">
            <summary>
            Checks whether the left argument is bigger than the right one.
            </summary>
            <param name="left">Left parameter to compare.</param>
            <param name="right">Right parameter to compare.</param>
            <returns>True if the left argument is bigger than the right one, false otherwise.</returns>
        </member>
        <member name="M:Spike.AtomicUInt32.op_LessThanOrEqual(Spike.AtomicUInt32,Spike.AtomicUInt32)">
            <summary>
            Checks whether the left argument is smaller or equals than the right one.
            </summary>
            <param name="left">Left parameter to compare.</param>
            <param name="right">Right parameter to compare.</param>
            <returns>True if the left argument is smaller or equals than the right one, false otherwise.</returns>
        </member>
        <member name="M:Spike.AtomicUInt32.op_LessThanOrEqual(Spike.AtomicUInt32,System.UInt32)">
            <summary>
            Checks whether the left argument is smaller or equals than the right one.
            </summary>
            <param name="left">Left parameter to compare.</param>
            <param name="right">Right parameter to compare.</param>
            <returns>True if the left argument is smaller or equals than the right one, false otherwise.</returns>
        </member>
        <member name="M:Spike.AtomicUInt32.op_GreaterThanOrEqual(Spike.AtomicUInt32,Spike.AtomicUInt32)">
            <summary>
            Checks whether the left argument is bigger or equals than the right one.
            </summary>
            <param name="left">Left parameter to compare.</param>
            <param name="right">Right parameter to compare.</param>
            <returns>True if the left argument is bigger or equals than the right one, false otherwise.</returns>
        </member>
        <member name="M:Spike.AtomicUInt32.op_GreaterThanOrEqual(Spike.AtomicUInt32,System.UInt32)">
            <summary>
            Checks whether the left argument is bigger or equals than the right one.
            </summary>
            <param name="left">Left parameter to compare.</param>
            <param name="right">Right parameter to compare.</param>
            <returns>True if the left argument is bigger or equals than the right one, false otherwise.</returns>
        </member>
        <member name="M:Spike.AtomicUInt32.op_Explicit(Spike.AtomicUInt32)~System.UInt32">
            <summary>
            Converts the atomic value to a non-atomic one.
            </summary>
            <param name="value">The value to convert.</param>
            <returns>The converted value.</returns>
        </member>
        <member name="M:Spike.AtomicUInt32.op_Implicit(System.UInt32)~Spike.AtomicUInt32">
            <summary>
            Converts the non-atomic value to an atomic one.
            </summary>
            <param name="value">The value to convert.</param>
            <returns>The converted value.</returns>
        </member>
        <member name="M:Spike.AtomicUInt32.ToString">
            <summary>
            Converts the value of this instance to its equivalent string representation.
            </summary>
        </member>
        <member name="M:Spike.AtomicUInt32.Equals(System.Object)">
            <summary>
            Returns a value indicating whether this instance is equal to a specified value
            </summary>
        </member>
        <member name="M:Spike.AtomicUInt32.GetHashCode">
            <summary>
            Returns the hash code for this instance.
            </summary>
            <returns>A 32-bit signed integer hash code.</returns>
        </member>
        <member name="M:Spike.AtomicUInt32.CompareTo(Spike.AtomicUInt32)">
            <summary>
            Compares this instance to a specified value and returns an indication of their relative values.
            </summary>
            <param name="value">A value to compare.</param>
            <returns>A signed integer that indicates the relative order of this instance and value.Return
            Value Description Less than zero This instance is less than value. Zero This
            instance is equal to value. Greater than zero This instance is greater than value.
            </returns>
        </member>
        <member name="M:Spike.AtomicUInt32.CompareTo(System.Object)">
            <summary>
            Compares this instance to a specified value and returns an indication of their relative values.
            </summary>
            <param name="target">A value to compare.</param>
            <returns>A signed integer that indicates the relative order of this instance and value.Return
            Value Description Less than zero This instance is less than value. Zero This
            instance is equal to value. Greater than zero This instance is greater than value.
            </returns>
        </member>
        <member name="P:Spike.AtomicUInt32.Value">
            <summary>
            Gets the value of the atomic structure
            </summary>
        </member>
        <member name="T:Spike.AtomicUInt16">
            <summary>
            Represents an atomic unsigned 16 bytes integer value.
            </summary>
        </member>
        <member name="M:Spike.AtomicUInt16.Assign(System.UInt16)">
            <summary>
            Atomically pefroms an assignment operation to the atomic value
            </summary>
            <param name="value">Value to set</param>
        </member>
        <member name="M:Spike.AtomicUInt16.Assign(System.Func{System.UInt16,System.UInt16})">
            <summary>
            Atomically pefroms a computation and assigns it to the atomic value
            </summary>
            <param name="computation">Computation to execute atomically</param>
        </member>
        <member name="M:Spike.AtomicUInt16.Add(System.UInt16)">
            <summary>
            Performs an atomic addition of the given value to the current atomic value.
            </summary>
            <param name="value">The value to add to the current atomic value.</param>
        </member>
        <member name="M:Spike.AtomicUInt16.Subtract(System.UInt16)">
            <summary>
            Performs an atomic subtraction of the given value from the current atomic value.
            </summary>
            <param name="value">The value to subtract from the current atomic value.</param>
        </member>
        <member name="M:Spike.AtomicUInt16.Multiply(System.UInt16)">
            <summary>
            Performs an atomic multiplication of the given value and the current atomic value.
            </summary>
            <param name="value">The value to multiply the current atomic value.</param>
        </member>
        <member name="M:Spike.AtomicUInt16.Divide(System.UInt16)">
            <summary>
            Performs an atomic division of the current atomic value by the given value.
            </summary>
            <param name="value">The value to divide the current atomic value by.</param>
        </member>
        <member name="M:Spike.AtomicUInt16.CompareExchange(System.UInt16,System.UInt16)">
            <summary>
            Compares two values for equality and, if they are equal, replaces one of the values.
            </summary>
            <param name="value1">First value to compare.</param>
            <param name="value2">Second value to compare.</param>
            <returns>The original value in value1.</returns>
        </member>
        <member name="M:Spike.AtomicUInt16.Decrement">
            <summary>
            Atomically decrements current value.
            </summary>
        </member>
        <member name="M:Spike.AtomicUInt16.Increment">
            <summary>
            Atomically increments the current value.
            </summary>
        </member>
        <member name="M:Spike.AtomicUInt16.LeftShift(System.Int32)">
            <summary>
            Atomically performs a left shift operation by the given value.
            </summary>
            <param name="value">The amount to atomically shift by.</param>
        </member>
        <member name="M:Spike.AtomicUInt16.RightShift(System.Int32)">
            <summary>
            Atomically performs a right shift operation by the given value.
            </summary>
            <param name="value">The amount to atomically shift by.</param>
        </member>
        <member name="M:Spike.AtomicUInt16.OneComplement">
            <summary>
            Atomically computes one's completement of the current value.
            </summary>
        </member>
        <member name="M:Spike.AtomicUInt16.BitwiseAnd(System.UInt16)">
            <summary>
            Atomically computes bitewise AND on the current value.
            </summary>
            <param name="value">Value to compute the AND operation with.</param>
        </member>
        <member name="M:Spike.AtomicUInt16.BitwiseInclusiveOr(System.UInt16)">
            <summary>
            Atomically computes bitewise OR on the current value.
            </summary>
            <param name="value">Value to compute the OR operation with.</param>
        </member>
        <member name="M:Spike.AtomicUInt16.BitwiseExclusiveOr(System.UInt16)">
            <summary>
            Atomically computes exclusive bitewise OR on the current value.
            </summary>
            <param name="value">Value to compute the exclusive OR operation with.</param>
        </member>
        <member name="M:Spike.AtomicUInt16.op_RightShift(Spike.AtomicUInt16,System.Int32)">
            <summary>
            Performs a bitwise shift and returns a new atomic value for the result of the operation.
            </summary>
            <param name="left">The left operand.</param>
            <param name="right">The amount of bytes to shift.</param>
            <returns>A new atomic value that represents the result of the operation.</returns>
        </member>
        <member name="M:Spike.AtomicUInt16.op_LeftShift(Spike.AtomicUInt16,System.Int32)">
            <summary>
            Performs a bitwise shift and returns a new atomic value for the result of the operation.
            </summary>
            <param name="left">The left operand.</param>
            <param name="right">The amount of bytes to shift.</param>
            <returns>A new atomic value that represents the result of the operation.</returns>
        </member>
        <member name="M:Spike.AtomicUInt16.op_Addition(Spike.AtomicUInt16,System.UInt16)">
            <summary>
            Performs an addition and returns a new atomic value for the result of the operation.
            </summary>
            <param name="left">The left operand.</param>
            <param name="right">The value to add.</param>
            <returns>A new atomic value that represents the result of the operation.</returns>
        </member>
        <member name="M:Spike.AtomicUInt16.op_Addition(Spike.AtomicUInt16,Spike.AtomicUInt16)">
            <summary>
            Performs an addition and returns a new atomic value for the result of the operation.
            </summary>
            <param name="left">The left operand.</param>
            <param name="right">The value to add.</param>
            <returns>A new atomic value that represents the result of the operation.</returns>
        </member>
        <member name="M:Spike.AtomicUInt16.op_Subtraction(Spike.AtomicUInt16,System.UInt16)">
            <summary>
            Performs a subtraction and returns a new atomic value for the result of the operation.
            </summary>
            <param name="left">The left operand.</param>
            <param name="right">The value to subtract.</param>
            <returns>A new atomic value that represents the result of the operation.</returns>
        </member>
        <member name="M:Spike.AtomicUInt16.op_Subtraction(Spike.AtomicUInt16,Spike.AtomicUInt16)">
            <summary>
            Performs a subtraction and returns a new atomic value for the result of the operation.
            </summary>
            <param name="left">The left operand.</param>
            <param name="right">The value to subtract.</param>
            <returns>A new atomic value that represents the result of the operation.</returns>
        </member>
        <member name="M:Spike.AtomicUInt16.op_Multiply(Spike.AtomicUInt16,System.UInt16)">
            <summary>
            Performs a multiplication and returns a new atomic value for the result of the operation.
            </summary>
            <param name="left">The left operand.</param>
            <param name="right">The value to multiply by.</param>
            <returns>A new atomic value that represents the result of the operation.</returns>
        </member>
        <member name="M:Spike.AtomicUInt16.op_Multiply(Spike.AtomicUInt16,Spike.AtomicUInt16)">
            <summary>
            Performs a multiplication and returns a new atomic value for the result of the operation.
            </summary>
            <param name="left">The left operand.</param>
            <param name="right">The value to multiply by.</param>
            <returns>A new atomic value that represents the result of the operation.</returns>
        </member>
        <member name="M:Spike.AtomicUInt16.op_Division(Spike.AtomicUInt16,System.UInt16)">
            <summary>
            Performs a division and returns a new atomic value for the result of the operation.
            </summary>
            <param name="left">The left operand.</param>
            <param name="right">The value to divide by.</param>
            <returns>A new atomic value that represents the result of the operation.</returns>
        </member>
        <member name="M:Spike.AtomicUInt16.op_Division(Spike.AtomicUInt16,Spike.AtomicUInt16)">
            <summary>
            Performs a division and returns a new atomic value for the result of the operation.
            </summary>
            <param name="left">The left operand.</param>
            <param name="right">The value to divide by.</param>
            <returns>A new atomic value that represents the result of the operation.</returns>
        </member>
        <member name="M:Spike.AtomicUInt16.op_Modulus(Spike.AtomicUInt16,System.UInt16)">
            <summary>
            Performs a modulo operation and returns a new atomic value for the result of the operation.
            </summary>
            <param name="left">The left operand.</param>
            <param name="right">The value to divide by.</param>
            <returns>A new atomic value that represents the result of the operation.</returns>
        </member>
        <member name="M:Spike.AtomicUInt16.op_Modulus(Spike.AtomicUInt16,Spike.AtomicUInt16)">
            <summary>
            Performs a modulo operation and returns a new atomic value for the result of the operation.
            </summary>
            <param name="left">The left operand.</param>
            <param name="right">The value to divide by.</param>
            <returns>A new atomic value that represents the result of the operation.</returns>
        </member>
        <member name="M:Spike.AtomicUInt16.op_BitwiseAnd(Spike.AtomicUInt16,System.UInt16)">
            <summary>
            Performs a bitwise and operation and returns a new atomic value for the result of the operation.
            </summary>
            <param name="left">The left operand.</param>
            <param name="right">The right operand.</param>
            <returns>A new atomic value that represents the result of the operation.</returns>
        </member>
        <member name="M:Spike.AtomicUInt16.op_BitwiseAnd(Spike.AtomicUInt16,Spike.AtomicUInt16)">
            <summary>
            Performs a bitwise and operation and returns a new atomic value for the result of the operation.
            </summary>
            <param name="left">The left operand.</param>
            <param name="right">The right operand.</param>
            <returns>A new atomic value that represents the result of the operation.</returns>
        </member>
        <member name="M:Spike.AtomicUInt16.op_BitwiseOr(Spike.AtomicUInt16,System.UInt16)">
            <summary>
            Performs a bitwise OR operation and returns a new atomic value for the result of the operation.
            </summary>
            <param name="left">The left operand.</param>
            <param name="right">The right operand.</param>
            <returns>A new atomic value that represents the result of the operation.</returns>
        </member>
        <member name="M:Spike.AtomicUInt16.op_BitwiseOr(Spike.AtomicUInt16,Spike.AtomicUInt16)">
            <summary>
            Performs a bitwise OR operation and returns a new atomic value for the result of the operation.
            </summary>
            <param name="left">The left operand.</param>
            <param name="right">The right operand.</param>
            <returns>A new atomic value that represents the result of the operation.</returns>
        </member>
        <member name="M:Spike.AtomicUInt16.op_ExclusiveOr(Spike.AtomicUInt16,System.UInt16)">
            <summary>
            Performs a bitwise exclusive OR operation and returns a new atomic value for the result of the operation.
            </summary>
            <param name="left">The left operand.</param>
            <param name="right">The right operand.</param>
            <returns>A new atomic value that represents the result of the operation.</returns>
        </member>
        <member name="M:Spike.AtomicUInt16.op_ExclusiveOr(Spike.AtomicUInt16,Spike.AtomicUInt16)">
            <summary>
            Performs a bitwise exclusive OR operation and returns a new atomic value for the result of the operation.
            </summary>
            <param name="left">The left operand.</param>
            <param name="right">The right operand.</param>
            <returns>A new atomic value that represents the result of the operation.</returns>
        </member>
        <member name="M:Spike.AtomicUInt16.op_OnesComplement(Spike.AtomicUInt16)">
            <summary>
            Performs a bitwise complement operation and returns a new atomic value for the result of the operation.
            </summary>
            <param name="value">The value to compute the complement of.</param>
            <returns>A new atomic value that represents the result of the operation.</returns>
        </member>
        <member name="M:Spike.AtomicUInt16.op_Increment(Spike.AtomicUInt16)">
            <summary>
            Atomically increments the current value.
            </summary>
            <param name="value">The value to increment.</param>
            <returns>Incremented value</returns>
        </member>
        <member name="M:Spike.AtomicUInt16.op_Decrement(Spike.AtomicUInt16)">
            <summary>
            Atomically decrements the current value.
            </summary>
            <param name="value">The value to decrements.</param>
            <returns>Decremented value</returns>
        </member>
        <member name="M:Spike.AtomicUInt16.op_Equality(Spike.AtomicUInt16,Spike.AtomicUInt16)">
            <summary>
            Compares the equality of two values.
            </summary>
            <param name="left">Left parameter to compare.</param>
            <param name="right">Right parameter to compare.</param>
            <returns>Returns whether left and right parameters are equals or not.</returns>
        </member>
        <member name="M:Spike.AtomicUInt16.op_Equality(Spike.AtomicUInt16,System.UInt16)">
            <summary>
            Compares the equality of two values.
            </summary>
            <param name="left">Left parameter to compare.</param>
            <param name="right">Right parameter to compare.</param>
            <returns>Returns whether left and right parameters are equals or not.</returns>
        </member>
        <member name="M:Spike.AtomicUInt16.op_Inequality(Spike.AtomicUInt16,Spike.AtomicUInt16)">
            <summary>
            Checks for inequality of two values.
            </summary>
            <param name="left">Left parameter to compare.</param>
            <param name="right">Right parameter to compare.</param>
            <returns>Returns true whether left and right parameters are not equals, otherwise false.</returns>
        </member>
        <member name="M:Spike.AtomicUInt16.op_Inequality(Spike.AtomicUInt16,System.UInt16)">
            <summary>
            Checks for inequality of two values.
            </summary>
            <param name="left">Left parameter to compare.</param>
            <param name="right">Right parameter to compare.</param>
            <returns>Returns true whether left and right parameters are not equals, otherwise false.</returns>
        </member>
        <member name="M:Spike.AtomicUInt16.op_LessThan(Spike.AtomicUInt16,Spike.AtomicUInt16)">
            <summary>
            Checks whether the left argument is smaller than the right one.
            </summary>
            <param name="left">Left parameter to compare.</param>
            <param name="right">Right parameter to compare.</param>
            <returns>True if the left argument is smaller than the right one, false otherwise.</returns>
        </member>
        <member name="M:Spike.AtomicUInt16.op_LessThan(Spike.AtomicUInt16,System.UInt16)">
            <summary>
            Checks whether the left argument is smaller than the right one.
            </summary>
            <param name="left">Left parameter to compare.</param>
            <param name="right">Right parameter to compare.</param>
            <returns>True if the left argument is smaller than the right one, false otherwise.</returns>
        </member>
        <member name="M:Spike.AtomicUInt16.op_GreaterThan(Spike.AtomicUInt16,Spike.AtomicUInt16)">
            <summary>
            Checks whether the left argument is bigger than the right one.
            </summary>
            <param name="left">Left parameter to compare.</param>
            <param name="right">Right parameter to compare.</param>
            <returns>True if the left argument is bigger than the right one, false otherwise.</returns>
        </member>
        <member name="M:Spike.AtomicUInt16.op_GreaterThan(Spike.AtomicUInt16,System.UInt16)">
            <summary>
            Checks whether the left argument is bigger than the right one.
            </summary>
            <param name="left">Left parameter to compare.</param>
            <param name="right">Right parameter to compare.</param>
            <returns>True if the left argument is bigger than the right one, false otherwise.</returns>
        </member>
        <member name="M:Spike.AtomicUInt16.op_LessThanOrEqual(Spike.AtomicUInt16,Spike.AtomicUInt16)">
            <summary>
            Checks whether the left argument is smaller or equals than the right one.
            </summary>
            <param name="left">Left parameter to compare.</param>
            <param name="right">Right parameter to compare.</param>
            <returns>True if the left argument is smaller or equals than the right one, false otherwise.</returns>
        </member>
        <member name="M:Spike.AtomicUInt16.op_LessThanOrEqual(Spike.AtomicUInt16,System.UInt16)">
            <summary>
            Checks whether the left argument is smaller or equals than the right one.
            </summary>
            <param name="left">Left parameter to compare.</param>
            <param name="right">Right parameter to compare.</param>
            <returns>True if the left argument is smaller or equals than the right one, false otherwise.</returns>
        </member>
        <member name="M:Spike.AtomicUInt16.op_GreaterThanOrEqual(Spike.AtomicUInt16,Spike.AtomicUInt16)">
            <summary>
            Checks whether the left argument is bigger or equals than the right one.
            </summary>
            <param name="left">Left parameter to compare.</param>
            <param name="right">Right parameter to compare.</param>
            <returns>True if the left argument is bigger or equals than the right one, false otherwise.</returns>
        </member>
        <member name="M:Spike.AtomicUInt16.op_GreaterThanOrEqual(Spike.AtomicUInt16,System.UInt16)">
            <summary>
            Checks whether the left argument is bigger or equals than the right one.
            </summary>
            <param name="left">Left parameter to compare.</param>
            <param name="right">Right parameter to compare.</param>
            <returns>True if the left argument is bigger or equals than the right one, false otherwise.</returns>
        </member>
        <member name="M:Spike.AtomicUInt16.op_Explicit(Spike.AtomicUInt16)~System.UInt16">
            <summary>
            Converts the atomic value to a non-atomic one.
            </summary>
            <param name="value">The value to convert.</param>
            <returns>The converted value.</returns>
        </member>
        <member name="M:Spike.AtomicUInt16.op_Implicit(System.UInt16)~Spike.AtomicUInt16">
            <summary>
            Converts the non-atomic value to an atomic one.
            </summary>
            <param name="value">The value to convert.</param>
            <returns>The converted value.</returns>
        </member>
        <member name="M:Spike.AtomicUInt16.ToString">
            <summary>
            Converts the value of this instance to its equivalent string representation.
            </summary>
        </member>
        <member name="M:Spike.AtomicUInt16.Equals(System.Object)">
            <summary>
            Returns a value indicating whether this instance is equal to a specified value
            </summary>
        </member>
        <member name="M:Spike.AtomicUInt16.GetHashCode">
            <summary>
            Returns the hash code for this instance.
            </summary>
            <returns>A 32-bit signed integer hash code.</returns>
        </member>
        <member name="M:Spike.AtomicUInt16.CompareTo(Spike.AtomicUInt16)">
            <summary>
            Compares this instance to a specified value and returns an indication of their relative values.
            </summary>
            <param name="value">A value to compare.</param>
            <returns>A signed integer that indicates the relative order of this instance and value.Return
            Value Description Less than zero This instance is less than value. Zero This
            instance is equal to value. Greater than zero This instance is greater than value.
            </returns>
        </member>
        <member name="M:Spike.AtomicUInt16.CompareTo(System.Object)">
            <summary>
            Compares this instance to a specified value and returns an indication of their relative values.
            </summary>
            <param name="target">A value to compare.</param>
            <returns>A signed integer that indicates the relative order of this instance and value.Return
            Value Description Less than zero This instance is less than value. Zero This
            instance is equal to value. Greater than zero This instance is greater than value.
            </returns>
        </member>
        <member name="P:Spike.AtomicUInt16.Value">
            <summary>
            Gets the value of the atomic structure
            </summary>
        </member>
        <member name="T:Spike.ByteBuffer">
            <summary>
            Extended byte buffer 
            </summary>
        </member>
        <member name="M:Spike.ByteBuffer.BlockCopy(System.Byte*,System.Byte*,System.Int32)">
            <summary>
            Copies a specified number of bytes from a source array starting at a particular
            offset to a destination array starting at a particular offset.</summary>
            <param name="src">The source buffer.</param>
            <param name="dest">The destination buffer.</param>
            <param name="count">The number of bytes to copy.</param>
        </member>
        <member name="M:Spike.ByteBuffer.BlockCopy(System.Byte*,System.Byte[],System.Int32)">
            <summary>
            Copies a specified number of bytes from a source array starting at a particular
            offset to a destination array starting at a particular offset.</summary>
            <param name="src">The source buffer.</param>
            <param name="dest">The destination buffer.</param>
            <param name="count">The number of bytes to copy.</param>
        </member>
        <member name="T:Spike.Conditional">
            <summary>
            Represents a conditional method.
            </summary>
            <returns>A boolean result of the condition.</returns>
        </member>
        <member name="T:Spike.RefAction`2">
            <summary>
            Encapsulates a method that has two parameters passed by reference and does not return a value.
            </summary>
            <typeparam name="T1">The type of the first parameter of the method that this delegate encapsulates.</typeparam>
            <typeparam name="T2">The type of the second parameter of the method that this delegate encapsulates.</typeparam>
            <param name="arg1">The first parameter of the method that this delegate encapsulates.</param>
            <param name="arg2">The second parameter of the method that this delegate encapsulates.</param>
        </member>
        <member name="T:Spike.RefAction`1">
            <summary>
            Encapsulates a method that has one parameter passed by reference and does not return a value.
            </summary>
            <typeparam name="T">The type of the first parameter of the method that this delegate encapsulates.</typeparam>
            <param name="value">The first parameter of the method that this delegate encapsulates.</param>
        </member>
        <member name="T:Spike.ClientEvent">
            <summary>
            Defines an event issued by <see cref="T:Spike.IClient"/> instance.
            </summary>
        </member>
        <member name="T:Spike.Cryptography">
            <summary>
            Cryptography extensions for various classes.
            </summary>
        </member>
        <member name="F:Spike.Cryptography.Baths">
            <summary>
            Helper array to speedup conversion
            </summary>
        </member>
        <member name="M:Spike.Cryptography.GetSHA1Encoded(System.String)">
            <summary>
            Generates a hash for the given plain text value and returns a base64-encoded result.
            </summary>
            <param name="source">Source value to be hashed. The function does not check whether this parameter is null.</param>
            <returns>Hash value formatted as a base64-encoded string.</returns>
        </member>
        <member name="M:Spike.Cryptography.GetSHA1Bytes(System.String)">
            <summary>
            Generates a hash for the given plain text value and returns hash bytes.
            </summary>
            <param name="source">Source value to be hashed. The function does not check whether this parameter is null.</param>
            <returns>Hash value in bytes.</returns>
        </member>
        <member name="M:Spike.Cryptography.ToHexString(System.Byte[])">
            <summary>
            Function converts byte array to it's hexadecimal implementation
            </summary>
            <param name="ArrayToConvert">Array to be converted</param>
            <returns>String to represent given array</returns>
        </member>
        <member name="F:Spike.IPAddressExtensions.AddressPool">
            <summary>
            Internal IP Address Pool
            </summary>
        </member>
        <member name="M:Spike.IPAddressExtensions.Intern(System.Net.IPAddress)">
            <summary>
            Ensures that the IP Address is contained in the static internal pool.
            </summary>
        </member>
        <member name="M:Spike.TypeExtensions.GetInvokeAt(System.Type,Spike.InvokeAtType)">
            <summary>
            Gets invokable methods by type
            </summary>
        </member>
        <member name="M:Spike.TypeExtensions.GetActivationPolicy(System.Type)">
            <summary>
            Gets the activation policy of a hub.
            </summary>
        </member>
        <member name="M:Spike.TypeExtensions.GetTerminationPolicy(System.Type)">
            <summary>
            Gets the termination policy of a hub.
            </summary>
        </member>
        <member name="M:Spike.TypeExtensions.HasActivationPolicy(System.Type,Spike.Hubs.HubActivationPolicy)">
            <summary>
            Checks whether the type has the activation policy.
            </summary>
        </member>
        <member name="M:Spike.TypeExtensions.HasTerminationPolicy(System.Type,Spike.Hubs.HubTerminationPolicy)">
            <summary>
            Checks whether the type has the termination policy.
            </summary>
        </member>
        <member name="T:Spike.RateGate">
            <summary>
            Used to control the rate of some occurrence per unit of time.
            </summary>
            <remarks>
                <para>
                To control the rate of an action using a <see cref="T:Spike.RateGate"/>, 
                code should simply call <see cref="M:Spike.RateGate.WaitToProceed"/> prior to 
                performing the action. <see cref="M:Spike.RateGate.WaitToProceed"/> will block
                the current thread until the action is allowed based on the rate 
                limit.
                </para>
                <para>
                This class is thread safe. A single <see cref="T:Spike.RateGate"/> instance 
                may be used to control the rate of an occurrence across multiple 
                threads.
                </para>
            </remarks>
        </member>
        <member name="M:Spike.RateGate.#ctor(System.Int32,System.TimeSpan)">
            <summary>
            Initializes a <see cref="T:Spike.RateGate"/> with a rate of <paramref name="occurrences"/> 
            per <paramref name="timeUnit"/>.
            </summary>
            <param name="occurrences">Number of occurrences allowed per unit of time.</param>
            <param name="timeUnit">Length of the time unit.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">
            If <paramref name="occurrences"/> or <paramref name="timeUnit"/> is negative.
            </exception>
        </member>
        <member name="M:Spike.RateGate.WaitToProceed(System.Int32)">
            <summary>
            Blocks the current thread until allowed to proceed or until the
            specified timeout elapses.
            </summary>
            <param name="millisecondsTimeout">Number of milliseconds to wait, or -1 to wait indefinitely.</param>
            <returns>true if the thread is allowed to proceed, or false if timed out</returns>
        </member>
        <member name="M:Spike.RateGate.WaitToProceed(System.TimeSpan)">
            <summary>
            Blocks the current thread until allowed to proceed or until the
            specified timeout elapses.
            </summary>
            <param name="timeout"></param>
            <returns>true if the thread is allowed to proceed, or false if timed out</returns>
        </member>
        <member name="M:Spike.RateGate.WaitToProceed">
            <summary>
            Blocks the current thread indefinitely until allowed to proceed.
            </summary>
        </member>
        <member name="M:Spike.RateGate.Dispose">
            <summary>
            Releases unmanaged resources held by an instance of this class.
            </summary>
        </member>
        <member name="M:Spike.RateGate.Dispose(System.Boolean)">
            <summary>
            Releases unmanaged resources held by an instance of this class.
            </summary>
            <param name="isDisposing">Whether this object is being disposed.</param>
        </member>
        <member name="P:Spike.RateGate.Occurrences">
            <summary>
            Number of occurrences allowed per unit of time.
            </summary>
        </member>
        <member name="P:Spike.RateGate.TimeUnitMilliseconds">
            <summary>
            The length of the time unit, in milliseconds.
            </summary>
        </member>
        <member name="T:Spike.RedGateEx">
            <summary>
            Extends the IEnumerable.
            </summary>
        </member>
        <member name="M:Spike.RedGateEx.LimitRate``1(System.Collections.Generic.IEnumerable{``0},System.Int32,System.TimeSpan)">
            <summary>
            Limits the rate at which the sequence is enumerated.
            </summary>
            <typeparam name="T">The type of the elements of <paramref name="source"/>.</typeparam>
            <param name="source">The <see cref="T:System.Collections.Generic.IEnumerable`1"/> whose enumeration is to be rate limited.</param>
            <param name="count">The number of items in the sequence that are allowed to be processed per time unit.</param>
            <param name="timeUnit">Length of the time unit.</param>
            <returns>An <see cref="T:System.Collections.Generic.IEnumerable`1"/> containing the elements of the source sequence.</returns>
        </member>
        <member name="T:Spike.TaskPool">
            <summary>
            Represents a Threading.Task pool which allows starting new tasks and waiting for every task
            to finish. 
            </summary>
        </member>
        <member name="M:Spike.TaskPool.Start(System.Action)">
            <summary>
            Starts a new task.
            </summary>
            <param name="action">The action to execute.</param>
            <returns>The task object.</returns>
        </member>
        <member name="M:Spike.TaskPool.WaitAll">
            <summary>
            Wait for all tasks to finish.
            </summary>
        </member>
        <member name="T:Spike.Web.BuiltinTemplate">
            <summary>
            Built-in web template
            </summary>
        </member>
        <member name="M:Spike.Web.ResourcesMapHandler.AddResource(System.String,System.String,System.Byte[])">
            <summary>
            Adds a resource to the provided collection
            </summary>
        </member>
        <member name="M:Spike.Web.ResourcesMapHandler.AddResource(System.String,System.String,System.String)">
            <summary>
            Adds a resource to the provided collection
            </summary>
        </member>
        <member name="T:Spike.Web.ResourcesMapHandler.HttpResource">
            <summary>
            Nested Http Resource class
            </summary>
        </member>
        <member name="T:Spike.Network.Http.HttpResponse">
            <summary>
            Represents an outgoing HTTP Response
            </summary>
        </member>
        <member name="M:Spike.Network.Http.HttpResponse.Recycle">
            <summary>
            Recycles this <see cref="T:Spike.Network.Http.HttpResponse"/> instance, reinitializing everything.
            </summary>
        </member>
        <member name="M:Spike.Network.Http.HttpResponse.GetUnderlyingStream">
            <summary>
            Gets the underlying stream buffer.
            </summary>
            <returns>The underlying stream buffer.</returns>
        </member>
        <member name="M:Spike.Network.Http.HttpResponse.ClearHeaders">
            <summary>
            Clears the headers written so far to this <see cref="T:Spike.Network.Http.HttpResponse"/>.
            </summary>
        </member>
        <member name="M:Spike.Network.Http.HttpResponse.ClearContent">
            <summary>
            Clears the buffer written so far to this <see cref="T:Spike.Network.Http.HttpResponse"/>.
            </summary>
        </member>
        <member name="M:Spike.Network.Http.HttpResponse.Write(System.Char)">
            <summary>
            Writes a character to this <see cref="T:Spike.Network.Http.HttpResponse"/>.
            </summary>
            <param name="ch">The character to write.</param>
        </member>
        <member name="M:Spike.Network.Http.HttpResponse.Write(System.Object)">
            <summary>
            Writes the object's string representation to this <see cref="T:Spike.Network.Http.HttpResponse"/>.
            </summary>
            <param name="o">The object's string representation to write.</param>
        </member>
        <member name="M:Spike.Network.Http.HttpResponse.Write(System.String)">
            <summary>
            Writes the string to this <see cref="T:Spike.Network.Http.HttpResponse"/>.
            </summary>
            <param name="s">The string to write.</param>
        </member>
        <member name="M:Spike.Network.Http.HttpResponse.Write(System.Char[],System.Int32,System.Int32)">
            <summary>
            Writes an array of character to this <see cref="T:Spike.Network.Http.HttpResponse"/>.
            </summary>
            <param name="array">The array to write.</param>
            <param name="offset">The offset in the input array. Specifies where to begin.</param>
            <param name="length">The number of characters to write starting from the offset.</param>
        </member>
        <member name="M:Spike.Network.Http.HttpResponse.Write(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Writes an byte array to this <see cref="T:Spike.Network.Http.HttpResponse"/>.
            </summary>
            <param name="array">The array to write.</param>
            <param name="offset">The offset in the input array. Specifies where to begin.</param>
            <param name="length">The number of bytes to write starting from the offset.</param>
        </member>
        <member name="M:Spike.Network.Http.HttpResponse.Write(System.Byte[])">
            <summary>
            Writes an byte array to this <see cref="T:Spike.Network.Http.HttpResponse"/>.
            </summary>
        </member>
        <member name="M:Spike.Network.Http.HttpResponse.Overwrite(System.Byte[])">
            <summary>
            Overwrites the contents of the response with the specified bytes.
            </summary>
            <param name="bytes">The byte array to write into the response.</param>
        </member>
        <member name="M:Spike.Network.Http.HttpResponse.Overwrite(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Overwrites an byte array to this <see cref="T:Spike.Network.Http.HttpResponse"/>.
            </summary>
            <param name="array">The array to write.</param>
            <param name="offset">The offset in the input array. Specifies where to begin.</param>
            <param name="length">The number of bytes to write starting from the offset.</param>
        </member>
        <member name="M:Spike.Network.Http.HttpResponse.Flush">
            <summary>
            Flushes the underlying buffer stream.
            </summary>
        </member>
        <member name="M:Spike.Network.Http.HttpResponse.SetHeader(System.String,System.String)">
            <summary>
            Sets an HTTP header to the target value.
            </summary>
            <param name="name">The name/key of the HTTP header to set.</param>
            <param name="value">The value for this HTTP header.</param>
        </member>
        <member name="M:Spike.Network.Http.HttpResponse.AppendCookie(Spike.Network.Http.HttpCookie)">
            <summary>
             Adds an HTTP cookie to the intrinsic cookie collection.
            </summary>
            <param name="cookie">A cookie is appended after the HTTP headers have been sent.</param>
        </member>
        <member name="M:Spike.Network.Http.HttpResponse.Redirect(System.String,System.Boolean,System.Int32)">
            <summary>
            Redirects the response to a specific url.
            </summary>
            <param name="url">The url the redirection should be fowarded to.</param>
            <param name="endResponse">Whether the response should be ended or not.</param>
            <param name="code">The HTTP code of the response.</param>
        </member>
        <member name="M:Spike.Network.Http.HttpResponse.Redirect(System.String)">
            <summary>
            Temporarily redirects the request to the specified url.
            </summary>
            <param name="url">The url to which the request should be redirected.</param>
        </member>
        <member name="M:Spike.Network.Http.HttpResponse.Redirect(System.String,System.Boolean)">
            <summary>
            Temporarily redirects the request to the specified url.
            </summary>
            <param name="url">The url to which the request should be redirected.</param>
            <param name="endResponse">Whether the response should be terminated or not.</param>
        </member>
        <member name="M:Spike.Network.Http.HttpResponse.RedirectPermanent(System.String)">
            <summary>
            Permanently redirects the request to the specified url.
            </summary>
            <param name="url">The url to which the request should be redirected.</param>
        </member>
        <member name="M:Spike.Network.Http.HttpResponse.RedirectPermanent(System.String,System.Boolean)">
            <summary>
            Permanently redirects the request to the specified url.
            </summary>
            <param name="url">The url to which the request should be redirected.</param>
            <param name="endResponse">Whether the response should be terminated or not.</param>
        </member>
        <member name="M:Spike.Network.Http.HttpResponse.Send500(Spike.IClient,System.Exception)">
            <summary>
            Creates and sends an HttpResponse packet for an exception, wraps it to an error 500
            </summary>
        </member>
        <member name="M:Spike.Network.Http.HttpResponse.Send401(Spike.IClient,System.Exception)">
            <summary>
            Creates and sends an HttpResponse packet for an exception, wraps it to an error 401
            </summary>
        </member>
        <member name="M:Spike.Network.Http.HttpResponse.Send404(Spike.IClient)">
            <summary>
            Creates and sends an HttpResponse packet for an not-found handler as error 404
            </summary>
        </member>
        <member name="P:Spike.Network.Http.HttpResponse.Status">
            <summary>
            Gets or sets the status code causes a string describing the status of the HTTP output to be returned to the client. The default value is 200 (OK).
            </summary>
        </member>
        <member name="P:Spike.Network.Http.HttpResponse.ContentType">
            <summary>
            Gets or sets the HTTP MIME type of the output stream. The default value is "text/html".
            </summary>
        </member>
        <member name="P:Spike.Network.Http.HttpResponse.ContentEncoding">
            <summary>
            Gets or sets the content encoding type for this request. Be aware that it resets the writer to 
            the beginning of the stream.
            </summary>
        </member>
        <member name="P:Spike.Network.Http.HttpResponse.Location">
            <summary>
            Gets or sets the redirect location (to be used in conjuction with http 300)
            </summary>
        </member>
        <member name="P:Spike.Network.Http.HttpResponse.ShouldSend">
            <summary>
            Gets or sets whether this Http response should be sent or not.
            </summary>
        </member>
        <member name="P:Spike.Network.Http.HttpResponse.KeepAlive">
            <summary>
            Gets or sets whether this response maintains alive the connection or not
            </summary>
        </member>
        <member name="P:Spike.Network.Http.HttpResponse.Cookieless">
            <summary>
            Gets or sets whether this response should not include any cookies. 
            </summary>
        </member>
        <member name="P:Spike.Network.Http.HttpResponse.Headers">
            <summary>
            Gets a collection of HTTP headers.
            </summary>
        </member>
        <member name="P:Spike.Network.Http.HttpResponse.Cookies">
            <summary>
            Gets the response cookie collection.
            </summary>
        </member>
        <member name="P:Spike.Network.Http.HttpResponse.IsRequestBeingRedirected">
            <summary>
            Gets whether the request is being redirected or not.
            </summary>
        </member>
        <member name="P:Spike.Network.Http.HttpResponse.Content">
            <summary>
            Gets the content written so far in the http response.
            </summary>
        </member>
        <member name="T:Spike.Network.Http.HttpContext">
            <summary>
            Represents a context for HTTP Request/Response pair.
            </summary>
        </member>
        <member name="F:Spike.Network.Http.HttpContext.Handle">
            <summary>
            Gets or sets the handle of the context object for pooling.
            </summary>
        </member>
        <member name="M:Spike.Network.Http.HttpContext.Recycle">
            <summary>
            Resets the parsing state machine for the next request
            </summary>
        </member>
        <member name="M:Spike.Network.Http.HttpContext.ParseRequest(System.Byte*,System.Int32,System.Boolean@,System.Boolean@)">
            <summary>
            Parses the request in order to fill the http context (or alter it if necessary)
            </summary>
        </member>
        <member name="P:Spike.Network.Http.HttpContext.DisableKeepAlive">
            <summary>
            Gets or sets whether keep-alive is disabled on this context or not
            </summary>
        </member>
        <member name="P:Spike.Network.Http.HttpContext.KeepAlive">
            <summary>
            Gets whether Connection: Keep-Alive was specified
            </summary>
        </member>
        <member name="P:Spike.Network.Http.HttpContext.ScriptTimeout">
            <summary>
            Gets or sets the maximum amount of time a script can run before it is terminated
            </summary>
        </member>
        <member name="P:Spike.Network.Http.HttpContext.Connection">
            <summary>
            Gets the underlying connection
            </summary>
        </member>
        <member name="P:Spike.Network.Http.HttpContext.Request">
            <summary>
            Gets <see cref="T:Spike.Network.Http.HttpRequest"/> object for the current request.
            </summary>
        </member>
        <member name="P:Spike.Network.Http.HttpContext.Response">
            <summary>
            Gets <see cref="T:Spike.Network.Http.HttpResponse"/> object for the current request.
            </summary>
        </member>
        <member name="P:Spike.Network.Http.HttpContext.Session">
            <summary>
            Gets <see cref="T:Spike.Network.Http.HttpSession"/> object for the current request.
            </summary>
        </member>
        <member name="T:Spike.Providers.HttpProvider">
            <summary>
            Represents a provider used to handle <see cref="T:Spike.Network.Http.IHttpHandler"/> instances.
            </summary>
        </member>
        <member name="M:Spike.Providers.HttpProvider.InvokeSessionCreate(System.String,Spike.Network.Http.HttpSession)">
            <summary>
            Invokes session created event.
            </summary>
            <param name="session">The parameter session.</param>
            <param name="key">The key of the session.</param>
        </member>
        <member name="M:Spike.Providers.HttpProvider.InvokeSessionExpire(System.String,Spike.Network.Http.HttpSession)">
            <summary>
            Invokes session expired event.
            </summary>
            <param name="session">The parameter session.</param>
            <param name="key">The key of the session.</param>
        </member>
        <member name="M:Spike.Providers.HttpProvider.GetSession(System.String)">
            <summary>
            Gets the session from the store by the session key.
            </summary>
            <param name="key">The key/identifier of the session to get.</param>
            <returns>The <see cref="T:Spike.Network.Http.HttpSession"/> object retrieved or null if no session was found.</returns>
        </member>
        <member name="M:Spike.Providers.HttpProvider.PutSession(Spike.Network.Http.HttpSession)">
            <summary>
            Puts the session to the cache.
            </summary>
            <param name="session">The <see cref="T:Spike.Network.Http.HttpSession"/> object to put to the cache.</param>
        </member>
        <member name="M:Spike.Providers.HttpProvider.GetHandler(Spike.Network.Http.HttpContext,Spike.Network.Http.HttpVerb,System.String)">
            <summary>
            Gets the handler to be used for a particular verb and url
            </summary>
        </member>
        <member name="M:Spike.Providers.HttpProvider.FindHandler(System.Predicate{Spike.Network.Http.IHttpHandler})">
            <summary>
            Finds a handler instances of the handler
            </summary>
        </member>
        <member name="M:Spike.Providers.HttpProvider.Register(Spike.Network.Http.IHttpHandler)">
            <summary>
            Registers a handler to the provider
            </summary>
            <param name="handler">The handler to register</param>
        </member>
        <member name="M:Spike.Providers.HttpProvider.Unregister(Spike.Network.Http.IHttpHandler)">
            <summary>
            Unregisters a handler from the provider
            </summary>
            <param name="handler">The handler to unregister</param>
        </member>
        <member name="F:Spike.Providers.HttpProvider.MimeMap">
            <summary>
            MimeMap
            </summary>
        </member>
        <member name="M:Spike.Providers.HttpProvider.Host(System.Text.RegularExpressions.Regex,System.String)">
            <summary>
            Helper method that allows hosting a static file.
            </summary>
            <param name="urlRegex">The url path regular expression that is used to access the file.</param>
            <param name="filePath">The path to the file on the local machine.</param>
            <returns>A <see cref="T:Spike.Network.Http.IHttpHandler"/> reference to the handler that is used to host.</returns>
        </member>
        <member name="M:Spike.Providers.HttpProvider.Host(System.String,System.String)">
            <summary>
            Helper method that allows hosting a static file.
            </summary>
            <param name="urlPath">The url path that is used to access the file.</param>
            <param name="filePath">The path to the file on the local machine.</param>
            <returns>A <see cref="T:Spike.Network.Http.IHttpHandler"/> reference to the handler that is used to host.</returns>
        </member>
        <member name="M:Spike.Providers.HttpProvider.Host(Spike.Network.Http.HttpVerb,System.String,System.String)">
            <summary>
            Helper method that allows hosting a static file.
            </summary>
            <param name="verb">Http verb that is used to get the file.</param>
            <param name="urlPath">The url path that is used to access the file.</param>
            <param name="filePath">The path to the file on the local machine.</param>
            <returns>A <see cref="T:Spike.Network.Http.IHttpHandler"/> reference to the handler that is used to host.</returns>
        </member>
        <member name="M:Spike.Providers.HttpProvider.Host(System.Func{Spike.Network.Http.HttpContext,System.Boolean},System.String)">
            <summary>
            Helper method that allows hosting a static file.
            </summary>
            <param name="condition">The dynamic condition that checks whether the file should be sent to the client or not</param>
            <param name="filePath">The path to the file on the local machine.</param>
            <returns>A <see cref="T:Spike.Network.Http.IHttpHandler"/> reference to the handler that is used to host.</returns>
        </member>
        <member name="M:Spike.Providers.HttpProvider.Host(System.Func{Spike.Network.Http.HttpContext,System.Boolean},System.Action{Spike.Network.Http.HttpContext})">
            <summary>
            Helper method that allows registering a handler represented by a delegate.
            </summary>
            <param name="condition">The dynamic condition that checks whether the handler should be executed or not</param>
            <param name="handler">The handler to execute. It should fill HttpResponse in order to reply to the HTTP request.</param>
            <returns>A <see cref="T:Spike.Network.Http.IHttpHandler"/> reference to the handler that is used to host.</returns>
        </member>
        <member name="E:Spike.Providers.HttpProvider.SessionCreated">
            <summary>
            An event that occurs when a session is created.
            </summary>
        </member>
        <member name="E:Spike.Providers.HttpProvider.SessionExpired">
            <summary>
            An event that occurs when a session expires.
            </summary>
        </member>
        <member name="P:Spike.Providers.HttpProvider.Mime">
            <summary>
            Gets the <see cref="T:Spike.Network.Http.HttpMimeMap"/> instance that can be used to map file extensions to 
            the associated MIME type.
            </summary>
        </member>
        <member name="T:Spike.Providers.DefaultHttpProvider">
            <summary>
            Represents a provider used to handle <see cref="T:Spike.Network.Http.IHttpHandler"/> instances.
            </summary>
        </member>
        <member name="M:Spike.Providers.DefaultHttpProvider.#ctor">
            <summary>
            Constructs an instance of a default http provider.
            </summary>
        </member>
        <member name="M:Spike.Providers.DefaultHttpProvider.Register(Spike.Network.Http.IHttpHandler)">
            <summary>
            Registers a handler to the provider.
            </summary>
            <param name="handler">The handler to register.</param>
        </member>
        <member name="M:Spike.Providers.DefaultHttpProvider.Unregister(Spike.Network.Http.IHttpHandler)">
            <summary>
            Unregisters a handler from the provider.
            </summary>
            <param name="handler">The handler to unregister.</param>
        </member>
        <member name="M:Spike.Providers.DefaultHttpProvider.GetHandler(Spike.Network.Http.HttpContext,Spike.Network.Http.HttpVerb,System.String)">
            <summary>
            Gets the handler to be used for a particular verb and url.
            </summary>
        </member>
        <member name="M:Spike.Providers.DefaultHttpProvider.FindHandler(System.Predicate{Spike.Network.Http.IHttpHandler})">
            <summary>
            Finds a handler instances by the type of the handler.
            </summary>
        </member>
        <member name="M:Spike.Providers.DefaultHttpProvider.GetSession(System.String)">
            <summary>
            Gets the session from the store by the session key.
            </summary>
            <param name="key">The key/identifier of the session to get.</param>
            <returns>The <see cref="T:Spike.Network.Http.HttpSession"/> object retrieved or null if no session was found.</returns>
        </member>
        <member name="M:Spike.Providers.DefaultHttpProvider.PutSession(Spike.Network.Http.HttpSession)">
            <summary>
            Puts the session to the cache.
            </summary>
            <param name="session">The <see cref="T:Spike.Network.Http.HttpSession"/> object to put to the cache.</param>
        </member>
        <member name="M:Spike.Providers.DefaultHttpProvider.OnCheckAlive">
            <summary>
            Invoked by a timer that checks periodically for live sessions and kills them if they've expired.
            </summary>
        </member>
        <member name="T:Spike.Providers.QuickHttpHandler">
            <summary>
            A default handler used for host providers
            </summary>
        </member>
        <member name="T:Spike.Network.Http.HttpVersion">
            <summary>
            Represents a HTTP Protocol Version
            </summary>
        </member>
        <member name="F:Spike.Network.Http.HttpVersion.V1_0">
            <summary>
            HTTP Version 1.0
            </summary>
        </member>
        <member name="F:Spike.Network.Http.HttpVersion.V1_1">
            <summary>
            HTTP Version 1.1
            </summary>
        </member>
        <member name="T:Spike.Network.Http.HttpRequest">
            <summary>
            Represents an incoming HTTP Request
            </summary>
        </member>
        <member name="M:Spike.Network.Http.HttpRequest.Recycle">
            <summary>
            Recycles (resets) the object to the original state.
            </summary>
        </member>
        <member name="M:Spike.Network.Http.HttpRequest.TryGetHeader(System.String,System.String@)">
            <summary>
            Attempts to get a specific header.
            </summary>
            <param name="headerName">The name of the header to check</param>
            <param name="headerValue">The value of the header to check</param>
            <returns>Returns whether the request contains the header or not</returns>
        </member>
        <member name="M:Spike.Network.Http.HttpRequest.ContainsHeader(System.String)">
            <summary>
            Checks whether the request contains the header or not.
            </summary>
            <param name="headerName">The name of the header to check</param>
            <returns>Returns whether the request contains the header or not</returns>
        </member>
        <member name="P:Spike.Network.Http.HttpRequest.Headers">
            <summary>
            Gets a collection of HTTP headers.
            </summary>
        </member>
        <member name="P:Spike.Network.Http.HttpRequest.Cookies">
            <summary>
            Gets a collection of cookies sent by the client.
            </summary>
        </member>
        <member name="P:Spike.Network.Http.HttpRequest.HttpVerb">
            <summary>
            Gets the Http Verb of the request
            </summary>
        </member>
        <member name="P:Spike.Network.Http.HttpRequest.Accept">
            <summary>
            Gets the Accept of the incoming request.
            </summary>
        </member>
        <member name="P:Spike.Network.Http.HttpRequest.AcceptEncoding">
            <summary>
            Gets the Accept-Encoding of the incoming request.
            </summary>
        </member>
        <member name="P:Spike.Network.Http.HttpRequest.Origin">
            <summary>
            Gets the Origin of the incoming request.
            </summary>
        </member>
        <member name="P:Spike.Network.Http.HttpRequest.AcceptLanguage">
            <summary>
            Gets the Accept-Language of the incoming request.
            </summary>
        </member>
        <member name="P:Spike.Network.Http.HttpRequest.Host">
            <summary>
            Gets the Host of the incoming request.
            </summary>
        </member>
        <member name="P:Spike.Network.Http.HttpRequest.AcceptCharset">
            <summary>
            Gets the Accept-Charset of the incoming request.
            </summary>
        </member>
        <member name="P:Spike.Network.Http.HttpRequest.UrlReferrer">
            <summary>
            Gets information about the URL of the client's previous request that linked to the current URL.
            </summary>
        </member>
        <member name="P:Spike.Network.Http.HttpRequest.ContentEncoding">
            <summary>
            Gets the character set of the entity-body.
            </summary>
        </member>
        <member name="P:Spike.Network.Http.HttpRequest.ContentType">
            <summary>
            Gets the MIME content type of the incoming request.
            </summary>
        </member>
        <member name="P:Spike.Network.Http.HttpRequest.RayType">
            <summary>
            Gets the type of Spike Ray command.
            </summary>
        </member>
        <member name="P:Spike.Network.Http.HttpRequest.CometIdentity">
            <summary>
            Gets the type of Spike Comet identity.
            </summary>
        </member>
        <member name="P:Spike.Network.Http.HttpRequest.ContentLength">
            <summary>
            Specifies the length, in bytes, of content sent by the client.
            </summary>
        </member>
        <member name="P:Spike.Network.Http.HttpRequest.Path">
            <summary>
            Gets the virtual path of the current request.
            </summary>
        </member>
        <member name="P:Spike.Network.Http.HttpRequest.UserAgent">
            <summary>
            Gets the raw user agent string of the client browser.
            </summary>
        </member>
        <member name="P:Spike.Network.Http.HttpRequest.Referer">
            <summary>
            Gets the raw referer string of the client browser.
            </summary>
        </member>
        <member name="P:Spike.Network.Http.HttpRequest.UserHostAddress">
            <summary>
            Gets the IP host address of the remote client.
            </summary>
        </member>
        <member name="P:Spike.Network.Http.HttpRequest.Content">
            <summary>
            Gets the body content.
            </summary>
        </member>
        <member name="T:Spike.Network.Http.HttpHeaders">
            <summary>
            Represents a packet for HTTP headers.
            </summary>
        </member>
        <member name="F:Spike.Network.Http.HttpHeaders.PacketPool">
            <summary>
            Pool that manages request packet instances.
            </summary>
        </member>
        <member name="M:Spike.Network.Http.HttpHeaders.Create(Spike.Network.Http.HttpResponse)">
            <summary>
            Creates an instance of a http header packet
            </summary>
        </member>
        <member name="M:Spike.Network.Http.HttpHeaders.#ctor">
            <summary>
            Constructs a new HttpHeaders object instance.
            </summary>
        </member>
        <member name="M:Spike.Network.Http.HttpHeaders.Write(Spike.Network.Http.HttpResponse)">
            <summary>
            Writes the HttpResponse to this HttpHeaders packet.
            </summary>
            <param name="response">HttpResponse containing the headers.</param>
        </member>
        <member name="T:Spike.Network.ProtocolInfo">
            <summary>
            Represents a Spike protocol markup language (SPML) definition.
            </summary>
        </member>
        <member name="M:Spike.Network.ProtocolInfo.Register(System.String,System.String)">
            <summary>
            Registers an encoded SPML definition
            </summary>
            <param name="protocolName">The name of the protocol</param>
            <param name="spml">The SPML contents, encoded in a Base64 string</param>
        </member>
        <member name="M:Spike.Network.ProtocolInfo.DecodeOne(System.String)">
            <summary>
            Decodes one SPML Definition.
            </summary>
            <param name="data">Raw data to decode.</param>
            <returns>Decoded XML.</returns>
        </member>
        <member name="M:Spike.Network.ProtocolInfo.#ctor">
            <summary>
            Initializes a new empty instance of the <see cref="T:Spike.Network.ProtocolInfo"/> class.
            </summary>
        </member>
        <member name="M:Spike.Network.ProtocolInfo.#ctor(System.String,System.String)">
            <summary>
            Constructs a new <see cref="T:Spike.Network.ProtocolInfo"/> instance.
            </summary>
            <param name="protocolName">The name of the protocol.</param>
            <param name="rawSpml">The SPML definition of the protocol.</param>
        </member>
        <member name="P:Spike.Network.ProtocolInfo.Definitions">
            <summary>
            Gets all definitions registered in the server.
            </summary>
        </member>
        <member name="P:Spike.Network.ProtocolInfo.ProtocolName">
            <summary>
            Gets Protocol name for this protocol definition
            </summary>
        </member>
        <member name="P:Spike.Network.ProtocolInfo.Spml">
            <summary>
            Gets SPML string for this protocol definition
            </summary>
        </member>
        <member name="T:Spike.Web.BuiltinPageHandler">
            <summary>
            Processes specific HTTP request and returns a web-page using a built-in web template
            </summary>
        </member>
        <member name="M:Spike.Web.BuiltinPageHandler.CanHandle(Spike.Network.Http.HttpContext,Spike.Network.Http.HttpVerb,System.String)">
            <summary>
            Checks whether the handler can handle an incoming request or not
            </summary>
            <param name="context">An HttpContext object that provides references to the intrinsic
            server objects (for example, Request, Response, Session, and Server) used
            to service HTTP requests.</param>
            <param name="verb">Verb of the request</param>
            <param name="url">Url passed in parameter</param>
            <returns></returns>
        </member>
        <member name="M:Spike.Web.BuiltinPageHandler.WriteBody(Spike.Network.Http.HttpContext)">
            <summary>
            Enables processing of HTTP Web requests by a custom HttpHandler that implements
            the IHttpHandler interface.
            </summary>
            <param name="context">An HttpContext object that provides references to the intrinsic
            server objects (for example, Request, Response, Session, and Server) used
            to service HTTP requests.</param>
        </member>
        <member name="M:Spike.Web.BuiltinPageHandler.ProcessRequest(Spike.Network.Http.HttpContext)">
            <summary>
            Enables processing of HTTP Web requests by a custom HttpHandler that implements
            the IHttpHandler interface.
            </summary>
            <param name="context">An HttpContext object that provides references to the intrinsic
            server objects (for example, Request, Response, Session, and Server) used
            to service HTTP requests.</param>
        </member>
        <member name="P:Spike.Web.BuiltinPageHandler.Title">
            <summary>
            Gets the title of the built-in page
            </summary>
        </member>
        <member name="P:Spike.Web.BuiltinPageHandler.Security">
            <summary>
            Gets the security mechanism to use
            </summary>
        </member>
        <member name="T:Spike.Web.BuiltinStatusMemoryPage">
            <summary>
            Represents a status page built into Spike-Engine.
            </summary>
        </member>
        <member name="M:Spike.Web.BuiltinStatusMemoryPage.CanHandle(Spike.Network.Http.HttpContext,Spike.Network.Http.HttpVerb,System.String)">
            <summary>
            Enables processing of HTTP Web requests by a custom HttpHandler that implements
            the IHttpHandler interface.
            </summary>
            <param name="context">An HttpContext object that provides references to the intrinsic
            server objects (for example, Request, Response, Session, and Server) used
            to service HTTP requests.</param>
            <param name="url">The url of the request.</param>
            <param name="verb">The verb of the request.</param>
        </member>
        <member name="M:Spike.Web.BuiltinStatusMemoryPage.WriteBody(Spike.Network.Http.HttpContext)">
            <summary>
            Enables processing of HTTP Web requests by a custom HttpHandler that implements
            the IHttpHandler interface.
            </summary>
            <param name="context">An HttpContext object that provides references to the intrinsic
            server objects (for example, Request, Response, Session, and Server) used
            to service HTTP requests.</param>
        </member>
        <member name="P:Spike.Web.BuiltinStatusMemoryPage.Title">
            <summary>
            Gets the human-readable title of the page.
            </summary>
        </member>
        <member name="T:Spike.Web.BuiltinStatusNavigation">
            <summary>
            Built-in web site navigation menu.
            </summary>
        </member>
        <member name="M:Spike.Web.BuiltinStatusNavigation.#cctor">
            <summary>
            Build the default links
            </summary>
        </member>
        <member name="F:Spike.Web.BuiltinStatusNavigation.Links">
            <summary>
            A list containing the navigation items.
            </summary>
        </member>
        <member name="M:Spike.Web.BuiltinStatusNavigation.AddLink(System.String,System.String)">
            <summary>
            Adds a link to the navigation menu.
            </summary>
            <param name="text">The text of the link.</param>
            <param name="url">The url of the link.</param>
        </member>
        <member name="M:Spike.Web.BuiltinStatusNavigation.Render(Spike.Network.Http.HttpResponse)">
            <summary>
            Renders the navigation to the HttpResponse.
            </summary>
            <param name="response">HttpResponse to render the navigation menu to.</param>
        </member>
        <member name="T:Spike.Web.BuiltinStatusFirewallPage">
            <summary>
            Represents a status page built into Spike-Engine.
            </summary>
        </member>
        <member name="M:Spike.Web.BuiltinStatusFirewallPage.CanHandle(Spike.Network.Http.HttpContext,Spike.Network.Http.HttpVerb,System.String)">
            <summary>
            Enables processing of HTTP Web requests by a custom HttpHandler that implements
            the IHttpHandler interface.
            </summary>
            <param name="context">An HttpContext object that provides references to the intrinsic
            server objects (for example, Request, Response, Session, and Server) used
            to service HTTP requests.</param>
            <param name="url">The url of the request.</param>
            <param name="verb">The verb of the request.</param>
        </member>
        <member name="F:Spike.Web.BuiltinStatusFirewallPage.RulesList">
            <summary>
            Rules list
            </summary>
        </member>
        <member name="M:Spike.Web.BuiltinStatusFirewallPage.WriteBody(Spike.Network.Http.HttpContext)">
            <summary>
            Enables processing of HTTP Web requests by a custom HttpHandler that implements
            the IHttpHandler interface.
            </summary>
            <param name="context">An HttpContext object that provides references to the intrinsic
            server objects (for example, Request, Response, Session, and Server) used
            to service HTTP requests.</param>
        </member>
        <member name="P:Spike.Web.BuiltinStatusFirewallPage.Title">
            <summary>
            Gets the human-readable title of the page.
            </summary>
        </member>
        <member name="T:Spike.Web.BuiltinStatusClientsPage">
            <summary>
            Represents a status page built into Spike-Engine.
            </summary>
        </member>
        <member name="M:Spike.Web.BuiltinStatusClientsPage.CanHandle(Spike.Network.Http.HttpContext,Spike.Network.Http.HttpVerb,System.String)">
            <summary>
            Enables processing of HTTP Web requests by a custom HttpHandler that implements
            the IHttpHandler interface.
            </summary>
            <param name="context">An HttpContext object that provides references to the intrinsic
            server objects (for example, Request, Response, Session, and Server) used
            to service HTTP requests.</param>
            <param name="url">The url of the request.</param>
            <param name="verb">The verb of the request.</param>
        </member>
        <member name="M:Spike.Web.BuiltinStatusClientsPage.WriteBody(Spike.Network.Http.HttpContext)">
            <summary>
            Enables processing of HTTP Web requests by a custom HttpHandler that implements
            the IHttpHandler interface.
            </summary>
            <param name="context">An HttpContext object that provides references to the intrinsic
            server objects (for example, Request, Response, Session, and Server) used
            to service HTTP requests.</param>
        </member>
        <member name="P:Spike.Web.BuiltinStatusClientsPage.Title">
            <summary>
            Gets the human-readable title of the page.
            </summary>
        </member>
        <member name="M:Spike.Web.WebTable`1.Render(Spike.Network.Http.HttpContext)">
            <summary>
            Renders the control to the HTTP Context.
            </summary>
            <param name="context">The context to render to.</param>
        </member>
        <member name="P:Spike.Web.WebTable`1.FetchData">
            <summary>
            Function that loads the data from the source
            </summary>
        </member>
        <member name="P:Spike.Web.WebTable`1.RenderHeaders">
            <summary>
            Function that renders the headers for the table
            </summary>
        </member>
        <member name="P:Spike.Web.WebTable`1.RenderItemRead">
            <summary>
            Function that renders a read-only template for the item
            </summary>
        </member>
        <member name="M:Spike.Web.WebTableDynamic`1.#ctor(System.Collections.Generic.IEnumerable{`0},Spike.Web.WebTableColumn[])">
            <summary>
            Creates a new WebTableDynamic instance.
            </summary>
            <param name="source">The data source to bind on.</param>
            <param name="columns">The column definitions to bind.</param>
        </member>
        <member name="T:Spike.Web.WebTableColumn">
            <summary>
            Represents a column definition for the WebTable control.
            </summary>
        </member>
        <member name="F:Spike.Web.WebTableColumn.Header">
            <summary>
            The label to show on the header
            </summary>
        </member>
        <member name="F:Spike.Web.WebTableColumn.Size">
            <summary>
            The size of the column
            </summary>
        </member>
        <member name="F:Spike.Web.WebTableColumn.Property">
            <summary>
            The name of the property to bind to the column
            </summary>
        </member>
        <member name="M:Spike.Web.WebDataGrid`1.Render(Spike.Network.Http.HttpContext)">
            <summary>
            Renders the control to the HTTP Context.
            </summary>
            <param name="context">The context to render to.</param>
        </member>
        <member name="P:Spike.Web.WebDataGrid`1.EnableUpdate">
            <summary>
            Gets or sets whether the update should be allowed
            </summary>
        </member>
        <member name="P:Spike.Web.WebDataGrid`1.EnableInsert">
            <summary>
            Gets or sets whether the insertion should be allowed
            </summary>
        </member>
        <member name="P:Spike.Web.WebDataGrid`1.EnableDelete">
            <summary>
            Gets or sets whether the deletion should be allowed
            </summary>
        </member>
        <member name="P:Spike.Web.WebDataGrid`1.FetchData">
            <summary>
            Function that loads the data from the source
            </summary>
        </member>
        <member name="P:Spike.Web.WebDataGrid`1.CreateEmpty">
            <summary>
            Function that constructs an empty item
            </summary>
        </member>
        <member name="P:Spike.Web.WebDataGrid`1.Insert">
            <summary>
            Function that inserts the item to the data source
            </summary>
        </member>
        <member name="P:Spike.Web.WebDataGrid`1.Delete">
            <summary>
            Function that deletes the item from the data source
            </summary>
        </member>
        <member name="P:Spike.Web.WebDataGrid`1.Update">
            <summary>
            Function that updates an existing item
            </summary>
        </member>
        <member name="P:Spike.Web.WebDataGrid`1.RenderHeaders">
            <summary>
            Function that renders the headers for the table
            </summary>
        </member>
        <member name="P:Spike.Web.WebDataGrid`1.RenderItemEdit">
            <summary>
            Function that renders a write template for the item
            </summary>
        </member>
        <member name="P:Spike.Web.WebDataGrid`1.RenderItemRead">
            <summary>
            Function that renders a read-only template for the item
            </summary>
        </member>
        <member name="T:Spike.Web.WebDataGridState">
            <summary>
            Represents the current rendering state of the data grid
            </summary>
        </member>
        <member name="F:Spike.Web.WebDataGridState.Default">
            <summary>
            Browsing mode
            </summary>
        </member>
        <member name="F:Spike.Web.WebDataGridState.Save">
            <summary>
            Update the item that has been modified by the user
            </summary>
        </member>
        <member name="F:Spike.Web.WebDataGridState.Create">
            <summary>
            Create a new item that has been filled
            </summary>
        </member>
        <member name="F:Spike.Web.WebDataGridState.Delete">
            <summary>
            Delete the item that have been specified by the user
            </summary>
        </member>
        <member name="F:Spike.Web.WebDataGridState.Edit">
            <summary>
            Open the edit view for the requested item
            </summary>
        </member>
        <member name="F:Spike.Web.WebDataGridState.Add">
            <summary>
            Open the add view for a new item
            </summary>
        </member>
        <member name="T:Spike.Web.BuiltinStatusAssembliesPage">
            <summary>
            Represents a status page which shows assemblies metadata.
            </summary>
        </member>
        <member name="M:Spike.Web.BuiltinStatusAssembliesPage.CanHandle(Spike.Network.Http.HttpContext,Spike.Network.Http.HttpVerb,System.String)">
            <summary>
            Checks whether the handler can handle an incoming request or not
            </summary>
            <param name="context">An HttpContext object that provides references to the intrinsic
            server objects (for example, Request, Response, Session, and Server) used
            to service HTTP requests.</param>
            <param name="verb">Verb of the request</param>
            <param name="url">Url passed in parameter</param>
            <returns></returns>
        </member>
        <member name="F:Spike.Web.BuiltinStatusAssembliesPage.Assemblies">
            <summary>
            Prepare the list of assemblies to show
            </summary>
        </member>
        <member name="M:Spike.Web.BuiltinStatusAssembliesPage.WriteBody(Spike.Network.Http.HttpContext)">
            <summary>
            Enables processing of HTTP Web requests by a custom HttpHandler that implements
            the IHttpHandler interface.
            </summary>
            <param name="context">An HttpContext object that provides references to the intrinsic
            server objects (for example, Request, Response, Session, and Server) used
            to service HTTP requests.</param>
        </member>
        <member name="P:Spike.Web.BuiltinStatusAssembliesPage.Title">
            <summary>
            Gets the human-readable title of the page.
            </summary>
        </member>
        <member name="T:Spike.Web.BuiltinStatusHubsPage">
            <summary>
            Represents a status page built into Spike-Engine.
            </summary>
        </member>
        <member name="M:Spike.Web.BuiltinStatusHubsPage.CanHandle(Spike.Network.Http.HttpContext,Spike.Network.Http.HttpVerb,System.String)">
            <summary>
            Enables processing of HTTP Web requests by a custom HttpHandler that implements
            the IHttpHandler interface.
            </summary>
            <param name="context">An HttpContext object that provides references to the intrinsic
            server objects (for example, Request, Response, Session, and Server) used
            to service HTTP requests.</param>
            <param name="url">The url of the request.</param>
            <param name="verb">The verb of the request.</param>
        </member>
        <member name="M:Spike.Web.BuiltinStatusHubsPage.WriteBody(Spike.Network.Http.HttpContext)">
            <summary>
            Enables processing of HTTP Web requests by a custom HttpHandler that implements
            the IHttpHandler interface.
            </summary>
            <param name="context">An HttpContext object that provides references to the intrinsic
            server objects (for example, Request, Response, Session, and Server) used
            to service HTTP requests.</param>
        </member>
        <member name="M:Spike.Web.BuiltinStatusHubsPage.RenderHub(Spike.Network.Http.HttpResponse,Spike.Hubs.IHub)">
            <summary>
            Renders one hub.
            </summary>
            <param name="response">The response to write to.</param>
            <param name="hub">The hub to render.</param>
        </member>
        <member name="P:Spike.Web.BuiltinStatusHubsPage.Title">
            <summary>
            Gets the human-readable title of the page.
            </summary>
        </member>
        <member name="T:Spike.Web.BuiltinStatusPage">
            <summary>
            Represents a status page built into Spike-Engine.
            </summary>
        </member>
        <member name="M:Spike.Web.BuiltinStatusPage.AddSideBarExtender(System.Action{Spike.Network.Http.HttpContext})">
            <summary>
            Adds an extender for status page side-bar.
            </summary>
            <param name="extender">The function that extends the side-bar.</param>
        </member>
        <member name="M:Spike.Web.BuiltinStatusPage.RemoveSideBarExtender(System.Action{Spike.Network.Http.HttpContext})">
            <summary>
            Removes a extender for status page side-bar.
            </summary>
            <param name="extender">The function that extends the side-bar.</param>
        </member>
        <member name="M:Spike.Web.BuiltinStatusPage.AddMainBarExtender(System.Action{Spike.Network.Http.HttpContext})">
            <summary>
            Adds an extender for status page main-bar.
            </summary>
            <param name="extender">The function that extends the main-bar.</param>
        </member>
        <member name="M:Spike.Web.BuiltinStatusPage.RemoveMainBarExtender(System.Action{Spike.Network.Http.HttpContext})">
            <summary>
            Removes a extender for status page main-bar.
            </summary>
            <param name="extender">The function that extends the main-bar.</param>
        </member>
        <member name="M:Spike.Web.BuiltinStatusPage.CanHandle(Spike.Network.Http.HttpContext,Spike.Network.Http.HttpVerb,System.String)">
            <summary>
            Enables processing of HTTP Web requests by a custom HttpHandler that implements
            the IHttpHandler interface.
            </summary>
            <param name="context">An HttpContext object that provides references to the intrinsic
            server objects (for example, Request, Response, Session, and Server) used
            to service HTTP requests.</param>
            <param name="url">The url of the request.</param>
            <param name="verb">The verb of the request.</param>
        </member>
        <member name="M:Spike.Web.BuiltinStatusPage.WriteBody(Spike.Network.Http.HttpContext)">
            <summary>
            Enables processing of HTTP Web requests by a custom HttpHandler that implements
            the IHttpHandler interface.
            </summary>
            <param name="context">An HttpContext object that provides references to the intrinsic
            server objects (for example, Request, Response, Session, and Server) used
            to service HTTP requests.</param>
        </member>
        <member name="P:Spike.Web.BuiltinStatusPage.Title">
            <summary>
            Gets the human-readable title of the page.
            </summary>
        </member>
        <member name="F:Spike.Network.PacketCompression.Compressors">
            <summary>
            Pool of LZF Compressors
            </summary>
        </member>
        <member name="T:Spike.Properties.Resources">
            <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
        </member>
        <member name="P:Spike.Properties.Resources.ResourceManager">
            <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
        </member>
        <member name="P:Spike.Properties.Resources.Culture">
            <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
        </member>
        <member name="P:Spike.Properties.Resources.CrossDomainPolicy">
            <summary>
              Looks up a localized string similar to &lt;cross-domain-policy&gt;&lt;allow-access-from domain=&quot;*&quot; to-ports=&quot;*&quot; /&gt;&lt;/cross-domain-policy&gt;.
            </summary>
        </member>
        <member name="P:Spike.Properties.Resources.favicon">
            <summary>
              Looks up a localized resource of type System.Byte[].
            </summary>
        </member>
        <member name="P:Spike.Properties.Resources.header_bg">
            <summary>
              Looks up a localized resource of type System.Byte[].
            </summary>
        </member>
        <member name="P:Spike.Properties.Resources.header_bgres">
            <summary>
              Looks up a localized resource of type System.Byte[].
            </summary>
        </member>
        <member name="P:Spike.Properties.Resources.icon_bullet_black">
            <summary>
              Looks up a localized resource of type System.Byte[].
            </summary>
        </member>
        <member name="P:Spike.Properties.Resources.icon_bullet_green">
            <summary>
              Looks up a localized resource of type System.Byte[].
            </summary>
        </member>
        <member name="P:Spike.Properties.Resources.icon_bullet_red">
            <summary>
              Looks up a localized resource of type System.Byte[].
            </summary>
        </member>
        <member name="P:Spike.Properties.Resources.icon_bullet_yellow">
            <summary>
              Looks up a localized resource of type System.Byte[].
            </summary>
        </member>
        <member name="P:Spike.Properties.Resources.icon_cancel">
            <summary>
              Looks up a localized resource of type System.Byte[].
            </summary>
        </member>
        <member name="P:Spike.Properties.Resources.icon_clock">
            <summary>
              Looks up a localized resource of type System.Byte[].
            </summary>
        </member>
        <member name="P:Spike.Properties.Resources.icon_cpu">
            <summary>
              Looks up a localized resource of type System.Byte[].
            </summary>
        </member>
        <member name="P:Spike.Properties.Resources.icon_delete">
            <summary>
              Looks up a localized resource of type System.Byte[].
            </summary>
        </member>
        <member name="P:Spike.Properties.Resources.icon_edit">
            <summary>
              Looks up a localized resource of type System.Byte[].
            </summary>
        </member>
        <member name="P:Spike.Properties.Resources.icon_folder">
            <summary>
              Looks up a localized resource of type System.Byte[].
            </summary>
        </member>
        <member name="P:Spike.Properties.Resources.icon_memory">
            <summary>
              Looks up a localized resource of type System.Byte[].
            </summary>
        </member>
        <member name="P:Spike.Properties.Resources.icon_package">
            <summary>
              Looks up a localized resource of type System.Byte[].
            </summary>
        </member>
        <member name="P:Spike.Properties.Resources.icon_person">
            <summary>
              Looks up a localized resource of type System.Byte[].
            </summary>
        </member>
        <member name="P:Spike.Properties.Resources.icon_save">
            <summary>
              Looks up a localized resource of type System.Byte[].
            </summary>
        </member>
        <member name="P:Spike.Properties.Resources.icon_spml">
            <summary>
              Looks up a localized resource of type System.Byte[].
            </summary>
        </member>
        <member name="P:Spike.Properties.Resources.js_g_raphael">
            <summary>
              Looks up a localized resource of type System.Byte[].
            </summary>
        </member>
        <member name="P:Spike.Properties.Resources.js_g_raphael_dot">
            <summary>
              Looks up a localized resource of type System.Byte[].
            </summary>
        </member>
        <member name="P:Spike.Properties.Resources.js_raphael">
            <summary>
              Looks up a localized resource of type System.Byte[].
            </summary>
        </member>
        <member name="P:Spike.Properties.Resources.li">
            <summary>
              Looks up a localized resource of type System.Byte[].
            </summary>
        </member>
        <member name="P:Spike.Properties.Resources.logo">
            <summary>
              Looks up a localized resource of type System.Byte[].
            </summary>
        </member>
        <member name="P:Spike.Properties.Resources.WebFooter">
             <summary>
               Looks up a localized string similar to 
                  &lt;div class=&quot;clr&quot;&gt;&lt;/div&gt;
                &lt;/div&gt;
              &lt;/div&gt;
            
              &lt;div class=&quot;footer&quot;&gt;
                &lt;div class=&quot;footer_resize&quot;&gt;
                &lt;p class=&quot;lf&quot;&gt;This server is powered by &lt;a href=&quot;http://www.spike-engine.com&quot;&gt;Spike Engine &amp;trade;&lt;/a&gt;&lt;/p&gt;
                  &lt;ul class=&quot;fmenu&quot;&gt;
                    &lt;li&gt;&lt;a href=&quot;http://www.spike-engine.com/support&quot;&gt;Support&lt;/a&gt;&lt;/li&gt;
                    &lt;li&gt;&lt;a href=&quot;http://www.spike-cloud.com&quot;&gt;Spike Cloud &amp;trade;&lt;/a&gt;&lt;/li&gt;
                  &lt;/ul&gt;
            
                &lt;/div&gt;
                &lt;div class=&quot;clr&quot;&gt;&lt;/div&gt;
              &lt;/div&gt;
            &lt;/div&gt;
            &lt;/body&gt;
            &lt;/html&gt;
            .
             </summary>
        </member>
        <member name="P:Spike.Properties.Resources.WebHeader">
             <summary>
               Looks up a localized string similar to &lt;meta http-equiv=&quot;Content-Type&quot; content=&quot;text/html; charset=UTF-8&quot; /&gt;
            &lt;link rel=&quot;stylesheet&quot; href=&quot;/status/6c4eeae0-eb21-4aed-bc13-edea0b1883bd.css&quot; type=&quot;text/css&quot; /&gt;
            &lt;script src=&quot;/status/df07f3f7-8e57-4ec7-b075-d40618eab592.js&quot;&gt;&lt;/script&gt;
            &lt;script src=&quot;/status/d35a4318-4c84-4331-80dd-a946ab83e9e4.js&quot;&gt;&lt;/script&gt;
            &lt;script src=&quot;/status/8e132c58-3f22-4e18-9506-87acda8ba1f3.js&quot;&gt;&lt;/script&gt;
            &lt;/head&gt;
            &lt;body&gt;
            &lt;div class=&quot;main&quot;&gt;
              &lt;div class=&quot;header&quot;&gt;
              &lt;div class=&quot;logo /&gt;
                &lt;div class=&quot;header_resize&quot;&gt;
                   [rest of string was truncated]&quot;;.
             </summary>
        </member>
        <member name="P:Spike.Properties.Resources.WebSocketMain">
            <summary>
              Looks up a localized resource of type System.Byte[].
            </summary>
        </member>
        <member name="P:Spike.Properties.Resources.WebSocketMainInsecure">
            <summary>
              Looks up a localized resource of type System.Byte[].
            </summary>
        </member>
        <member name="P:Spike.Properties.Resources.WebStyle">
             <summary>
               Looks up a localized string similar to body { font-size: 12px; line-height: 18px; font-family: &quot;Lucida Grande&quot;, &quot;Lucida Sans Unicode&quot;, Verdana, Helvetica, Arial, sans-serif; background:#fff top center repeat-x; margin:0; padding:0; width:100%; color:#3e3e3e;  }
            h1, h2, h3, h4, h5, h6 { display: block; font-size: 1.5em; font-family: Georgia, Helvetica, Arial, serif; font-style: normal; font-weight: normal; padding: 8px 0 5px 0; margin: 0 0 0 0; color:#387796; }
            h4 { font-size: 1em; padding: 0 0 0 0; margin: 0 0 0 0; }
            html, .main { padding:0;  [rest of string was truncated]&quot;;.
             </summary>
        </member>
        <member name="T:Spike.Providers.LoggingProvider">
            <summary>
            Provides the logging functionnality
            </summary>
        </member>
        <member name="M:Spike.Providers.LoggingProvider.Log(Spike.LogLevel,System.String)">
            <summary>
            Logs an info or an error.
            </summary>
            <param name="level">Level of the log entry (info, warning or error).</param>
            <param name="message">Message of the log entry.</param>
        </member>
        <member name="M:Spike.Providers.LoggingProvider.Log(System.String)">
            <summary>
            Logs an info.
            </summary>
            <param name="message">Message of the log entry (info).</param>
        </member>
        <member name="M:Spike.Providers.LoggingProvider.Log(System.Exception)">
            <summary>
            Logs an exception as a warning.
            </summary>
            <param name="exception">The exception object that contains the error.</param>
        </member>
        <member name="M:Spike.Providers.LoggingProvider.Log(Spike.LogLevel,System.Exception)">
            <summary>
            Logs an exception with a specified error level.
            </summary>
            <param name="exception">The exception object that contains the error.</param>
            <param name="level">Level of the log entry (info, warning or error).</param>
        </member>
        <member name="T:Spike.Providers.MultiTextLoggingProvider">
            <summary>
            Default, console multi text logging
            </summary>
        </member>
        <member name="M:Spike.Providers.MultiTextLoggingProvider.Log(Spike.LogLevel,System.String)">
            <summary>
            Logs an info or an error.
            </summary>
        </member>
        <member name="M:Spike.Providers.MultiTextLoggingProvider.Log(System.String)">
            <summary>
            Logs an info or an error.
            </summary>
        </member>
        <member name="M:Spike.Providers.MultiTextLoggingProvider.Log(System.Exception)">
            <summary>
            Logs an exception as a warning.
            </summary>
        </member>
        <member name="M:Spike.Providers.MultiTextLoggingProvider.Log(Spike.LogLevel,System.Exception)">
            <summary>
            Logs an exception with a specified error level.
            </summary>
        </member>
        <member name="T:Spike.Providers.FileLogger">
            <summary>
            Represents a logger which writes in a file.
            </summary>
        </member>
        <member name="M:Spike.Providers.FileLogger.#ctor(System.String)">
            <summary>
            Constructs a new instance of <see cref="T:Spike.Providers.FileLogger"/>. By default, overwrites the file.
            </summary>
            <param name="file">The file path to write to.</param>
        </member>
        <member name="M:Spike.Providers.FileLogger.#ctor(System.String,System.Boolean)">
            <summary>
            Constructs a new instance of <see cref="T:Spike.Providers.FileLogger"/>.
            </summary>
            <param name="file">The file path to write to.</param>
            <param name="append">Whether the file should be appended and not overwritten.</param>
        </member>
        <member name="M:Spike.Providers.FileLogger.Write(System.Char)">
            <summary>
            Writes a character.
            </summary>
            <param name="ch">Character to write.</param>
        </member>
        <member name="M:Spike.Providers.FileLogger.Write(System.String)">
            <summary>
            Writes a string.
            </summary>
            <param name="str">String to write.</param>
        </member>
        <member name="M:Spike.Providers.FileLogger.WriteLine(System.String)">
            <summary>
            Writes a new line.
            </summary>
            <param name="line">A new line to write.</param>
        </member>
        <member name="P:Spike.Providers.FileLogger.FileName">
            <summary>
            Gets the file name to write the log to.
            </summary>
        </member>
        <member name="P:Spike.Providers.FileLogger.Encoding">
            <summary>
            Gets the encoding used by the file logger.
            </summary>
        </member>
        <member name="T:Spike.Providers.MultiTextWriter">
            <summary>
            Represents a <see cref="T:System.IO.TextWriter"/> which outputs to several child TextWriters.
            </summary>
        </member>
        <member name="M:Spike.Providers.MultiTextWriter.#ctor(System.IO.TextWriter[])">
            <summary>
            Constructs a new <see cref="T:Spike.Providers.MultiTextWriter"/> instance.
            </summary>
            <param name="streams">The streams to write the output into.</param>
        </member>
        <member name="M:Spike.Providers.MultiTextWriter.Add(System.IO.TextWriter)">
            <summary>
            Adds a new <see cref="T:System.IO.TextWriter"/> to the list of writers.
            </summary>
            <param name="tw">The <see cref="T:System.IO.TextWriter"/> to add.</param>
        </member>
        <member name="M:Spike.Providers.MultiTextWriter.Remove(System.IO.TextWriter)">
            <summary>
            Removes a <see cref="T:System.IO.TextWriter"/> from the list of writers.
            </summary>
            <param name="tw">The <see cref="T:System.IO.TextWriter"/> to remove.</param>
        </member>
        <member name="M:Spike.Providers.MultiTextWriter.Write(System.Char)">
            <summary>
            Writes a character.
            </summary>
            <param name="ch">Character to write.</param>
        </member>
        <member name="M:Spike.Providers.MultiTextWriter.WriteLine(System.String)">
            <summary>
            Writes a new line.
            </summary>
            <param name="line">A new line to write.</param>
        </member>
        <member name="M:Spike.Providers.MultiTextWriter.WriteLine(System.String,System.Object[])">
            <summary>
            Writes a new line and applies a String.Format prior to writing.
            </summary>
            <param name="line">A new line to write.</param>
            <param name="args">Format arguments.</param>
        </member>
        <member name="M:Spike.Providers.MultiTextWriter.Write(System.ConsoleColor,System.String)">
            <summary>
            Writes a string with a given console color.
            </summary>
            <param name="color">A <see cref="T:System.ConsoleColor"/> to write the string with.</param>
            <param name="str">The string to write.</param>
        </member>
        <member name="M:Spike.Providers.MultiTextWriter.WriteLine(System.ConsoleColor,System.String)">
            <summary>
            Writes a line with a given console color.
            </summary>
            <param name="color">A <see cref="T:System.ConsoleColor"/> to write the string with.</param>
            <param name="line">The line to write.</param>
        </member>
        <member name="M:Spike.Providers.MultiTextWriter.WriteLine(System.ConsoleColor,System.String,System.Object[])">
            <summary>
            Writes a line with a given console color. Applies a String.Format prior to writing.
            </summary>
            <param name="color">A <see cref="T:System.ConsoleColor"/> to write the string with.</param>
            <param name="format">A format pattern to apply</param>
            <param name="arg">Arguments for the String.Format pattern.</param>
        </member>
        <member name="M:Spike.Providers.MultiTextWriter.WriteLine(System.ConsoleColor,System.String,System.Object)">
            <summary>
            Writes a line with a given console color. Applies a String.Format prior to writing.
            </summary>
            <param name="color">A <see cref="T:System.ConsoleColor"/> to write the string with.</param>
            <param name="format">A format pattern to apply</param>
            <param name="arg0">Argument for the String.Format pattern.</param>
        </member>
        <member name="M:Spike.Providers.MultiTextWriter.WriteLine(System.ConsoleColor,System.String,System.Object,System.Object)">
            <summary>
            Writes a line with a given console color. Applies a String.Format prior to writing.
            </summary>
            <param name="color">A <see cref="T:System.ConsoleColor"/> to write the string with.</param>
            <param name="format">A format pattern to apply</param>
            <param name="arg0">Argument for the String.Format pattern.</param>
            <param name="arg1">Argument for the String.Format pattern.</param>
        </member>
        <member name="M:Spike.Providers.MultiTextWriter.WriteLine(System.ConsoleColor,System.String,System.Object,System.Object,System.Object)">
            <summary>
            Writes a line with a given console color. Applies a String.Format prior to writing.
            </summary>
            <param name="color">A <see cref="T:System.ConsoleColor"/> to write the string with.</param>
            <param name="format">A format pattern to apply</param>
            <param name="arg0">Argument for the String.Format pattern.</param>
            <param name="arg1">Argument for the String.Format pattern.</param>
            <param name="arg2">Argument for the String.Format pattern.</param>
        </member>
        <member name="P:Spike.Providers.MultiTextWriter.Encoding">
            <summary>
            Gets the encoding used by the <see cref="T:Spike.Providers.MultiTextWriter"/>.
            </summary>
        </member>
        <member name="F:Spike.Collections.ArrayList`1.RawCount">
            <summary>
            Number of elements in the array (including freed ones)
            </summary>
        </member>
        <member name="F:Spike.Collections.ArrayList`1.Count">
            <summary>
            Number of used elements in the array
            </summary>
        </member>
        <member name="F:Spike.Collections.ArrayList`1.Items">
            <summary>
            Underlying items array
            </summary>
        </member>
        <member name="M:Spike.Collections.ArrayList`1.Add(`0)">
            <summary>
            Adds the item into a free space in the Items array and returns the handle to the item
            </summary>
            <param name="item">Item to add to Items array</param>
            <returns>Handle to the added item</returns>
        </member>
        <member name="M:Spike.Collections.ArrayList`1.Add(`0@)">
            <summary>
            Adds the item into a free space in the Items array and returns the handle to the item
            </summary>
            <param name="item">Item to add to Items array</param>
            <returns>Handle to the added item</returns>
        </member>
        <member name="M:Spike.Collections.ArrayList`1.AddRange(`0[])">
            <summary>
             Adds a range of items into free spaces in the Items array
            </summary>
            <param name="items">Range of items to add</param>
        </member>
        <member name="M:Spike.Collections.ArrayList`1.ForEach(System.Action{`0})">
            <summary>
            Executes an action for each item in the collection 
            Note: Internally uses a for loop.
            </summary>
            <param name="action">Action to execute</param>
        </member>
        <member name="M:Spike.Collections.ArrayList`1.ForEach(Spike.RefAction{`0})">
            <summary>
            Executes an action for each item in the collection 
            Note: Internally uses a for loop.
            </summary>
            <param name="action">Action to execute, passed by reference</param>
        </member>
        <member name="M:Spike.Collections.ArrayList`1.ForEachWithHandle(System.Action{`0,System.Int32})">
            <summary>
            Executes an action for each item in the collection and passes to the action
            the handle of the element
            </summary>
            <param name="action">Action to execute</param>
        </member>
        <member name="M:Spike.Collections.ArrayList`1.ForEachWithHandle(Spike.RefAction{`0,System.Int32})">
            <summary>
            Executes an action for each item in the collection and passes to the action
            the handle of the element
            </summary>
            <param name="action">Action to execute</param>
        </member>
        <member name="M:Spike.Collections.ArrayList`1.ForEachWithIndex(System.Action{`0,System.Int32})">
            <summary>
            Executes an action for each item in the collection and passes to the action
            the index of the element
            </summary>
            <param name="action">Action to execute</param>
        </member>
        <member name="M:Spike.Collections.ArrayList`1.ForEachWithIndex(Spike.RefAction{`0,System.Int32})">
            <summary>
            Executes an action for each item in the collection and passes to the action
            the index of the element
            </summary>
            <param name="action">Action to execute</param>
        </member>
        <member name="M:Spike.Collections.ArrayList`1.Remove(System.Int32)">
            <summary>
            Removes an item from a collection by its handle
            </summary>
            <param name="handle">Handle of the item to remove</param>
        </member>
        <member name="M:Spike.Collections.ArrayList`1.HasElementAt(System.Int32)">
            <summary>
            Checks whether there is an element in use at a given position
            </summary>
            <param name="handle">The handle to check</param>
            <returns>True if there is an element in this position, otherwise false</returns>
        </member>
        <member name="M:Spike.Collections.ArrayList`1.Clear">
            <summary>
            Clears the list
            </summary>
        </member>
        <member name="M:Spike.Collections.ArrayList`1.Dispose">
            <summary>
            Disposes the object
            </summary>
        </member>
        <member name="F:Spike.Collections.ArrayList`1.ArrayListCursorBehavior.Stop">
            <summary>
            The cursor will stop when it has reached the end (beginning)
            </summary>
        </member>
        <member name="F:Spike.Collections.ArrayList`1.ArrayListCursorBehavior.Loop">
            <summary>
            The cursor will loop when it has reached the end (beginning)
            </summary>
        </member>
        <member name="F:Spike.Collections.ArrayList`1.ArrayListCursor.ArrayRef">
            <summary>
            Underlying items array
            </summary>
        </member>
        <member name="F:Spike.Collections.ArrayList`1.ArrayListCursor.SelectedHandle">
            <summary>
            Currently selected handle
            </summary>
        </member>
        <member name="F:Spike.Collections.ArrayList`1.ArrayListCursor.Behavior">
            <summary>
            Behavior for this cursor
            </summary>
        </member>
        <member name="T:Spike.Providers.ProvidersContainer">
            <summary>
            The implementation of the IOC container. 
            </summary>
        </member>
        <member name="T:Spike.Providers.IIocContainer">
            <summary>
            Represents an IOC (inversion of control) container.
            </summary>
        </member>
        <member name="M:Spike.Providers.IIocContainer.Register(System.String,System.Type,System.Func{Spike.Providers.IIocContainer,System.Object})">
            <summary>
            Adds the function to resolve the unnamed registration of the specified type to the container.
            </summary>
            <param name="type">The type being registered.</param>
            <param name="name">The name of the Registration for this type.  Use to distinguish between different Registrations.</param>
            <param name="func">The function that creates the type. The function takes a single parameter of type Container.</param>
            <returns>An IRegistration that can be used to configure the behavior of the registration.</returns>
        </member>
        <member name="M:Spike.Providers.IIocContainer.Register(System.Type,System.Func{Spike.Providers.IIocContainer,System.Object})">
            <summary>
            Adds the function to resolve the unnamed registration of the specified type to the container.
            </summary>
            <param name="type">The type being registered.</param>
            <param name="func">The function that creates the type. The function takes a single parameter of type Container.</param>
            <returns>An IRegistration that can be used to configure the behavior of the registration.</returns>
        </member>
        <member name="M:Spike.Providers.IIocContainer.Register``1(System.Func{Spike.Providers.IIocContainer,``0})">
            <summary>
            Adds the function to resolve the unnamed registration of the specified type to the container.
            </summary>
            <typeparam name="TType">The type being registered.</typeparam>
            <param name="func">The function that creates the type. The function takes a single parameter of type Container.</param>
            <returns>An IRegistration that can be used to configure the behavior of the registration.</returns>
        </member>
        <member name="M:Spike.Providers.IIocContainer.Register``1(System.String,System.Func{Spike.Providers.IIocContainer,``0})">
            <summary>
            Adds the function to resolve the unnamed registration of the specified type to the container.
            </summary>
            <typeparam name="TType">The type being registered.</typeparam>
            <param name="name">The name of the Registration for this type.  Use to distinguish between different Registrations.</param>
            <param name="func">The function that creates the type. The function takes a single parameter of type Container.</param>
            <returns>An IRegistration that can be used to configure the behavior of the registration.</returns>
        </member>
        <member name="M:Spike.Providers.IIocContainer.RegisterInstance(System.String,System.Type,System.Object)">
            <summary>
            Registers an instance that will be returned whenever the IocContainer resolves the specified type.
            </summary>
            <param name="name">The name this registration will be registered under.</param>
            <param name="type">The type that is being registered for resolution.</param>
            <param name="instance">The instance that will alway be returned when type is resolved.</param>
            <returns>An instance of IRegistration that can be used to configure how the get information about 
            the registration, or change the lifetime manager.</returns>
        </member>
        <member name="M:Spike.Providers.IIocContainer.RegisterInstance(System.Type,System.Object)">
            <summary>
            Registers an instance that will be returned whenever the IocContainer resolves the specified type.
            </summary>
            <param name="type">The type that is being registered for resolution.</param>
            <param name="instance">The instance that will alway be returned when type is resolved.</param>
            <returns>An instance of IRegistration that can be used to configure how the get information about 
            the registration, or change the lifetime manager.</returns>
        </member>
        <member name="M:Spike.Providers.IIocContainer.RegisterInstance``1(System.String,``0)">
            <summary>
            Registers an instance that will be returned whenever the IocContainer resolves the specified type.
            </summary>
            <typeparam name="TType">The type that is being registered for resolution.</typeparam>
            <param name="name">The name this registration will be registered under.</param>
            <param name="instance">The instance that will alway be returned when type is resolved.</param>
            <returns>An instance of IRegistration that can be used to configure how the get information about 
            the registration, or change the lifetime manager.</returns>
        </member>
        <member name="M:Spike.Providers.IIocContainer.RegisterInstance``1(``0)">
            <summary>
            Registers an instance that will be returned whenever the IocContainer resolves the specified type.
            </summary>
            <typeparam name="TType">The type that is being registered for resolution.</typeparam>
            <param name="instance">The instance that will alway be returned when type is resolved.</param>
            <returns>An instance of IRegistration that can be used to configure how the get information about 
            the registration, or change the lifetime manager.</returns>
        </member>
        <member name="M:Spike.Providers.IIocContainer.Unregister(Spike.Providers.IRegistration)">
            <summary>
            Removes a registration from the container.
            </summary>
            <param name="ireg">The registration to remove from the container.</param>
        </member>
        <member name="M:Spike.Providers.IIocContainer.Resolve(System.String,System.Type)">
            <summary>
            Returns an instance of a registered type.
            </summary>
            <param name="type">The type to resolve.</param>
            <param name="name">The name to resolve.</param>
            <returns>An instance of the type.  Throws a KeyNoFoundException if not registered.</returns>
        </member>
        <member name="M:Spike.Providers.IIocContainer.Resolve(System.Type)">
            <summary>
            Returns an instance of a registered type.
            </summary>
            <param name="type">The type to resolve.</param>
            <returns>An instance of the type.  Throws a KeyNoFoundException if not registered.</returns>
        </member>
        <member name="M:Spike.Providers.IIocContainer.Resolve``1">
            <summary>
            Returns an instance of a registered type.
            </summary>
            <typeparam name="TType">The type to resolve</typeparam>
            <returns>An instance of the type.  Throws a KeyNoFoundException if not registered.</returns>
        </member>
        <member name="M:Spike.Providers.IIocContainer.Resolve``1(System.String)">
            <summary>
            Returns an instance of a registered type.
            </summary>
            <typeparam name="TType">The type to resolve.</typeparam>
            <param name="name">The name to resolve.</param>
            <returns>An instance of the type.  Throws a KeyNoFoundException if not registered.</returns>
        </member>
        <member name="M:Spike.Providers.IIocContainer.LazyResolve(System.String,System.Type)">
            <summary>
            Gets a function that resolves the unnamed instance of the type. Used for delaying creating expensive resources until if and when required.
            </summary>
            <param name="type">The type that is to be resolved.</param>
            <param name="name">The name of the registration for type.</param>
            <returns>An instance of the class registered to resolve the type.</returns>
        </member>
        <member name="M:Spike.Providers.IIocContainer.LazyResolve(System.Type)">
            <summary>
            Gets a function that resolves the unnamed instance of the type. Used for delaying creating expensive resources until if and when required.
            </summary>
            <param name="type">The type that is to be resolved.</param>
            <returns>An instance of the class registered to resolve the type.</returns>
        </member>
        <member name="M:Spike.Providers.IIocContainer.LazyResolve``1">
            <summary>
            Gets a function that resolves the unnamed instance of the type. Used for delaying creating expensive resources until if and when required.
            </summary>
            <typeparam name="TType">The type that is to be resolved.</typeparam>
            <returns>An instance of the class registered to resolve the type.</returns>
        </member>
        <member name="M:Spike.Providers.IIocContainer.LazyResolve``1(System.String)">
            <summary>
            Gets a function that resolves the unnamed instance of the type. Used for delaying creating expensive resources until if and when required.
            </summary>
            <typeparam name="TType">The type that is to be resolved.</typeparam>
            <param name="name">The name of the registration for type.</param>
            <returns>An instance of the class registered to resolve the type.</returns>
        </member>
        <member name="M:Spike.Providers.IIocContainer.GetRegistration(System.String,System.Type)">
            <summary>
            Returns an Registration of a registered type.
            </summary>
            <param name="type">The type to get the Registration for.</param>
            <param name="name">The name associated with the named registration to get.</param>
            <returns>An Registration for the type. Throws a KeyNoFoundException if not registered.</returns>
        </member>
        <member name="M:Spike.Providers.IIocContainer.GetRegistration(System.Type)">
            <summary>
            Returns an Registration of a registered type.
            </summary>
            <param name="type">The type to get the Registration for.</param>
            <returns>An Registration for the type. Throws a KeyNoFoundException if not registered.</returns>
        </member>
        <member name="M:Spike.Providers.IIocContainer.GetRegistration``1">
            <summary>
            Returns an Registration of a registered type.
            </summary>
            <typeparam name="TType">The type to get the Registration for.</typeparam>
            <returns>An Registration for the type. Throws a KeyNoFoundException if not registered.</returns>
        </member>
        <member name="M:Spike.Providers.IIocContainer.GetRegistration``1(System.String)">
            <summary>
            Returns an Registration of a registered type.
            </summary>
            <typeparam name="TType">The type to get the Registration for.</typeparam>
            <param name="name">The name associated with the named registration to get.</param>
            <returns>An Registration for the type. Throws a KeyNoFoundException if not registered.</returns>
        </member>
        <member name="M:Spike.Providers.IIocContainer.GetRegistrations(System.Type)">
            <summary>
            Gets all Registrations for the specified type.
            </summary>
            <param name="type">The type for which the Registrations are required.</param>
            <returns>A list of the registration of the specified type.</returns>
        </member>
        <member name="M:Spike.Providers.IIocContainer.GetRegistrations``1">
            <summary>
            Gets all Registrations for the specified type.
            </summary>
            <typeparam name="TType">The type for which the Registrations are required.</typeparam>
            <returns>A list of the registration of the specified type.</returns>
        </member>
        <member name="M:Spike.Providers.IIocContainer.UsesDefaultLifetimeManagerOf(Spike.Providers.ILifetimeManager)">
            <summary>
            Specifies a default lifetime manager to use with this container.
            </summary>
            <param name="lifetimeManager">The lifetime manager to use by default.</param>
            <returns>Returns a reference to this container.</returns>
        </member>
        <member name="P:Spike.Providers.IIocContainer.LifeTimeManager">
            <summary>
            Gets the <see cref="T:Spike.Providers.ILifetimeManager"/> associated with this container.
            </summary>
        </member>
        <member name="M:Spike.Providers.ProvidersContainer.#ctor">
            <summary>
            Initializes a new instance of the ProvidersContainer class.
            </summary>
        </member>
        <member name="M:Spike.Providers.ProvidersContainer.Register``1(System.Func{Spike.Providers.IIocContainer,``0})">
            <summary>
            Adds the function to resolve the unnamed registration of the specified type to the container.
            </summary>
            <typeparam name="TType">The type being registered.</typeparam>
            <param name="func">The function that creates the type. The function takes a single parameter of type Container.</param>
            <returns>An IRegistration that can be used to configure the behavior of the registration.</returns>
        </member>
        <member name="M:Spike.Providers.ProvidersContainer.Register``1(System.String,System.Func{Spike.Providers.IIocContainer,``0})">
            <summary>
            Adds the function to resolve the unnamed registration of the specified type to the container.
            </summary>
            <typeparam name="TType">The type being registered.</typeparam>
            <param name="name">The name of the Registration for this type.  Use to distinguish between different Registrations.</param>
            <param name="func">The function that creates the type. The function takes a single parameter of type Container.</param>
            <returns>An IRegistration that can be used to configure the behavior of the registration.</returns>
        </member>
        <member name="M:Spike.Providers.ProvidersContainer.Register(System.Type,System.Func{Spike.Providers.IIocContainer,System.Object})">
            <summary>
            Adds the function to resolve the unnamed registration of the specified type to the container.
            </summary>
            <param name="type">The type being registered.</param>
            <param name="func">The function that creates the type. The function takes a single parameter of type Container.</param>
            <returns>An IRegistration that can be used to configure the behavior of the registration.</returns>
        </member>
        <member name="M:Spike.Providers.ProvidersContainer.Register(System.String,System.Type,System.Func{Spike.Providers.IIocContainer,System.Object})">
            <summary>
            Adds the function to resolve the unnamed registration of the specified type to the container.
            </summary>
            <param name="type">The type being registered.</param>
            <param name="name">The name of the Registration for this type.  Use to distinguish between different Registrations.</param>
            <param name="func">The function that creates the type. The function takes a single parameter of type Container.</param>
            <returns>An IRegistration that can be used to configure the behavior of the registration.</returns>
        </member>
        <member name="M:Spike.Providers.ProvidersContainer.Register(System.Type,System.Type)">
            <summary>
            Adds the function to resolve the unnamed registration of the specified type to the container. This
            also performs provider initialization and instanciation.
            </summary>
            <param name="providerBaseType">The base type provider.</param>
            <param name="providerType">The type of the provider to instanciate. Must be a sub-class of base type provider.</param>
            <returns>An IRegistration that can be used to configure the behavior of the registration.</returns>
        </member>
        <member name="M:Spike.Providers.ProvidersContainer.Register``1(System.Type)">
            <summary>
            Adds the function to resolve the unnamed registration of the specified type to the container. This
            also performs provider initialization and instanciation.
            </summary>
            <typeparam name="TProviderBaseType">The base type provider</typeparam>
            <param name="providerType">The type of the provider to instanciate. Must be a sub-class of base type provider.</param>
            <returns>An IRegistration that can be used to configure the behavior of the registration.</returns>
        </member>
        <member name="M:Spike.Providers.ProvidersContainer.Register``1(Spike.Provider)">
            <summary>
            Adds the function to resolve the unnamed registration of the specified type to the container. This
            also performs provider initialization and instanciation.
            </summary>
            <typeparam name="TProviderBaseType">The base type provider</typeparam>
            <param name="providerInstance">The instance of the provider. Must be a sub-class of base type provider.</param>
            <returns>An IRegistration that can be used to configure the behavior of the registration.</returns>
        </member>
        <member name="M:Spike.Providers.ProvidersContainer.RegisterInstance``1(``0)">
            <summary>
            Registers an instance that will be returned whenever the IocContainer resolves the specified type.
            </summary>
            <typeparam name="TType">The type that is being registered for resolution.</typeparam>
            <param name="instance">The instance that will alway be returned when type is resolved.</param>
            <returns>An instance of IRegistration that can be used to configure how the get information about 
            the registration, or change the lifetime manager.</returns>
        </member>
        <member name="M:Spike.Providers.ProvidersContainer.RegisterInstance``1(System.String,``0)">
            <summary>
            Registers an instance that will be returned whenever the IocContainer resolves the specified type.
            </summary>
            <typeparam name="TType">The type that is being registered for resolution.</typeparam>
            <param name="name">The name this registration will be registered under.</param>
            <param name="instance">The instance that will alway be returned when type is resolved.</param>
            <returns>An instance of IRegistration that can be used to configure how the get information about 
            the registration, or change the lifetime manager.</returns>
        </member>
        <member name="M:Spike.Providers.ProvidersContainer.RegisterInstance(System.Type,System.Object)">
            <summary>
            Registers an instance that will be returned whenever the IocContainer resolves the specified type.
            </summary>
            <param name="type">The type that is being registered for resolution.</param>
            <param name="instance">The instance that will alway be returned when type is resolved.</param>
            <returns>An instance of IRegistration that can be used to configure how the get information about 
            the registration, or change the lifetime manager.</returns>
        </member>
        <member name="M:Spike.Providers.ProvidersContainer.RegisterInstance(System.String,System.Type,System.Object)">
            <summary>
            Registers an instance that will be returned whenever the IocContainer resolves the specified type.
            </summary>
            <param name="name">The name this registration will be registered under.</param>
            <param name="type">The type that is being registered for resolution.</param>
            <param name="instance">The instance that will alway be returned when type is resolved.</param>
            <returns>An instance of IRegistration that can be used to configure how the get information about 
            the registration, or change the lifetime manager.</returns>
        </member>
        <member name="M:Spike.Providers.ProvidersContainer.Unregister(Spike.Providers.IRegistration)">
            <summary>
            Removes a registration from the container.
            </summary>
            <param name="ireg">The registration to remove from the container.</param>
        </member>
        <member name="M:Spike.Providers.ProvidersContainer.Resolve``1">
            <summary>
            Returns an instance of a registered type.
            </summary>
            <typeparam name="TType">The type to resolve</typeparam>
            <returns>An instance of the type.  Throws a KeyNoFoundException if not registered.</returns>
        </member>
        <member name="M:Spike.Providers.ProvidersContainer.Resolve``1(System.String)">
            <summary>
            Returns an instance of a registered type.
            </summary>
            <typeparam name="TType">The type to resolve.</typeparam>
            <param name="name">The name to resolve.</param>
            <returns>An instance of the type.  Throws a KeyNoFoundException if not registered.</returns>
        </member>
        <member name="M:Spike.Providers.ProvidersContainer.Resolve(System.Type)">
            <summary>
            Returns an instance of a registered type.
            </summary>
            <param name="type">The type to resolve.</param>
            <returns>An instance of the type.  Throws a KeyNoFoundException if not registered.</returns>
        </member>
        <member name="M:Spike.Providers.ProvidersContainer.Resolve(System.String,System.Type)">
            <summary>
            Returns an instance of a registered type.
            </summary>
            <param name="type">The type to resolve.</param>
            <param name="name">The name to resolve.</param>
            <returns>An instance of the type.  Throws a KeyNoFoundException if not registered.</returns>
        </member>
        <member name="M:Spike.Providers.ProvidersContainer.LazyResolve``1">
            <summary>
            Gets a function that resolves the unnamed instance of the type. Used for delaying creating expensive resources until if and when required.
            </summary>
            <typeparam name="TType">The type that is to be resolved.</typeparam>
            <returns>An instance of the class registered to resolve the type.</returns>
        </member>
        <member name="M:Spike.Providers.ProvidersContainer.LazyResolve``1(System.String)">
            <summary>
            Gets a function that resolves the unnamed instance of the type. Used for delaying creating expensive resources until if and when required.
            </summary>
            <typeparam name="TType">The type that is to be resolved.</typeparam>
            <param name="name">The name of the registration for type.</param>
            <returns>An instance of the class registered to resolve the type.</returns>
        </member>
        <member name="M:Spike.Providers.ProvidersContainer.LazyResolve(System.Type)">
            <summary>
            Gets a function that resolves the unnamed instance of the type. Used for delaying creating expensive resources until if and when required.
            </summary>
            <param name="type">The type that is to be resolved.</param>
            <returns>An instance of the class registered to resolve the type.</returns>
        </member>
        <member name="M:Spike.Providers.ProvidersContainer.LazyResolve(System.String,System.Type)">
            <summary>
            Gets a function that resolves the unnamed instance of the type. Used for delaying creating expensive resources until if and when required.
            </summary>
            <param name="type">The type that is to be resolved.</param>
            <param name="name">The name of the registration for type.</param>
            <returns>An instance of the class registered to resolve the type.</returns>
        </member>
        <member name="M:Spike.Providers.ProvidersContainer.GetRegistration``1">
            <summary>
            Returns an Registration of a registered type.
            </summary>
            <typeparam name="TType">The type to get the Registration for.</typeparam>
            <returns>An Registration for the type. Throws a KeyNoFoundException if not registered.</returns>
        </member>
        <member name="M:Spike.Providers.ProvidersContainer.GetRegistration``1(System.String)">
            <summary>
            Returns an Registration of a registered type.
            </summary>
            <typeparam name="TType">The type to get the Registration for.</typeparam>
            <param name="name">The name associated with the named registration to get.</param>
            <returns>An Registration for the type. Throws a KeyNoFoundException if not registered.</returns>
        </member>
        <member name="M:Spike.Providers.ProvidersContainer.GetRegistration(System.Type)">
            <summary>
            Returns an Registration of a registered type.
            </summary>
            <param name="type">The type to get the Registration for.</param>
            <returns>An Registration for the type. Throws a KeyNoFoundException if not registered.</returns>
        </member>
        <member name="M:Spike.Providers.ProvidersContainer.GetRegistration(System.String,System.Type)">
            <summary>
            Returns an Registration of a registered type.
            </summary>
            <param name="type">The type to get the Registration for.</param>
            <param name="name">The name associated with the named registration to get.</param>
            <returns>An Registration for the type. Throws a KeyNoFoundException if not registered.</returns>
        </member>
        <member name="M:Spike.Providers.ProvidersContainer.GetRegistrations``1">
            <summary>
            Gets all Registrations for the specified type.
            </summary>
            <typeparam name="TType">The type for which the Registrations are required.</typeparam>
            <returns>A list of the registration of the specified type.</returns>
        </member>
        <member name="M:Spike.Providers.ProvidersContainer.GetRegistrations(System.Type)">
            <summary>
            Gets all Registrations for the specified type.
            </summary>
            <param name="type">The type for which the Registrations are required.</param>
            <returns>A list of the registration of the specified type.</returns>
        </member>
        <member name="M:Spike.Providers.ProvidersContainer.UsesDefaultLifetimeManagerOf(Spike.Providers.ILifetimeManager)">
            <summary>
            Specifies a default lifetime manager to use with this container.
            </summary>
            <param name="lifetimeManager">The lifetime manager to use by default.</param>
            <returns>Returns a reference to this container.</returns>
        </member>
        <member name="M:Spike.Providers.ProvidersContainer.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
            <remarks>
            Disposes of all Container scoped (ContainerLifetime) instances cached in the type registry, and
            disposes of the type registry itself.
            </remarks>
        </member>
        <member name="M:Spike.Providers.ProvidersContainer.Dispose(System.Boolean)">
            <summary>
            Implements the Disposed(boolean disposing) method of Disposable pattern.
            </summary>
            <param name="disposing">True if disposing.</param>
        </member>
        <member name="M:Spike.Providers.ProvidersContainer.Finalize">
            <summary>
            The finalizer just ensures the container is disposed.
            </summary>
        </member>
        <member name="M:Spike.Providers.ProvidersContainer.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through a collection.
            </summary>
            <returns>Returns an enumerator that iterates through a collection.</returns>
        </member>
        <member name="P:Spike.Providers.ProvidersContainer.LifeTimeManager">
            <summary>
            Gets the <see cref="T:Spike.Providers.ILifetimeManager"/> associated with this container.
            </summary>
        </member>
        <member name="T:Spike.Providers.IInstanceCreator">
            <summary>
            Represents an instance creator that is used to create instances by a registration key.
            </summary>
        </member>
        <member name="M:Spike.Providers.IInstanceCreator.CreateInstance(Spike.Providers.ContainerCaching)">
            <summary>
            Constructs a new instance of an object.
            </summary>
            <param name="containerCache">The container caching policy to use for instance creation.</param>
            <returns>A constructed instance.</returns>
        </member>
        <member name="P:Spike.Providers.IInstanceCreator.Key">
            <summary>
            Gets the registration key.
            </summary>
        </member>
        <member name="T:Spike.Providers.ContainerCaching">
            <summary>
            A container caching policy.
            </summary>
        </member>
        <member name="F:Spike.Providers.ContainerCaching.InstanceCachedInContainer">
            <summary>
            The instance will be cached in the container once it's created.
            </summary>
        </member>
        <member name="F:Spike.Providers.ContainerCaching.InstanceNotCachedInContainer">
            <summary>
            The instance will not be cached in the container once it's created.
            </summary>
        </member>
        <member name="T:Spike.Providers.ILifetimeManager">
            <summary>
            Defines the functionality for Lifetime Managers.  Implementation should instantiate an 
            instance store and use the Registration's Key property to index the data in the store.
            This allows one lifetime manager to service multiple Registrations.
            </summary>
        </member>
        <member name="M:Spike.Providers.ILifetimeManager.GetInstance(Spike.Providers.IInstanceCreator)">
            <summary>
            Get an instance for the registration, using the lifetime manager to cache instance
            as required by the scope of the lifetime manager.
            </summary>
            <param name="creator">
            The instance creator which is used to supply the storage key and create a new instance if
            required.
            </param>
            <returns>The cached or new instance.</returns>
        </member>
        <member name="M:Spike.Providers.ILifetimeManager.InvalidateInstanceCache(Spike.Providers.IRegistration)">
            <summary>
            Invalidate the instance in whatever storage is used by the lifetime manager.
            </summary>
            <param name="registration">
            The registration which is used to supply the storage key and create a new instance if
            required.
            </param>
        </member>
        <member name="T:Spike.Providers.IRegistration">
            <summary>
            This is the result of registering a type in the container.
            </summary>
        </member>
        <member name="M:Spike.Providers.IRegistration.WithLifetimeManager(Spike.Providers.ILifetimeManager)">
            <summary>
            Sets the lifetime manager to be used by this Registration.
            </summary>
            <param name="manager">The ILifetimeManager to use.</param>
            <returns>'this', or the Registration.</returns>
        </member>
        <member name="M:Spike.Providers.IRegistration.InvalidateInstanceCache">
            <summary>
            Invalidates any cached value so that a new instance will be created on
            the next Resolve call.
            </summary>
        </member>
        <member name="P:Spike.Providers.IRegistration.Name">
            <summary>
            Gets the name of the registration.
            </summary>
        </member>
        <member name="P:Spike.Providers.IRegistration.Key">
            <summary>
            Gets the key that is used to identify cached values.
            </summary>
        </member>
        <member name="P:Spike.Providers.IRegistration.ResolvesTo">
            <summary>
            Gets the type the contain will Resolve to when this Registration is used.
            </summary>
        </member>
        <member name="T:Spike.Providers.IRegistrationKey">
            <summary>
            This interface is used internally to identify registrations in the type registry.
            </summary>
        </member>
        <member name="M:Spike.Providers.IRegistrationKey.GetInstanceType">
            <summary>
            Gets the type that this key identifies.
            </summary>
            <returns>Returns the type of the registration.</returns>
        </member>
        <member name="T:Spike.Providers.AlwaysNewLifetime">
            <summary>
            A Lifetime Manager that always returns a new instance.
            </summary>
            <remarks>
            <para>Setting the IocContainer's or Registration's lifetime manager to null is equivalent
            to setting it to an instance of AlwaysNewLifetime. This is the default lifetime manager
            for the IocContainer.</para>
            The one instance can be used for all registrations. 
            </remarks>
            <example>
            The IocContainer default lifetime manager is set to Request lifetime, but one interface
            needs to alway be a new instance.
            <code>
                var requestLifetime   = new RequestLifetime();
                var alwaysNewLifetime = new AlwaysNewLifetime();
                var container         = new ProvidersContainer();
                
                container.UsesDefaultLifetimeManagerOf(requestLifetime);
                container.Register&lt;IMyInterface, MyImplementation&gt;()
            		     .WithLifetimeManager(alwaysNewLifetime);
                container.Register&lt;IMyInterface2, MyImplementation2&gt;()
            		     .WithLifetimeManager(alwaysNewLifetime);
                ...
            </code>
            </example>
        </member>
        <member name="M:Spike.Providers.AlwaysNewLifetime.GetInstance(Spike.Providers.IInstanceCreator)">
            <summary>
            Gets a new instance.
            </summary>
            <param name="creator">The creator (registration) that can create an instance</param>
            <returns>The new instance.</returns>
        </member>
        <member name="M:Spike.Providers.AlwaysNewLifetime.InvalidateInstanceCache(Spike.Providers.IRegistration)">
            <summary>
            Invalidates any cached instances.
            </summary>
            <param name="registration">The registration.</param>
        </member>
        <member name="T:Spike.Providers.ContainerLifetime">
            <summary>
            A lifetime manager that scopes the lifetime of created instances to the lifetime of the
            container.
            </summary>
        </member>
        <member name="M:Spike.Providers.ContainerLifetime.GetInstance(Spike.Providers.IInstanceCreator)">
            <summary>
            Gets the instance from the container instance cache, if available, otherwise creates a new
            instance and caches it.
            </summary>
            <param name="creator">The creator (registration) to create a new instance.</param>
            <returns>The instance.</returns>
        </member>
        <member name="M:Spike.Providers.ContainerLifetime.InvalidateInstanceCache(Spike.Providers.IRegistration)">
            <summary>
            Invalidates the cached value.
            </summary>
            <param name="registration">The Registration which is having its value invalidated</param>
        </member>
        <member name="T:Spike.Mathematics.AngleSingle">
            <summary>
            Represents a unit independant angle using a single-precision floating-point
            internal representation.
            </summary>
        </member>
        <member name="F:Spike.Mathematics.AngleSingle.Degree">
            <summary>
            A value that specifies the size of a single degree.
            </summary>
        </member>
        <member name="F:Spike.Mathematics.AngleSingle.Minute">
            <summary>
            A value that specifies the size of a single minute.
            </summary>
        </member>
        <member name="F:Spike.Mathematics.AngleSingle.Second">
            <summary>
            A value that specifies the size of a single second.
            </summary>
        </member>
        <member name="F:Spike.Mathematics.AngleSingle.Radian">
            <summary>
            A value that specifies the size of a single radian.
            </summary>
        </member>
        <member name="F:Spike.Mathematics.AngleSingle.Milliradian">
            <summary>
            A value that specifies the size of a single milliradian.
            </summary>
        </member>
        <member name="F:Spike.Mathematics.AngleSingle.Gradian">
            <summary>
            A value that specifies the size of a single gradian.
            </summary>
        </member>
        <member name="F:Spike.Mathematics.AngleSingle.radians">
            <summary>
            The internal representation of the angle.
            </summary>
        </member>
        <member name="M:Spike.Mathematics.AngleSingle.#ctor(System.Single,Spike.Mathematics.AngleType)">
            <summary>
            Initializes a new instance of the Spike.Mathematics.AngleSingle structure with the
            given unit dependant angle and unit type.
            </summary>
            <param name="angle">A unit dependant measure of the angle.</param>
            <param name="type">The type of unit the angle argument is.</param>
        </member>
        <member name="M:Spike.Mathematics.AngleSingle.#ctor(System.Single,System.Single)">
            <summary>
            Initializes a new instance of the Spike.Mathematics.AngleSingle structure using the
            arc length formula (θ = s/r).
            </summary>
            <param name="arcLength">The measure of the arc.</param>
            <param name="radius">The radius of the circle.</param>
        </member>
        <member name="M:Spike.Mathematics.AngleSingle.Wrap">
            <summary>
            Wraps this Spike.Mathematics.AngleSingle to be in the range [π, -π].
            </summary>
        </member>
        <member name="M:Spike.Mathematics.AngleSingle.WrapPositive">
            <summary>
            Wraps this Spike.Mathematics.AngleSingle to be in the range [0, 2π).
            </summary>
        </member>
        <member name="M:Spike.Mathematics.AngleSingle.Wrap(Spike.Mathematics.AngleSingle)">
            <summary>
            Wraps the Spike.Mathematics.AngleSingle given in the value argument to be in the range [π, -π].
            </summary>
            <param name="value">A Spike.Mathematics.AngleSingle to wrap.</param>
            <returns>The Spike.Mathematics.AngleSingle that is wrapped.</returns>
        </member>
        <member name="M:Spike.Mathematics.AngleSingle.WrapPositive(Spike.Mathematics.AngleSingle)">
            <summary>
            Wraps the Spike.Mathematics.AngleSingle given in the value argument to be in the range [0, 2π).
            </summary>
            <param name="value">A Spike.Mathematics.AngleSingle to wrap.</param>
            <returns>The Spike.Mathematics.AngleSingle that is wrapped.</returns>
        </member>
        <member name="M:Spike.Mathematics.AngleSingle.Min(Spike.Mathematics.AngleSingle,Spike.Mathematics.AngleSingle)">
            <summary>
            Compares two Spike.Mathematics.AngleSingle instances and returns the smaller angle.
            </summary>
            <param name="left">The first Spike.Mathematics.AngleSingle instance to compare.</param>
            <param name="right">The second Spike.Mathematics.AngleSingle instance to compare.</param>
            <returns>The smaller of the two given Spike.Mathematics.AngleSingle instances.</returns>
        </member>
        <member name="M:Spike.Mathematics.AngleSingle.Max(Spike.Mathematics.AngleSingle,Spike.Mathematics.AngleSingle)">
            <summary>
            Compares two Spike.Mathematics.AngleSingle instances and returns the greater angle.
            </summary>
            <param name="left">The first Spike.Mathematics.AngleSingle instance to compare.</param>
            <param name="right">The second Spike.Mathematics.AngleSingle instance to compare.</param>
            <returns>The greater of the two given Spike.Mathematics.AngleSingle instances.</returns>
        </member>
        <member name="M:Spike.Mathematics.AngleSingle.Add(Spike.Mathematics.AngleSingle,Spike.Mathematics.AngleSingle)">
            <summary>
            Adds two Spike.Mathematics.AngleSingle objects and returns the result.
            </summary>
            <param name="left">The first object to add.</param>
            <param name="right">The second object to add.</param>
            <returns>The value of the two objects added together.</returns>
        </member>
        <member name="M:Spike.Mathematics.AngleSingle.Subtract(Spike.Mathematics.AngleSingle,Spike.Mathematics.AngleSingle)">
            <summary>
            Subtracts two Spike.Mathematics.AngleSingle objects and returns the result.
            </summary>
            <param name="left">The first object to subtract.</param>
            <param name="right">The second object to subtract.</param>
            <returns>The value of the two objects subtracted.</returns>
        </member>
        <member name="M:Spike.Mathematics.AngleSingle.Multiply(Spike.Mathematics.AngleSingle,Spike.Mathematics.AngleSingle)">
            <summary>
            Multiplies two Spike.Mathematics.AngleSingle objects and returns the result.
            </summary>
            <param name="left">The first object to multiply.</param>
            <param name="right">The second object to multiply.</param>
            <returns>The value of the two objects multiplied together.</returns>
        </member>
        <member name="M:Spike.Mathematics.AngleSingle.Divide(Spike.Mathematics.AngleSingle,Spike.Mathematics.AngleSingle)">
            <summary>
            Divides two Spike.Mathematics.AngleSingle objects and returns the result.
            </summary>
            <param name="left">The numerator object.</param>
            <param name="right">The denominator object.</param>
            <returns>The value of the two objects divided.</returns>
        </member>
        <member name="M:Spike.Mathematics.AngleSingle.op_Equality(Spike.Mathematics.AngleSingle,Spike.Mathematics.AngleSingle)">
            <summary>
            Returns a System.Boolean that indicates whether the values of two Spike.Mathematics.Angle
            objects are equal.
            </summary>
            <param name="left">The first object to compare.</param>
            <param name="right">The second object to compare.</param>
            <returns>True if the left and right parameters have the same value; otherwise, false.</returns>
        </member>
        <member name="M:Spike.Mathematics.AngleSingle.op_Inequality(Spike.Mathematics.AngleSingle,Spike.Mathematics.AngleSingle)">
            <summary>
            Returns a System.Boolean that indicates whether the values of two Spike.Mathematics.Angle
            objects are not equal.
            </summary>
            <param name="left">The first object to compare.</param>
            <param name="right">The second object to compare.</param>
            <returns>True if the left and right parameters do not have the same value; otherwise, false.</returns>
        </member>
        <member name="M:Spike.Mathematics.AngleSingle.op_LessThan(Spike.Mathematics.AngleSingle,Spike.Mathematics.AngleSingle)">
            <summary>
            Returns a System.Boolean that indicates whether a Spike.Mathematics.Angle
            object is less than another Spike.Mathematics.AngleSingle object.
            </summary>
            <param name="left">The first object to compare.</param>
            <param name="right">The second object to compare.</param>
            <returns>True if left is less than right; otherwise, false.</returns>
        </member>
        <member name="M:Spike.Mathematics.AngleSingle.op_GreaterThan(Spike.Mathematics.AngleSingle,Spike.Mathematics.AngleSingle)">
            <summary>
            Returns a System.Boolean that indicates whether a Spike.Mathematics.Angle
            object is greater than another Spike.Mathematics.AngleSingle object.
            </summary>
            <param name="left">The first object to compare.</param>
            <param name="right">The second object to compare.</param>
            <returns>True if left is greater than right; otherwise, false.</returns>
        </member>
        <member name="M:Spike.Mathematics.AngleSingle.op_LessThanOrEqual(Spike.Mathematics.AngleSingle,Spike.Mathematics.AngleSingle)">
            <summary>
            Returns a System.Boolean that indicates whether a Spike.Mathematics.Angle
            object is less than or equal to another Spike.Mathematics.AngleSingle object.
            </summary>
            <param name="left">The first object to compare.</param>
            <param name="right">The second object to compare.</param>
            <returns>True if left is less than or equal to right; otherwise, false.</returns>
        </member>
        <member name="M:Spike.Mathematics.AngleSingle.op_GreaterThanOrEqual(Spike.Mathematics.AngleSingle,Spike.Mathematics.AngleSingle)">
            <summary>
            Returns a System.Boolean that indicates whether a Spike.Mathematics.Angle
            object is greater than or equal to another Spike.Mathematics.AngleSingle object.
            </summary>
            <param name="left">The first object to compare.</param>
            <param name="right">The second object to compare.</param>
            <returns>True if left is greater than or equal to right; otherwise, false.</returns>
        </member>
        <member name="M:Spike.Mathematics.AngleSingle.op_UnaryPlus(Spike.Mathematics.AngleSingle)">
            <summary>
            Returns the value of the Spike.Mathematics.AngleSingle operand. (The sign of
            the operand is unchanged.)
            </summary>
            <param name="value">A Spike.Mathematics.AngleSingle object.</param>
            <returns>The value of the value parameter.</returns>
        </member>
        <member name="M:Spike.Mathematics.AngleSingle.op_UnaryNegation(Spike.Mathematics.AngleSingle)">
            <summary>
            Returns the the negated value of the Spike.Mathematics.AngleSingle operand.
            </summary>
            <param name="value">A Spike.Mathematics.AngleSingle object.</param>
            <returns>The negated value of the value parameter.</returns>
        </member>
        <member name="M:Spike.Mathematics.AngleSingle.op_Addition(Spike.Mathematics.AngleSingle,Spike.Mathematics.AngleSingle)">
            <summary>
            Adds two Spike.Mathematics.AngleSingle objects and returns the result.
            </summary>
            <param name="left">The first object to add.</param>
            <param name="right">The second object to add.</param>
            <returns>The value of the two objects added together.</returns>
        </member>
        <member name="M:Spike.Mathematics.AngleSingle.op_Subtraction(Spike.Mathematics.AngleSingle,Spike.Mathematics.AngleSingle)">
            <summary>
            Subtracts two Spike.Mathematics.AngleSingle objects and returns the result.
            </summary>
            <param name="left">The first object to subtract</param>
            <param name="right">The second object to subtract.</param>
            <returns>The value of the two objects subtracted.</returns>
        </member>
        <member name="M:Spike.Mathematics.AngleSingle.op_Multiply(Spike.Mathematics.AngleSingle,Spike.Mathematics.AngleSingle)">
            <summary>
            Multiplies two Spike.Mathematics.AngleSingle objects and returns the result.
            </summary>
            <param name="left">The first object to multiply.</param>
            <param name="right">The second object to multiply.</param>
            <returns>The value of the two objects multiplied together.</returns>
        </member>
        <member name="M:Spike.Mathematics.AngleSingle.op_Division(Spike.Mathematics.AngleSingle,Spike.Mathematics.AngleSingle)">
            <summary>
            Divides two Spike.Mathematics.AngleSingle objects and returns the result.
            </summary>
            <param name="left">The numerator object.</param>
            <param name="right">The denominator object.</param>
            <returns>The value of the two objects divided.</returns>
        </member>
        <member name="M:Spike.Mathematics.AngleSingle.CompareTo(System.Object)">
            <summary>
            Compares this instance to a specified object and returns an integer that
            indicates whether the value of this instance is less than, equal to, or greater
            than the value of the specified object.
            </summary>
            <param name="other">The object to compare.</param>
            <returns>
            A signed integer that indicates the relationship of the current instance
            to the obj parameter. If the value is less than zero, the current instance
            is less than the other. If the value is zero, the current instance is equal
            to the other. If the value is greater than zero, the current instance is
            greater than the other.
            </returns>
        </member>
        <member name="M:Spike.Mathematics.AngleSingle.CompareTo(Spike.Mathematics.AngleSingle)">
            <summary>
            Compares this instance to a second Spike.Mathematics.AngleSingle and returns
            an integer that indicates whether the value of this instance is less than,
            equal to, or greater than the value of the specified object.
            </summary>
            <param name="other">The object to compare.</param>
            <returns>
            A signed integer that indicates the relationship of the current instance
            to the obj parameter. If the value is less than zero, the current instance
            is less than the other. If the value is zero, the current instance is equal
            to the other. If the value is greater than zero, the current instance is
            greater than the other.
            </returns>
        </member>
        <member name="M:Spike.Mathematics.AngleSingle.Equals(Spike.Mathematics.AngleSingle)">
            <summary>
            Returns a value that indicates whether the current instance and a specified
            Spike.Mathematics.AngleSingle object have the same value.
            </summary>
            <param name="other">The object to compare.</param>
            <returns>
            Returns true if this Spike.Mathematics.AngleSingle object and another have the same value;
            otherwise, false.
            </returns>
        </member>
        <member name="M:Spike.Mathematics.AngleSingle.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <returns>
            A <see cref="T:System.String"/> that represents this instance.
            </returns>
        </member>
        <member name="M:Spike.Mathematics.AngleSingle.ToString(System.String)">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <param name="format">The format.</param>
            <returns>
            A <see cref="T:System.String"/> that represents this instance.
            </returns>
        </member>
        <member name="M:Spike.Mathematics.AngleSingle.ToString(System.IFormatProvider)">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <param name="formatProvider">The format provider.</param>
            <returns>
            A <see cref="T:System.String"/> that represents this instance.
            </returns>
        </member>
        <member name="M:Spike.Mathematics.AngleSingle.ToString(System.String,System.IFormatProvider)">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <param name="format">The format.</param>
            <param name="formatProvider">The format provider.</param>
            <returns>
            A <see cref="T:System.String"/> that represents this instance.
            </returns>
        </member>
        <member name="M:Spike.Mathematics.AngleSingle.GetHashCode">
            <summary>
            Returns a hash code for this Spike.Mathematics.AngleSingle instance.
            </summary>
            <returns>A 32-bit signed integer hash code.</returns>
        </member>
        <member name="M:Spike.Mathematics.AngleSingle.Equals(System.Object)">
            <summary>
            Returns a value that indicates whether the current instance and a specified
            object have the same value.
            </summary>
            <param name="obj">The object to compare.</param>
            <returns>
            Returns true if the obj parameter is a Spike.Mathematics.AngleSingle object or a type
            capable of implicit conversion to a Spike.Mathematics.AngleSingle value, and
            its value is equal to the value of the current Spike.Mathematics.Angle
            object; otherwise, false.
            </returns>
        </member>
        <member name="P:Spike.Mathematics.AngleSingle.Revolutions">
            <summary>
            Gets or sets the total number of revolutions this Spike.Mathematics.AngleSingle represents.
            </summary>
        </member>
        <member name="P:Spike.Mathematics.AngleSingle.Degrees">
            <summary>
            Gets or sets the total number of degrees this Spike.Mathematics.AngleSingle represents.
            </summary>
        </member>
        <member name="P:Spike.Mathematics.AngleSingle.Minutes">
            <summary>
            Gets or sets the minutes component of the degrees this Spike.Mathematics.AngleSingle represents.
            When setting the minutes, if the value is in the range (-60, 60) the whole degrees are
            not changed; otherwise, the whole degrees may be changed. Fractional values may set
            the seconds component.
            </summary>
        </member>
        <member name="P:Spike.Mathematics.AngleSingle.Seconds">
            <summary>
            Gets or sets the seconds of the degrees this Spike.Mathematics.AngleSingle represents.
            When setting te seconds, if the value is in the range (-60, 60) the whole minutes
            or whole degrees are not changed; otherwise, the whole minutes or whole degrees
            may be changed.
            </summary>
        </member>
        <member name="P:Spike.Mathematics.AngleSingle.Radians">
            <summary>
            Gets or sets the total number of radians this Spike.Mathematics.AngleSingle represents.
            </summary>
        </member>
        <member name="P:Spike.Mathematics.AngleSingle.Milliradians">
            <summary>
            Gets or sets the total number of milliradians this Spike.Mathematics.AngleSingle represents.
            One milliradian is equal to 1/(2000π).
            </summary>
        </member>
        <member name="P:Spike.Mathematics.AngleSingle.Gradians">
            <summary>
            Gets or sets the total number of gradians this Spike.Mathematics.AngleSingle represents.
            </summary>
        </member>
        <member name="P:Spike.Mathematics.AngleSingle.IsRight">
            <summary>
            Gets a System.Boolean that determines whether this Spike.Mathematics.Angle
            is a right angle (i.e. 90° or π/2).
            </summary>
        </member>
        <member name="P:Spike.Mathematics.AngleSingle.IsStraight">
            <summary>
            Gets a System.Boolean that determines whether this Spike.Mathematics.Angle
            is a straight angle (i.e. 180° or π).
            </summary>
        </member>
        <member name="P:Spike.Mathematics.AngleSingle.IsFullRotation">
            <summary>
            Gets a System.Boolean that determines whether this Spike.Mathematics.Angle
            is a full rotation angle (i.e. 360° or 2π).
            </summary>
        </member>
        <member name="P:Spike.Mathematics.AngleSingle.IsOblique">
            <summary>
            Gets a System.Boolean that determines whether this Spike.Mathematics.Angle
            is an oblique angle (i.e. is not 90° or a multiple of 90°).
            </summary>
        </member>
        <member name="P:Spike.Mathematics.AngleSingle.IsAcute">
            <summary>
            Gets a System.Boolean that determines whether this Spike.Mathematics.Angle
            is an acute angle (i.e. less than 90° but greater than 0°).
            </summary>
        </member>
        <member name="P:Spike.Mathematics.AngleSingle.IsObtuse">
            <summary>
            Gets a System.Boolean that determines whether this Spike.Mathematics.Angle
            is an obtuse angle (i.e. greater than 90° but less than 180°).
            </summary>
        </member>
        <member name="P:Spike.Mathematics.AngleSingle.IsReflex">
            <summary>
            Gets a System.Boolean that determines whether this Spike.Mathematics.Angle
            is a reflex angle (i.e. greater than 180° but less than 360°).
            </summary>
        </member>
        <member name="P:Spike.Mathematics.AngleSingle.Complement">
            <summary>
            Gets a Spike.Mathematics.AngleSingle instance that complements this angle (i.e. the two angles add to 90°).
            </summary>
        </member>
        <member name="P:Spike.Mathematics.AngleSingle.Supplement">
            <summary>
            Gets a Spike.Mathematics.AngleSingle instance that supplements this angle (i.e. the two angles add to 180°).
            </summary>
        </member>
        <member name="P:Spike.Mathematics.AngleSingle.ZeroAngle">
            <summary>
            Gets a new Spike.Mathematics.AngleSingle instance that represents the zero angle (i.e. 0°).
            </summary>
        </member>
        <member name="P:Spike.Mathematics.AngleSingle.RightAngle">
            <summary>
            Gets a new Spike.Mathematics.AngleSingle instance that represents the right angle (i.e. 90° or π/2).
            </summary>
        </member>
        <member name="P:Spike.Mathematics.AngleSingle.StraightAngle">
            <summary>
            Gets a new Spike.Mathematics.AngleSingle instance that represents the straight angle (i.e. 180° or π).
            </summary>
        </member>
        <member name="P:Spike.Mathematics.AngleSingle.FullRotationAngle">
            <summary>
            Gets a new Spike.Mathematics.AngleSingle instance that represents the full rotation angle (i.e. 360° or 2π).
            </summary>
        </member>
        <member name="T:Spike.Mathematics.BoundingBox">
            <summary>
            Represents an axis-aligned bounding box in three dimensional space.
            </summary>
        </member>
        <member name="F:Spike.Mathematics.BoundingBox.Minimum">
            <summary>
            The minimum point of the box.
            </summary>
        </member>
        <member name="F:Spike.Mathematics.BoundingBox.Maximum">
            <summary>
            The maximum point of the box.
            </summary>
        </member>
        <member name="M:Spike.Mathematics.BoundingBox.#ctor(Spike.Mathematics.Vector3,Spike.Mathematics.Vector3)">
            <summary>
            Initializes a new instance of the <see cref="T:Spike.Mathematics.BoundingBox"/> struct.
            </summary>
            <param name="minimum">The minimum vertex of the bounding box.</param>
            <param name="maximum">The maximum vertex of the bounding box.</param>
        </member>
        <member name="M:Spike.Mathematics.BoundingBox.GetCorners">
            <summary>
            Retrieves the eight corners of the bounding box.
            </summary>
            <returns>An array of points representing the eight corners of the bounding box.</returns>
        </member>
        <member name="M:Spike.Mathematics.BoundingBox.Intersects(Spike.Mathematics.Ray@)">
            <summary>
            Determines if there is an intersection between the current object and a <see cref="T:Spike.Mathematics.Ray"/>.
            </summary>
            <param name="ray">The ray to test.</param>
            <returns>Whether the two objects intersected.</returns>
        </member>
        <member name="M:Spike.Mathematics.BoundingBox.Intersects(Spike.Mathematics.Ray@,System.Single@)">
            <summary>
            Determines if there is an intersection between the current object and a <see cref="T:Spike.Mathematics.Ray"/>.
            </summary>
            <param name="ray">The ray to test.</param>
            <param name="distance">When the method completes, contains the distance of the intersection,
            or 0 if there was no intersection.</param>
            <returns>Whether the two objects intersected.</returns>
        </member>
        <member name="M:Spike.Mathematics.BoundingBox.Intersects(Spike.Mathematics.Ray@,Spike.Mathematics.Vector3@)">
            <summary>
            Determines if there is an intersection between the current object and a <see cref="T:Spike.Mathematics.Ray"/>.
            </summary>
            <param name="ray">The ray to test.</param>
            <param name="point">When the method completes, contains the point of intersection,
            or <see cref="F:Spike.Mathematics.Vector3.Zero"/> if there was no intersection.</param>
            <returns>Whether the two objects intersected.</returns>
        </member>
        <member name="M:Spike.Mathematics.BoundingBox.Intersects(Spike.Mathematics.Plane@)">
            <summary>
            Determines if there is an intersection between the current object and a <see cref="T:Spike.Mathematics.Plane"/>.
            </summary>
            <param name="plane">The plane to test.</param>
            <returns>Whether the two objects intersected.</returns>
        </member>
        <member name="M:Spike.Mathematics.BoundingBox.Intersects(Spike.Mathematics.BoundingBox@)">
            <summary>
            Determines if there is an intersection between the current object and a <see cref="T:Spike.Mathematics.BoundingBox"/>.
            </summary>
            <param name="box">The box to test.</param>
            <returns>Whether the two objects intersected.</returns>
        </member>
        <member name="M:Spike.Mathematics.BoundingBox.Intersects(Spike.Mathematics.BoundingSphere@)">
            <summary>
            Determines if there is an intersection between the current object and a <see cref="T:Spike.Mathematics.BoundingSphere"/>.
            </summary>
            <param name="sphere">The sphere to test.</param>
            <returns>Whether the two objects intersected.</returns>
        </member>
        <member name="M:Spike.Mathematics.BoundingBox.Contains(Spike.Mathematics.Vector3@)">
            <summary>
            Determines whether the current objects contains a point.
            </summary>
            <param name="point">The point to test.</param>
            <returns>The type of containment the two objects have.</returns>
        </member>
        <member name="M:Spike.Mathematics.BoundingBox.Contains(Spike.Mathematics.BoundingBox@)">
            <summary>
            Determines whether the current objects contains a <see cref="T:Spike.Mathematics.BoundingBox"/>.
            </summary>
            <param name="box">The box to test.</param>
            <returns>The type of containment the two objects have.</returns>
        </member>
        <member name="M:Spike.Mathematics.BoundingBox.Contains(Spike.Mathematics.BoundingSphere@)">
            <summary>
            Determines whether the current objects contains a <see cref="T:Spike.Mathematics.BoundingSphere"/>.
            </summary>
            <param name="sphere">The sphere to test.</param>
            <returns>The type of containment the two objects have.</returns>
        </member>
        <member name="M:Spike.Mathematics.BoundingBox.FromPoints(Spike.Mathematics.Vector3[],Spike.Mathematics.BoundingBox@)">
            <summary>
            Constructs a <see cref="T:Spike.Mathematics.BoundingBox"/> that fully contains the given points.
            </summary>
            <param name="points">The points that will be contained by the box.</param>
            <param name="result">When the method completes, contains the newly constructed bounding box.</param>
            <exception cref="T:System.ArgumentNullException">Thrown when <paramref name="points"/> is <c>null</c>.</exception>
        </member>
        <member name="M:Spike.Mathematics.BoundingBox.FromPoints(Spike.Mathematics.Vector3[])">
            <summary>
            Constructs a <see cref="T:Spike.Mathematics.BoundingBox"/> that fully contains the given points.
            </summary>
            <param name="points">The points that will be contained by the box.</param>
            <returns>The newly constructed bounding box.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown when <paramref name="points"/> is <c>null</c>.</exception>
        </member>
        <member name="M:Spike.Mathematics.BoundingBox.FromSphere(Spike.Mathematics.BoundingSphere@,Spike.Mathematics.BoundingBox@)">
            <summary>
            Constructs a <see cref="T:Spike.Mathematics.BoundingBox"/> from a given sphere.
            </summary>
            <param name="sphere">The sphere that will designate the extents of the box.</param>
            <param name="result">When the method completes, contains the newly constructed bounding box.</param>
        </member>
        <member name="M:Spike.Mathematics.BoundingBox.FromSphere(Spike.Mathematics.BoundingSphere)">
            <summary>
            Constructs a <see cref="T:Spike.Mathematics.BoundingBox"/> from a given sphere.
            </summary>
            <param name="sphere">The sphere that will designate the extents of the box.</param>
            <returns>The newly constructed bounding box.</returns>
        </member>
        <member name="M:Spike.Mathematics.BoundingBox.Merge(Spike.Mathematics.BoundingBox@,Spike.Mathematics.BoundingBox@,Spike.Mathematics.BoundingBox@)">
            <summary>
            Constructs a <see cref="T:Spike.Mathematics.BoundingBox"/> that is as large as the total combined area of the two specified boxes.
            </summary>
            <param name="value1">The first box to merge.</param>
            <param name="value2">The second box to merge.</param>
            <param name="result">When the method completes, contains the newly constructed bounding box.</param>
        </member>
        <member name="M:Spike.Mathematics.BoundingBox.Merge(Spike.Mathematics.BoundingBox,Spike.Mathematics.BoundingBox)">
            <summary>
            Constructs a <see cref="T:Spike.Mathematics.BoundingBox"/> that is as large as the total combined area of the two specified boxes.
            </summary>
            <param name="value1">The first box to merge.</param>
            <param name="value2">The second box to merge.</param>
            <returns>The newly constructed bounding box.</returns>
        </member>
        <member name="M:Spike.Mathematics.BoundingBox.op_Equality(Spike.Mathematics.BoundingBox,Spike.Mathematics.BoundingBox)">
            <summary>
            Tests for equality between two objects.
            </summary>
            <param name="left">The first value to compare.</param>
            <param name="right">The second value to compare.</param>
            <returns><c>true</c> if <paramref name="left"/> has the same value as <paramref name="right"/>; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:Spike.Mathematics.BoundingBox.op_Inequality(Spike.Mathematics.BoundingBox,Spike.Mathematics.BoundingBox)">
            <summary>
            Tests for inequality between two objects.
            </summary>
            <param name="left">The first value to compare.</param>
            <param name="right">The second value to compare.</param>
            <returns><c>true</c> if <paramref name="left"/> has a different value than <paramref name="right"/>; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:Spike.Mathematics.BoundingBox.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <returns>
            A <see cref="T:System.String"/> that represents this instance.
            </returns>
        </member>
        <member name="M:Spike.Mathematics.BoundingBox.ToString(System.String)">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <param name="format">The format.</param>
            <returns>
            A <see cref="T:System.String"/> that represents this instance.
            </returns>
        </member>
        <member name="M:Spike.Mathematics.BoundingBox.ToString(System.IFormatProvider)">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <param name="formatProvider">The format provider.</param>
            <returns>
            A <see cref="T:System.String"/> that represents this instance.
            </returns>
        </member>
        <member name="M:Spike.Mathematics.BoundingBox.ToString(System.String,System.IFormatProvider)">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <param name="format">The format.</param>
            <param name="formatProvider">The format provider.</param>
            <returns>
            A <see cref="T:System.String"/> that represents this instance.
            </returns>
        </member>
        <member name="M:Spike.Mathematics.BoundingBox.GetHashCode">
            <summary>
            Returns a hash code for this instance.
            </summary>
            <returns>
            A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table. 
            </returns>
        </member>
        <member name="M:Spike.Mathematics.BoundingBox.Equals(Spike.Mathematics.BoundingBox)">
            <summary>
            Determines whether the specified <see cref="T:Spike.Mathematics.Vector4"/> is equal to this instance.
            </summary>
            <param name="value">The <see cref="T:Spike.Mathematics.Vector4"/> to compare with this instance.</param>
            <returns>
            <c>true</c> if the specified <see cref="T:Spike.Mathematics.Vector4"/> is equal to this instance; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Spike.Mathematics.BoundingBox.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object"/> is equal to this instance.
            </summary>
            <param name="value">The <see cref="T:System.Object"/> to compare with this instance.</param>
            <returns>
            <c>true</c> if the specified <see cref="T:System.Object"/> is equal to this instance; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="T:Spike.Mathematics.BoundingSphere">
            <summary>
            Represents a bounding sphere in three dimensional space.
            </summary>
        </member>
        <member name="F:Spike.Mathematics.BoundingSphere.Center">
            <summary>
            The center of the sphere in three dimensional space.
            </summary>
        </member>
        <member name="F:Spike.Mathematics.BoundingSphere.Radius">
            <summary>
            The radious of the sphere.
            </summary>
        </member>
        <member name="M:Spike.Mathematics.BoundingSphere.#ctor(Spike.Mathematics.Vector3,System.Single)">
            <summary>
            Initializes a new instance of the <see cref="T:Spike.Mathematics.BoundingBox"/> struct.
            </summary>
            <param name="center">The center of the sphere in three dimensional space.</param>
            <param name="radius">The radius of the sphere.</param>
        </member>
        <member name="M:Spike.Mathematics.BoundingSphere.Intersects(Spike.Mathematics.Ray@)">
            <summary>
            Determines if there is an intersection between the current object and a <see cref="T:Spike.Mathematics.Ray"/>.
            </summary>
            <param name="ray">The ray to test.</param>
            <returns>Whether the two objects intersected.</returns>
        </member>
        <member name="M:Spike.Mathematics.BoundingSphere.Intersects(Spike.Mathematics.Ray@,System.Single@)">
            <summary>
            Determines if there is an intersection between the current object and a <see cref="T:Spike.Mathematics.Ray"/>.
            </summary>
            <param name="ray">The ray to test.</param>
            <param name="distance">When the method completes, contains the distance of the intersection,
            or 0 if there was no intersection.</param>
            <returns>Whether the two objects intersected.</returns>
        </member>
        <member name="M:Spike.Mathematics.BoundingSphere.Intersects(Spike.Mathematics.Ray@,Spike.Mathematics.Vector3@)">
            <summary>
            Determines if there is an intersection between the current object and a <see cref="T:Spike.Mathematics.Ray"/>.
            </summary>
            <param name="ray">The ray to test.</param>
            <param name="point">When the method completes, contains the point of intersection,
            or <see cref="F:Spike.Mathematics.Vector3.Zero"/> if there was no intersection.</param>
            <returns>Whether the two objects intersected.</returns>
        </member>
        <member name="M:Spike.Mathematics.BoundingSphere.Intersects(Spike.Mathematics.Plane@)">
            <summary>
            Determines if there is an intersection between the current object and a <see cref="T:Spike.Mathematics.Plane"/>.
            </summary>
            <param name="plane">The plane to test.</param>
            <returns>Whether the two objects intersected.</returns>
        </member>
        <member name="M:Spike.Mathematics.BoundingSphere.Intersects(Spike.Mathematics.Vector3@,Spike.Mathematics.Vector3@,Spike.Mathematics.Vector3@)">
            <summary>
            Determines if there is an intersection between the current object and a triangle.
            </summary>
            <param name="vertex1">The first vertex of the triangle to test.</param>
            <param name="vertex2">The second vertex of the triagnle to test.</param>
            <param name="vertex3">The third vertex of the triangle to test.</param>
            <returns>Whether the two objects intersected.</returns>
        </member>
        <member name="M:Spike.Mathematics.BoundingSphere.Intersects(Spike.Mathematics.BoundingBox@)">
            <summary>
            Determines if there is an intersection between the current object and a <see cref="T:Spike.Mathematics.BoundingBox"/>.
            </summary>
            <param name="box">The box to test.</param>
            <returns>Whether the two objects intersected.</returns>
        </member>
        <member name="M:Spike.Mathematics.BoundingSphere.Intersects(Spike.Mathematics.BoundingSphere@)">
            <summary>
            Determines if there is an intersection between the current object and a <see cref="T:Spike.Mathematics.BoundingSphere"/>.
            </summary>
            <param name="sphere">The sphere to test.</param>
            <returns>Whether the two objects intersected.</returns>
        </member>
        <member name="M:Spike.Mathematics.BoundingSphere.Contains(Spike.Mathematics.Vector3@)">
            <summary>
            Determines whether the current objects contains a point.
            </summary>
            <param name="point">The point to test.</param>
            <returns>The type of containment the two objects have.</returns>
        </member>
        <member name="M:Spike.Mathematics.BoundingSphere.Contains(Spike.Mathematics.Vector3@,Spike.Mathematics.Vector3@,Spike.Mathematics.Vector3@)">
            <summary>
            Determines whether the current objects contains a triangle.
            </summary>
            <param name="vertex1">The first vertex of the triangle to test.</param>
            <param name="vertex2">The second vertex of the triagnle to test.</param>
            <param name="vertex3">The third vertex of the triangle to test.</param>
            <returns>The type of containment the two objects have.</returns>
        </member>
        <member name="M:Spike.Mathematics.BoundingSphere.Contains(Spike.Mathematics.BoundingBox@)">
            <summary>
            Determines whether the current objects contains a <see cref="T:Spike.Mathematics.BoundingBox"/>.
            </summary>
            <param name="box">The box to test.</param>
            <returns>The type of containment the two objects have.</returns>
        </member>
        <member name="M:Spike.Mathematics.BoundingSphere.Contains(Spike.Mathematics.BoundingSphere@)">
            <summary>
            Determines whether the current objects contains a <see cref="T:Spike.Mathematics.BoundingSphere"/>.
            </summary>
            <param name="sphere">The sphere to test.</param>
            <returns>The type of containment the two objects have.</returns>
        </member>
        <member name="M:Spike.Mathematics.BoundingSphere.FromPoints(Spike.Mathematics.Vector3[],Spike.Mathematics.BoundingSphere@)">
            <summary>
            Constructs a <see cref="T:Spike.Mathematics.BoundingSphere"/> that fully contains the given points.
            </summary>
            <param name="points">The points that will be contained by the sphere.</param>
            <param name="result">When the method completes, contains the newly constructed bounding sphere.</param>
        </member>
        <member name="M:Spike.Mathematics.BoundingSphere.FromPoints(Spike.Mathematics.Vector3[])">
            <summary>
            Constructs a <see cref="T:Spike.Mathematics.BoundingSphere"/> that fully contains the given points.
            </summary>
            <param name="points">The points that will be contained by the sphere.</param>
            <returns>The newly constructed bounding sphere.</returns>
        </member>
        <member name="M:Spike.Mathematics.BoundingSphere.FromBox(Spike.Mathematics.BoundingBox@,Spike.Mathematics.BoundingSphere@)">
            <summary>
            Constructs a <see cref="T:Spike.Mathematics.BoundingSphere"/> from a given box.
            </summary>
            <param name="box">The box that will designate the extents of the sphere.</param>
            <param name="result">When the method completes, the newly constructed bounding sphere.</param>
        </member>
        <member name="M:Spike.Mathematics.BoundingSphere.FromBox(Spike.Mathematics.BoundingBox)">
            <summary>
            Constructs a <see cref="T:Spike.Mathematics.BoundingSphere"/> from a given box.
            </summary>
            <param name="box">The box that will designate the extents of the sphere.</param>
            <returns>The newly constructed bounding sphere.</returns>
        </member>
        <member name="M:Spike.Mathematics.BoundingSphere.Merge(Spike.Mathematics.BoundingSphere@,Spike.Mathematics.BoundingSphere@,Spike.Mathematics.BoundingSphere@)">
            <summary>
            Constructs a <see cref="T:Spike.Mathematics.BoundingSphere"/> that is the as large as the total combined area of the two specified spheres.
            </summary>
            <param name="value1">The first sphere to merge.</param>
            <param name="value2">The second sphere to merge.</param>
            <param name="result">When the method completes, contains the newly constructed bounding sphere.</param>
        </member>
        <member name="M:Spike.Mathematics.BoundingSphere.Merge(Spike.Mathematics.BoundingSphere,Spike.Mathematics.BoundingSphere)">
            <summary>
            Constructs a <see cref="T:Spike.Mathematics.BoundingSphere"/> that is the as large as the total combined area of the two specified spheres.
            </summary>
            <param name="value1">The first sphere to merge.</param>
            <param name="value2">The second sphere to merge.</param>
            <returns>The newly constructed bounding sphere.</returns>
        </member>
        <member name="M:Spike.Mathematics.BoundingSphere.op_Equality(Spike.Mathematics.BoundingSphere,Spike.Mathematics.BoundingSphere)">
            <summary>
            Tests for equality between two objects.
            </summary>
            <param name="left">The first value to compare.</param>
            <param name="right">The second value to compare.</param>
            <returns><c>true</c> if <paramref name="left"/> has the same value as <paramref name="right"/>; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:Spike.Mathematics.BoundingSphere.op_Inequality(Spike.Mathematics.BoundingSphere,Spike.Mathematics.BoundingSphere)">
            <summary>
            Tests for inequality between two objects.
            </summary>
            <param name="left">The first value to compare.</param>
            <param name="right">The second value to compare.</param>
            <returns><c>true</c> if <paramref name="left"/> has a different value than <paramref name="right"/>; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:Spike.Mathematics.BoundingSphere.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <returns>
            A <see cref="T:System.String"/> that represents this instance.
            </returns>
        </member>
        <member name="M:Spike.Mathematics.BoundingSphere.ToString(System.String)">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <param name="format">The format.</param>
            <returns>
            A <see cref="T:System.String"/> that represents this instance.
            </returns>
        </member>
        <member name="M:Spike.Mathematics.BoundingSphere.ToString(System.IFormatProvider)">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <param name="formatProvider">The format provider.</param>
            <returns>
            A <see cref="T:System.String"/> that represents this instance.
            </returns>
        </member>
        <member name="M:Spike.Mathematics.BoundingSphere.ToString(System.String,System.IFormatProvider)">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <param name="format">The format.</param>
            <param name="formatProvider">The format provider.</param>
            <returns>
            A <see cref="T:System.String"/> that represents this instance.
            </returns>
        </member>
        <member name="M:Spike.Mathematics.BoundingSphere.GetHashCode">
            <summary>
            Returns a hash code for this instance.
            </summary>
            <returns>
            A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table. 
            </returns>
        </member>
        <member name="M:Spike.Mathematics.BoundingSphere.Equals(Spike.Mathematics.BoundingSphere)">
            <summary>
            Determines whether the specified <see cref="T:Spike.Mathematics.Vector4"/> is equal to this instance.
            </summary>
            <param name="value">The <see cref="T:Spike.Mathematics.Vector4"/> to compare with this instance.</param>
            <returns>
            <c>true</c> if the specified <see cref="T:Spike.Mathematics.Vector4"/> is equal to this instance; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Spike.Mathematics.BoundingSphere.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object"/> is equal to this instance.
            </summary>
            <param name="value">The <see cref="T:System.Object"/> to compare with this instance.</param>
            <returns>
            <c>true</c> if the specified <see cref="T:System.Object"/> is equal to this instance; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="T:Spike.Mathematics.Collision">
            <summary>
            Contains static methods to help in determining intersections, containment, etc.
            </summary>
        </member>
        <member name="M:Spike.Mathematics.Collision.ClosestPointPointTriangle(Spike.Mathematics.Vector3@,Spike.Mathematics.Vector3@,Spike.Mathematics.Vector3@,Spike.Mathematics.Vector3@,Spike.Mathematics.Vector3@)">
            <summary>
            Determines the closest point between a point and a triangle.
            </summary>
            <param name="point">The point to test.</param>
            <param name="vertex1">The first vertex to test.</param>
            <param name="vertex2">The second vertex to test.</param>
            <param name="vertex3">The third vertex to test.</param>
            <param name="result">When the method completes, contains the closest point between the two objects.</param>
        </member>
        <member name="M:Spike.Mathematics.Collision.ClosestPointPlanePoint(Spike.Mathematics.Plane@,Spike.Mathematics.Vector3@,Spike.Mathematics.Vector3@)">
            <summary>
            Determines the closest point between a <see cref="T:Spike.Mathematics.Plane"/> and a point.
            </summary>
            <param name="plane">The plane to test.</param>
            <param name="point">The point to test.</param>
            <param name="result">When the method completes, contains the closest point between the two objects.</param>
        </member>
        <member name="M:Spike.Mathematics.Collision.ClosestPointBoxPoint(Spike.Mathematics.BoundingBox@,Spike.Mathematics.Vector3@,Spike.Mathematics.Vector3@)">
            <summary>
            Determines the closest point between a <see cref="T:Spike.Mathematics.BoundingBox"/> and a point.
            </summary>
            <param name="box">The box to test.</param>
            <param name="point">The point to test.</param>
            <param name="result">When the method completes, contains the closest point between the two objects.</param>
        </member>
        <member name="M:Spike.Mathematics.Collision.ClosestPointSpherePoint(Spike.Mathematics.BoundingSphere@,Spike.Mathematics.Vector3@,Spike.Mathematics.Vector3@)">
            <summary>
            Determines the closest point between a <see cref="T:Spike.Mathematics.BoundingSphere"/> and a point.
            </summary>
            <param name="sphere"></param>
            <param name="point">The point to test.</param>
            <param name="result">When the method completes, contains the closest point between the two objects;
            or, if the point is directly in the center of the sphere, contains <see cref="F:Spike.Mathematics.Vector3.Zero"/>.</param>
        </member>
        <member name="M:Spike.Mathematics.Collision.ClosestPointSphereSphere(Spike.Mathematics.BoundingSphere@,Spike.Mathematics.BoundingSphere@,Spike.Mathematics.Vector3@)">
            <summary>
            Determines the closest point between a <see cref="T:Spike.Mathematics.BoundingSphere"/> and a <see cref="T:Spike.Mathematics.BoundingSphere"/>.
            </summary>
            <param name="sphere1">The first sphere to test.</param>
            <param name="sphere2">The second sphere to test.</param>
            <param name="result">When the method completes, contains the closest point between the two objects;
            or, if the point is directly in the center of the sphere, contains <see cref="F:Spike.Mathematics.Vector3.Zero"/>.</param>
            <remarks>
            If the two spheres are overlapping, but not directly ontop of each other, the closest point
            is the 'closest' point of intersection. This can also be considered is the deepest point of
            intersection.
            </remarks>
        </member>
        <member name="M:Spike.Mathematics.Collision.DistancePlanePoint(Spike.Mathematics.Plane@,Spike.Mathematics.Vector3@)">
            <summary>
            Determines the distance between a <see cref="T:Spike.Mathematics.Plane"/> and a point.
            </summary>
            <param name="plane">The plane to test.</param>
            <param name="point">The point to test.</param>
            <returns>The distance between the two objects.</returns>
        </member>
        <member name="M:Spike.Mathematics.Collision.DistanceBoxPoint(Spike.Mathematics.BoundingBox@,Spike.Mathematics.Vector3@)">
            <summary>
            Determines the distance between a <see cref="T:Spike.Mathematics.BoundingBox"/> and a point.
            </summary>
            <param name="box">The box to test.</param>
            <param name="point">The point to test.</param>
            <returns>The distance between the two objects.</returns>
        </member>
        <member name="M:Spike.Mathematics.Collision.DistanceBoxBox(Spike.Mathematics.BoundingBox@,Spike.Mathematics.BoundingBox@)">
            <summary>
            Determines the distance between a <see cref="T:Spike.Mathematics.BoundingBox"/> and a <see cref="T:Spike.Mathematics.BoundingBox"/>.
            </summary>
            <param name="box1">The first box to test.</param>
            <param name="box2">The second box to test.</param>
            <returns>The distance between the two objects.</returns>
        </member>
        <member name="M:Spike.Mathematics.Collision.DistanceSpherePoint(Spike.Mathematics.BoundingSphere@,Spike.Mathematics.Vector3@)">
            <summary>
            Determines the distance between a <see cref="T:Spike.Mathematics.BoundingSphere"/> and a point.
            </summary>
            <param name="sphere">The sphere to test.</param>
            <param name="point">The point to test.</param>
            <returns>The distance between the two objects.</returns>
        </member>
        <member name="M:Spike.Mathematics.Collision.DistanceSphereSphere(Spike.Mathematics.BoundingSphere@,Spike.Mathematics.BoundingSphere@)">
            <summary>
            Determines the distance between a <see cref="T:Spike.Mathematics.BoundingSphere"/> and a <see cref="T:Spike.Mathematics.BoundingSphere"/>.
            </summary>
            <param name="sphere1">The first sphere to test.</param>
            <param name="sphere2">The second sphere to test.</param>
            <returns>The distance between the two objects.</returns>
        </member>
        <member name="M:Spike.Mathematics.Collision.RayIntersectsPoint(Spike.Mathematics.Ray@,Spike.Mathematics.Vector3@)">
            <summary>
            Determines whether there is an intersection between a <see cref="T:Spike.Mathematics.Ray"/> and a point.
            </summary>
            <param name="ray">The ray to test.</param>
            <param name="point">The point to test.</param>
            <returns>Whether the two objects intersect.</returns>
        </member>
        <member name="M:Spike.Mathematics.Collision.RayIntersectsRay(Spike.Mathematics.Ray@,Spike.Mathematics.Ray@,Spike.Mathematics.Vector3@)">
            <summary>
            Determines whether there is an intersection between a <see cref="T:Spike.Mathematics.Ray"/> and a <see cref="T:Spike.Mathematics.Ray"/>.
            </summary>
            <param name="ray1">The first ray to test.</param>
            <param name="ray2">The second ray to test.</param>
            <param name="point">When the method completes, contains the point of intersection,
            or <see cref="F:Spike.Mathematics.Vector3.Zero"/> if there was no intersection.</param>
            <returns>Whether the two objects intersect.</returns>
            <remarks>
            This method performs a ray vs ray intersection test based on the following formula
            from Goldman.
            <code>s = det([o_2 - o_1, d_2, d_1 x d_2]) / ||d_1 x d_2||^2</code>
            <code>t = det([o_2 - o_1, d_1, d_1 x d_2]) / ||d_1 x d_2||^2</code>
            Where o_1 is the position of the first ray, o_2 is the position of the second ray,
            d_1 is the normalized direction of the first ray, d_2 is the normalized direction
            of the second ray, det denotes the determinant of a matrix, x denotes the cross
            product, [ ] denotes a matrix, and || || denotes the length or magnitude of a vector.
            </remarks>
        </member>
        <member name="M:Spike.Mathematics.Collision.RayIntersectsPlane(Spike.Mathematics.Ray@,Spike.Mathematics.Plane@,System.Single@)">
            <summary>
            Determines whether there is an intersection between a <see cref="T:Spike.Mathematics.Ray"/> and a <see cref="T:Spike.Mathematics.Plane"/>.
            </summary>
            <param name="ray">The ray to test.</param>
            <param name="plane">The plane to test.</param>
            <param name="distance">When the method completes, contains the distance of the intersection,
            or 0 if there was no intersection.</param>
            <returns>Whether the two objects intersect.</returns>
        </member>
        <member name="M:Spike.Mathematics.Collision.RayIntersectsPlane(Spike.Mathematics.Ray@,Spike.Mathematics.Plane@,Spike.Mathematics.Vector3@)">
            <summary>
            Determines whether there is an intersection between a <see cref="T:Spike.Mathematics.Ray"/> and a <see cref="T:Spike.Mathematics.Plane"/>.
            </summary>
            <param name="ray">The ray to test.</param>
            <param name="plane">The plane to test</param>
            <param name="point">When the method completes, contains the point of intersection,
            or <see cref="F:Spike.Mathematics.Vector3.Zero"/> if there was no intersection.</param>
            <returns>Whether the two objects intersected.</returns>
        </member>
        <member name="M:Spike.Mathematics.Collision.RayIntersectsTriangle(Spike.Mathematics.Ray@,Spike.Mathematics.Vector3@,Spike.Mathematics.Vector3@,Spike.Mathematics.Vector3@,System.Single@)">
            <summary>
            Determines whether there is an intersection between a <see cref="T:Spike.Mathematics.Ray"/> and a triangle.
            </summary>
            <param name="ray">The ray to test.</param>
            <param name="vertex1">The first vertex of the triangle to test.</param>
            <param name="vertex2">The second vertex of the triagnle to test.</param>
            <param name="vertex3">The third vertex of the triangle to test.</param>
            <param name="distance">When the method completes, contains the distance of the intersection,
            or 0 if there was no intersection.</param>
            <returns>Whether the two objects intersected.</returns>
            <remarks>
            This method tests if the ray intersects either the front or back of the triangle.
            If the ray is parallel to the triangle's plane, no intersection is assumed to have
            happened. If the intersection of the ray and the triangle is behind the origin of
            the ray, no intersection is assumed to have happened. In both cases of assumptions,
            this method returns false.
            </remarks>
        </member>
        <member name="M:Spike.Mathematics.Collision.RayIntersectsTriangle(Spike.Mathematics.Ray@,Spike.Mathematics.Vector3@,Spike.Mathematics.Vector3@,Spike.Mathematics.Vector3@,Spike.Mathematics.Vector3@)">
            <summary>
            Determines whether there is an intersection between a <see cref="T:Spike.Mathematics.Ray"/> and a triangle.
            </summary>
            <param name="ray">The ray to test.</param>
            <param name="vertex1">The first vertex of the triangle to test.</param>
            <param name="vertex2">The second vertex of the triagnle to test.</param>
            <param name="vertex3">The third vertex of the triangle to test.</param>
            <param name="point">When the method completes, contains the point of intersection,
            or <see cref="F:Spike.Mathematics.Vector3.Zero"/> if there was no intersection.</param>
            <returns>Whether the two objects intersected.</returns>
        </member>
        <member name="M:Spike.Mathematics.Collision.RayIntersectsBox(Spike.Mathematics.Ray@,Spike.Mathematics.BoundingBox@,System.Single@)">
            <summary>
            Determines whether there is an intersection between a <see cref="T:Spike.Mathematics.Ray"/> and a <see cref="T:Spike.Mathematics.BoundingBox"/>.
            </summary>
            <param name="ray">The ray to test.</param>
            <param name="box">The box to test.</param>
            <param name="distance">When the method completes, contains the distance of the intersection,
            or 0 if there was no intersection.</param>
            <returns>Whether the two objects intersected.</returns>
        </member>
        <member name="M:Spike.Mathematics.Collision.RayIntersectsBox(Spike.Mathematics.Ray@,Spike.Mathematics.BoundingBox@,Spike.Mathematics.Vector3@)">
            <summary>
            Determines whether there is an intersection between a <see cref="T:Spike.Mathematics.Ray"/> and a <see cref="T:Spike.Mathematics.Plane"/>.
            </summary>
            <param name="ray">The ray to test.</param>
            <param name="box">The box to test.</param>
            <param name="point">When the method completes, contains the point of intersection,
            or <see cref="F:Spike.Mathematics.Vector3.Zero"/> if there was no intersection.</param>
            <returns>Whether the two objects intersected.</returns>
        </member>
        <member name="M:Spike.Mathematics.Collision.RayIntersectsSphere(Spike.Mathematics.Ray@,Spike.Mathematics.BoundingSphere@,System.Single@)">
            <summary>
            Determines whether there is an intersection between a <see cref="T:Spike.Mathematics.Ray"/> and a <see cref="T:Spike.Mathematics.BoundingSphere"/>.
            </summary>
            <param name="ray">The ray to test.</param>
            <param name="sphere">The sphere to test.</param>
            <param name="distance">When the method completes, contains the distance of the intersection,
            or 0 if there was no intersection.</param>
            <returns>Whether the two objects intersected.</returns>
        </member>
        <member name="M:Spike.Mathematics.Collision.RayIntersectsSphere(Spike.Mathematics.Ray@,Spike.Mathematics.BoundingSphere@,Spike.Mathematics.Vector3@)">
            <summary>
            Determines whether there is an intersection between a <see cref="T:Spike.Mathematics.Ray"/> and a <see cref="T:Spike.Mathematics.BoundingSphere"/>. 
            </summary>
            <param name="ray">The ray to test.</param>
            <param name="sphere">The sphere to test.</param>
            <param name="point">When the method completes, contains the point of intersection,
            or <see cref="F:Spike.Mathematics.Vector3.Zero"/> if there was no intersection.</param>
            <returns>Whether the two objects intersected.</returns>
        </member>
        <member name="M:Spike.Mathematics.Collision.PlaneIntersectsPoint(Spike.Mathematics.Plane@,Spike.Mathematics.Vector3@)">
            <summary>
            Determines whether there is an intersection between a <see cref="T:Spike.Mathematics.Plane"/> and a point.
            </summary>
            <param name="plane">The plane to test.</param>
            <param name="point">The point to test.</param>
            <returns>Whether the two objects intersected.</returns>
        </member>
        <member name="M:Spike.Mathematics.Collision.PlaneIntersectsPlane(Spike.Mathematics.Plane@,Spike.Mathematics.Plane@)">
            <summary>
            Determines whether there is an intersection between a <see cref="T:Spike.Mathematics.Plane"/> and a <see cref="T:Spike.Mathematics.Plane"/>.
            </summary>
            <param name="plane1">The first plane to test.</param>
            <param name="plane2">The second plane to test.</param>
            <returns>Whether the two objects intersected.</returns>
        </member>
        <member name="M:Spike.Mathematics.Collision.PlaneIntersectsPlane(Spike.Mathematics.Plane@,Spike.Mathematics.Plane@,Spike.Mathematics.Ray@)">
            <summary>
            Determines whether there is an intersection between a <see cref="T:Spike.Mathematics.Plane"/> and a <see cref="T:Spike.Mathematics.Plane"/>.
            </summary>
            <param name="plane1">The first plane to test.</param>
            <param name="plane2">The second plane to test.</param>
            <param name="line">When the method completes, contains the line of intersection
            as a <see cref="T:Spike.Mathematics.Ray"/>, or a zero ray if there was no intersection.</param>
            <returns>Whether the two objects intersected.</returns>
            <remarks>
            Although a ray is set to have an origin, the ray returned by this method is really
            a line in three dimensions which has no real origin. The ray is considered valid when
            both the positive direction is used and when the negative direction is used.
            </remarks>
        </member>
        <member name="M:Spike.Mathematics.Collision.PlaneIntersectsTriangle(Spike.Mathematics.Plane@,Spike.Mathematics.Vector3@,Spike.Mathematics.Vector3@,Spike.Mathematics.Vector3@)">
            <summary>
            Determines whether there is an intersection between a <see cref="T:Spike.Mathematics.Plane"/> and a triangle.
            </summary>
            <param name="plane">The plane to test.</param>
            <param name="vertex1">The first vertex of the triangle to test.</param>
            <param name="vertex2">The second vertex of the triagnle to test.</param>
            <param name="vertex3">The third vertex of the triangle to test.</param>
            <returns>Whether the two objects intersected.</returns>
        </member>
        <member name="M:Spike.Mathematics.Collision.PlaneIntersectsBox(Spike.Mathematics.Plane@,Spike.Mathematics.BoundingBox@)">
            <summary>
            Determines whether there is an intersection between a <see cref="T:Spike.Mathematics.Plane"/> and a <see cref="T:Spike.Mathematics.BoundingBox"/>.
            </summary>
            <param name="plane">The plane to test.</param>
            <param name="box">The box to test.</param>
            <returns>Whether the two objects intersected.</returns>
        </member>
        <member name="M:Spike.Mathematics.Collision.PlaneIntersectsSphere(Spike.Mathematics.Plane@,Spike.Mathematics.BoundingSphere@)">
            <summary>
            Determines whether there is an intersection between a <see cref="T:Spike.Mathematics.Plane"/> and a <see cref="T:Spike.Mathematics.BoundingSphere"/>.
            </summary>
            <param name="plane">The plane to test.</param>
            <param name="sphere">The sphere to test.</param>
            <returns>Whether the two objects intersected.</returns>
        </member>
        <member name="M:Spike.Mathematics.Collision.BoxIntersectsBox(Spike.Mathematics.BoundingBox@,Spike.Mathematics.BoundingBox@)">
            <summary>
            Determines whether there is an intersection between a <see cref="T:Spike.Mathematics.BoundingBox"/> and a <see cref="T:Spike.Mathematics.BoundingBox"/>.
            </summary>
            <param name="box1">The first box to test.</param>
            <param name="box2">The second box to test.</param>
            <returns>Whether the two objects intersected.</returns>
        </member>
        <member name="M:Spike.Mathematics.Collision.BoxIntersectsSphere(Spike.Mathematics.BoundingBox@,Spike.Mathematics.BoundingSphere@)">
            <summary>
            Determines whether there is an intersection between a <see cref="T:Spike.Mathematics.BoundingBox"/> and a <see cref="T:Spike.Mathematics.BoundingSphere"/>.
            </summary>
            <param name="box">The box to test.</param>
            <param name="sphere">The sphere to test.</param>
            <returns>Whether the two objects intersected.</returns>
        </member>
        <member name="M:Spike.Mathematics.Collision.SphereIntersectsTriangle(Spike.Mathematics.BoundingSphere@,Spike.Mathematics.Vector3@,Spike.Mathematics.Vector3@,Spike.Mathematics.Vector3@)">
            <summary>
            Determines whether there is an intersection between a <see cref="T:Spike.Mathematics.BoundingSphere"/> and a triangle.
            </summary>
            <param name="sphere">The sphere to test.</param>
            <param name="vertex1">The first vertex of the triangle to test.</param>
            <param name="vertex2">The second vertex of the triagnle to test.</param>
            <param name="vertex3">The third vertex of the triangle to test.</param>
            <returns>Whether the two objects intersected.</returns>
        </member>
        <member name="M:Spike.Mathematics.Collision.SphereIntersectsSphere(Spike.Mathematics.BoundingSphere@,Spike.Mathematics.BoundingSphere@)">
            <summary>
            Determines whether there is an intersection between a <see cref="T:Spike.Mathematics.BoundingSphere"/> and a <see cref="T:Spike.Mathematics.BoundingSphere"/>.
            </summary>
            <param name="sphere1">First sphere to test.</param>
            <param name="sphere2">Second sphere to test.</param>
            <returns>Whether the two objects intersected.</returns>
        </member>
        <member name="M:Spike.Mathematics.Collision.BoxContainsPoint(Spike.Mathematics.BoundingBox@,Spike.Mathematics.Vector3@)">
            <summary>
            Determines whether a <see cref="T:Spike.Mathematics.BoundingBox"/> contains a point.
            </summary>
            <param name="box">The box to test.</param>
            <param name="point">The point to test.</param>
            <returns>The type of containment the two objects have.</returns>
        </member>
        <member name="M:Spike.Mathematics.Collision.BoxContainsBox(Spike.Mathematics.BoundingBox@,Spike.Mathematics.BoundingBox@)">
            <summary>
            Determines whether a <see cref="T:Spike.Mathematics.BoundingBox"/> contains a <see cref="T:Spike.Mathematics.BoundingBox"/>.
            </summary>
            <param name="box1">The first box to test.</param>
            <param name="box2">The second box to test.</param>
            <returns>The type of containment the two objects have.</returns>
        </member>
        <member name="M:Spike.Mathematics.Collision.BoxContainsSphere(Spike.Mathematics.BoundingBox@,Spike.Mathematics.BoundingSphere@)">
            <summary>
            Determines whether a <see cref="T:Spike.Mathematics.BoundingBox"/> contains a <see cref="T:Spike.Mathematics.BoundingSphere"/>.
            </summary>
            <param name="box">The box to test.</param>
            <param name="sphere">The sphere to test.</param>
            <returns>The type of containment the two objects have.</returns>
        </member>
        <member name="M:Spike.Mathematics.Collision.SphereContainsPoint(Spike.Mathematics.BoundingSphere@,Spike.Mathematics.Vector3@)">
            <summary>
            Determines whether a <see cref="T:Spike.Mathematics.BoundingSphere"/> contains a point.
            </summary>
            <param name="sphere">The sphere to test.</param>
            <param name="point">The point to test.</param>
            <returns>The type of containment the two objects have.</returns>
        </member>
        <member name="M:Spike.Mathematics.Collision.SphereContainsTriangle(Spike.Mathematics.BoundingSphere@,Spike.Mathematics.Vector3@,Spike.Mathematics.Vector3@,Spike.Mathematics.Vector3@)">
            <summary>
            Determines whether a <see cref="T:Spike.Mathematics.BoundingSphere"/> contains a triangle.
            </summary>
            <param name="sphere">The sphere to test.</param>
            <param name="vertex1">The first vertex of the triangle to test.</param>
            <param name="vertex2">The second vertex of the triagnle to test.</param>
            <param name="vertex3">The third vertex of the triangle to test.</param>
            <returns>The type of containment the two objects have.</returns>
        </member>
        <member name="M:Spike.Mathematics.Collision.SphereContainsBox(Spike.Mathematics.BoundingSphere@,Spike.Mathematics.BoundingBox@)">
            <summary>
            Determines whether a <see cref="T:Spike.Mathematics.BoundingSphere"/> contains a <see cref="T:Spike.Mathematics.BoundingBox"/>.
            </summary>
            <param name="sphere">The sphere to test.</param>
            <param name="box">The box to test.</param>
            <returns>The type of containment the two objects have.</returns>
        </member>
        <member name="M:Spike.Mathematics.Collision.SphereContainsSphere(Spike.Mathematics.BoundingSphere@,Spike.Mathematics.BoundingSphere@)">
            <summary>
            Determines whether a <see cref="T:Spike.Mathematics.BoundingSphere"/> contains a <see cref="T:Spike.Mathematics.BoundingSphere"/>.
            </summary>
            <param name="sphere1">The first sphere to test.</param>
            <param name="sphere2">The second sphere to test.</param>
            <returns>The type of containment the two objects have.</returns>
        </member>
        <member name="T:Spike.Mathematics.Color3">
            <summary>
            Represents a color in the form of rgb.
            </summary>
        </member>
        <member name="F:Spike.Mathematics.Color3.Red">
            <summary>
            The red component of the color.
            </summary>
        </member>
        <member name="F:Spike.Mathematics.Color3.Green">
            <summary>
            The green component of the color.
            </summary>
        </member>
        <member name="F:Spike.Mathematics.Color3.Blue">
            <summary>
            The blue component of the color.
            </summary>
        </member>
        <member name="M:Spike.Mathematics.Color3.#ctor(System.Single)">
            <summary>
            Initializes a new instance of the <see cref="T:Spike.Mathematics.Color3"/> struct.
            </summary>
            <param name="value">The value that will be assigned to all components.</param>
        </member>
        <member name="M:Spike.Mathematics.Color3.#ctor(System.Single,System.Single,System.Single)">
            <summary>
            Initializes a new instance of the <see cref="T:Spike.Mathematics.Color3"/> struct.
            </summary>
            <param name="red">The red component of the color.</param>
            <param name="green">The green component of the color.</param>
            <param name="blue">The blue component of the color.</param>
        </member>
        <member name="M:Spike.Mathematics.Color3.#ctor(Spike.Mathematics.Vector3)">
            <summary>
            Initializes a new instance of the <see cref="T:Spike.Mathematics.Color3"/> struct.
            </summary>
            <param name="value">The red, green, and blue components of the color.</param>
        </member>
        <member name="M:Spike.Mathematics.Color3.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Spike.Mathematics.Color3"/> struct.
            </summary>
            <param name="rgb">A packed integer containing all three color components.
            The alpha component is ignored.</param>
        </member>
        <member name="M:Spike.Mathematics.Color3.#ctor(System.Single[])">
            <summary>
            Initializes a new instance of the <see cref="T:Spike.Mathematics.Color3"/> struct.
            </summary>
            <param name="values">The values to assign to the red, green, and blue components of the color. This must be an array with three elements.</param>
            <exception cref="T:System.ArgumentNullException">Thrown when <paramref name="values"/> is <c>null</c>.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown when <paramref name="values"/> contains more or less than four elements.</exception>
        </member>
        <member name="M:Spike.Mathematics.Color3.ToRgb">
            <summary>
            Converts the color into a packed integer.
            </summary>
            <returns>A packed integer containing all three color components.
            The alpha channel is set to 255.</returns>
        </member>
        <member name="M:Spike.Mathematics.Color3.ToVector3">
            <summary>
            Converts the color into a three component vector.
            </summary>
            <returns>A three component vector containing the red, green, and blue components of the color.</returns>
        </member>
        <member name="M:Spike.Mathematics.Color3.ToArray">
            <summary>
            Creates an array containing the elements of the color.
            </summary>
            <returns>A three-element array containing the components of the color.</returns>
        </member>
        <member name="M:Spike.Mathematics.Color3.Add(Spike.Mathematics.Color3@,Spike.Mathematics.Color3@,Spike.Mathematics.Color3@)">
            <summary>
            Adds two colors.
            </summary>
            <param name="left">The first color to add.</param>
            <param name="right">The second color to add.</param>
            <param name="result">When the method completes, completes the sum of the two colors.</param>
        </member>
        <member name="M:Spike.Mathematics.Color3.Add(Spike.Mathematics.Color3,Spike.Mathematics.Color3)">
            <summary>
            Adds two colors.
            </summary>
            <param name="left">The first color to add.</param>
            <param name="right">The second color to add.</param>
            <returns>The sum of the two colors.</returns>
        </member>
        <member name="M:Spike.Mathematics.Color3.Subtract(Spike.Mathematics.Color3@,Spike.Mathematics.Color3@,Spike.Mathematics.Color3@)">
            <summary>
            Subtracts two colors.
            </summary>
            <param name="left">The first color to subtract.</param>
            <param name="right">The second color to subtract.</param>
            <param name="result">WHen the method completes, contains the difference of the two colors.</param>
        </member>
        <member name="M:Spike.Mathematics.Color3.Subtract(Spike.Mathematics.Color3,Spike.Mathematics.Color3)">
            <summary>
            Subtracts two colors.
            </summary>
            <param name="left">The first color to subtract.</param>
            <param name="right">The second color to subtract</param>
            <returns>The difference of the two colors.</returns>
        </member>
        <member name="M:Spike.Mathematics.Color3.Modulate(Spike.Mathematics.Color3@,Spike.Mathematics.Color3@,Spike.Mathematics.Color3@)">
            <summary>
            Modulates two colors.
            </summary>
            <param name="left">The first color to modulate.</param>
            <param name="right">The second color to modulate.</param>
            <param name="result">When the method completes, contains the modulated color.</param>
        </member>
        <member name="M:Spike.Mathematics.Color3.Modulate(Spike.Mathematics.Color3,Spike.Mathematics.Color3)">
            <summary>
            Modulates two colors.
            </summary>
            <param name="left">The first color to modulate.</param>
            <param name="right">The second color to modulate.</param>
            <returns>The modulated color.</returns>
        </member>
        <member name="M:Spike.Mathematics.Color3.Scale(Spike.Mathematics.Color3@,System.Single,Spike.Mathematics.Color3@)">
            <summary>
            Scales a color.
            </summary>
            <param name="value">The color to scale.</param>
            <param name="scale">The amount by which to scale.</param>
            <param name="result">When the method completes, contains the scaled color.</param>
        </member>
        <member name="M:Spike.Mathematics.Color3.Scale(Spike.Mathematics.Color3,System.Single)">
            <summary>
            Scales a color.
            </summary>
            <param name="value">The color to scale.</param>
            <param name="scale">The amount by which to scale.</param>
            <returns>The scaled color.</returns>
        </member>
        <member name="M:Spike.Mathematics.Color3.Negate(Spike.Mathematics.Color3@,Spike.Mathematics.Color3@)">
            <summary>
            Negates a color.
            </summary>
            <param name="value">The color to negate.</param>
            <param name="result">When the method completes, contains the negated color.</param>
        </member>
        <member name="M:Spike.Mathematics.Color3.Negate(Spike.Mathematics.Color3)">
            <summary>
            Negates a color.
            </summary>
            <param name="value">The color to negate.</param>
            <returns>The negated color.</returns>
        </member>
        <member name="M:Spike.Mathematics.Color3.Clamp(Spike.Mathematics.Color3@,Spike.Mathematics.Color3@,Spike.Mathematics.Color3@,Spike.Mathematics.Color3@)">
            <summary>
            Restricts a value to be within a specified range.
            </summary>
            <param name="value">The value to clamp.</param>
            <param name="min">The minimum value.</param>
            <param name="max">The maximum value.</param>
            <param name="result">When the method completes, contains the clamped value.</param>
        </member>
        <member name="M:Spike.Mathematics.Color3.Clamp(Spike.Mathematics.Color3,Spike.Mathematics.Color3,Spike.Mathematics.Color3)">
            <summary>
            Restricts a value to be within a specified range.
            </summary>
            <param name="value">The value to clamp.</param>
            <param name="min">The minimum value.</param>
            <param name="max">The maximum value.</param>
            <returns>The clamped value.</returns>
        </member>
        <member name="M:Spike.Mathematics.Color3.Lerp(Spike.Mathematics.Color3@,Spike.Mathematics.Color3@,System.Single,Spike.Mathematics.Color3@)">
            <summary>
            Performs a linear interpolation between two colors.
            </summary>
            <param name="start">Start color.</param>
            <param name="end">End color.</param>
            <param name="amount">Value between 0 and 1 indicating the weight of <paramref name="end"/>.</param>
            <param name="result">When the method completes, contains the linear interpolation of the two colors.</param>
            <remarks>
            This method performs the linear interpolation based on the following formula.
            <code>start + (end - start) * amount</code>
            Passing <paramref name="amount"/> a value of 0 will cause <paramref name="start"/> to be returned; a value of 1 will cause <paramref name="end"/> to be returned. 
            </remarks>
        </member>
        <member name="M:Spike.Mathematics.Color3.Lerp(Spike.Mathematics.Color3,Spike.Mathematics.Color3,System.Single)">
            <summary>
            Performs a linear interpolation between two colors.
            </summary>
            <param name="start">Start color.</param>
            <param name="end">End color.</param>
            <param name="amount">Value between 0 and 1 indicating the weight of <paramref name="end"/>.</param>
            <returns>The linear interpolation of the two colors.</returns>
            <remarks>
            This method performs the linear interpolation based on the following formula.
            <code>start + (end - start) * amount</code>
            Passing <paramref name="amount"/> a value of 0 will cause <paramref name="start"/> to be returned; a value of 1 will cause <paramref name="end"/> to be returned. 
            </remarks>
        </member>
        <member name="M:Spike.Mathematics.Color3.SmoothStep(Spike.Mathematics.Color3@,Spike.Mathematics.Color3@,System.Single,Spike.Mathematics.Color3@)">
            <summary>
            Performs a cubic interpolation between two colors.
            </summary>
            <param name="start">Start color.</param>
            <param name="end">End color.</param>
            <param name="amount">Value between 0 and 1 indicating the weight of <paramref name="end"/>.</param>
            <param name="result">When the method completes, contains the cubic interpolation of the two colors.</param>
        </member>
        <member name="M:Spike.Mathematics.Color3.SmoothStep(Spike.Mathematics.Color3,Spike.Mathematics.Color3,System.Single)">
            <summary>
            Performs a cubic interpolation between two colors.
            </summary>
            <param name="start">Start color.</param>
            <param name="end">End color.</param>
            <param name="amount">Value between 0 and 1 indicating the weight of <paramref name="end"/>.</param>
            <returns>The cubic interpolation of the two colors.</returns>
        </member>
        <member name="M:Spike.Mathematics.Color3.Max(Spike.Mathematics.Color3@,Spike.Mathematics.Color3@,Spike.Mathematics.Color3@)">
            <summary>
            Returns a color containing the smallest components of the specified colorss.
            </summary>
            <param name="left">The first source color.</param>
            <param name="right">The second source color.</param>
            <param name="result">When the method completes, contains an new color composed of the largest components of the source colorss.</param>
        </member>
        <member name="M:Spike.Mathematics.Color3.Max(Spike.Mathematics.Color3,Spike.Mathematics.Color3)">
            <summary>
            Returns a color containing the largest components of the specified colorss.
            </summary>
            <param name="left">The first source color.</param>
            <param name="right">The second source color.</param>
            <returns>A color containing the largest components of the source colors.</returns>
        </member>
        <member name="M:Spike.Mathematics.Color3.Min(Spike.Mathematics.Color3@,Spike.Mathematics.Color3@,Spike.Mathematics.Color3@)">
            <summary>
            Returns a color containing the smallest components of the specified colors.
            </summary>
            <param name="left">The first source color.</param>
            <param name="right">The second source color.</param>
            <param name="result">When the method completes, contains an new color composed of the smallest components of the source colors.</param>
        </member>
        <member name="M:Spike.Mathematics.Color3.Min(Spike.Mathematics.Color3,Spike.Mathematics.Color3)">
            <summary>
            Returns a color containing the smallest components of the specified colors.
            </summary>
            <param name="left">The first source color.</param>
            <param name="right">The second source color.</param>
            <returns>A color containing the smallest components of the source colors.</returns>
        </member>
        <member name="M:Spike.Mathematics.Color3.AdjustContrast(Spike.Mathematics.Color3@,System.Single,Spike.Mathematics.Color3@)">
            <summary>
            Adjusts the contrast of a color.
            </summary>
            <param name="value">The color whose contrast is to be adjusted.</param>
            <param name="contrast">The amount by which to adjust the contrast.</param>
            <param name="result">When the method completes, contains the adjusted color.</param>
        </member>
        <member name="M:Spike.Mathematics.Color3.AdjustContrast(Spike.Mathematics.Color3,System.Single)">
            <summary>
            Adjusts the contrast of a color.
            </summary>
            <param name="value">The color whose contrast is to be adjusted.</param>
            <param name="contrast">The amount by which to adjust the contrast.</param>
            <returns>The adjusted color.</returns>
        </member>
        <member name="M:Spike.Mathematics.Color3.AdjustSaturation(Spike.Mathematics.Color3@,System.Single,Spike.Mathematics.Color3@)">
            <summary>
            Adjusts the saturation of a color.
            </summary>
            <param name="value">The color whose saturation is to be adjusted.</param>
            <param name="saturation">The amount by which to adjust the saturation.</param>
            <param name="result">When the method completes, contains the adjusted color.</param>
        </member>
        <member name="M:Spike.Mathematics.Color3.AdjustSaturation(Spike.Mathematics.Color3,System.Single)">
            <summary>
            Adjusts the saturation of a color.
            </summary>
            <param name="value">The color whose saturation is to be adjusted.</param>
            <param name="saturation">The amount by which to adjust the saturation.</param>
            <returns>The adjusted color.</returns>
        </member>
        <member name="M:Spike.Mathematics.Color3.op_Addition(Spike.Mathematics.Color3,Spike.Mathematics.Color3)">
            <summary>
            Adds two colors.
            </summary>
            <param name="left">The first color to add.</param>
            <param name="right">The second color to add.</param>
            <returns>The sum of the two colors.</returns>
        </member>
        <member name="M:Spike.Mathematics.Color3.op_UnaryPlus(Spike.Mathematics.Color3)">
            <summary>
            Assert a color (return it unchanged).
            </summary>
            <param name="value">The color to assert (unchange).</param>
            <returns>The asserted (unchanged) color.</returns>
        </member>
        <member name="M:Spike.Mathematics.Color3.op_Subtraction(Spike.Mathematics.Color3,Spike.Mathematics.Color3)">
            <summary>
            Subtracts two colors.
            </summary>
            <param name="left">The first color to subtract.</param>
            <param name="right">The second color to subtract.</param>
            <returns>The difference of the two colors.</returns>
        </member>
        <member name="M:Spike.Mathematics.Color3.op_UnaryNegation(Spike.Mathematics.Color3)">
            <summary>
            Negates a color.
            </summary>
            <param name="value">The color to negate.</param>
            <returns>A negated color.</returns>
        </member>
        <member name="M:Spike.Mathematics.Color3.op_Multiply(System.Single,Spike.Mathematics.Color3)">
            <summary>
            Scales a color.
            </summary>
            <param name="scale">The factor by which to scale the color.</param>
            <param name="value">The color to scale.</param>
            <returns>The scaled color.</returns>
        </member>
        <member name="M:Spike.Mathematics.Color3.op_Multiply(Spike.Mathematics.Color3,System.Single)">
            <summary>
            Scales a color.
            </summary>
            <param name="value">The factor by which to scale the color.</param>
            <param name="scale">The color to scale.</param>
            <returns>The scaled color.</returns>
        </member>
        <member name="M:Spike.Mathematics.Color3.op_Multiply(Spike.Mathematics.Color3,Spike.Mathematics.Color3)">
            <summary>
            Modulates two colors.
            </summary>
            <param name="left">The first color to modulate.</param>
            <param name="right">The second color to modulate.</param>
            <returns>The modulated color.</returns>
        </member>
        <member name="M:Spike.Mathematics.Color3.op_Equality(Spike.Mathematics.Color3,Spike.Mathematics.Color3)">
            <summary>
            Tests for equality between two objects.
            </summary>
            <param name="left">The first value to compare.</param>
            <param name="right">The second value to compare.</param>
            <returns><c>true</c> if <paramref name="left"/> has the same value as <paramref name="right"/>; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:Spike.Mathematics.Color3.op_Inequality(Spike.Mathematics.Color3,Spike.Mathematics.Color3)">
            <summary>
            Tests for inequality between two objects.
            </summary>
            <param name="left">The first value to compare.</param>
            <param name="right">The second value to compare.</param>
            <returns><c>true</c> if <paramref name="left"/> has a different value than <paramref name="right"/>; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:Spike.Mathematics.Color3.op_Explicit(Spike.Mathematics.Color3)~Spike.Mathematics.Color4">
            <summary>
            Performs an explicit conversion from <see cref="T:Spike.Mathematics.Color3"/> to <see cref="T:Spike.Mathematics.Color4"/>.
            </summary>
            <param name="value">The value.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="M:Spike.Mathematics.Color3.op_Explicit(Spike.Mathematics.Color3)~Spike.Mathematics.Vector3">
            <summary>
            Performs an explicit conversion from <see cref="T:Spike.Mathematics.Color3"/> to <see cref="T:Spike.Mathematics.Vector3"/>.
            </summary>
            <param name="value">The value.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="M:Spike.Mathematics.Color3.op_Explicit(Spike.Mathematics.Vector3)~Spike.Mathematics.Color3">
            <summary>
            Performs an explicit conversion from <see cref="T:Spike.Mathematics.Vector3"/> to <see cref="T:Spike.Mathematics.Color3"/>.
            </summary>
            <param name="value">The value.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="M:Spike.Mathematics.Color3.op_Explicit(System.Int32)~Spike.Mathematics.Color3">
            <summary>
            Performs an explicit conversion from <see cref="T:System.Int32"/> to <see cref="T:Spike.Mathematics.Color3"/>.
            </summary>
            <param name="value">The value.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="M:Spike.Mathematics.Color3.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <returns>
            A <see cref="T:System.String"/> that represents this instance.
            </returns>
        </member>
        <member name="M:Spike.Mathematics.Color3.ToString(System.String)">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <param name="format">The format.</param>
            <returns>
            A <see cref="T:System.String"/> that represents this instance.
            </returns>
        </member>
        <member name="M:Spike.Mathematics.Color3.ToString(System.IFormatProvider)">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <param name="formatProvider">The format provider.</param>
            <returns>
            A <see cref="T:System.String"/> that represents this instance.
            </returns>
        </member>
        <member name="M:Spike.Mathematics.Color3.ToString(System.String,System.IFormatProvider)">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <param name="format">The format.</param>
            <param name="formatProvider">The format provider.</param>
            <returns>
            A <see cref="T:System.String"/> that represents this instance.
            </returns>
        </member>
        <member name="M:Spike.Mathematics.Color3.GetHashCode">
            <summary>
            Returns a hash code for this instance.
            </summary>
            <returns>
            A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table. 
            </returns>
        </member>
        <member name="M:Spike.Mathematics.Color3.Equals(Spike.Mathematics.Color3)">
            <summary>
            Determines whether the specified <see cref="T:Spike.Mathematics.Color3"/> is equal to this instance.
            </summary>
            <param name="other">The <see cref="T:Spike.Mathematics.Color3"/> to compare with this instance.</param>
            <returns>
            <c>true</c> if the specified <see cref="T:Spike.Mathematics.Color3"/> is equal to this instance; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Spike.Mathematics.Color3.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object"/> is equal to this instance.
            </summary>
            <param name="value">The <see cref="T:System.Object"/> to compare with this instance.</param>
            <returns>
            <c>true</c> if the specified <see cref="T:System.Object"/> is equal to this instance; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="P:Spike.Mathematics.Color3.Item(System.Int32)">
            <summary>
            Gets or sets the component at the specified index.
            </summary>
            <value>The value of the red, green, or blue component, depending on the index.</value>
            <param name="index">The index of the component to access. Use 0 for the red component, 1 for the green component, and 2 for the blue component.</param>
            <returns>The value of the component at the specified index.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown when the <paramref name="index"/> is out of the range [0, 2].</exception>
        </member>
        <member name="T:Spike.Mathematics.Color4">
            <summary>
            Represents a color in the form of argb.
            </summary>
        </member>
        <member name="F:Spike.Mathematics.Color4.Red">
            <summary>
            The red component of the color.
            </summary>
        </member>
        <member name="F:Spike.Mathematics.Color4.Green">
            <summary>
            The green component of the color.
            </summary>
        </member>
        <member name="F:Spike.Mathematics.Color4.Blue">
            <summary>
            The blue component of the color.
            </summary>
        </member>
        <member name="F:Spike.Mathematics.Color4.Alpha">
            <summary>
            The alpha component of the color.
            </summary>
        </member>
        <member name="M:Spike.Mathematics.Color4.#ctor(System.Single)">
            <summary>
            Initializes a new instance of the <see cref="T:Spike.Mathematics.Color4"/> struct.
            </summary>
            <param name="value">The value that will be assigned to all components.</param>
        </member>
        <member name="M:Spike.Mathematics.Color4.#ctor(System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Initializes a new instance of the <see cref="T:Spike.Mathematics.Color4"/> struct.
            </summary>
            <param name="alpha">The alpha component of the color.</param>
            <param name="red">The red component of the color.</param>
            <param name="green">The green component of the color.</param>
            <param name="blue">The blue component of the color.</param>
        </member>
        <member name="M:Spike.Mathematics.Color4.#ctor(Spike.Mathematics.Vector4)">
            <summary>
            Initializes a new instance of the <see cref="T:Spike.Mathematics.Color4"/> struct.
            </summary>
            <param name="value">The red, green, blue, and alpha components of the color.</param>
        </member>
        <member name="M:Spike.Mathematics.Color4.#ctor(Spike.Mathematics.Vector3,System.Single)">
            <summary>
            Initializes a new instance of the <see cref="T:Spike.Mathematics.Color4"/> struct.
            </summary>
            <param name="value">The red, green, and blue compoennts of the color.</param>
            <param name="alpha">The alpha component of the color.</param>
        </member>
        <member name="M:Spike.Mathematics.Color4.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Spike.Mathematics.Color4"/> struct.
            </summary>
            <param name="argb">A packed integer containing all four color components.</param>
        </member>
        <member name="M:Spike.Mathematics.Color4.#ctor(System.Single[])">
            <summary>
            Initializes a new instance of the <see cref="T:Spike.Mathematics.Color4"/> struct.
            </summary>
            <param name="values">The values to assign to the alpha, red, green, and blue components of the color. This must be an array with four elements.</param>
            <exception cref="T:System.ArgumentNullException">Thrown when <paramref name="values"/> is <c>null</c>.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown when <paramref name="values"/> contains more or less than four elements.</exception>
        </member>
        <member name="M:Spike.Mathematics.Color4.ToArgb">
            <summary>
            Converts the color into a packed integer.
            </summary>
            <returns>A packed integer containing all four color components.</returns>
        </member>
        <member name="M:Spike.Mathematics.Color4.ToVector3">
            <summary>
            Converts the color into a three component vector.
            </summary>
            <returns>A three component vector containing the red, green, and blue components of the color.</returns>
        </member>
        <member name="M:Spike.Mathematics.Color4.ToVector4">
            <summary>
            Converts the color into a four component vector.
            </summary>
            <returns>A four component vector containing all four color components.</returns>
        </member>
        <member name="M:Spike.Mathematics.Color4.ToArray">
            <summary>
            Creates an array containing the elements of the color.
            </summary>
            <returns>A four-element array containing the components of the color.</returns>
        </member>
        <member name="M:Spike.Mathematics.Color4.Add(Spike.Mathematics.Color4@,Spike.Mathematics.Color4@,Spike.Mathematics.Color4@)">
            <summary>
            Adds two colors.
            </summary>
            <param name="left">The first color to add.</param>
            <param name="right">The second color to add.</param>
            <param name="result">When the method completes, completes the sum of the two colors.</param>
        </member>
        <member name="M:Spike.Mathematics.Color4.Add(Spike.Mathematics.Color4,Spike.Mathematics.Color4)">
            <summary>
            Adds two colors.
            </summary>
            <param name="left">The first color to add.</param>
            <param name="right">The second color to add.</param>
            <returns>The sum of the two colors.</returns>
        </member>
        <member name="M:Spike.Mathematics.Color4.Subtract(Spike.Mathematics.Color4@,Spike.Mathematics.Color4@,Spike.Mathematics.Color4@)">
            <summary>
            Subtracts two colors.
            </summary>
            <param name="left">The first color to subtract.</param>
            <param name="right">The second color to subtract.</param>
            <param name="result">WHen the method completes, contains the difference of the two colors.</param>
        </member>
        <member name="M:Spike.Mathematics.Color4.Subtract(Spike.Mathematics.Color4,Spike.Mathematics.Color4)">
            <summary>
            Subtracts two colors.
            </summary>
            <param name="left">The first color to subtract.</param>
            <param name="right">The second color to subtract</param>
            <returns>The difference of the two colors.</returns>
        </member>
        <member name="M:Spike.Mathematics.Color4.Modulate(Spike.Mathematics.Color4@,Spike.Mathematics.Color4@,Spike.Mathematics.Color4@)">
            <summary>
            Modulates two colors.
            </summary>
            <param name="left">The first color to modulate.</param>
            <param name="right">The second color to modulate.</param>
            <param name="result">When the method completes, contains the modulated color.</param>
        </member>
        <member name="M:Spike.Mathematics.Color4.Modulate(Spike.Mathematics.Color4,Spike.Mathematics.Color4)">
            <summary>
            Modulates two colors.
            </summary>
            <param name="left">The first color to modulate.</param>
            <param name="right">The second color to modulate.</param>
            <returns>The modulated color.</returns>
        </member>
        <member name="M:Spike.Mathematics.Color4.Scale(Spike.Mathematics.Color4@,System.Single,Spike.Mathematics.Color4@)">
            <summary>
            Scales a color.
            </summary>
            <param name="value">The color to scale.</param>
            <param name="scale">The amount by which to scale.</param>
            <param name="result">When the method completes, contains the scaled color.</param>
        </member>
        <member name="M:Spike.Mathematics.Color4.Scale(Spike.Mathematics.Color4,System.Single)">
            <summary>
            Scales a color.
            </summary>
            <param name="value">The color to scale.</param>
            <param name="scale">The amount by which to scale.</param>
            <returns>The scaled color.</returns>
        </member>
        <member name="M:Spike.Mathematics.Color4.Negate(Spike.Mathematics.Color4@,Spike.Mathematics.Color4@)">
            <summary>
            Negates a color.
            </summary>
            <param name="value">The color to negate.</param>
            <param name="result">When the method completes, contains the negated color.</param>
        </member>
        <member name="M:Spike.Mathematics.Color4.Negate(Spike.Mathematics.Color4)">
            <summary>
            Negates a color.
            </summary>
            <param name="value">The color to negate.</param>
            <returns>The negated color.</returns>
        </member>
        <member name="M:Spike.Mathematics.Color4.Clamp(Spike.Mathematics.Color4@,Spike.Mathematics.Color4@,Spike.Mathematics.Color4@,Spike.Mathematics.Color4@)">
            <summary>
            Restricts a value to be within a specified range.
            </summary>
            <param name="value">The value to clamp.</param>
            <param name="min">The minimum value.</param>
            <param name="max">The maximum value.</param>
            <param name="result">When the method completes, contains the clamped value.</param>
        </member>
        <member name="M:Spike.Mathematics.Color4.Clamp(Spike.Mathematics.Color4,Spike.Mathematics.Color4,Spike.Mathematics.Color4)">
            <summary>
            Restricts a value to be within a specified range.
            </summary>
            <param name="value">The value to clamp.</param>
            <param name="min">The minimum value.</param>
            <param name="max">The maximum value.</param>
            <returns>The clamped value.</returns>
        </member>
        <member name="M:Spike.Mathematics.Color4.Lerp(Spike.Mathematics.Color4@,Spike.Mathematics.Color4@,System.Single,Spike.Mathematics.Color4@)">
            <summary>
            Performs a linear interpolation between two colors.
            </summary>
            <param name="start">Start color.</param>
            <param name="end">End color.</param>
            <param name="amount">Value between 0 and 1 indicating the weight of <paramref name="end"/>.</param>
            <param name="result">When the method completes, contains the linear interpolation of the two colors.</param>
            <remarks>
            This method performs the linear interpolation based on the following formula.
            <code>start + (end - start) * amount</code>
            Passing <paramref name="amount"/> a value of 0 will cause <paramref name="start"/> to be returned; a value of 1 will cause <paramref name="end"/> to be returned. 
            </remarks>
        </member>
        <member name="M:Spike.Mathematics.Color4.Lerp(Spike.Mathematics.Color4,Spike.Mathematics.Color4,System.Single)">
            <summary>
            Performs a linear interpolation between two colors.
            </summary>
            <param name="start">Start color.</param>
            <param name="end">End color.</param>
            <param name="amount">Value between 0 and 1 indicating the weight of <paramref name="end"/>.</param>
            <returns>The linear interpolation of the two colors.</returns>
            <remarks>
            This method performs the linear interpolation based on the following formula.
            <code>start + (end - start) * amount</code>
            Passing <paramref name="amount"/> a value of 0 will cause <paramref name="start"/> to be returned; a value of 1 will cause <paramref name="end"/> to be returned. 
            </remarks>
        </member>
        <member name="M:Spike.Mathematics.Color4.SmoothStep(Spike.Mathematics.Color4@,Spike.Mathematics.Color4@,System.Single,Spike.Mathematics.Color4@)">
            <summary>
            Performs a cubic interpolation between two colors.
            </summary>
            <param name="start">Start color.</param>
            <param name="end">End color.</param>
            <param name="amount">Value between 0 and 1 indicating the weight of <paramref name="end"/>.</param>
            <param name="result">When the method completes, contains the cubic interpolation of the two colors.</param>
        </member>
        <member name="M:Spike.Mathematics.Color4.SmoothStep(Spike.Mathematics.Color4,Spike.Mathematics.Color4,System.Single)">
            <summary>
            Performs a cubic interpolation between two colors.
            </summary>
            <param name="start">Start color.</param>
            <param name="end">End color.</param>
            <param name="amount">Value between 0 and 1 indicating the weight of <paramref name="end"/>.</param>
            <returns>The cubic interpolation of the two colors.</returns>
        </member>
        <member name="M:Spike.Mathematics.Color4.Max(Spike.Mathematics.Color4@,Spike.Mathematics.Color4@,Spike.Mathematics.Color4@)">
            <summary>
            Returns a color containing the smallest components of the specified colorss.
            </summary>
            <param name="left">The first source color.</param>
            <param name="right">The second source color.</param>
            <param name="result">When the method completes, contains an new color composed of the largest components of the source colorss.</param>
        </member>
        <member name="M:Spike.Mathematics.Color4.Max(Spike.Mathematics.Color4,Spike.Mathematics.Color4)">
            <summary>
            Returns a color containing the largest components of the specified colorss.
            </summary>
            <param name="left">The first source color.</param>
            <param name="right">The second source color.</param>
            <returns>A color containing the largest components of the source colors.</returns>
        </member>
        <member name="M:Spike.Mathematics.Color4.Min(Spike.Mathematics.Color4@,Spike.Mathematics.Color4@,Spike.Mathematics.Color4@)">
            <summary>
            Returns a color containing the smallest components of the specified colors.
            </summary>
            <param name="left">The first source color.</param>
            <param name="right">The second source color.</param>
            <param name="result">When the method completes, contains an new color composed of the smallest components of the source colors.</param>
        </member>
        <member name="M:Spike.Mathematics.Color4.Min(Spike.Mathematics.Color4,Spike.Mathematics.Color4)">
            <summary>
            Returns a color containing the smallest components of the specified colors.
            </summary>
            <param name="left">The first source color.</param>
            <param name="right">The second source color.</param>
            <returns>A color containing the smallest components of the source colors.</returns>
        </member>
        <member name="M:Spike.Mathematics.Color4.AdjustContrast(Spike.Mathematics.Color4@,System.Single,Spike.Mathematics.Color4@)">
            <summary>
            Adjusts the contrast of a color.
            </summary>
            <param name="value">The color whose contrast is to be adjusted.</param>
            <param name="contrast">The amount by which to adjust the contrast.</param>
            <param name="result">When the method completes, contains the adjusted color.</param>
        </member>
        <member name="M:Spike.Mathematics.Color4.AdjustContrast(Spike.Mathematics.Color4,System.Single)">
            <summary>
            Adjusts the contrast of a color.
            </summary>
            <param name="value">The color whose contrast is to be adjusted.</param>
            <param name="contrast">The amount by which to adjust the contrast.</param>
            <returns>The adjusted color.</returns>
        </member>
        <member name="M:Spike.Mathematics.Color4.AdjustSaturation(Spike.Mathematics.Color4@,System.Single,Spike.Mathematics.Color4@)">
            <summary>
            Adjusts the saturation of a color.
            </summary>
            <param name="value">The color whose saturation is to be adjusted.</param>
            <param name="saturation">The amount by which to adjust the saturation.</param>
            <param name="result">When the method completes, contains the adjusted color.</param>
        </member>
        <member name="M:Spike.Mathematics.Color4.AdjustSaturation(Spike.Mathematics.Color4,System.Single)">
            <summary>
            Adjusts the saturation of a color.
            </summary>
            <param name="value">The color whose saturation is to be adjusted.</param>
            <param name="saturation">The amount by which to adjust the saturation.</param>
            <returns>The adjusted color.</returns>
        </member>
        <member name="M:Spike.Mathematics.Color4.op_Addition(Spike.Mathematics.Color4,Spike.Mathematics.Color4)">
            <summary>
            Adds two colors.
            </summary>
            <param name="left">The first color to add.</param>
            <param name="right">The second color to add.</param>
            <returns>The sum of the two colors.</returns>
        </member>
        <member name="M:Spike.Mathematics.Color4.op_UnaryPlus(Spike.Mathematics.Color4)">
            <summary>
            Assert a color (return it unchanged).
            </summary>
            <param name="value">The color to assert (unchange).</param>
            <returns>The asserted (unchanged) color.</returns>
        </member>
        <member name="M:Spike.Mathematics.Color4.op_Subtraction(Spike.Mathematics.Color4,Spike.Mathematics.Color4)">
            <summary>
            Subtracts two colors.
            </summary>
            <param name="left">The first color to subtract.</param>
            <param name="right">The second color to subtract.</param>
            <returns>The difference of the two colors.</returns>
        </member>
        <member name="M:Spike.Mathematics.Color4.op_UnaryNegation(Spike.Mathematics.Color4)">
            <summary>
            Negates a color.
            </summary>
            <param name="value">The color to negate.</param>
            <returns>A negated color.</returns>
        </member>
        <member name="M:Spike.Mathematics.Color4.op_Multiply(System.Single,Spike.Mathematics.Color4)">
            <summary>
            Scales a color.
            </summary>
            <param name="scale">The factor by which to scale the color.</param>
            <param name="value">The color to scale.</param>
            <returns>The scaled color.</returns>
        </member>
        <member name="M:Spike.Mathematics.Color4.op_Multiply(Spike.Mathematics.Color4,System.Single)">
            <summary>
            Scales a color.
            </summary>
            <param name="value">The factor by which to scale the color.</param>
            <param name="scale">The color to scale.</param>
            <returns>The scaled color.</returns>
        </member>
        <member name="M:Spike.Mathematics.Color4.op_Multiply(Spike.Mathematics.Color4,Spike.Mathematics.Color4)">
            <summary>
            Modulates two colors.
            </summary>
            <param name="left">The first color to modulate.</param>
            <param name="right">The second color to modulate.</param>
            <returns>The modulated color.</returns>
        </member>
        <member name="M:Spike.Mathematics.Color4.op_Equality(Spike.Mathematics.Color4,Spike.Mathematics.Color4)">
            <summary>
            Tests for equality between two objects.
            </summary>
            <param name="left">The first value to compare.</param>
            <param name="right">The second value to compare.</param>
            <returns><c>true</c> if <paramref name="left"/> has the same value as <paramref name="right"/>; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:Spike.Mathematics.Color4.op_Inequality(Spike.Mathematics.Color4,Spike.Mathematics.Color4)">
            <summary>
            Tests for inequality between two objects.
            </summary>
            <param name="left">The first value to compare.</param>
            <param name="right">The second value to compare.</param>
            <returns><c>true</c> if <paramref name="left"/> has a different value than <paramref name="right"/>; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:Spike.Mathematics.Color4.op_Explicit(Spike.Mathematics.Color4)~Spike.Mathematics.Color3">
            <summary>
            Performs an explicit conversion from <see cref="T:Spike.Mathematics.Color4"/> to <see cref="T:Spike.Mathematics.Color3"/>.
            </summary>
            <param name="value">The value.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="M:Spike.Mathematics.Color4.op_Explicit(Spike.Mathematics.Color4)~Spike.Mathematics.Vector3">
            <summary>
            Performs an explicit conversion from <see cref="T:Spike.Mathematics.Color4"/> to <see cref="T:Spike.Mathematics.Vector3"/>.
            </summary>
            <param name="value">The value.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="M:Spike.Mathematics.Color4.op_Explicit(Spike.Mathematics.Color4)~Spike.Mathematics.Vector4">
            <summary>
            Performs an explicit conversion from <see cref="T:Spike.Mathematics.Color4"/> to <see cref="T:Spike.Mathematics.Vector4"/>.
            </summary>
            <param name="value">The value.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="M:Spike.Mathematics.Color4.op_Explicit(Spike.Mathematics.Vector3)~Spike.Mathematics.Color4">
            <summary>
            Performs an explicit conversion from <see cref="T:Spike.Mathematics.Vector3"/> to <see cref="T:Spike.Mathematics.Color4"/>.
            </summary>
            <param name="value">The value.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="M:Spike.Mathematics.Color4.op_Explicit(Spike.Mathematics.Vector4)~Spike.Mathematics.Color4">
            <summary>
            Performs an explicit conversion from <see cref="T:Spike.Mathematics.Vector4"/> to <see cref="T:Spike.Mathematics.Color4"/>.
            </summary>
            <param name="value">The value.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="M:Spike.Mathematics.Color4.op_Explicit(System.Int32)~Spike.Mathematics.Color4">
            <summary>
            Performs an explicit conversion from <see cref="T:System.Int32"/> to <see cref="T:Spike.Mathematics.Color4"/>.
            </summary>
            <param name="value">The value.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="M:Spike.Mathematics.Color4.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <returns>
            A <see cref="T:System.String"/> that represents this instance.
            </returns>
        </member>
        <member name="M:Spike.Mathematics.Color4.ToString(System.String)">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <param name="format">The format.</param>
            <returns>
            A <see cref="T:System.String"/> that represents this instance.
            </returns>
        </member>
        <member name="M:Spike.Mathematics.Color4.ToString(System.IFormatProvider)">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <param name="formatProvider">The format provider.</param>
            <returns>
            A <see cref="T:System.String"/> that represents this instance.
            </returns>
        </member>
        <member name="M:Spike.Mathematics.Color4.ToString(System.String,System.IFormatProvider)">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <param name="format">The format.</param>
            <param name="formatProvider">The format provider.</param>
            <returns>
            A <see cref="T:System.String"/> that represents this instance.
            </returns>
        </member>
        <member name="M:Spike.Mathematics.Color4.GetHashCode">
            <summary>
            Returns a hash code for this instance.
            </summary>
            <returns>
            A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table. 
            </returns>
        </member>
        <member name="M:Spike.Mathematics.Color4.Equals(Spike.Mathematics.Color4)">
            <summary>
            Determines whether the specified <see cref="T:Spike.Mathematics.Color4"/> is equal to this instance.
            </summary>
            <param name="other">The <see cref="T:Spike.Mathematics.Color4"/> to compare with this instance.</param>
            <returns>
            <c>true</c> if the specified <see cref="T:Spike.Mathematics.Color4"/> is equal to this instance; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Spike.Mathematics.Color4.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object"/> is equal to this instance.
            </summary>
            <param name="value">The <see cref="T:System.Object"/> to compare with this instance.</param>
            <returns>
            <c>true</c> if the specified <see cref="T:System.Object"/> is equal to this instance; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="P:Spike.Mathematics.Color4.Item(System.Int32)">
            <summary>
            Gets or sets the component at the specified index.
            </summary>
            <value>The value of the alpha, red, green, or blue component, depending on the index.</value>
            <param name="index">The index of the component to access. Use 0 for the alpha component, 1 for the red component, 2 for the green component, and 3 for the blue component.</param>
            <returns>The value of the component at the specified index.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown when the <paramref name="index"/> is out of the range [0, 3].</exception>
        </member>
        <member name="T:Spike.Mathematics.AngleType">
            <summary>
            Describes the type of angle.
            </summary>
        </member>
        <member name="F:Spike.Mathematics.AngleType.Revolution">
            <summary>
            Specifies an angle measurement in revolutions.
            </summary>
        </member>
        <member name="F:Spike.Mathematics.AngleType.Degree">
            <summary>
            Specifies an angle measurement in degrees.
            </summary>
        </member>
        <member name="F:Spike.Mathematics.AngleType.Radian">
            <summary>
            Specifies an angle measurement in radians.
            </summary>
        </member>
        <member name="F:Spike.Mathematics.AngleType.Gradian">
            <summary>
            Specifies an angle measurement in gradians.
            </summary>
        </member>
        <member name="T:Spike.Mathematics.ContainmentType">
            <summary>
            Describes how one bounding volume contains another.
            </summary>
        </member>
        <member name="F:Spike.Mathematics.ContainmentType.Disjoint">
            <summary>
            The two bounding volumes don't intersect at all.
            </summary>
        </member>
        <member name="F:Spike.Mathematics.ContainmentType.Contains">
            <summary>
            One bounding volume completely contains another.
            </summary>
        </member>
        <member name="F:Spike.Mathematics.ContainmentType.Intersects">
            <summary>
            The two bounding volumes overlap.
            </summary>
        </member>
        <member name="T:Spike.Mathematics.PlaneIntersectionType">
            <summary>
            Describes the result of an intersection with a plane in three dimensions.
            </summary>
        </member>
        <member name="F:Spike.Mathematics.PlaneIntersectionType.Back">
            <summary>
            The object is behind the plane.
            </summary>
        </member>
        <member name="F:Spike.Mathematics.PlaneIntersectionType.Front">
            <summary>
            The object is in front of the plane.
            </summary>
        </member>
        <member name="F:Spike.Mathematics.PlaneIntersectionType.Intersecting">
            <summary>
            The object is intersecting the plane.
            </summary>
        </member>
        <member name="T:Spike.Mathematics.MathExtended">
            <summary>
            Contains mathmeatical methods and constants that extend the System.Math class.
            </summary>
        </member>
        <member name="F:Spike.Mathematics.MathExtended.Pi">
            <summary>
            A value specifying the approximation of π which is 180 degrees.
            </summary>
        </member>
        <member name="F:Spike.Mathematics.MathExtended.TwoPi">
            <summary>
            A value specifying the approximation of 2π which is 360 degrees.
            </summary>
        </member>
        <member name="F:Spike.Mathematics.MathExtended.PiOverTwo">
            <summary>
            A value specifying the approximation of π/2 which is 90 degrees.
            </summary>
        </member>
        <member name="F:Spike.Mathematics.MathExtended.PiOverFour">
            <summary>
            A value specifying the approximation of π/4 which is 45 degrees.
            </summary>
        </member>
        <member name="M:Spike.Mathematics.MathExtended.DegreesToRadians(System.Single)">
            <summary>
            Converts degrees to radians.
            </summary>
            <param name="degree">The value to convert.</param>
            <returns>The converted value.</returns>
        </member>
        <member name="M:Spike.Mathematics.MathExtended.RadiansToDegrees(System.Single)">
            <summary>
            Converts radians to degrees.
            </summary>
            <param name="radian">The value to convert.</param>
            <returns>The converted value.</returns>
        </member>
        <member name="T:Spike.Mathematics.Matrix">
            <summary>
            Represents a 4x4 mathematical matrix.
            </summary>
        </member>
        <member name="F:Spike.Mathematics.Matrix.SizeInBytes">
            <summary>
            The size of the <see cref="T:Spike.Mathematics.Matrix"/> type, in bytes.
            </summary>
        </member>
        <member name="F:Spike.Mathematics.Matrix.Zero">
            <summary>
            A <see cref="T:Spike.Mathematics.Matrix"/> with all of its components set to zero.
            </summary>
        </member>
        <member name="F:Spike.Mathematics.Matrix.Identity">
            <summary>
            The identity <see cref="T:Spike.Mathematics.Matrix"/>.
            </summary>
        </member>
        <member name="F:Spike.Mathematics.Matrix.M11">
            <summary>
            Value at row 1 column 1 of the matrix.
            </summary>
        </member>
        <member name="F:Spike.Mathematics.Matrix.M12">
            <summary>
            Value at row 1 column 2 of the matrix.
            </summary>
        </member>
        <member name="F:Spike.Mathematics.Matrix.M13">
            <summary>
            Value at row 1 column 3 of the matrix.
            </summary>
        </member>
        <member name="F:Spike.Mathematics.Matrix.M14">
            <summary>
            Value at row 1 column 4 of the matrix.
            </summary>
        </member>
        <member name="F:Spike.Mathematics.Matrix.M21">
            <summary>
            Value at row 2 column 1 of the matrix.
            </summary>
        </member>
        <member name="F:Spike.Mathematics.Matrix.M22">
            <summary>
            Value at row 2 column 2 of the matrix.
            </summary>
        </member>
        <member name="F:Spike.Mathematics.Matrix.M23">
            <summary>
            Value at row 2 column 3 of the matrix.
            </summary>
        </member>
        <member name="F:Spike.Mathematics.Matrix.M24">
            <summary>
            Value at row 2 column 4 of the matrix.
            </summary>
        </member>
        <member name="F:Spike.Mathematics.Matrix.M31">
            <summary>
            Value at row 3 column 1 of the matrix.
            </summary>
        </member>
        <member name="F:Spike.Mathematics.Matrix.M32">
            <summary>
            Value at row 3 column 2 of the matrix.
            </summary>
        </member>
        <member name="F:Spike.Mathematics.Matrix.M33">
            <summary>
            Value at row 3 column 3 of the matrix.
            </summary>
        </member>
        <member name="F:Spike.Mathematics.Matrix.M34">
            <summary>
            Value at row 3 column 4 of the matrix.
            </summary>
        </member>
        <member name="F:Spike.Mathematics.Matrix.M41">
            <summary>
            Value at row 4 column 1 of the matrix.
            </summary>
        </member>
        <member name="F:Spike.Mathematics.Matrix.M42">
            <summary>
            Value at row 4 column 2 of the matrix.
            </summary>
        </member>
        <member name="F:Spike.Mathematics.Matrix.M43">
            <summary>
            Value at row 4 column 3 of the matrix.
            </summary>
        </member>
        <member name="F:Spike.Mathematics.Matrix.M44">
            <summary>
            Value at row 4 column 4 of the matrix.
            </summary>
        </member>
        <member name="M:Spike.Mathematics.Matrix.#ctor(System.Single)">
            <summary>
            Initializes a new instance of the <see cref="T:Spike.Mathematics.Matrix"/> struct.
            </summary>
            <param name="value">The value that will be assigned to all components.</param>
        </member>
        <member name="M:Spike.Mathematics.Matrix.#ctor(System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Initializes a new instance of the <see cref="T:Spike.Mathematics.Matrix"/> struct.
            </summary>
            <param name="M11">The value to assign at row 1 column 1 of the matrix.</param>
            <param name="M12">The value to assign at row 1 column 2 of the matrix.</param>
            <param name="M13">The value to assign at row 1 column 3 of the matrix.</param>
            <param name="M14">The value to assign at row 1 column 4 of the matrix.</param>
            <param name="M21">The value to assign at row 2 column 1 of the matrix.</param>
            <param name="M22">The value to assign at row 2 column 2 of the matrix.</param>
            <param name="M23">The value to assign at row 2 column 3 of the matrix.</param>
            <param name="M24">The value to assign at row 2 column 4 of the matrix.</param>
            <param name="M31">The value to assign at row 3 column 1 of the matrix.</param>
            <param name="M32">The value to assign at row 3 column 2 of the matrix.</param>
            <param name="M33">The value to assign at row 3 column 3 of the matrix.</param>
            <param name="M34">The value to assign at row 3 column 4 of the matrix.</param>
            <param name="M41">The value to assign at row 4 column 1 of the matrix.</param>
            <param name="M42">The value to assign at row 4 column 2 of the matrix.</param>
            <param name="M43">The value to assign at row 4 column 3 of the matrix.</param>
            <param name="M44">The value to assign at row 4 column 4 of the matrix.</param>
        </member>
        <member name="M:Spike.Mathematics.Matrix.#ctor(System.Single[])">
            <summary>
            Initializes a new instance of the <see cref="T:Spike.Mathematics.Matrix"/> struct.
            </summary>
            <param name="values">The values to assign to the components of the matrix. This must be an array with sixteen elements.</param>
            <exception cref="T:System.ArgumentNullException">Thrown when <paramref name="values"/> is <c>null</c>.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown when <paramref name="values"/> contains more or less than sixteen elements.</exception>
        </member>
        <member name="M:Spike.Mathematics.Matrix.Determinant">
            <summary>
            Calculates the determinant of the matrix.
            </summary>
            <returns>The determinant of the matrix.</returns>
        </member>
        <member name="M:Spike.Mathematics.Matrix.Invert">
            <summary>
            Inverts the matrix.
            </summary>
        </member>
        <member name="M:Spike.Mathematics.Matrix.Transpose">
            <summary>
            Transposes the matrix.
            </summary>
        </member>
        <member name="M:Spike.Mathematics.Matrix.Orthogonalize">
            <summary>
            Orthogonalizes the specified matrix.
            </summary>
            <remarks>
            <para>Orthogonalization is the process of making all rows orthogonal to each other. This
            means that any given row in the matrix will be orthogonal to any other given row in the
            matrix.</para>
            <para>Because this method uses the modified Gram-Schmidt process, the resulting matrix
            tends to be numerically unstable. The numeric stability decreases according to the rows
            so that the first row is the most stable and the last row is the least stable.</para>
            <para>This operation is performed on the rows of the matrix rather than the columns.
            If you wish for this operation to be performed on the columns, first transpose the
            input and than transpose the output.</para>
            </remarks>
        </member>
        <member name="M:Spike.Mathematics.Matrix.Orthonormalize">
            <summary>
            Orthonormalizes the specified matrix.
            </summary>
            <remarks>
            <para>Orthonormalization is the process of making all rows and columns orthogonal to each
            other and making all rows and columns of unit length. This means that any given row will
            be orthogonal to any other given row and any given column will be orthogonal to any other
            given column. Any given row will not be orthogonal to any given column. Every row and every
            column will be of unit length.</para>
            <para>Because this method uses the modified Gram-Schmidt process, the resulting matrix
            tends to be numerically unstable. The numeric stability decreases according to the rows
            so that the first row is the most stable and the last row is the least stable.</para>
            <para>This operation is performed on the rows of the matrix rather than the columns.
            If you wish for this operation to be performed on the columns, first transpose the
            input and than transpose the output.</para>
            </remarks>
        </member>
        <member name="M:Spike.Mathematics.Matrix.DecomposeQR(Spike.Mathematics.Matrix@,Spike.Mathematics.Matrix@)">
            <summary>
            Decomposes a matrix into an orthonormalized matrix Q and a right traingular matrix R.
            </summary>
            <param name="Q">When the method completes, contains the orthonormalized matrix of the decomposition.</param>
            <param name="R">When the method completes, contains the right triangular matrix of the decomposition.</param>
        </member>
        <member name="M:Spike.Mathematics.Matrix.DecomposeLQ(Spike.Mathematics.Matrix@,Spike.Mathematics.Matrix@)">
            <summary>
            Decomposes a matrix into a lower triangular matrix L and an orthonormalized matrix Q.
            </summary>
            <param name="L">When the method completes, contains the lower triangular matrix of the decomposition.</param>
            <param name="Q">When the method completes, contains the orthonormalized matrix of the decomposition.</param>
        </member>
        <member name="M:Spike.Mathematics.Matrix.Decompose(Spike.Mathematics.Vector3@,Spike.Mathematics.Quaternion@,Spike.Mathematics.Vector3@)">
            <summary>
            Decomposes a matrix into a scale, rotation, and translation.
            </summary>
            <param name="scale">When the method completes, contains the scaling component of the decomposed matrix.</param>
            <param name="rotation">When the method completes, contains the rtoation component of the decomposed matrix.</param>
            <param name="translation">When the method completes, contains the translation component of the decomposed matrix.</param>
            <remarks>
            This method is designed to decompose an SRT transformation matrix only.
            </remarks>
        </member>
        <member name="M:Spike.Mathematics.Matrix.ExchangeRows(System.Int32,System.Int32)">
            <summary>
            Exchanges two rows in the matrix.
            </summary>
            <param name="firstRow">The first row to exchange. This is an index of the row starting at zero.</param>
            <param name="secondRow">The second row to exchange. This is an index of the row starting at zero.</param>
        </member>
        <member name="M:Spike.Mathematics.Matrix.ExchangeColumns(System.Int32,System.Int32)">
            <summary>
            
            </summary>
            <param name="firstColumn"></param>
            <param name="secondColumn"></param>
        </member>
        <member name="M:Spike.Mathematics.Matrix.ToArray">
            <summary>
            Creates an array containing the elements of the matrix.
            </summary>
            <returns>A sixteen-element array containing the components of the matrix.</returns>
        </member>
        <member name="M:Spike.Mathematics.Matrix.Add(Spike.Mathematics.Matrix@,Spike.Mathematics.Matrix@,Spike.Mathematics.Matrix@)">
            <summary>
            Determines the sum of two matrices.
            </summary>
            <param name="left">The first matrix to add.</param>
            <param name="right">The second matrix to add.</param>
            <param name="result">When the method completes, contains the sum of the two matrices.</param>
        </member>
        <member name="M:Spike.Mathematics.Matrix.Add(Spike.Mathematics.Matrix,Spike.Mathematics.Matrix)">
            <summary>
            Determines the sum of two matrices.
            </summary>
            <param name="left">The first matrix to add.</param>
            <param name="right">The second matrix to add.</param>
            <returns>The sum of the two matrices.</returns>
        </member>
        <member name="M:Spike.Mathematics.Matrix.Subtract(Spike.Mathematics.Matrix@,Spike.Mathematics.Matrix@,Spike.Mathematics.Matrix@)">
            <summary>
            Determines the difference between two matrices.
            </summary>
            <param name="left">The first matrix to subtract.</param>
            <param name="right">The second matrix to subtract.</param>
            <param name="result">When the method completes, contains the difference between the two matrices.</param>
        </member>
        <member name="M:Spike.Mathematics.Matrix.Subtract(Spike.Mathematics.Matrix,Spike.Mathematics.Matrix)">
            <summary>
            Determines the difference between two matrices.
            </summary>
            <param name="left">The first matrix to subtract.</param>
            <param name="right">The second matrix to subtract.</param>
            <returns>The difference between the two matrices.</returns>
        </member>
        <member name="M:Spike.Mathematics.Matrix.Multiply(Spike.Mathematics.Matrix@,System.Single,Spike.Mathematics.Matrix@)">
            <summary>
            Scales a matrix by the given value.
            </summary>
            <param name="left">The matrix to scale.</param>
            <param name="right">The amount by which to scale.</param>
            <param name="result">When the method completes, contains the scaled matrix.</param>
        </member>
        <member name="M:Spike.Mathematics.Matrix.Multiply(Spike.Mathematics.Matrix,System.Single)">
            <summary>
            Scales a matrix by the given value.
            </summary>
            <param name="left">The matrix to scale.</param>
            <param name="right">The amount by which to scale.</param>
            <returns>The scaled matrix.</returns>
        </member>
        <member name="M:Spike.Mathematics.Matrix.Multiply(Spike.Mathematics.Matrix@,Spike.Mathematics.Matrix@,Spike.Mathematics.Matrix@)">
            <summary>
            Determines the product of two matrices.
            </summary>
            <param name="left">The first matrix to multiply.</param>
            <param name="right">The second matrix to multiply.</param>
            <param name="result">The product of the two matrices.</param>
        </member>
        <member name="M:Spike.Mathematics.Matrix.Multiply(Spike.Mathematics.Matrix,Spike.Mathematics.Matrix)">
            <summary>
            Determines the product of two matrices.
            </summary>
            <param name="left">The first matrix to multiply.</param>
            <param name="right">The second matrix to multiply.</param>
            <returns>The product of the two matrices.</returns>
        </member>
        <member name="M:Spike.Mathematics.Matrix.Divide(Spike.Mathematics.Matrix@,System.Single,Spike.Mathematics.Matrix@)">
            <summary>
            Scales a matrix by the given value.
            </summary>
            <param name="left">The matrix to scale.</param>
            <param name="right">The amount by which to scale.</param>
            <param name="result">When the method completes, contains the scaled matrix.</param>
        </member>
        <member name="M:Spike.Mathematics.Matrix.Divide(Spike.Mathematics.Matrix,System.Single)">
            <summary>
            Scales a matrix by the given value.
            </summary>
            <param name="left">The matrix to scale.</param>
            <param name="right">The amount by which to scale.</param>
            <returns>The scaled matrix.</returns>
        </member>
        <member name="M:Spike.Mathematics.Matrix.Divide(Spike.Mathematics.Matrix@,Spike.Mathematics.Matrix@,Spike.Mathematics.Matrix@)">
            <summary>
            Determines the quotient of two matrices.
            </summary>
            <param name="left">The first matrix to divide.</param>
            <param name="right">The second matrix to divide.</param>
            <param name="result">When the method completes, contains the quotient of the two matrices.</param>
        </member>
        <member name="M:Spike.Mathematics.Matrix.Divide(Spike.Mathematics.Matrix,Spike.Mathematics.Matrix)">
            <summary>
            Determines the quotient of two matrices.
            </summary>
            <param name="left">The first matrix to divide.</param>
            <param name="right">The second matrix to divide.</param>
            <returns>The quotient of the two matrices.</returns>
        </member>
        <member name="M:Spike.Mathematics.Matrix.Exponent(Spike.Mathematics.Matrix@,System.Int32,Spike.Mathematics.Matrix@)">
            <summary>
            Performs the exponential operation on a matrix.
            </summary>
            <param name="value">The matrix to perform the operation on.</param>
            <param name="exponent">The exponent to raise the matrix to.</param>
            <param name="result">When the method completes, contains the exponential matrix.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown when the <paramref name="exponent"/> is negative.</exception>
        </member>
        <member name="M:Spike.Mathematics.Matrix.Exponent(Spike.Mathematics.Matrix,System.Int32)">
            <summary>
            Performs the exponential operation on a matrix.
            </summary>
            <param name="value">The matrix to perform the operation on.</param>
            <param name="exponent">The exponent to raise the matrix to.</param>
            <returns>The exponential matrix.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown when the <paramref name="exponent"/> is negative.</exception>
        </member>
        <member name="M:Spike.Mathematics.Matrix.Negate(Spike.Mathematics.Matrix@,Spike.Mathematics.Matrix@)">
            <summary>
            Negates a matrix.
            </summary>
            <param name="value">The matrix to be negated.</param>
            <param name="result">When the method completes, contains the negated matrix.</param>
        </member>
        <member name="M:Spike.Mathematics.Matrix.Negate(Spike.Mathematics.Matrix)">
            <summary>
            Negates a matrix.
            </summary>
            <param name="value">The matrix to be negated.</param>
            <returns>The negated matrix.</returns>
        </member>
        <member name="M:Spike.Mathematics.Matrix.Lerp(Spike.Mathematics.Matrix@,Spike.Mathematics.Matrix@,System.Single,Spike.Mathematics.Matrix@)">
            <summary>
            Performs a linear interpolation between two matricies.
            </summary>
            <param name="start">Start matrix.</param>
            <param name="end">End matrix.</param>
            <param name="amount">Value between 0 and 1 indicating the weight of <paramref name="end"/>.</param>
            <param name="result">When the method completes, contains the linear interpolation of the two matricies.</param>
            <remarks>
            This method performs the linear interpolation based on the following formula.
            <code>start + (end - start) * amount</code>
            Passing <paramref name="amount"/> a value of 0 will cause <paramref name="start"/> to be returned; a value of 1 will cause <paramref name="end"/> to be returned. 
            </remarks>
        </member>
        <member name="M:Spike.Mathematics.Matrix.Lerp(Spike.Mathematics.Matrix,Spike.Mathematics.Matrix,System.Single)">
            <summary>
            Performs a linear interpolation between two matricies.
            </summary>
            <param name="start">Start matrix.</param>
            <param name="end">End matrix.</param>
            <param name="amount">Value between 0 and 1 indicating the weight of <paramref name="end"/>.</param>
            <returns>The linear interpolation of the two matrices.</returns>
            <remarks>
            This method performs the linear interpolation based on the following formula.
            <code>start + (end - start) * amount</code>
            Passing <paramref name="amount"/> a value of 0 will cause <paramref name="start"/> to be returned; a value of 1 will cause <paramref name="end"/> to be returned. 
            </remarks>
        </member>
        <member name="M:Spike.Mathematics.Matrix.SmoothStep(Spike.Mathematics.Matrix@,Spike.Mathematics.Matrix@,System.Single,Spike.Mathematics.Matrix@)">
            <summary>
            Performs a cubic interpolation between two matricies.
            </summary>
            <param name="start">Start matrix.</param>
            <param name="end">End matrix.</param>
            <param name="amount">Value between 0 and 1 indicating the weight of <paramref name="end"/>.</param>
            <param name="result">When the method completes, contains the cubic interpolation of the two matrices.</param>
        </member>
        <member name="M:Spike.Mathematics.Matrix.SmoothStep(Spike.Mathematics.Matrix,Spike.Mathematics.Matrix,System.Single)">
            <summary>
            Performs a cubic interpolation between two matrices.
            </summary>
            <param name="start">Start matrix.</param>
            <param name="end">End matrix.</param>
            <param name="amount">Value between 0 and 1 indicating the weight of <paramref name="end"/>.</param>
            <returns>The cubic interpolation of the two matrices.</returns>
        </member>
        <member name="M:Spike.Mathematics.Matrix.Transpose(Spike.Mathematics.Matrix@,Spike.Mathematics.Matrix@)">
            <summary>
            Calculates the transpose of the specified matrix.
            </summary>
            <param name="value">The matrix whose transpose is to be calculated.</param>
            <param name="result">When the method completes, contains the transpose of the specified matrix.</param>
        </member>
        <member name="M:Spike.Mathematics.Matrix.Transpose(Spike.Mathematics.Matrix)">
            <summary>
            Calculates the transpose of the specified matrix.
            </summary>
            <param name="value">The matrix whose transpose is to be calculated.</param>
            <returns>The transpose of the specified matrix.</returns>
        </member>
        <member name="M:Spike.Mathematics.Matrix.Invert(Spike.Mathematics.Matrix@,Spike.Mathematics.Matrix@)">
            <summary>
            Calculates the inverse of the specified matrix.
            </summary>
            <param name="value">The matrix whose inverse is to be calculated.</param>
            <param name="result">When the method completes, contains the inverse of the specified matrix.</param>
        </member>
        <member name="M:Spike.Mathematics.Matrix.Invert(Spike.Mathematics.Matrix)">
            <summary>
            Calculates the inverse of the specified matrix.
            </summary>
            <param name="value">The matrix whose inverse is to be calculated.</param>
            <returns>The inverse of the specified matrix.</returns>
        </member>
        <member name="M:Spike.Mathematics.Matrix.Orthogonalize(Spike.Mathematics.Matrix@,Spike.Mathematics.Matrix@)">
            <summary>
            Orthogonalizes the specified matrix.
            </summary>
            <param name="value">The matrix to orthogonalize.</param>
            <param name="result">When the method completes, contains the orthogonalized matrix.</param>
            <remarks>
            <para>Orthogonalization is the process of making all rows orthogonal to each other. This
            means that any given row in the matrix will be orthogonal to any other given row in the
            matrix.</para>
            <para>Because this method uses the modified Gram-Schmidt process, the resulting matrix
            tends to be numerically unstable. The numeric stability decreases according to the rows
            so that the first row is the most stable and the last row is the least stable.</para>
            <para>This operation is performed on the rows of the matrix rather than the columns.
            If you wish for this operation to be performed on the columns, first transpose the
            input and than transpose the output.</para>
            </remarks>
        </member>
        <member name="M:Spike.Mathematics.Matrix.Orthogonalize(Spike.Mathematics.Matrix)">
            <summary>
            Orthogonalizes the specified matrix.
            </summary>
            <param name="value">The matrix to orthogonalize.</param>
            <returns>The orthogonalized matrix.</returns>
            <remarks>
            <para>Orthogonalization is the process of making all rows orthogonal to each other. This
            means that any given row in the matrix will be orthogonal to any other given row in the
            matrix.</para>
            <para>Because this method uses the modified Gram-Schmidt process, the resulting matrix
            tends to be numerically unstable. The numeric stability decreases according to the rows
            so that the first row is the most stable and the last row is the least stable.</para>
            <para>This operation is performed on the rows of the matrix rather than the columns.
            If you wish for this operation to be performed on the columns, first transpose the
            input and than transpose the output.</para>
            </remarks>
        </member>
        <member name="M:Spike.Mathematics.Matrix.Orthonormalize(Spike.Mathematics.Matrix@,Spike.Mathematics.Matrix@)">
            <summary>
            Orthonormalizes the specified matrix.
            </summary>
            <param name="value">The matrix to orthonormalize.</param>
            <param name="result">When the method completes, contains the orthonormalized matrix.</param>
            <remarks>
            <para>Orthonormalization is the process of making all rows and columns orthogonal to each
            other and making all rows and columns of unit length. This means that any given row will
            be orthogonal to any other given row and any given column will be orthogonal to any other
            given column. Any given row will not be orthogonal to any given column. Every row and every
            column will be of unit length.</para>
            <para>Because this method uses the modified Gram-Schmidt process, the resulting matrix
            tends to be numerically unstable. The numeric stability decreases according to the rows
            so that the first row is the most stable and the last row is the least stable.</para>
            <para>This operation is performed on the rows of the matrix rather than the columns.
            If you wish for this operation to be performed on the columns, first transpose the
            input and than transpose the output.</para>
            </remarks>
        </member>
        <member name="M:Spike.Mathematics.Matrix.Orthonormalize(Spike.Mathematics.Matrix)">
            <summary>
            Orthonormalizes the specified matrix.
            </summary>
            <param name="value">The matrix to orthonormalize.</param>
            <returns>The orthonormalized matrix.</returns>
            <remarks>
            <para>Orthonormalization is the process of making all rows and columns orthogonal to each
            other and making all rows and columns of unit length. This means that any given row will
            be orthogonal to any other given row and any given column will be orthogonal to any other
            given column. Any given row will not be orthogonal to any given column. Every row and every
            column will be of unit length.</para>
            <para>Because this method uses the modified Gram-Schmidt process, the resulting matrix
            tends to be numerically unstable. The numeric stability decreases according to the rows
            so that the first row is the most stable and the last row is the least stable.</para>
            <para>This operation is performed on the rows of the matrix rather than the columns.
            If you wish for this operation to be performed on the columns, first transpose the
            input and than transpose the output.</para>
            </remarks>
        </member>
        <member name="M:Spike.Mathematics.Matrix.UpperTriangularForm(Spike.Mathematics.Matrix@,Spike.Mathematics.Matrix@)">
            <summary>
            Brings the matrix into upper triangular form using elementry row operations.
            </summary>
            <param name="value">The matrix to put into upper triangular form.</param>
            <param name="result">When the method completes, contains the upper triangular matrix.</param>
            <remarks>
            If the matrix is not invertable (i.e. its determinant is zero) than the result of this
            method may produce Single.Nan and Single.Inf values. When the matrix represents a system
            of linear equations, than this often means that either no solution exists or an infinite
            number of solutions exist.
            </remarks>
        </member>
        <member name="M:Spike.Mathematics.Matrix.UpperTriangularForm(Spike.Mathematics.Matrix)">
            <summary>
            Brings the matrix into upper triangular form using elementry row operations.
            </summary>
            <param name="value">The matrix to put into upper triangular form.</param>
            <returns>The upper triangular matrix.</returns>
            <remarks>
            If the matrix is not invertable (i.e. its determinant is zero) than the result of this
            method may produce Single.Nan and Single.Inf values. When the matrix represents a system
            of linear equations, than this often means that either no solution exists or an infinite
            number of solutions exist.
            </remarks>
        </member>
        <member name="M:Spike.Mathematics.Matrix.LowerTriangularForm(Spike.Mathematics.Matrix@,Spike.Mathematics.Matrix@)">
            <summary>
            Brings the matrix into lower triangular form using elementry row operations.
            </summary>
            <param name="value">The matrix to put into lower triangular form.</param>
            <param name="result">When the method completes, contains the lower triangular matrix.</param>
            <remarks>
            If the matrix is not invertable (i.e. its determinant is zero) than the result of this
            method may produce Single.Nan and Single.Inf values. When the matrix represents a system
            of linear equations, than this often means that either no solution exists or an infinite
            number of solutions exist.
            </remarks>
        </member>
        <member name="M:Spike.Mathematics.Matrix.LowerTriangularForm(Spike.Mathematics.Matrix)">
            <summary>
            Brings the matrix into lower triangular form using elementry row operations.
            </summary>
            <param name="value">The matrix to put into lower triangular form.</param>
            <returns>The lower triangular matrix.</returns>
            <remarks>
            If the matrix is not invertable (i.e. its determinant is zero) than the result of this
            method may produce Single.Nan and Single.Inf values. When the matrix represents a system
            of linear equations, than this often means that either no solution exists or an infinite
            number of solutions exist.
            </remarks>
        </member>
        <member name="M:Spike.Mathematics.Matrix.RowEchelonForm(Spike.Mathematics.Matrix@,Spike.Mathematics.Matrix@)">
            <summary>
            Brings the matrix into row echelon form using elementry row operations;
            </summary>
            <param name="value">The matrix to put into row echelon form.</param>
            <param name="result">When the method completes, contains the row echelon form of the matrix.</param>
        </member>
        <member name="M:Spike.Mathematics.Matrix.RowEchelonForm(Spike.Mathematics.Matrix)">
            <summary>
            Brings the matrix into row echelon form using elementry row operations;
            </summary>
            <param name="value">The matrix to put into row echelon form.</param>
            <returns>When the method completes, contains the row echelon form of the matrix.</returns>
        </member>
        <member name="M:Spike.Mathematics.Matrix.ReducedRowEchelonForm(Spike.Mathematics.Matrix@,Spike.Mathematics.Vector4@,Spike.Mathematics.Matrix@,Spike.Mathematics.Vector4@)">
            <summary>
            Brings the matrix into reduced row echelon form using elementry row operations.
            </summary>
            <param name="value">The matrix to put into reduced row echelon form.</param>
            <param name="augment">The fifth column of the matrix.</param>
            <param name="result">When the method completes, contains the resultant matrix after the operation.</param>
            <param name="augmentResult">When the method completes, contains the resultant fifth column of the matrix.</param>
            <remarks>
            <para>The fifth column is often called the agumented part of the matrix. This is because the fifth
            column is really just an extension of the matrix so that there is a place to put all of the
            non-zero components after the operation is complete.</para>
            <para>Often times the resultant matrix will the identity matrix or a matrix similar to the identity
            matrix. Sometimes, however, that is not possible and numbers other than zero and one may appear.</para>
            <para>This method can be used to solve systems of linear equations. Upon completion of this method,
            the <paramref name="augmentResult"/> will contain the solution for the system. It is up to the user
            to analyze both the input and the result to determine if a solution really exists.</para>
            </remarks>
        </member>
        <member name="M:Spike.Mathematics.Matrix.Billboard(Spike.Mathematics.Vector3@,Spike.Mathematics.Vector3@,Spike.Mathematics.Vector3@,Spike.Mathematics.Vector3@,Spike.Mathematics.Matrix@)">
            <summary>
            Creates a spherical billboard that rotates around a specified object position.
            </summary>
            <param name="objectPosition">The position of the object around which the billboard will rotate.</param>
            <param name="cameraPosition">The position of the camera.</param>
            <param name="cameraUpVector">The up vector of the camera.</param>
            <param name="cameraForwardVector">The forward vector of the camera.</param>
            <param name="result">When the method completes, contains the created billboard matrix.</param>
        </member>
        <member name="M:Spike.Mathematics.Matrix.Billboard(Spike.Mathematics.Vector3,Spike.Mathematics.Vector3,Spike.Mathematics.Vector3,Spike.Mathematics.Vector3)">
            <summary>
            Creates a spherical billboard that rotates around a specified object position.
            </summary>
            <param name="objectPosition">The position of the object around which the billboard will rotate.</param>
            <param name="cameraPosition">The position of the camera.</param>
            <param name="cameraUpVector">The up vector of the camera.</param>
            <param name="cameraForwardVector">The forward vector of the camera.</param>
            <returns>The created billboard matrix.</returns>
        </member>
        <member name="M:Spike.Mathematics.Matrix.LookAtLH(Spike.Mathematics.Vector3@,Spike.Mathematics.Vector3@,Spike.Mathematics.Vector3@,Spike.Mathematics.Matrix@)">
            <summary>
            Creates a left-handed, look-at matrix.
            </summary>
            <param name="eye">The position of the viewer's eye.</param>
            <param name="target">The camera look-at target.</param>
            <param name="up">The camera's up vector.</param>
            <param name="result">When the method completes, contains the created look-at matrix.</param>
        </member>
        <member name="M:Spike.Mathematics.Matrix.LookAtLH(Spike.Mathematics.Vector3,Spike.Mathematics.Vector3,Spike.Mathematics.Vector3)">
            <summary>
            Creates a left-handed, look-at matrix.
            </summary>
            <param name="eye">The position of the viewer's eye.</param>
            <param name="target">The camera look-at target.</param>
            <param name="up">The camera's up vector.</param>
            <returns>The created look-at matrix.</returns>
        </member>
        <member name="M:Spike.Mathematics.Matrix.LookAtRH(Spike.Mathematics.Vector3@,Spike.Mathematics.Vector3@,Spike.Mathematics.Vector3@,Spike.Mathematics.Matrix@)">
            <summary>
            Creates a right-handed, look-at matrix.
            </summary>
            <param name="eye">The position of the viewer's eye.</param>
            <param name="target">The camera look-at target.</param>
            <param name="up">The camera's up vector.</param>
            <param name="result">When the method completes, contains the created look-at matrix.</param>
        </member>
        <member name="M:Spike.Mathematics.Matrix.LookAtRH(Spike.Mathematics.Vector3,Spike.Mathematics.Vector3,Spike.Mathematics.Vector3)">
            <summary>
            Creates a right-handed, look-at matrix.
            </summary>
            <param name="eye">The position of the viewer's eye.</param>
            <param name="target">The camera look-at target.</param>
            <param name="up">The camera's up vector.</param>
            <returns>The created look-at matrix.</returns>
        </member>
        <member name="M:Spike.Mathematics.Matrix.OrthoLH(System.Single,System.Single,System.Single,System.Single,Spike.Mathematics.Matrix@)">
            <summary>
            Creates a left-handed, orthographic projection matrix.
            </summary>
            <param name="width">Width of the viewing volume.</param>
            <param name="height">Height of the viewing volume.</param>
            <param name="znear">Minimum z-value of the viewing volume.</param>
            <param name="zfar">Maximum z-value of the viewing volume.</param>
            <param name="result">When the method completes, contains the created projection matrix.</param>
        </member>
        <member name="M:Spike.Mathematics.Matrix.OrthoLH(System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Creates a left-handed, orthographic projection matrix.
            </summary>
            <param name="width">Width of the viewing volume.</param>
            <param name="height">Height of the viewing volume.</param>
            <param name="znear">Minimum z-value of the viewing volume.</param>
            <param name="zfar">Maximum z-value of the viewing volume.</param>
            <returns>The created projection matrix.</returns>
        </member>
        <member name="M:Spike.Mathematics.Matrix.OrthoRH(System.Single,System.Single,System.Single,System.Single,Spike.Mathematics.Matrix@)">
            <summary>
            Creates a right-handed, orthographic projection matrix.
            </summary>
            <param name="width">Width of the viewing volume.</param>
            <param name="height">Height of the viewing volume.</param>
            <param name="znear">Minimum z-value of the viewing volume.</param>
            <param name="zfar">Maximum z-value of the viewing volume.</param>
            <param name="result">When the method completes, contains the created projection matrix.</param>
        </member>
        <member name="M:Spike.Mathematics.Matrix.OrthoRH(System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Creates a right-handed, orthographic projection matrix.
            </summary>
            <param name="width">Width of the viewing volume.</param>
            <param name="height">Height of the viewing volume.</param>
            <param name="znear">Minimum z-value of the viewing volume.</param>
            <param name="zfar">Maximum z-value of the viewing volume.</param>
            <returns>The created projection matrix.</returns>
        </member>
        <member name="M:Spike.Mathematics.Matrix.OrthoOffCenterLH(System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,Spike.Mathematics.Matrix@)">
            <summary>
            Creates a left-handed, customized orthographic projection matrix.
            </summary>
            <param name="left">Minimum x-value of the viewing volume.</param>
            <param name="right">Maximum x-value of the viewing volume.</param>
            <param name="bottom">Minimum y-value of the viewing volume.</param>
            <param name="top">Maximum y-value of the viewing volume.</param>
            <param name="znear">Minimum z-value of the viewing volume.</param>
            <param name="zfar">Maximum z-value of the viewing volume.</param>
            <param name="result">When the method completes, contains the created projection matrix.</param>
        </member>
        <member name="M:Spike.Mathematics.Matrix.OrthoOffCenterLH(System.Single,System.Single,System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Creates a left-handed, customized orthographic projection matrix.
            </summary>
            <param name="left">Minimum x-value of the viewing volume.</param>
            <param name="right">Maximum x-value of the viewing volume.</param>
            <param name="bottom">Minimum y-value of the viewing volume.</param>
            <param name="top">Maximum y-value of the viewing volume.</param>
            <param name="znear">Minimum z-value of the viewing volume.</param>
            <param name="zfar">Maximum z-value of the viewing volume.</param>
            <returns>The created projection matrix.</returns>
        </member>
        <member name="M:Spike.Mathematics.Matrix.OrthoOffCenterRH(System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,Spike.Mathematics.Matrix@)">
            <summary>
            Creates a right-handed, customized orthographic projection matrix.
            </summary>
            <param name="left">Minimum x-value of the viewing volume.</param>
            <param name="right">Maximum x-value of the viewing volume.</param>
            <param name="bottom">Minimum y-value of the viewing volume.</param>
            <param name="top">Maximum y-value of the viewing volume.</param>
            <param name="znear">Minimum z-value of the viewing volume.</param>
            <param name="zfar">Maximum z-value of the viewing volume.</param>
            <param name="result">When the method completes, contains the created projection matrix.</param>
        </member>
        <member name="M:Spike.Mathematics.Matrix.OrthoOffCenterRH(System.Single,System.Single,System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Creates a right-handed, customized orthographic projection matrix.
            </summary>
            <param name="left">Minimum x-value of the viewing volume.</param>
            <param name="right">Maximum x-value of the viewing volume.</param>
            <param name="bottom">Minimum y-value of the viewing volume.</param>
            <param name="top">Maximum y-value of the viewing volume.</param>
            <param name="znear">Minimum z-value of the viewing volume.</param>
            <param name="zfar">Maximum z-value of the viewing volume.</param>
            <returns>The created projection matrix.</returns>
        </member>
        <member name="M:Spike.Mathematics.Matrix.PerspectiveLH(System.Single,System.Single,System.Single,System.Single,Spike.Mathematics.Matrix@)">
            <summary>
            Creates a left-handed, perspective projection matrix.
            </summary>
            <param name="width">Width of the viewing volume.</param>
            <param name="height">Height of the viewing volume.</param>
            <param name="znear">Minimum z-value of the viewing volume.</param>
            <param name="zfar">Maximum z-value of the viewing volume.</param>
            <param name="result">When the method completes, contains the created projection matrix.</param>
        </member>
        <member name="M:Spike.Mathematics.Matrix.PerspectiveLH(System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Creates a left-handed, perspective projection matrix.
            </summary>
            <param name="width">Width of the viewing volume.</param>
            <param name="height">Height of the viewing volume.</param>
            <param name="znear">Minimum z-value of the viewing volume.</param>
            <param name="zfar">Maximum z-value of the viewing volume.</param>
            <returns>The created projection matrix.</returns>
        </member>
        <member name="M:Spike.Mathematics.Matrix.PerspectiveRH(System.Single,System.Single,System.Single,System.Single,Spike.Mathematics.Matrix@)">
            <summary>
            Creates a right-handed, perspective projection matrix.
            </summary>
            <param name="width">Width of the viewing volume.</param>
            <param name="height">Height of the viewing volume.</param>
            <param name="znear">Minimum z-value of the viewing volume.</param>
            <param name="zfar">Maximum z-value of the viewing volume.</param>
            <param name="result">When the method completes, contains the created projection matrix.</param>
        </member>
        <member name="M:Spike.Mathematics.Matrix.PerspectiveRH(System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Creates a right-handed, perspective projection matrix.
            </summary>
            <param name="width">Width of the viewing volume.</param>
            <param name="height">Height of the viewing volume.</param>
            <param name="znear">Minimum z-value of the viewing volume.</param>
            <param name="zfar">Maximum z-value of the viewing volume.</param>
            <returns>The created projection matrix.</returns>
        </member>
        <member name="M:Spike.Mathematics.Matrix.PerspectiveFovLH(System.Single,System.Single,System.Single,System.Single,Spike.Mathematics.Matrix@)">
            <summary>
            Creates a left-handed, perspective projection matrix based on a field of view.
            </summary>
            <param name="fov">Field of view in the y direction, in radians.</param>
            <param name="aspect">Aspect ratio, defined as view space width divided by height.</param>
            <param name="znear">Minimum z-value of the viewing volume.</param>
            <param name="zfar">Maximum z-value of the viewing volume.</param>
            <param name="result">When the method completes, contains the created projection matrix.</param>
        </member>
        <member name="M:Spike.Mathematics.Matrix.PerspectiveFovLH(System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Creates a left-handed, perspective projection matrix based on a field of view.
            </summary>
            <param name="fov">Field of view in the y direction, in radians.</param>
            <param name="aspect">Aspect ratio, defined as view space width divided by height.</param>
            <param name="znear">Minimum z-value of the viewing volume.</param>
            <param name="zfar">Maximum z-value of the viewing volume.</param>
            <returns>The created projection matrix.</returns>
        </member>
        <member name="M:Spike.Mathematics.Matrix.PerspectiveFovRH(System.Single,System.Single,System.Single,System.Single,Spike.Mathematics.Matrix@)">
            <summary>
            Creates a right-handed, perspective projection matrix based on a field of view.
            </summary>
            <param name="fov">Field of view in the y direction, in radians.</param>
            <param name="aspect">Aspect ratio, defined as view space width divided by height.</param>
            <param name="znear">Minimum z-value of the viewing volume.</param>
            <param name="zfar">Maximum z-value of the viewing volume.</param>
            <param name="result">When the method completes, contains the created projection matrix.</param>
        </member>
        <member name="M:Spike.Mathematics.Matrix.PerspectiveFovRH(System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Creates a right-handed, perspective projection matrix based on a field of view.
            </summary>
            <param name="fov">Field of view in the y direction, in radians.</param>
            <param name="aspect">Aspect ratio, defined as view space width divided by height.</param>
            <param name="znear">Minimum z-value of the viewing volume.</param>
            <param name="zfar">Maximum z-value of the viewing volume.</param>
            <returns>The created projection matrix.</returns>
        </member>
        <member name="M:Spike.Mathematics.Matrix.PerspectiveOffCenterLH(System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,Spike.Mathematics.Matrix@)">
            <summary>
            Creates a left-handed, customized perspective projection matrix.
            </summary>
            <param name="left">Minimum x-value of the viewing volume.</param>
            <param name="right">Maximum x-value of the viewing volume.</param>
            <param name="bottom">Minimum y-value of the viewing volume.</param>
            <param name="top">Maximum y-value of the viewing volume.</param>
            <param name="znear">Minimum z-value of the viewing volume.</param>
            <param name="zfar">Maximum z-value of the viewing volume.</param>
            <param name="result">When the method completes, contains the created projection matrix.</param>
        </member>
        <member name="M:Spike.Mathematics.Matrix.PerspectiveOffCenterLH(System.Single,System.Single,System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Creates a left-handed, customized perspective projection matrix.
            </summary>
            <param name="left">Minimum x-value of the viewing volume.</param>
            <param name="right">Maximum x-value of the viewing volume.</param>
            <param name="bottom">Minimum y-value of the viewing volume.</param>
            <param name="top">Maximum y-value of the viewing volume.</param>
            <param name="znear">Minimum z-value of the viewing volume.</param>
            <param name="zfar">Maximum z-value of the viewing volume.</param>
            <returns>The created projection matrix.</returns>
        </member>
        <member name="M:Spike.Mathematics.Matrix.PerspectiveOffCenterRH(System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,Spike.Mathematics.Matrix@)">
            <summary>
            Creates a right-handed, customized perspective projection matrix.
            </summary>
            <param name="left">Minimum x-value of the viewing volume.</param>
            <param name="right">Maximum x-value of the viewing volume.</param>
            <param name="bottom">Minimum y-value of the viewing volume.</param>
            <param name="top">Maximum y-value of the viewing volume.</param>
            <param name="znear">Minimum z-value of the viewing volume.</param>
            <param name="zfar">Maximum z-value of the viewing volume.</param>
            <param name="result">When the method completes, contains the created projection matrix.</param>
        </member>
        <member name="M:Spike.Mathematics.Matrix.PerspectiveOffCenterRH(System.Single,System.Single,System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Creates a right-handed, customized perspective projection matrix.
            </summary>
            <param name="left">Minimum x-value of the viewing volume.</param>
            <param name="right">Maximum x-value of the viewing volume.</param>
            <param name="bottom">Minimum y-value of the viewing volume.</param>
            <param name="top">Maximum y-value of the viewing volume.</param>
            <param name="znear">Minimum z-value of the viewing volume.</param>
            <param name="zfar">Maximum z-value of the viewing volume.</param>
            <returns>The created projection matrix.</returns>
        </member>
        <member name="M:Spike.Mathematics.Matrix.Reflection(Spike.Mathematics.Plane@,Spike.Mathematics.Matrix@)">
            <summary>
            Builds a matrix that can be used to reflect vectors about a plane.
            </summary>
            <param name="plane">The plane for which the reflection occurs. This parameter is assumed to be normalized.</param>
            <param name="result">When the method completes, contains the reflection matrix.</param>
        </member>
        <member name="M:Spike.Mathematics.Matrix.Reflection(Spike.Mathematics.Plane)">
            <summary>
            Builds a matrix that can be used to reflect vectors about a plane.
            </summary>
            <param name="plane">The plane for which the reflection occurs. This parameter is assumed to be normalized.</param>
            <returns>The reflection matrix.</returns>
        </member>
        <member name="M:Spike.Mathematics.Matrix.Shadow(Spike.Mathematics.Vector4@,Spike.Mathematics.Plane@,Spike.Mathematics.Matrix@)">
            <summary>
            Creates a matrix that flattens geometry into a shadow.
            </summary>
            <param name="light">The light direction. If the W component is 0, the light is directional light; if the
            W component is 1, the light is a point light.</param>
            <param name="plane">The plane onto which to project the geometry as a shadow. This parameter is assumed to be normalized.</param>
            <param name="result">When the method completes, contains the shadow matrix.</param>
        </member>
        <member name="M:Spike.Mathematics.Matrix.Shadow(Spike.Mathematics.Vector4,Spike.Mathematics.Plane)">
            <summary>
            Creates a matrix that flattens geometry into a shadow.
            </summary>
            <param name="light">The light direction. If the W component is 0, the light is directional light; if the
            W component is 1, the light is a point light.</param>
            <param name="plane">The plane onto which to project the geometry as a shadow. This parameter is assumed to be normalized.</param>
            <returns>The shadow matrix.</returns>
        </member>
        <member name="M:Spike.Mathematics.Matrix.Scaling(Spike.Mathematics.Vector3@,Spike.Mathematics.Matrix@)">
            <summary>
            Creates a matrix that scales along the x-axis, y-axis, and y-axis.
            </summary>
            <param name="scale">Scaling factor for all three axes.</param>
            <param name="result">When the method completes, contains the created scaling matrix.</param>
        </member>
        <member name="M:Spike.Mathematics.Matrix.Scaling(Spike.Mathematics.Vector3)">
            <summary>
            Creates a matrix that scales along the x-axis, y-axis, and y-axis.
            </summary>
            <param name="scale">Scaling factor for all three axes.</param>
            <returns>The created scaling matrix.</returns>
        </member>
        <member name="M:Spike.Mathematics.Matrix.Scaling(System.Single,System.Single,System.Single,Spike.Mathematics.Matrix@)">
            <summary>
            Creates a matrix that scales along the x-axis, y-axis, and y-axis.
            </summary>
            <param name="x">Scaling factor that is applied along the x-axis.</param>
            <param name="y">Scaling factor that is applied along the y-axis.</param>
            <param name="z">Scaling factor that is applied along the z-axis.</param>
            <param name="result">When the method completes, contains the created scaling matrix.</param>
        </member>
        <member name="M:Spike.Mathematics.Matrix.Scaling(System.Single,System.Single,System.Single)">
            <summary>
            Creates a matrix that scales along the x-axis, y-axis, and y-axis.
            </summary>
            <param name="x">Scaling factor that is applied along the x-axis.</param>
            <param name="y">Scaling factor that is applied along the y-axis.</param>
            <param name="z">Scaling factor that is applied along the z-axis.</param>
            <returns>The created scaling matrix.</returns>
        </member>
        <member name="M:Spike.Mathematics.Matrix.Scaling(System.Single,Spike.Mathematics.Matrix@)">
            <summary>
            Creates a matrix that uniformally scales along all three axis.
            </summary>
            <param name="scale">The uniform scale that is applied along all axis.</param>
            <param name="result">When the method completes, contains the created scaling matrix.</param>
        </member>
        <member name="M:Spike.Mathematics.Matrix.Scaling(System.Single)">
            <summary>
            Creates a matrix that uniformally scales along all three axis.
            </summary>
            <param name="scale">The uniform scale that is applied along all axis.</param>
            <returns>The created scaling matrix.</returns>
        </member>
        <member name="M:Spike.Mathematics.Matrix.RotationX(System.Single,Spike.Mathematics.Matrix@)">
            <summary>
            Creates a matrix that rotates around the x-axis.
            </summary>
            <param name="angle">Angle of rotation in radians. Angles are measured clockwise when looking along the rotation axis toward the origin.</param>
            <param name="result">When the method completes, contains the created rotation matrix.</param>
        </member>
        <member name="M:Spike.Mathematics.Matrix.RotationX(System.Single)">
            <summary>
            Creates a matrix that rotates around the x-axis.
            </summary>
            <param name="angle">Angle of rotation in radians. Angles are measured clockwise when looking along the rotation axis toward the origin.</param>
            <returns>The created rotation matrix.</returns>
        </member>
        <member name="M:Spike.Mathematics.Matrix.RotationY(System.Single,Spike.Mathematics.Matrix@)">
            <summary>
            Creates a matrix that rotates around the y-axis.
            </summary>
            <param name="angle">Angle of rotation in radians. Angles are measured clockwise when looking along the rotation axis toward the origin.</param>
            <param name="result">When the method completes, contains the created rotation matrix.</param>
        </member>
        <member name="M:Spike.Mathematics.Matrix.RotationY(System.Single)">
            <summary>
            Creates a matrix that rotates around the y-axis.
            </summary>
            <param name="angle">Angle of rotation in radians. Angles are measured clockwise when looking along the rotation axis toward the origin.</param>
            <returns>The created rotation matrix.</returns>
        </member>
        <member name="M:Spike.Mathematics.Matrix.RotationZ(System.Single,Spike.Mathematics.Matrix@)">
            <summary>
            Creates a matrix that rotates around the z-axis.
            </summary>
            <param name="angle">Angle of rotation in radians. Angles are measured clockwise when looking along the rotation axis toward the origin.</param>
            <param name="result">When the method completes, contains the created rotation matrix.</param>
        </member>
        <member name="M:Spike.Mathematics.Matrix.RotationZ(System.Single)">
            <summary>
            Creates a matrix that rotates around the z-axis.
            </summary>
            <param name="angle">Angle of rotation in radians. Angles are measured clockwise when looking along the rotation axis toward the origin.</param>
            <returns>The created rotation matrix.</returns>
        </member>
        <member name="M:Spike.Mathematics.Matrix.RotationAxis(Spike.Mathematics.Vector3@,System.Single,Spike.Mathematics.Matrix@)">
            <summary>
            Creates a matrix that rotates around an arbitary axis.
            </summary>
            <param name="axis">The axis around which to rotate. This parameter is assumed to be normalized.</param>
            <param name="angle">Angle of rotation in radians. Angles are measured clockwise when looking along the rotation axis toward the origin.</param>
            <param name="result">When the method completes, contains the created rotation matrix.</param>
        </member>
        <member name="M:Spike.Mathematics.Matrix.RotationAxis(Spike.Mathematics.Vector3,System.Single)">
            <summary>
            Creates a matrix that rotates around an arbitary axis.
            </summary>
            <param name="axis">The axis around which to rotate. This parameter is assumed to be normalized.</param>
            <param name="angle">Angle of rotation in radians. Angles are measured clockwise when looking along the rotation axis toward the origin.</param>
            <returns>The created rotation matrix.</returns>
        </member>
        <member name="M:Spike.Mathematics.Matrix.RotationQuaternion(Spike.Mathematics.Quaternion@,Spike.Mathematics.Matrix@)">
            <summary>
            Creates a rotation matrix from a quaternion.
            </summary>
            <param name="rotation">The quaternion to use to build the matrix.</param>
            <param name="result">The created rotation matrix.</param>
        </member>
        <member name="M:Spike.Mathematics.Matrix.RotationQuaternion(Spike.Mathematics.Quaternion)">
            <summary>
            Creates a rotation matrix from a quaternion.
            </summary>
            <param name="rotation">The quaternion to use to build the matrix.</param>
            <returns>The created rotation matrix.</returns>
        </member>
        <member name="M:Spike.Mathematics.Matrix.RotationYawPitchRoll(System.Single,System.Single,System.Single,Spike.Mathematics.Matrix@)">
            <summary>
            Creates a rotation matrix with a specified yaw, pitch, and roll.
            </summary>
            <param name="yaw">Yaw around the y-axis, in radians.</param>
            <param name="pitch">Pitch around the x-axis, in radians.</param>
            <param name="roll">Roll around the z-axis, in radians.</param>
            <param name="result">When the method completes, contains the created rotation matrix.</param>
        </member>
        <member name="M:Spike.Mathematics.Matrix.RotationYawPitchRoll(System.Single,System.Single,System.Single)">
            <summary>
            Creates a rotation matrix with a specified yaw, pitch, and roll.
            </summary>
            <param name="yaw">Yaw around the y-axis, in radians.</param>
            <param name="pitch">Pitch around the x-axis, in radians.</param>
            <param name="roll">Roll around the z-axis, in radians.</param>
            <returns>The created rotation matrix.</returns>
        </member>
        <member name="M:Spike.Mathematics.Matrix.Translation(Spike.Mathematics.Vector3@,Spike.Mathematics.Matrix@)">
            <summary>
            Creates a translation matrix using the specified offsets.
            </summary>
            <param name="value">The offset for all three coordinate planes.</param>
            <param name="result">When the method completes, contains the created translation matrix.</param>
        </member>
        <member name="M:Spike.Mathematics.Matrix.Translation(Spike.Mathematics.Vector3)">
            <summary>
            Creates a translation matrix using the specified offsets.
            </summary>
            <param name="value">The offset for all three coordinate planes.</param>
            <returns>The created translation matrix.</returns>
        </member>
        <member name="M:Spike.Mathematics.Matrix.Translation(System.Single,System.Single,System.Single,Spike.Mathematics.Matrix@)">
            <summary>
            Creates a translation matrix using the specified offsets.
            </summary>
            <param name="x">X-coordinate offset.</param>
            <param name="y">Y-coordinate offset.</param>
            <param name="z">Z-coordinate offset.</param>
            <param name="result">When the method completes, contains the created translation matrix.</param>
        </member>
        <member name="M:Spike.Mathematics.Matrix.Translation(System.Single,System.Single,System.Single)">
            <summary>
            Creates a translation matrix using the specified offsets.
            </summary>
            <param name="x">X-coordinate offset.</param>
            <param name="y">Y-coordinate offset.</param>
            <param name="z">Z-coordinate offset.</param>
            <returns>The created translation matrix.</returns>
        </member>
        <member name="M:Spike.Mathematics.Matrix.AffineTransformation(System.Single,Spike.Mathematics.Quaternion@,Spike.Mathematics.Vector3@,Spike.Mathematics.Matrix@)">
            <summary>
            Creates a 3D affine transformation matrix.
            </summary>
            <param name="scaling">Scaling factor.</param>
            <param name="rotation">The rotation of the transformation.</param>
            <param name="translation">The translation factor of the transformation.</param>
            <param name="result">When the method completes, contains the created affine transformation matrix.</param>
        </member>
        <member name="M:Spike.Mathematics.Matrix.AffineTransformation(System.Single,Spike.Mathematics.Quaternion,Spike.Mathematics.Vector3)">
            <summary>
            Creates a 3D affine transformation matrix.
            </summary>
            <param name="scaling">Scaling factor.</param>
            <param name="rotation">The rotation of the transformation.</param>
            <param name="translation">The translation factor of the transformation.</param>
            <returns>The created affine transformation matrix.</returns>
        </member>
        <member name="M:Spike.Mathematics.Matrix.AffineTransformation(System.Single,Spike.Mathematics.Vector3@,Spike.Mathematics.Quaternion@,Spike.Mathematics.Vector3@,Spike.Mathematics.Matrix@)">
            <summary>
            Creates a 3D affine transformation matrix.
            </summary>
            <param name="scaling">Scaling factor.</param>
            <param name="rotationCenter">The center of the rotation.</param>
            <param name="rotation">The rotation of the transformation.</param>
            <param name="translation">The translation factor of the transformation.</param>
            <param name="result">When the method completes, contains the created affine transformation matrix.</param>
        </member>
        <member name="M:Spike.Mathematics.Matrix.AffineTransformation(System.Single,Spike.Mathematics.Vector3,Spike.Mathematics.Quaternion,Spike.Mathematics.Vector3)">
            <summary>
            Creates a 3D affine transformation matrix.
            </summary>
            <param name="scaling">Scaling factor.</param>
            <param name="rotationCenter">The center of the rotation.</param>
            <param name="rotation">The rotation of the transformation.</param>
            <param name="translation">The translation factor of the transformation.</param>
            <returns>The created affine transformation matrix.</returns>
        </member>
        <member name="M:Spike.Mathematics.Matrix.AffineTransformation2D(System.Single,System.Single,Spike.Mathematics.Vector2@,Spike.Mathematics.Matrix@)">
            <summary>
            Creates a 2D affine transformation matrix.
            </summary>
            <param name="scaling">Scaling factor.</param>
            <param name="rotation">The rotation of the transformation.</param>
            <param name="translation">The translation factor of the transformation.</param>
            <param name="result">When the method completes, contains the created affine transformation matrix.</param>
        </member>
        <member name="M:Spike.Mathematics.Matrix.AffineTransformation2D(System.Single,System.Single,Spike.Mathematics.Vector2)">
            <summary>
            Creates a 2D affine transformation matrix.
            </summary>
            <param name="scaling">Scaling factor.</param>
            <param name="rotation">The rotation of the transformation.</param>
            <param name="translation">The translation factor of the transformation.</param>
            <returns>The created affine transformation matrix.</returns>
        </member>
        <member name="M:Spike.Mathematics.Matrix.AffineTransformation2D(System.Single,Spike.Mathematics.Vector2@,System.Single,Spike.Mathematics.Vector2@,Spike.Mathematics.Matrix@)">
            <summary>
            Creates a 2D affine transformation matrix.
            </summary>
            <param name="scaling">Scaling factor.</param>
            <param name="rotationCenter">The center of the rotation.</param>
            <param name="rotation">The rotation of the transformation.</param>
            <param name="translation">The translation factor of the transformation.</param>
            <param name="result">When the method completes, contains the created affine transformation matrix.</param>
        </member>
        <member name="M:Spike.Mathematics.Matrix.AffineTransformation2D(System.Single,Spike.Mathematics.Vector2,System.Single,Spike.Mathematics.Vector2)">
            <summary>
            Creates a 2D affine transformation matrix.
            </summary>
            <param name="scaling">Scaling factor.</param>
            <param name="rotationCenter">The center of the rotation.</param>
            <param name="rotation">The rotation of the transformation.</param>
            <param name="translation">The translation factor of the transformation.</param>
            <returns>The created affine transformation matrix.</returns>
        </member>
        <member name="M:Spike.Mathematics.Matrix.Transformation(Spike.Mathematics.Vector3@,Spike.Mathematics.Quaternion@,Spike.Mathematics.Vector3@,Spike.Mathematics.Vector3@,Spike.Mathematics.Quaternion@,Spike.Mathematics.Vector3@,Spike.Mathematics.Matrix@)">
            <summary>
            Creates a transformation matrix.
            </summary>
            <param name="scalingCenter">Center point of the scaling operation.</param>
            <param name="scalingRotation">Scaling rotation amount.</param>
            <param name="scaling">Scaling factor.</param>
            <param name="rotationCenter">The center of the rotation.</param>
            <param name="rotation">The rotation of the transformation.</param>
            <param name="translation">The translation factor of the transformation.</param>
            <param name="result">When the method completes, contains the created transformation matrix.</param>
        </member>
        <member name="M:Spike.Mathematics.Matrix.Transformation(Spike.Mathematics.Vector3,Spike.Mathematics.Quaternion,Spike.Mathematics.Vector3,Spike.Mathematics.Vector3,Spike.Mathematics.Quaternion,Spike.Mathematics.Vector3)">
            <summary>
            Creates a transformation matrix.
            </summary>
            <param name="scalingCenter">Center point of the scaling operation.</param>
            <param name="scalingRotation">Scaling rotation amount.</param>
            <param name="scaling">Scaling factor.</param>
            <param name="rotationCenter">The center of the rotation.</param>
            <param name="rotation">The rotation of the transformation.</param>
            <param name="translation">The translation factor of the transformation.</param>
            <returns>The created transformation matrix.</returns>
        </member>
        <member name="M:Spike.Mathematics.Matrix.Transformation2D(Spike.Mathematics.Vector2@,System.Single,Spike.Mathematics.Vector2@,Spike.Mathematics.Vector2@,System.Single,Spike.Mathematics.Vector2@,Spike.Mathematics.Matrix@)">
            <summary>
            Creates a 2D transformation matrix.
            </summary>
            <param name="scalingCenter">Center point of the scaling operation.</param>
            <param name="scalingRotation">Scaling rotation amount.</param>
            <param name="scaling">Scaling factor.</param>
            <param name="rotationCenter">The center of the rotation.</param>
            <param name="rotation">The rotation of the transformation.</param>
            <param name="translation">The translation factor of the transformation.</param>
            <param name="result">When the method completes, contains the created transformation matrix.</param>
        </member>
        <member name="M:Spike.Mathematics.Matrix.Transformation2D(Spike.Mathematics.Vector2,System.Single,Spike.Mathematics.Vector2,Spike.Mathematics.Vector2,System.Single,Spike.Mathematics.Vector2)">
            <summary>
            Creates a 2D transformation matrix.
            </summary>
            <param name="scalingCenter">Center point of the scaling operation.</param>
            <param name="scalingRotation">Scaling rotation amount.</param>
            <param name="scaling">Scaling factor.</param>
            <param name="rotationCenter">The center of the rotation.</param>
            <param name="rotation">The rotation of the transformation.</param>
            <param name="translation">The translation factor of the transformation.</param>
            <returns>The created transformation matrix.</returns>
        </member>
        <member name="M:Spike.Mathematics.Matrix.op_Addition(Spike.Mathematics.Matrix,Spike.Mathematics.Matrix)">
            <summary>
            Adds two matricies.
            </summary>
            <param name="left">The first matrix to add.</param>
            <param name="right">The second matrix to add.</param>
            <returns>The sum of the two matricies.</returns>
        </member>
        <member name="M:Spike.Mathematics.Matrix.op_UnaryPlus(Spike.Mathematics.Matrix)">
            <summary>
            Assert a matrix (return it unchanged).
            </summary>
            <param name="value">The matrix to assert (unchange).</param>
            <returns>The asserted (unchanged) matrix.</returns>
        </member>
        <member name="M:Spike.Mathematics.Matrix.op_Subtraction(Spike.Mathematics.Matrix,Spike.Mathematics.Matrix)">
            <summary>
            Subtracts two matricies.
            </summary>
            <param name="left">The first matrix to subtract.</param>
            <param name="right">The second matrix to subtract.</param>
            <returns>The difference between the two matricies.</returns>
        </member>
        <member name="M:Spike.Mathematics.Matrix.op_UnaryNegation(Spike.Mathematics.Matrix)">
            <summary>
            Negates a matrix.
            </summary>
            <param name="value">The matrix to negate.</param>
            <returns>The negated matrix.</returns>
        </member>
        <member name="M:Spike.Mathematics.Matrix.op_Multiply(System.Single,Spike.Mathematics.Matrix)">
            <summary>
            Scales a matrix by a given value.
            </summary>
            <param name="right">The matrix to scale.</param>
            <param name="left">The amount by which to scale.</param>
            <returns>The scaled matrix.</returns>
        </member>
        <member name="M:Spike.Mathematics.Matrix.op_Multiply(Spike.Mathematics.Matrix,System.Single)">
            <summary>
            Scales a matrix by a given value.
            </summary>
            <param name="left">The matrix to scale.</param>
            <param name="right">The amount by which to scale.</param>
            <returns>The scaled matrix.</returns>
        </member>
        <member name="M:Spike.Mathematics.Matrix.op_Multiply(Spike.Mathematics.Matrix,Spike.Mathematics.Matrix)">
            <summary>
            Multiplies two matricies.
            </summary>
            <param name="left">The first matrix to multiply.</param>
            <param name="right">The second matrix to multiply.</param>
            <returns>The product of the two matricies.</returns>
        </member>
        <member name="M:Spike.Mathematics.Matrix.op_Division(Spike.Mathematics.Matrix,System.Single)">
            <summary>
            Scales a matrix by a given value.
            </summary>
            <param name="left">The matrix to scale.</param>
            <param name="right">The amount by which to scale.</param>
            <returns>The scaled matrix.</returns>
        </member>
        <member name="M:Spike.Mathematics.Matrix.op_Division(Spike.Mathematics.Matrix,Spike.Mathematics.Matrix)">
            <summary>
            Divides two matricies.
            </summary>
            <param name="left">The first matrix to divide.</param>
            <param name="right">The second matrix to divide.</param>
            <returns>The quotient of the two matricies.</returns>
        </member>
        <member name="M:Spike.Mathematics.Matrix.op_Equality(Spike.Mathematics.Matrix,Spike.Mathematics.Matrix)">
            <summary>
            Tests for equality between two objects.
            </summary>
            <param name="left">The first value to compare.</param>
            <param name="right">The second value to compare.</param>
            <returns><c>true</c> if <paramref name="left"/> has the same value as <paramref name="right"/>; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:Spike.Mathematics.Matrix.op_Inequality(Spike.Mathematics.Matrix,Spike.Mathematics.Matrix)">
            <summary>
            Tests for inequality between two objects.
            </summary>
            <param name="left">The first value to compare.</param>
            <param name="right">The second value to compare.</param>
            <returns><c>true</c> if <paramref name="left"/> has a different value than <paramref name="right"/>; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:Spike.Mathematics.Matrix.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <returns>
            A <see cref="T:System.String"/> that represents this instance.
            </returns>
        </member>
        <member name="M:Spike.Mathematics.Matrix.ToString(System.String)">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <param name="format">The format.</param>
            <returns>
            A <see cref="T:System.String"/> that represents this instance.
            </returns>
        </member>
        <member name="M:Spike.Mathematics.Matrix.ToString(System.IFormatProvider)">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <param name="formatProvider">The format provider.</param>
            <returns>
            A <see cref="T:System.String"/> that represents this instance.
            </returns>
        </member>
        <member name="M:Spike.Mathematics.Matrix.ToString(System.String,System.IFormatProvider)">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <param name="format">The format.</param>
            <param name="formatProvider">The format provider.</param>
            <returns>
            A <see cref="T:System.String"/> that represents this instance.
            </returns>
        </member>
        <member name="M:Spike.Mathematics.Matrix.GetHashCode">
            <summary>
            Returns a hash code for this instance.
            </summary>
            <returns>
            A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table. 
            </returns>
        </member>
        <member name="M:Spike.Mathematics.Matrix.Equals(Spike.Mathematics.Matrix)">
            <summary>
            Determines whether the specified <see cref="T:Spike.Mathematics.Matrix"/> is equal to this instance.
            </summary>
            <param name="other">The <see cref="T:Spike.Mathematics.Matrix"/> to compare with this instance.</param>
            <returns>
            <c>true</c> if the specified <see cref="T:Spike.Mathematics.Matrix"/> is equal to this instance; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Spike.Mathematics.Matrix.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object"/> is equal to this instance.
            </summary>
            <param name="value">The <see cref="T:System.Object"/> to compare with this instance.</param>
            <returns>
            <c>true</c> if the specified <see cref="T:System.Object"/> is equal to this instance; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="P:Spike.Mathematics.Matrix.Row1">
            <summary>
            Gets or sets the first row in the matrix; that is M11, M12, M13, and M14.
            </summary>
        </member>
        <member name="P:Spike.Mathematics.Matrix.Row2">
            <summary>
            Gets or sets the second row in the matrix; that is M21, M22, M23, and M24.
            </summary>
        </member>
        <member name="P:Spike.Mathematics.Matrix.Row3">
            <summary>
            Gets or sets the third row in the matrix; that is M31, M32, M33, and M34.
            </summary>
        </member>
        <member name="P:Spike.Mathematics.Matrix.Row4">
            <summary>
            Gets or sets the fourth row in the matrix; that is M41, M42, M43, and M44.
            </summary>
        </member>
        <member name="P:Spike.Mathematics.Matrix.Column1">
            <summary>
            Gets or sets the first column in the matrix; that is M11, M21, M31, and M41.
            </summary>
        </member>
        <member name="P:Spike.Mathematics.Matrix.Column2">
            <summary>
            Gets or sets the second column in the matrix; that is M12, M22, M32, and M42.
            </summary>
        </member>
        <member name="P:Spike.Mathematics.Matrix.Column3">
            <summary>
            Gets or sets the third column in the matrix; that is M13, M23, M33, and M43.
            </summary>
        </member>
        <member name="P:Spike.Mathematics.Matrix.Column4">
            <summary>
            Gets or sets the fourth column in the matrix; that is M14, M24, M34, and M44.
            </summary>
        </member>
        <member name="P:Spike.Mathematics.Matrix.TranslationVector">
            <summary>
            Gets or sets the translation of the matrix; that is M41, M42, and M43.
            </summary>
        </member>
        <member name="P:Spike.Mathematics.Matrix.ScaleVector">
            <summary>
            Gets or sets the scale of the matrix; that is M11, M22, and M33.
            </summary>
        </member>
        <member name="P:Spike.Mathematics.Matrix.IsIdentity">
            <summary>
            Gets a value indicating whether this instance is an identity matrix.
            </summary>
            <value>
            <c>true</c> if this instance is an identity matrix; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Spike.Mathematics.Matrix.Item(System.Int32)">
            <summary>
            Gets or sets the component at the specified index.
            </summary>
            <value>The value of the matrix component, depending on the index.</value>
            <param name="index">The zero-based index of the component to access.</param>
            <returns>The value of the component at the specified index.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown when the <paramref name="index"/> is out of the range [0, 15].</exception>
        </member>
        <member name="P:Spike.Mathematics.Matrix.Item(System.Int32,System.Int32)">
            <summary>
            Gets or sets the component at the specified index.
            </summary>
            <value>The value of the matrix component, depending on the index.</value>
            <param name="row">The row of the matrix to access.</param>
            <param name="column">The column of the matrix to access.</param>
            <returns>The value of the component at the specified index.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown when the <paramref name="row"/> or <paramref name="column"/>is out of the range [0, 3].</exception>
        </member>
        <member name="T:Spike.Mathematics.Plane">
            <summary>
            Represents a plane in three dimensional space.
            </summary>
        </member>
        <member name="F:Spike.Mathematics.Plane.Normal">
            <summary>
            The normal vector of the plane.
            </summary>
        </member>
        <member name="F:Spike.Mathematics.Plane.D">
            <summary>
            The distance of the plane along its normal from the origin.
            </summary>
        </member>
        <member name="M:Spike.Mathematics.Plane.#ctor(System.Single)">
            <summary>
            Initializes a new instance of the <see cref="T:Spike.Mathematics.Plane"/> struct.
            </summary>
            <param name="value">The value that will be assigned to all components.</param>
        </member>
        <member name="M:Spike.Mathematics.Plane.#ctor(System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Initializes a new instance of the <see cref="T:Spike.Mathematics.Plane"/> struct.
            </summary>
            <param name="a">The X component of the normal.</param>
            <param name="b">The Y component of the normal.</param>
            <param name="c">The Z component of the normal.</param>
            <param name="d">The distance of the plane along its normal from the origin.</param>
        </member>
        <member name="M:Spike.Mathematics.Plane.#ctor(Spike.Mathematics.Vector3,System.Single)">
            <summary>
            Initializes a new instance of the <see cref="T:Spike.Mathematics.Plane"/> struct.
            </summary>
            <param name="value">The normal of the plane.</param>
            <param name="d">The distance of the plane along its normal from the origin</param>
        </member>
        <member name="M:Spike.Mathematics.Plane.#ctor(Spike.Mathematics.Vector3,Spike.Mathematics.Vector3,Spike.Mathematics.Vector3)">
            <summary>
            Initializes a new instance of the <see cref="T:Spike.Mathematics.Plane"/> struct.
            </summary>
            <param name="point1">First point of a triangle defining the plane.</param>
            <param name="point2">Second point of a triangle defining the plane.</param>
            <param name="point3">Third point of a triangle defining the plane.</param>
        </member>
        <member name="M:Spike.Mathematics.Plane.#ctor(System.Single[])">
            <summary>
            Initializes a new instance of the <see cref="T:Spike.Mathematics.Plane"/> struct.
            </summary>
            <param name="values">The values to assign to the A, B, C, and D components of the plane. This must be an array with four elements.</param>
            <exception cref="T:System.ArgumentNullException">Thrown when <paramref name="values"/> is <c>null</c>.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown when <paramref name="values"/> contains more or less than four elements.</exception>
        </member>
        <member name="M:Spike.Mathematics.Plane.Normalize">
            <summary>
            Changes the coefficients of the normal vector of the plane to make it of unit length.
            </summary>
        </member>
        <member name="M:Spike.Mathematics.Plane.ToArray">
            <summary>
            Creates an array containing the elements of the plane.
            </summary>
            <returns>A four-element array containing the components of the plane.</returns>
        </member>
        <member name="M:Spike.Mathematics.Plane.Intersects(Spike.Mathematics.Vector3@)">
            <summary>
            Determines if there is an intersection between the current object and a point.
            </summary>
            <param name="point">The point to test.</param>
            <returns>Whether the two objects intersected.</returns>
        </member>
        <member name="M:Spike.Mathematics.Plane.Intersects(Spike.Mathematics.Ray@)">
            <summary>
            Determines if there is an intersection between the current object and a <see cref="T:Spike.Mathematics.Ray"/>.
            </summary>
            <param name="ray">The ray to test.</param>
            <returns>Whether the two objects intersected.</returns>
        </member>
        <member name="M:Spike.Mathematics.Plane.Intersects(Spike.Mathematics.Ray@,System.Single@)">
            <summary>
            Determines if there is an intersection between the current object and a <see cref="T:Spike.Mathematics.Ray"/>.
            </summary>
            <param name="ray">The ray to test.</param>
            <param name="distance">When the method completes, contains the distance of the intersection,
            or 0 if there was no intersection.</param>
            <returns>Whether the two objects intersected.</returns>
        </member>
        <member name="M:Spike.Mathematics.Plane.Intersects(Spike.Mathematics.Ray@,Spike.Mathematics.Vector3@)">
            <summary>
            Determines if there is an intersection between the current object and a <see cref="T:Spike.Mathematics.Ray"/>.
            </summary>
            <param name="ray">The ray to test.</param>
            <param name="point">When the method completes, contains the point of intersection,
            or <see cref="F:Spike.Mathematics.Vector3.Zero"/> if there was no intersection.</param>
            <returns>Whether the two objects intersected.</returns>
        </member>
        <member name="M:Spike.Mathematics.Plane.Intersects(Spike.Mathematics.Plane@)">
            <summary>
            Determines if there is an intersection between the current object and a <see cref="T:Spike.Mathematics.Plane"/>.
            </summary>
            <param name="plane">The plane to test.</param>
            <returns>Whether the two objects intersected.</returns>
        </member>
        <member name="M:Spike.Mathematics.Plane.Intersects(Spike.Mathematics.Plane@,Spike.Mathematics.Ray@)">
            <summary>
            Determines if there is an intersection between the current object and a <see cref="T:Spike.Mathematics.Plane"/>.
            </summary>
            <param name="plane">The plane to test.</param>
            <param name="line">When the method completes, contains the line of intersection
            as a <see cref="T:Spike.Mathematics.Ray"/>, or a zero ray if there was no intersection.</param>
            <returns>Whether the two objects intersected.</returns>
        </member>
        <member name="M:Spike.Mathematics.Plane.Intersects(Spike.Mathematics.Vector3@,Spike.Mathematics.Vector3@,Spike.Mathematics.Vector3@)">
            <summary>
            Determines if there is an intersection between the current object and a triangle.
            </summary>
            <param name="vertex1">The first vertex of the triangle to test.</param>
            <param name="vertex2">The second vertex of the triagnle to test.</param>
            <param name="vertex3">The third vertex of the triangle to test.</param>
            <returns>Whether the two objects intersected.</returns>
        </member>
        <member name="M:Spike.Mathematics.Plane.Intersects(Spike.Mathematics.BoundingBox@)">
            <summary>
            Determines if there is an intersection between the current object and a <see cref="T:Spike.Mathematics.BoundingBox"/>.
            </summary>
            <param name="box">The box to test.</param>
            <returns>Whether the two objects intersected.</returns>
        </member>
        <member name="M:Spike.Mathematics.Plane.Intersects(Spike.Mathematics.BoundingSphere@)">
            <summary>
            Determines if there is an intersection between the current object and a <see cref="T:Spike.Mathematics.BoundingSphere"/>.
            </summary>
            <param name="sphere">The sphere to test.</param>
            <returns>Whether the two objects intersected.</returns>
        </member>
        <member name="M:Spike.Mathematics.Plane.Multiply(Spike.Mathematics.Plane@,System.Single,Spike.Mathematics.Plane@)">
            <summary>
            Scales the plane by the given scaling factor.
            </summary>
            <param name="value">The plane to scale.</param>
            <param name="scale">The amount by which to scale the plane.</param>
            <param name="result">When the method completes, contains the scaled plane.</param>
        </member>
        <member name="M:Spike.Mathematics.Plane.Multiply(Spike.Mathematics.Plane,System.Single)">
            <summary>
            Scales the plane by the given scaling factor.
            </summary>
            <param name="value">The plane to scale.</param>
            <param name="scale">The amount by which to scale the plane.</param>
            <returns>The scaled plane.</returns>
        </member>
        <member name="M:Spike.Mathematics.Plane.Dot(Spike.Mathematics.Plane@,Spike.Mathematics.Vector4@,System.Single@)">
            <summary>
            Calculates the dot product of the specified vector and plane.
            </summary>
            <param name="left">The source plane.</param>
            <param name="right">The source vector.</param>
            <param name="result">When the method completes, contains the dot product of the specified plane and vector.</param>
        </member>
        <member name="M:Spike.Mathematics.Plane.Dot(Spike.Mathematics.Plane,Spike.Mathematics.Vector4)">
            <summary>
            Calculates the dot product of the specified vector and plane.
            </summary>
            <param name="left">The source plane.</param>
            <param name="right">The source vector.</param>
            <returns>The dot product of the specified plane and vector.</returns>
        </member>
        <member name="M:Spike.Mathematics.Plane.DotCoordinate(Spike.Mathematics.Plane@,Spike.Mathematics.Vector3@,System.Single@)">
            <summary>
            Calculates the dot product of a specified vector and the normal of the plane plus the distance value of the plane.
            </summary>
            <param name="left">The source plane.</param>
            <param name="right">The source vector.</param>
            <param name="result">When the method completes, contains the dot product of a specified vector and the normal of the Plane plus the distance value of the plane.</param>
        </member>
        <member name="M:Spike.Mathematics.Plane.DotCoordinate(Spike.Mathematics.Plane,Spike.Mathematics.Vector3)">
            <summary>
            Calculates the dot product of a specified vector and the normal of the plane plus the distance value of the plane.
            </summary>
            <param name="left">The source plane.</param>
            <param name="right">The source vector.</param>
            <returns>The dot product of a specified vector and the normal of the Plane plus the distance value of the plane.</returns>
        </member>
        <member name="M:Spike.Mathematics.Plane.DotNormal(Spike.Mathematics.Plane@,Spike.Mathematics.Vector3@,System.Single@)">
            <summary>
            Calculates the dot product of the specified vector and the normal of the plane.
            </summary>
            <param name="left">The source plane.</param>
            <param name="right">The source vector.</param>
            <param name="result">When the method completes, contains the dot product of the specified vector and the normal of the plane.</param>
        </member>
        <member name="M:Spike.Mathematics.Plane.DotNormal(Spike.Mathematics.Plane,Spike.Mathematics.Vector3)">
            <summary>
            Calculates the dot product of the specified vector and the normal of the plane.
            </summary>
            <param name="left">The source plane.</param>
            <param name="right">The source vector.</param>
            <returns>The dot product of the specified vector and the normal of the plane.</returns>
        </member>
        <member name="M:Spike.Mathematics.Plane.Normalize(Spike.Mathematics.Plane@,Spike.Mathematics.Plane@)">
            <summary>
            Changes the coefficients of the normal vector of the plane to make it of unit length.
            </summary>
            <param name="plane">The source plane.</param>
            <param name="result">When the method completes, contains the normalized plane.</param>
        </member>
        <member name="M:Spike.Mathematics.Plane.Normalize(Spike.Mathematics.Plane)">
            <summary>
            Changes the coefficients of the normal vector of the plane to make it of unit length.
            </summary>
            <param name="plane">The source plane.</param>
            <returns>The normalized plane.</returns>
        </member>
        <member name="M:Spike.Mathematics.Plane.Transform(Spike.Mathematics.Plane@,Spike.Mathematics.Quaternion@,Spike.Mathematics.Plane@)">
            <summary>
            Transforms a normalized plane by a quaternion rotation.
            </summary>
            <param name="plane">The normalized source plane.</param>
            <param name="rotation">The quaternion rotation.</param>
            <param name="result">When the method completes, contains the transformed plane.</param>
        </member>
        <member name="M:Spike.Mathematics.Plane.Transform(Spike.Mathematics.Plane,Spike.Mathematics.Quaternion)">
            <summary>
            Transforms a normalized plane by a quaternion rotation.
            </summary>
            <param name="plane">The normalized source plane.</param>
            <param name="rotation">The quaternion rotation.</param>
            <returns>The transformed plane.</returns>
        </member>
        <member name="M:Spike.Mathematics.Plane.Transform(Spike.Mathematics.Plane[],Spike.Mathematics.Quaternion@)">
            <summary>
            Transforms an array of normalized planes by a quaternion rotation.
            </summary>
            <param name="planes">The array of normalized planes to transform.</param>
            <param name="rotation">The quaternion rotation.</param>
            <exception cref="T:System.ArgumentNullException">Thrown when <paramref name="planes"/> is <c>null</c>.</exception>
        </member>
        <member name="M:Spike.Mathematics.Plane.Transform(Spike.Mathematics.Plane@,Spike.Mathematics.Matrix@,Spike.Mathematics.Plane@)">
            <summary>
            Transforms a normalized plane by a matrix.
            </summary>
            <param name="plane">The normalized source plane.</param>
            <param name="transformation">The transformation matrix.</param>
            <param name="result">When the method completes, contains the transformed plane.</param>
        </member>
        <member name="M:Spike.Mathematics.Plane.Transform(Spike.Mathematics.Plane,Spike.Mathematics.Matrix)">
            <summary>
            Transforms a normalized plane by a matrix.
            </summary>
            <param name="plane">The normalized source plane.</param>
            <param name="transformation">The transformation matrix.</param>
            <returns>When the method completes, contains the transformed plane.</returns>
        </member>
        <member name="M:Spike.Mathematics.Plane.Transform(Spike.Mathematics.Plane[],Spike.Mathematics.Matrix@)">
            <summary>
            Transforms an array of normalized planes by a matrix.
            </summary>
            <param name="planes">The array of normalized planes to transform.</param>
            <param name="transformation">The transformation matrix.</param>
            <exception cref="T:System.ArgumentNullException">Thrown when <paramref name="planes"/> is <c>null</c>.</exception>
        </member>
        <member name="M:Spike.Mathematics.Plane.op_Multiply(System.Single,Spike.Mathematics.Plane)">
            <summary>
            Scales a plane by the given value.
            </summary>
            <param name="scale">The amount by which to scale the plane.</param>
            <param name="plane">The plane to scale.</param>
            <returns>The scaled plane.</returns>
        </member>
        <member name="M:Spike.Mathematics.Plane.op_Multiply(Spike.Mathematics.Plane,System.Single)">
            <summary>
            Scales a plane by the given value.
            </summary>
            <param name="plane">The plane to scale.</param>
            <param name="scale">The amount by which to scale the plane.</param>
            <returns>The scaled plane.</returns>
        </member>
        <member name="M:Spike.Mathematics.Plane.op_Equality(Spike.Mathematics.Plane,Spike.Mathematics.Plane)">
            <summary>
            Tests for equality between two objects.
            </summary>
            <param name="left">The first value to compare.</param>
            <param name="right">The second value to compare.</param>
            <returns><c>true</c> if <paramref name="left"/> has the same value as <paramref name="right"/>; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:Spike.Mathematics.Plane.op_Inequality(Spike.Mathematics.Plane,Spike.Mathematics.Plane)">
            <summary>
            Tests for inequality between two objects.
            </summary>
            <param name="left">The first value to compare.</param>
            <param name="right">The second value to compare.</param>
            <returns><c>true</c> if <paramref name="left"/> has a different value than <paramref name="right"/>; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:Spike.Mathematics.Plane.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <returns>
            A <see cref="T:System.String"/> that represents this instance.
            </returns>
        </member>
        <member name="M:Spike.Mathematics.Plane.ToString(System.String)">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <param name="format">The format.</param>
            <returns>
            A <see cref="T:System.String"/> that represents this instance.
            </returns>
        </member>
        <member name="M:Spike.Mathematics.Plane.ToString(System.IFormatProvider)">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <param name="formatProvider">The format provider.</param>
            <returns>
            A <see cref="T:System.String"/> that represents this instance.
            </returns>
        </member>
        <member name="M:Spike.Mathematics.Plane.ToString(System.String,System.IFormatProvider)">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <param name="format">The format.</param>
            <param name="formatProvider">The format provider.</param>
            <returns>
            A <see cref="T:System.String"/> that represents this instance.
            </returns>
        </member>
        <member name="M:Spike.Mathematics.Plane.GetHashCode">
            <summary>
            Returns a hash code for this instance.
            </summary>
            <returns>
            A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table. 
            </returns>
        </member>
        <member name="M:Spike.Mathematics.Plane.Equals(Spike.Mathematics.Plane)">
            <summary>
            Determines whether the specified <see cref="T:Spike.Mathematics.Vector4"/> is equal to this instance.
            </summary>
            <param name="value">The <see cref="T:Spike.Mathematics.Vector4"/> to compare with this instance.</param>
            <returns>
            <c>true</c> if the specified <see cref="T:Spike.Mathematics.Vector4"/> is equal to this instance; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Spike.Mathematics.Plane.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object"/> is equal to this instance.
            </summary>
            <param name="value">The <see cref="T:System.Object"/> to compare with this instance.</param>
            <returns>
            <c>true</c> if the specified <see cref="T:System.Object"/> is equal to this instance; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="P:Spike.Mathematics.Plane.Item(System.Int32)">
            <summary>
            Gets or sets the component at the specified index.
            </summary>
            <value>The value of the A, B, C, or D component, depending on the index.</value>
            <param name="index">The index of the component to access. Use 0 for the A component, 1 for the B component, 2 for the C component, and 3 for the D component.</param>
            <returns>The value of the component at the specified index.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown when the <paramref name="index"/> is out of the range [0, 3].</exception>
        </member>
        <member name="T:Spike.Mathematics.Quaternion">
            <summary>
            Represents a four dimensional mathematical quaternion.
            </summary>
        </member>
        <member name="F:Spike.Mathematics.Quaternion.SizeInBytes">
            <summary>
            The size of the <see cref="T:Spike.Mathematics.Quaternion"/> type, in bytes.
            </summary>
        </member>
        <member name="F:Spike.Mathematics.Quaternion.Zero">
            <summary>
            A <see cref="T:Spike.Mathematics.Quaternion"/> with all of its components set to zero.
            </summary>
        </member>
        <member name="F:Spike.Mathematics.Quaternion.One">
            <summary>
            A <see cref="T:Spike.Mathematics.Quaternion"/> with all of its components set to one.
            </summary>
        </member>
        <member name="F:Spike.Mathematics.Quaternion.Identity">
            <summary>
            The identity <see cref="T:Spike.Mathematics.Quaternion"/> (0, 0, 0, 1).
            </summary>
        </member>
        <member name="F:Spike.Mathematics.Quaternion.X">
            <summary>
            The X component of the quaternion.
            </summary>
        </member>
        <member name="F:Spike.Mathematics.Quaternion.Y">
            <summary>
            The Y component of the quaternion.
            </summary>
        </member>
        <member name="F:Spike.Mathematics.Quaternion.Z">
            <summary>
            The Z component of the quaternion.
            </summary>
        </member>
        <member name="F:Spike.Mathematics.Quaternion.W">
            <summary>
            The W component of the quaternion.
            </summary>
        </member>
        <member name="M:Spike.Mathematics.Quaternion.#ctor(System.Single)">
            <summary>
            Initializes a new instance of the <see cref="T:Spike.Mathematics.Quaternion"/> struct.
            </summary>
            <param name="value">The value that will be assigned to all components.</param>
        </member>
        <member name="M:Spike.Mathematics.Quaternion.#ctor(Spike.Mathematics.Vector4)">
            <summary>
            Initializes a new instance of the <see cref="T:Spike.Mathematics.Quaternion"/> struct.
            </summary>
            <param name="value">A vector containing the values with which to initialize the components.</param>
        </member>
        <member name="M:Spike.Mathematics.Quaternion.#ctor(Spike.Mathematics.Vector3,System.Single)">
            <summary>
            Initializes a new instance of the <see cref="T:Spike.Mathematics.Quaternion"/> struct.
            </summary>
            <param name="value">A vector containing the values with which to initialize the X, Y, and Z components.</param>
            <param name="w">Initial value for the W component of the quaternion.</param>
        </member>
        <member name="M:Spike.Mathematics.Quaternion.#ctor(Spike.Mathematics.Vector2,System.Single,System.Single)">
            <summary>
            Initializes a new instance of the <see cref="T:Spike.Mathematics.Quaternion"/> struct.
            </summary>
            <param name="value">A vector containing the values with which to initialize the X and Y components.</param>
            <param name="z">Initial value for the Z component of the quaternion.</param>
            <param name="w">Initial value for the W component of the quaternion.</param>
        </member>
        <member name="M:Spike.Mathematics.Quaternion.#ctor(System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Initializes a new instance of the <see cref="T:Spike.Mathematics.Quaternion"/> struct.
            </summary>
            <param name="x">Initial value for the X component of the quaternion.</param>
            <param name="y">Initial value for the Y component of the quaternion.</param>
            <param name="z">Initial value for the Z component of the quaternion.</param>
            <param name="w">Initial value for the W component of the quaternion.</param>
        </member>
        <member name="M:Spike.Mathematics.Quaternion.#ctor(System.Single[])">
            <summary>
            Initializes a new instance of the <see cref="T:Spike.Mathematics.Quaternion"/> struct.
            </summary>
            <param name="values">The values to assign to the X, Y, Z, and W components of the quaternion. This must be an array with four elements.</param>
            <exception cref="T:System.ArgumentNullException">Thrown when <paramref name="values"/> is <c>null</c>.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown when <paramref name="values"/> contains more or less than four elements.</exception>
        </member>
        <member name="M:Spike.Mathematics.Quaternion.Conjugate">
            <summary>
            Conjugates the quaternion.
            </summary>
        </member>
        <member name="M:Spike.Mathematics.Quaternion.Invert">
            <summary>
            Conjugates and renormalizes the quaternion.
            </summary>
        </member>
        <member name="M:Spike.Mathematics.Quaternion.Length">
            <summary>
            Calculates the length of the quaternion.
            </summary>
            <returns>The length of the quaternion.</returns>
            <remarks>
            <see cref="M:Spike.Mathematics.Quaternion.LengthSquared"/> may be preferred when only the relative length is needed
            and speed is of the essence.
            </remarks>
        </member>
        <member name="M:Spike.Mathematics.Quaternion.LengthSquared">
            <summary>
            Calculates the squared length of the quaternion.
            </summary>
            <returns>The squared length of the quaternion.</returns>
            <remarks>
            This method may be preferred to <see cref="M:Spike.Mathematics.Quaternion.Length"/> when only a relative length is needed
            and speed is of the essence.
            </remarks>
        </member>
        <member name="M:Spike.Mathematics.Quaternion.Normalize">
            <summary>
            Converts the quaternion into a unit quaternion.
            </summary>
        </member>
        <member name="M:Spike.Mathematics.Quaternion.ToArray">
            <summary>
            Creates an array containing the elements of the quaternion.
            </summary>
            <returns>A four-element array containing the components of the quaternion.</returns>
        </member>
        <member name="M:Spike.Mathematics.Quaternion.Add(Spike.Mathematics.Quaternion@,Spike.Mathematics.Quaternion@,Spike.Mathematics.Quaternion@)">
            <summary>
            Adds two quaternions.
            </summary>
            <param name="left">The first quaternion to add.</param>
            <param name="right">The second quaternion to add.</param>
            <param name="result">When the method completes, contains the sum of the two quaternions.</param>
        </member>
        <member name="M:Spike.Mathematics.Quaternion.Add(Spike.Mathematics.Quaternion,Spike.Mathematics.Quaternion)">
            <summary>
            Adds two quaternions.
            </summary>
            <param name="left">The first quaternion to add.</param>
            <param name="right">The second quaternion to add.</param>
            <returns>The sum of the two quaternions.</returns>
        </member>
        <member name="M:Spike.Mathematics.Quaternion.Subtract(Spike.Mathematics.Quaternion@,Spike.Mathematics.Quaternion@,Spike.Mathematics.Quaternion@)">
            <summary>
            Subtracts two quaternions.
            </summary>
            <param name="left">The first quaternion to subtract.</param>
            <param name="right">The second quaternion to subtract.</param>
            <param name="result">When the method completes, contains the difference of the two quaternions.</param>
        </member>
        <member name="M:Spike.Mathematics.Quaternion.Subtract(Spike.Mathematics.Quaternion,Spike.Mathematics.Quaternion)">
            <summary>
            Subtracts two quaternions.
            </summary>
            <param name="left">The first quaternion to subtract.</param>
            <param name="right">The second quaternion to subtract.</param>
            <returns>The difference of the two quaternions.</returns>
        </member>
        <member name="M:Spike.Mathematics.Quaternion.Multiply(Spike.Mathematics.Quaternion@,System.Single,Spike.Mathematics.Quaternion@)">
            <summary>
            Scales a quaternion by the given value.
            </summary>
            <param name="value">The quaternion to scale.</param>
            <param name="scale">The amount by which to scale the quaternion.</param>
            <param name="result">When the method completes, contains the scaled quaternion.</param>
        </member>
        <member name="M:Spike.Mathematics.Quaternion.Multiply(Spike.Mathematics.Quaternion,System.Single)">
            <summary>
            Scales a quaternion by the given value.
            </summary>
            <param name="value">The quaternion to scale.</param>
            <param name="scale">The amount by which to scale the quaternion.</param>
            <returns>The scaled quaternion.</returns>
        </member>
        <member name="M:Spike.Mathematics.Quaternion.Multiply(Spike.Mathematics.Quaternion@,Spike.Mathematics.Quaternion@,Spike.Mathematics.Quaternion@)">
            <summary>
            Modulates a quaternion by another.
            </summary>
            <param name="left">The first quaternion to modulate.</param>
            <param name="right">The second quaternion to modulate.</param>
            <param name="result">When the moethod completes, contains the modulated quaternion.</param>
        </member>
        <member name="M:Spike.Mathematics.Quaternion.Multiply(Spike.Mathematics.Quaternion,Spike.Mathematics.Quaternion)">
            <summary>
            Modulates a quaternion by another.
            </summary>
            <param name="left">The first quaternion to modulate.</param>
            <param name="right">The second quaternion to modulate.</param>
            <returns>The modulated quaternion.</returns>
        </member>
        <member name="M:Spike.Mathematics.Quaternion.Negate(Spike.Mathematics.Quaternion@,Spike.Mathematics.Quaternion@)">
            <summary>
            Reverses the direction of a given quaternion.
            </summary>
            <param name="value">The quaternion to negate.</param>
            <param name="result">When the method completes, contains a quaternion facing in the opposite direction.</param>
        </member>
        <member name="M:Spike.Mathematics.Quaternion.Negate(Spike.Mathematics.Quaternion)">
            <summary>
            Reverses the direction of a given quaternion.
            </summary>
            <param name="value">The quaternion to negate.</param>
            <returns>A quaternion facing in the opposite direction.</returns>
        </member>
        <member name="M:Spike.Mathematics.Quaternion.Barycentric(Spike.Mathematics.Quaternion@,Spike.Mathematics.Quaternion@,Spike.Mathematics.Quaternion@,System.Single,System.Single,Spike.Mathematics.Quaternion@)">
            <summary>
            Returns a <see cref="T:Spike.Mathematics.Quaternion"/> containing the 4D Cartesian coordinates of a point specified in Barycentric coordinates relative to a 2D triangle.
            </summary>
            <param name="value1">A <see cref="T:Spike.Mathematics.Quaternion"/> containing the 4D Cartesian coordinates of vertex 1 of the triangle.</param>
            <param name="value2">A <see cref="T:Spike.Mathematics.Quaternion"/> containing the 4D Cartesian coordinates of vertex 2 of the triangle.</param>
            <param name="value3">A <see cref="T:Spike.Mathematics.Quaternion"/> containing the 4D Cartesian coordinates of vertex 3 of the triangle.</param>
            <param name="amount1">Barycentric coordinate b2, which expresses the weighting factor toward vertex 2 (specified in <paramref name="value2"/>).</param>
            <param name="amount2">Barycentric coordinate b3, which expresses the weighting factor toward vertex 3 (specified in <paramref name="value3"/>).</param>
            <param name="result">When the method completes, contains a new <see cref="T:Spike.Mathematics.Quaternion"/> containing the 4D Cartesian coordinates of the specified point.</param>
        </member>
        <member name="M:Spike.Mathematics.Quaternion.Barycentric(Spike.Mathematics.Quaternion,Spike.Mathematics.Quaternion,Spike.Mathematics.Quaternion,System.Single,System.Single)">
            <summary>
            Returns a <see cref="T:Spike.Mathematics.Quaternion"/> containing the 4D Cartesian coordinates of a point specified in Barycentric coordinates relative to a 2D triangle.
            </summary>
            <param name="value1">A <see cref="T:Spike.Mathematics.Quaternion"/> containing the 4D Cartesian coordinates of vertex 1 of the triangle.</param>
            <param name="value2">A <see cref="T:Spike.Mathematics.Quaternion"/> containing the 4D Cartesian coordinates of vertex 2 of the triangle.</param>
            <param name="value3">A <see cref="T:Spike.Mathematics.Quaternion"/> containing the 4D Cartesian coordinates of vertex 3 of the triangle.</param>
            <param name="amount1">Barycentric coordinate b2, which expresses the weighting factor toward vertex 2 (specified in <paramref name="value2"/>).</param>
            <param name="amount2">Barycentric coordinate b3, which expresses the weighting factor toward vertex 3 (specified in <paramref name="value3"/>).</param>
            <returns>A new <see cref="T:Spike.Mathematics.Quaternion"/> containing the 4D Cartesian coordinates of the specified point.</returns>
        </member>
        <member name="M:Spike.Mathematics.Quaternion.Conjugate(Spike.Mathematics.Quaternion@,Spike.Mathematics.Quaternion@)">
            <summary>
            Conjugates a quaternion.
            </summary>
            <param name="value">The quaternion to conjugate.</param>
            <param name="result">When the method completes, contains the conjugated quaternion.</param>
        </member>
        <member name="M:Spike.Mathematics.Quaternion.Conjugate(Spike.Mathematics.Quaternion)">
            <summary>
            Conjugates a quaternion.
            </summary>
            <param name="value">The quaternion to conjugate.</param>
            <returns>The conjugated quaternion.</returns>
        </member>
        <member name="M:Spike.Mathematics.Quaternion.Dot(Spike.Mathematics.Quaternion@,Spike.Mathematics.Quaternion@,System.Single@)">
            <summary>
            Calculates the dot product of two quaternions.
            </summary>
            <param name="left">First source quaternion.</param>
            <param name="right">Second source quaternion.</param>
            <param name="result">When the method completes, contains the dot product of the two quaternions.</param>
        </member>
        <member name="M:Spike.Mathematics.Quaternion.Dot(Spike.Mathematics.Quaternion,Spike.Mathematics.Quaternion)">
            <summary>
            Calculates the dot product of two quaternions.
            </summary>
            <param name="left">First source quaternion.</param>
            <param name="right">Second source quaternion.</param>
            <returns>The dot product of the two quaternions.</returns>
        </member>
        <member name="M:Spike.Mathematics.Quaternion.Exponential(Spike.Mathematics.Quaternion@,Spike.Mathematics.Quaternion@)">
            <summary>
            Exponentiates a quaternion.
            </summary>
            <param name="value">The quaternion to exponentiate.</param>
            <param name="result">When the method completes, contains the exponentiated quaternion.</param>
        </member>
        <member name="M:Spike.Mathematics.Quaternion.Exponential(Spike.Mathematics.Quaternion)">
            <summary>
            Exponentiates a quaternion.
            </summary>
            <param name="value">The quaternion to exponentiate.</param>
            <returns>The exponentiated quaternion.</returns>
        </member>
        <member name="M:Spike.Mathematics.Quaternion.Invert(Spike.Mathematics.Quaternion@,Spike.Mathematics.Quaternion@)">
            <summary>
            Conjugates and renormalizes the quaternion.
            </summary>
            <param name="value">The quaternion to conjugate and renormalize.</param>
            <param name="result">When the method completes, contains the conjugated and renormalized quaternion.</param>
        </member>
        <member name="M:Spike.Mathematics.Quaternion.Invert(Spike.Mathematics.Quaternion)">
            <summary>
            Conjugates and renormalizes the quaternion.
            </summary>
            <param name="value">The quaternion to conjugate and renormalize.</param>
            <returns>The conjugated and renormalized quaternion.</returns>
        </member>
        <member name="M:Spike.Mathematics.Quaternion.Lerp(Spike.Mathematics.Quaternion@,Spike.Mathematics.Quaternion@,System.Single,Spike.Mathematics.Quaternion@)">
            <summary>
            Performs a linear interpolation between two quaternions.
            </summary>
            <param name="start">Start quaternion.</param>
            <param name="end">End quaternion.</param>
            <param name="amount">Value between 0 and 1 indicating the weight of <paramref name="end"/>.</param>
            <param name="result">When the method completes, contains the linear interpolation of the two quaternions.</param>
            <remarks>
            This method performs the linear interpolation based on the following formula.
            <code>start + (end - start) * amount</code>
            Passing <paramref name="amount"/> a value of 0 will cause <paramref name="start"/> to be returned; a value of 1 will cause <paramref name="end"/> to be returned. 
            </remarks>
        </member>
        <member name="M:Spike.Mathematics.Quaternion.Lerp(Spike.Mathematics.Quaternion,Spike.Mathematics.Quaternion,System.Single)">
            <summary>
            Performs a linear interpolation between two quaternion.
            </summary>
            <param name="start">Start quaternion.</param>
            <param name="end">End quaternion.</param>
            <param name="amount">Value between 0 and 1 indicating the weight of <paramref name="end"/>.</param>
            <returns>The linear interpolation of the two quaternions.</returns>
            <remarks>
            This method performs the linear interpolation based on the following formula.
            <code>start + (end - start) * amount</code>
            Passing <paramref name="amount"/> a value of 0 will cause <paramref name="start"/> to be returned; a value of 1 will cause <paramref name="end"/> to be returned. 
            </remarks>
        </member>
        <member name="M:Spike.Mathematics.Quaternion.Logarithm(Spike.Mathematics.Quaternion@,Spike.Mathematics.Quaternion@)">
            <summary>
            Calculates the natural logarithm of the specified quaternion.
            </summary>
            <param name="value">The quaternion whose logarithm will be calculated.</param>
            <param name="result">When the method completes, contains the natural logarithm of the quaternion.</param>
        </member>
        <member name="M:Spike.Mathematics.Quaternion.Logarithm(Spike.Mathematics.Quaternion)">
            <summary>
            Calculates the natural logarithm of the specified quaternion.
            </summary>
            <param name="value">The quaternion whose logarithm will be calculated.</param>
            <returns>The natural logarithm of the quaternion.</returns>
        </member>
        <member name="M:Spike.Mathematics.Quaternion.Normalize(Spike.Mathematics.Quaternion@,Spike.Mathematics.Quaternion@)">
            <summary>
            Converts the quaternion into a unit quaternion.
            </summary>
            <param name="value">The quaternion to normalize.</param>
            <param name="result">When the method completes, contains the normalized quaternion.</param>
        </member>
        <member name="M:Spike.Mathematics.Quaternion.Normalize(Spike.Mathematics.Quaternion)">
            <summary>
            Converts the quaternion into a unit quaternion.
            </summary>
            <param name="value">The quaternion to normalize.</param>
            <returns>The normalized quaternion.</returns>
        </member>
        <member name="M:Spike.Mathematics.Quaternion.RotationAxis(Spike.Mathematics.Vector3@,System.Single,Spike.Mathematics.Quaternion@)">
            <summary>
            Creates a quaternion given a rotation and an axis.
            </summary>
            <param name="axis">The axis of rotation.</param>
            <param name="angle">The angle of rotation.</param>
            <param name="result">When the method completes, contains the newly created quaternion.</param>
        </member>
        <member name="M:Spike.Mathematics.Quaternion.RotationAxis(Spike.Mathematics.Vector3,System.Single)">
            <summary>
            Creates a quaternion given a rotation and an axis.
            </summary>
            <param name="axis">The axis of rotation.</param>
            <param name="angle">The angle of rotation.</param>
            <returns>The newly created quaternion.</returns>
        </member>
        <member name="M:Spike.Mathematics.Quaternion.RotationMatrix(Spike.Mathematics.Matrix@,Spike.Mathematics.Quaternion@)">
            <summary>
            Creates a quaternion given a rotation matrix.
            </summary>
            <param name="matrix">The rotation matrix.</param>
            <param name="result">When the method completes, contains the newly created quaternion.</param>
        </member>
        <member name="M:Spike.Mathematics.Quaternion.RotationMatrix(Spike.Mathematics.Matrix)">
            <summary>
            Creates a quaternion given a rotation matrix.
            </summary>
            <param name="matrix">The rotation matrix.</param>
            <returns>The newly created quaternion.</returns>
        </member>
        <member name="M:Spike.Mathematics.Quaternion.RotationYawPitchRoll(System.Single,System.Single,System.Single,Spike.Mathematics.Quaternion@)">
            <summary>
            Creates a quaternion given a yaw, pitch, and roll value.
            </summary>
            <param name="yaw">The yaw of rotation.</param>
            <param name="pitch">The pitch of rotation.</param>
            <param name="roll">The roll of rotation.</param>
            <param name="result">When the method completes, contains the newly created quaternion.</param>
        </member>
        <member name="M:Spike.Mathematics.Quaternion.RotationYawPitchRoll(System.Single,System.Single,System.Single)">
            <summary>
            Creates a quaternion given a yaw, pitch, and roll value.
            </summary>
            <param name="yaw">The yaw of rotation.</param>
            <param name="pitch">The pitch of rotation.</param>
            <param name="roll">The roll of rotation.</param>
            <returns>The newly created quaternion.</returns>
        </member>
        <member name="M:Spike.Mathematics.Quaternion.Slerp(Spike.Mathematics.Quaternion@,Spike.Mathematics.Quaternion@,System.Single,Spike.Mathematics.Quaternion@)">
            <summary>
            Interpolates between two quaternions, using spherical linear interpolation.
            </summary>
            <param name="start">Start quaternion.</param>
            <param name="end">End quaternion.</param>
            <param name="amount">Value between 0 and 1 indicating the weight of <paramref name="end"/>.</param>
            <param name="result">When the method completes, contains the spherical linear interpolation of the two quaternions.</param>
        </member>
        <member name="M:Spike.Mathematics.Quaternion.Slerp(Spike.Mathematics.Quaternion,Spike.Mathematics.Quaternion,System.Single)">
            <summary>
            Interpolates between two quaternions, using spherical linear interpolation.
            </summary>
            <param name="start">Start quaternion.</param>
            <param name="end">End quaternion.</param>
            <param name="amount">Value between 0 and 1 indicating the weight of <paramref name="end"/>.</param>
            <returns>The spherical linear interpolation of the two quaternions.</returns>
        </member>
        <member name="M:Spike.Mathematics.Quaternion.Squad(Spike.Mathematics.Quaternion@,Spike.Mathematics.Quaternion@,Spike.Mathematics.Quaternion@,Spike.Mathematics.Quaternion@,System.Single,Spike.Mathematics.Quaternion@)">
            <summary>
            Interpolates between quaternions, using spherical quadrangle interpolation.
            </summary>
            <param name="value1">First source quaternion.</param>
            <param name="value2">Second source quaternion.</param>
            <param name="value3">Thrid source quaternion.</param>
            <param name="value4">Fourth source quaternion.</param>
            <param name="amount">Value between 0 and 1 indicating the weight of interpolation.</param>
            <param name="result">When the method completes, contains the spherical quadrangle interpolation of the quaternions.</param>
        </member>
        <member name="M:Spike.Mathematics.Quaternion.Squad(Spike.Mathematics.Quaternion,Spike.Mathematics.Quaternion,Spike.Mathematics.Quaternion,Spike.Mathematics.Quaternion,System.Single)">
            <summary>
            Interpolates between quaternions, using spherical quadrangle interpolation.
            </summary>
            <param name="value1">First source quaternion.</param>
            <param name="value2">Second source quaternion.</param>
            <param name="value3">Thrid source quaternion.</param>
            <param name="value4">Fourth source quaternion.</param>
            <param name="amount">Value between 0 and 1 indicating the weight of interpolation.</param>
            <returns>The spherical quadrangle interpolation of the quaternions.</returns>
        </member>
        <member name="M:Spike.Mathematics.Quaternion.SquadSetup(Spike.Mathematics.Quaternion,Spike.Mathematics.Quaternion,Spike.Mathematics.Quaternion,Spike.Mathematics.Quaternion)">
            <summary>
            Sets up control points for spherical quadrangle interpolation.
            </summary>
            <param name="value1">First source quaternion.</param>
            <param name="value2">Second source quaternion.</param>
            <param name="value3">Third source quaternion.</param>
            <param name="value4">Fourth source quaternion.</param>
            <returns>An array of three quaternions that represent control points for spherical quadrangle interpolation.</returns>
        </member>
        <member name="M:Spike.Mathematics.Quaternion.op_Addition(Spike.Mathematics.Quaternion,Spike.Mathematics.Quaternion)">
            <summary>
            Adds two quaternions.
            </summary>
            <param name="left">The first quaternion to add.</param>
            <param name="right">The second quaternion to add.</param>
            <returns>The sum of the two quaternions.</returns>
        </member>
        <member name="M:Spike.Mathematics.Quaternion.op_Subtraction(Spike.Mathematics.Quaternion,Spike.Mathematics.Quaternion)">
            <summary>
            Subtracts two quaternions.
            </summary>
            <param name="left">The first quaternion to subtract.</param>
            <param name="right">The second quaternion to subtract.</param>
            <returns>The difference of the two quaternions.</returns>
        </member>
        <member name="M:Spike.Mathematics.Quaternion.op_UnaryNegation(Spike.Mathematics.Quaternion)">
            <summary>
            Reverses the direction of a given quaternion.
            </summary>
            <param name="value">The quaternion to negate.</param>
            <returns>A quaternion facing in the opposite direction.</returns>
        </member>
        <member name="M:Spike.Mathematics.Quaternion.op_Multiply(System.Single,Spike.Mathematics.Quaternion)">
            <summary>
            Scales a quaternion by the given value.
            </summary>
            <param name="value">The quaternion to scale.</param>
            <param name="scale">The amount by which to scale the quaternion.</param>
            <returns>The scaled quaternion.</returns>
        </member>
        <member name="M:Spike.Mathematics.Quaternion.op_Multiply(Spike.Mathematics.Quaternion,System.Single)">
            <summary>
            Scales a quaternion by the given value.
            </summary>
            <param name="value">The quaternion to scale.</param>
            <param name="scale">The amount by which to scale the quaternion.</param>
            <returns>The scaled quaternion.</returns>
        </member>
        <member name="M:Spike.Mathematics.Quaternion.op_Multiply(Spike.Mathematics.Quaternion,Spike.Mathematics.Quaternion)">
            <summary>
            Multiplies a quaternion by another.
            </summary>
            <param name="left">The first quaternion to multiply.</param>
            <param name="right">The second quaternion to multiply.</param>
            <returns>The multiplied quaternion.</returns>
        </member>
        <member name="M:Spike.Mathematics.Quaternion.op_Equality(Spike.Mathematics.Quaternion,Spike.Mathematics.Quaternion)">
            <summary>
            Tests for equality between two objects.
            </summary>
            <param name="left">The first value to compare.</param>
            <param name="right">The second value to compare.</param>
            <returns><c>true</c> if <paramref name="left"/> has the same value as <paramref name="right"/>; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:Spike.Mathematics.Quaternion.op_Inequality(Spike.Mathematics.Quaternion,Spike.Mathematics.Quaternion)">
            <summary>
            Tests for inequality between two objects.
            </summary>
            <param name="left">The first value to compare.</param>
            <param name="right">The second value to compare.</param>
            <returns><c>true</c> if <paramref name="left"/> has a different value than <paramref name="right"/>; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:Spike.Mathematics.Quaternion.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <returns>
            A <see cref="T:System.String"/> that represents this instance.
            </returns>
        </member>
        <member name="M:Spike.Mathematics.Quaternion.ToString(System.String)">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <param name="format">The format.</param>
            <returns>
            A <see cref="T:System.String"/> that represents this instance.
            </returns>
        </member>
        <member name="M:Spike.Mathematics.Quaternion.ToString(System.IFormatProvider)">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <param name="formatProvider">The format provider.</param>
            <returns>
            A <see cref="T:System.String"/> that represents this instance.
            </returns>
        </member>
        <member name="M:Spike.Mathematics.Quaternion.ToString(System.String,System.IFormatProvider)">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <param name="format">The format.</param>
            <param name="formatProvider">The format provider.</param>
            <returns>
            A <see cref="T:System.String"/> that represents this instance.
            </returns>
        </member>
        <member name="M:Spike.Mathematics.Quaternion.GetHashCode">
            <summary>
            Returns a hash code for this instance.
            </summary>
            <returns>
            A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table. 
            </returns>
        </member>
        <member name="M:Spike.Mathematics.Quaternion.Equals(Spike.Mathematics.Quaternion)">
            <summary>
            Determines whether the specified <see cref="T:Spike.Mathematics.Quaternion"/> is equal to this instance.
            </summary>
            <param name="other">The <see cref="T:Spike.Mathematics.Quaternion"/> to compare with this instance.</param>
            <returns>
            <c>true</c> if the specified <see cref="T:Spike.Mathematics.Quaternion"/> is equal to this instance; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Spike.Mathematics.Quaternion.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object"/> is equal to this instance.
            </summary>
            <param name="value">The <see cref="T:System.Object"/> to compare with this instance.</param>
            <returns>
            <c>true</c> if the specified <see cref="T:System.Object"/> is equal to this instance; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="P:Spike.Mathematics.Quaternion.IsIdentity">
            <summary>
            Gets a value indicating whether this instance is equivalent to the identity quaternion.
            </summary>
            <value>
            <c>true</c> if this instance is an identity quaternion; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Spike.Mathematics.Quaternion.IsNormalized">
            <summary>
            Gets a value indicting whether this instance is normalized.
            </summary>
        </member>
        <member name="P:Spike.Mathematics.Quaternion.Angle">
            <summary>
            Gets the angle of the quaternion.
            </summary>
            <value>The quaternion's angle.</value>
        </member>
        <member name="P:Spike.Mathematics.Quaternion.Axis">
            <summary>
            Gets the axis components of the quaternion.
            </summary>
            <value>The axis components of the quaternion.</value>
        </member>
        <member name="P:Spike.Mathematics.Quaternion.Item(System.Int32)">
            <summary>
            Gets or sets the component at the specified index.
            </summary>
            <value>The value of the X, Y, Z, or W component, depending on the index.</value>
            <param name="index">The index of the component to access. Use 0 for the X component, 1 for the Y component, 2 for the Z component, and 3 for the W component.</param>
            <returns>The value of the component at the specified index.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown when the <paramref name="index"/> is out of the range [0, 3].</exception>
        </member>
        <member name="T:Spike.Mathematics.Ray">
            <summary>
            Represents a three dimensional line based on a point in space and a direction.
            </summary>
        </member>
        <member name="F:Spike.Mathematics.Ray.Position">
            <summary>
            The position in three dimensional space where the ray starts.
            </summary>
        </member>
        <member name="F:Spike.Mathematics.Ray.Direction">
            <summary>
            The normalized direction in which the ray points.
            </summary>
        </member>
        <member name="M:Spike.Mathematics.Ray.#ctor(Spike.Mathematics.Vector3,Spike.Mathematics.Vector3)">
            <summary>
            Initializes a new instance of the <see cref="T:Spike.Mathematics.Ray"/> struct.
            </summary>
            <param name="position">The position in three dimensional space of the origin of the ray.</param>
            <param name="direction">The normalized direction of the ray.</param>
        </member>
        <member name="M:Spike.Mathematics.Ray.Intersects(Spike.Mathematics.Vector3@)">
            <summary>
            Determines if there is an intersection between the current object and a point.
            </summary>
            <param name="point">The point to test.</param>
            <returns>Whether the two objects intersected.</returns>
        </member>
        <member name="M:Spike.Mathematics.Ray.Intersects(Spike.Mathematics.Ray@)">
            <summary>
            Determines if there is an intersection between the current object and a <see cref="T:Spike.Mathematics.Ray"/>.
            </summary>
            <param name="ray">The ray to test.</param>
            <returns>Whether the two objects intersected.</returns>
        </member>
        <member name="M:Spike.Mathematics.Ray.Intersects(Spike.Mathematics.Ray@,Spike.Mathematics.Vector3@)">
            <summary>
            Determines if there is an intersection between the current object and a <see cref="T:Spike.Mathematics.Ray"/>.
            </summary>
            <param name="ray">The ray to test.</param>
            <param name="point">When the method completes, contains the point of intersection,
            or <see cref="F:Spike.Mathematics.Vector3.Zero"/> if there was no intersection.</param>
            <returns>Whether the two objects intersected.</returns>
        </member>
        <member name="M:Spike.Mathematics.Ray.Intersects(Spike.Mathematics.Plane@)">
            <summary>
            Determines if there is an intersection between the current object and a <see cref="T:Spike.Mathematics.Plane"/>.
            </summary>
            <param name="plane">The plane to test</param>
            <returns>Whether the two objects intersected.</returns>
        </member>
        <member name="M:Spike.Mathematics.Ray.Intersects(Spike.Mathematics.Plane@,System.Single@)">
            <summary>
            Determines if there is an intersection between the current object and a <see cref="T:Spike.Mathematics.Plane"/>.
            </summary>
            <param name="plane">The plane to test.</param>
            <param name="distance">When the method completes, contains the distance of the intersection,
            or 0 if there was no intersection.</param>
            <returns>Whether the two objects intersected.</returns>
        </member>
        <member name="M:Spike.Mathematics.Ray.Intersects(Spike.Mathematics.Plane@,Spike.Mathematics.Vector3@)">
            <summary>
            Determines if there is an intersection between the current object and a <see cref="T:Spike.Mathematics.Plane"/>.
            </summary>
            <param name="plane">The plane to test.</param>
            <param name="point">When the method completes, contains the point of intersection,
            or <see cref="F:Spike.Mathematics.Vector3.Zero"/> if there was no intersection.</param>
            <returns>Whether the two objects intersected.</returns>
        </member>
        <member name="M:Spike.Mathematics.Ray.Intersects(Spike.Mathematics.Vector3@,Spike.Mathematics.Vector3@,Spike.Mathematics.Vector3@)">
            <summary>
            Determines if there is an intersection between the current object and a triangle.
            </summary>
            <param name="vertex1">The first vertex of the triangle to test.</param>
            <param name="vertex2">The second vertex of the triangle to test.</param>
            <param name="vertex3">The third vertex of the triangle to test.</param>
            <returns>Whether the two objects intersected.</returns>
        </member>
        <member name="M:Spike.Mathematics.Ray.Intersects(Spike.Mathematics.Vector3@,Spike.Mathematics.Vector3@,Spike.Mathematics.Vector3@,System.Single@)">
            <summary>
            Determines if there is an intersection between the current object and a triangle.
            </summary>
            <param name="vertex1">The first vertex of the triangle to test.</param>
            <param name="vertex2">The second vertex of the triangle to test.</param>
            <param name="vertex3">The third vertex of the triangle to test.</param>
            <param name="distance">When the method completes, contains the distance of the intersection,
            or 0 if there was no intersection.</param>
            <returns>Whether the two objects intersected.</returns>
        </member>
        <member name="M:Spike.Mathematics.Ray.Intersects(Spike.Mathematics.Vector3@,Spike.Mathematics.Vector3@,Spike.Mathematics.Vector3@,Spike.Mathematics.Vector3@)">
            <summary>
            Determines if there is an intersection between the current object and a triangle.
            </summary>
            <param name="vertex1">The first vertex of the triangle to test.</param>
            <param name="vertex2">The second vertex of the triangle to test.</param>
            <param name="vertex3">The third vertex of the triangle to test.</param>
            <param name="point">When the method completes, contains the point of intersection,
            or <see cref="F:Spike.Mathematics.Vector3.Zero"/> if there was no intersection.</param>
            <returns>Whether the two objects intersected.</returns>
        </member>
        <member name="M:Spike.Mathematics.Ray.Intersects(Spike.Mathematics.BoundingBox@)">
            <summary>
            Determines if there is an intersection between the current object and a <see cref="T:Spike.Mathematics.BoundingBox"/>.
            </summary>
            <param name="box">The box to test.</param>
            <returns>Whether the two objects intersected.</returns>
        </member>
        <member name="M:Spike.Mathematics.Ray.Intersects(Spike.Mathematics.BoundingBox@,System.Single@)">
            <summary>
            Determines if there is an intersection between the current object and a <see cref="T:Spike.Mathematics.BoundingBox"/>.
            </summary>
            <param name="box">The box to test.</param>
            <param name="distance">When the method completes, contains the distance of the intersection,
            or 0 if there was no intersection.</param>
            <returns>Whether the two objects intersected.</returns>
        </member>
        <member name="M:Spike.Mathematics.Ray.Intersects(Spike.Mathematics.BoundingBox@,Spike.Mathematics.Vector3@)">
            <summary>
            Determines if there is an intersection between the current object and a <see cref="T:Spike.Mathematics.BoundingBox"/>.
            </summary>
            <param name="box">The box to test.</param>
            <param name="point">When the method completes, contains the point of intersection,
            or <see cref="F:Spike.Mathematics.Vector3.Zero"/> if there was no intersection.</param>
            <returns>Whether the two objects intersected.</returns>
        </member>
        <member name="M:Spike.Mathematics.Ray.Intersects(Spike.Mathematics.BoundingSphere@)">
            <summary>
            Determines if there is an intersection between the current object and a <see cref="T:Spike.Mathematics.BoundingSphere"/>.
            </summary>
            <param name="sphere">The sphere to test.</param>
            <returns>Whether the two objects intersected.</returns>
        </member>
        <member name="M:Spike.Mathematics.Ray.Intersects(Spike.Mathematics.BoundingSphere@,System.Single@)">
            <summary>
            Determines if there is an intersection between the current object and a <see cref="T:Spike.Mathematics.BoundingSphere"/>.
            </summary>
            <param name="sphere">The sphere to test.</param>
            <param name="distance">When the method completes, contains the distance of the intersection,
            or 0 if there was no intersection.</param>
            <returns>Whether the two objects intersected.</returns>
        </member>
        <member name="M:Spike.Mathematics.Ray.Intersects(Spike.Mathematics.BoundingSphere@,Spike.Mathematics.Vector3@)">
            <summary>
            Determines if there is an intersection between the current object and a <see cref="T:Spike.Mathematics.BoundingSphere"/>.
            </summary>
            <param name="sphere">The sphere to test.</param>
            <param name="point">When the method completes, contains the point of intersection,
            or <see cref="F:Spike.Mathematics.Vector3.Zero"/> if there was no intersection.</param>
            <returns>Whether the two objects intersected.</returns>
        </member>
        <member name="M:Spike.Mathematics.Ray.op_Equality(Spike.Mathematics.Ray,Spike.Mathematics.Ray)">
            <summary>
            Tests for equality between two objects.
            </summary>
            <param name="left">The first value to compare.</param>
            <param name="right">The second value to compare.</param>
            <returns><c>true</c> if <paramref name="left"/> has the same value as <paramref name="right"/>; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:Spike.Mathematics.Ray.op_Inequality(Spike.Mathematics.Ray,Spike.Mathematics.Ray)">
            <summary>
            Tests for inequality between two objects.
            </summary>
            <param name="left">The first value to compare.</param>
            <param name="right">The second value to compare.</param>
            <returns><c>true</c> if <paramref name="left"/> has a different value than <paramref name="right"/>; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:Spike.Mathematics.Ray.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <returns>
            A <see cref="T:System.String"/> that represents this instance.
            </returns>
        </member>
        <member name="M:Spike.Mathematics.Ray.ToString(System.String)">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <param name="format">The format.</param>
            <returns>
            A <see cref="T:System.String"/> that represents this instance.
            </returns>
        </member>
        <member name="M:Spike.Mathematics.Ray.ToString(System.IFormatProvider)">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <param name="formatProvider">The format provider.</param>
            <returns>
            A <see cref="T:System.String"/> that represents this instance.
            </returns>
        </member>
        <member name="M:Spike.Mathematics.Ray.ToString(System.String,System.IFormatProvider)">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <param name="format">The format.</param>
            <param name="formatProvider">The format provider.</param>
            <returns>
            A <see cref="T:System.String"/> that represents this instance.
            </returns>
        </member>
        <member name="M:Spike.Mathematics.Ray.GetHashCode">
            <summary>
            Returns a hash code for this instance.
            </summary>
            <returns>
            A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table. 
            </returns>
        </member>
        <member name="M:Spike.Mathematics.Ray.Equals(Spike.Mathematics.Ray)">
            <summary>
            Determines whether the specified <see cref="T:Spike.Mathematics.Vector4"/> is equal to this instance.
            </summary>
            <param name="value">The <see cref="T:Spike.Mathematics.Vector4"/> to compare with this instance.</param>
            <returns>
            <c>true</c> if the specified <see cref="T:Spike.Mathematics.Vector4"/> is equal to this instance; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Spike.Mathematics.Ray.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object"/> is equal to this instance.
            </summary>
            <param name="value">The <see cref="T:System.Object"/> to compare with this instance.</param>
            <returns>
            <c>true</c> if the specified <see cref="T:System.Object"/> is equal to this instance; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="F:Spike.Mathematics.Utilities.ZeroTolerance">
            <summary>
            The value for which all absolute numbers smaller than are considered equal to zero.
            </summary>
        </member>
        <member name="M:Spike.Mathematics.Utilities.Array``1(``0,System.Int32)">
            <summary>
            Does something with arrays.
            </summary>
            <typeparam name="T">Most likely the type of elements in the array.</typeparam>
            <param name="value">Who knows what this is for.</param>
            <param name="count">Probably the length of the array.</param>
            <returns>An array of who knows what.</returns>
        </member>
        <member name="M:Spike.Mathematics.Utilities.RevolutionsToDegrees(System.Single)">
            <summary>
            Converts revolutions to degrees.
            </summary>
            <param name="revolution">The value to convert.</param>
            <returns>The converted value.</returns>
        </member>
        <member name="M:Spike.Mathematics.Utilities.RevolutionsToRadians(System.Single)">
            <summary>
            Converts revolutions to radians.
            </summary>
            <param name="revolution">The value to convert.</param>
            <returns>The converted value.</returns>
        </member>
        <member name="M:Spike.Mathematics.Utilities.RevolutionsToGradians(System.Single)">
            <summary>
            Converts revolutions to gradians.
            </summary>
            <param name="revolution">The value to convert.</param>
            <returns>The converted value.</returns>
        </member>
        <member name="M:Spike.Mathematics.Utilities.DegreesToRevolutions(System.Single)">
            <summary>
            Converts degrees to revolutions.
            </summary>
            <param name="degree">The value to convert.</param>
            <returns>The converted value.</returns>
        </member>
        <member name="M:Spike.Mathematics.Utilities.DegreesToRadians(System.Single)">
            <summary>
            Converts degrees to radians.
            </summary>
            <param name="degree">The value to convert.</param>
            <returns>The converted value.</returns>
        </member>
        <member name="M:Spike.Mathematics.Utilities.DegreesToGradians(System.Single)">
            <summary>
            Converts degrees to gradians.
            </summary>
            <param name="degree">The value to convert.</param>
            <returns>The converted value.</returns>
        </member>
        <member name="M:Spike.Mathematics.Utilities.RadiansToRevolutions(System.Single)">
            <summary>
            Converts radians to revolutions.
            </summary>
            <param name="radian">The value to convert.</param>
            <returns>The converted value.</returns>
        </member>
        <member name="M:Spike.Mathematics.Utilities.RadiansToDegrees(System.Single)">
            <summary>
            Converts radians to degrees.
            </summary>
            <param name="radian">The value to convert.</param>
            <returns>The converted value.</returns>
        </member>
        <member name="M:Spike.Mathematics.Utilities.RadiansToGradians(System.Single)">
            <summary>
            Converts radians to gradians.
            </summary>
            <param name="radian">The value to convert.</param>
            <returns>The converted value.</returns>
        </member>
        <member name="M:Spike.Mathematics.Utilities.GradiansToRevolutions(System.Single)">
            <summary>
            Converts gradians to revolutions.
            </summary>
            <param name="gradian">The value to convert.</param>
            <returns>The converted value.</returns>
        </member>
        <member name="M:Spike.Mathematics.Utilities.GradiansToDegrees(System.Single)">
            <summary>
            Converts gradians to degrees.
            </summary>
            <param name="gradian">The value to convert.</param>
            <returns>The converted value.</returns>
        </member>
        <member name="M:Spike.Mathematics.Utilities.GradiansToRadians(System.Single)">
            <summary>
            Converts gradians to radians.
            </summary>
            <param name="gradian">The value to convert.</param>
            <returns>The converted value.</returns>
        </member>
        <member name="T:Spike.Mathematics.Vector2">
            <summary>
            Represents a two dimensional mathematical vector.
            </summary>
        </member>
        <member name="F:Spike.Mathematics.Vector2.SizeInBytes">
            <summary>
            The size of the <see cref="T:Spike.Mathematics.Vector2"/> type, in bytes.
            </summary>
        </member>
        <member name="F:Spike.Mathematics.Vector2.Zero">
            <summary>
            A <see cref="T:Spike.Mathematics.Vector2"/> with all of its components set to zero.
            </summary>
        </member>
        <member name="F:Spike.Mathematics.Vector2.UnitX">
            <summary>
            The X unit <see cref="T:Spike.Mathematics.Vector2"/> (1, 0).
            </summary>
        </member>
        <member name="F:Spike.Mathematics.Vector2.UnitY">
            <summary>
            The Y unit <see cref="T:Spike.Mathematics.Vector2"/> (0, 1).
            </summary>
        </member>
        <member name="F:Spike.Mathematics.Vector2.One">
            <summary>
            A <see cref="T:Spike.Mathematics.Vector2"/> with all of its components set to one.
            </summary>
        </member>
        <member name="F:Spike.Mathematics.Vector2.X">
            <summary>
            The X component of the vector.
            </summary>
        </member>
        <member name="F:Spike.Mathematics.Vector2.Y">
            <summary>
            The Y component of the vector.
            </summary>
        </member>
        <member name="M:Spike.Mathematics.Vector2.#ctor(System.Single)">
            <summary>
            Initializes a new instance of the <see cref="T:Spike.Mathematics.Vector2"/> struct.
            </summary>
            <param name="value">The value that will be assigned to all components.</param>
        </member>
        <member name="M:Spike.Mathematics.Vector2.#ctor(System.Single,System.Single)">
            <summary>
            Initializes a new instance of the <see cref="T:Spike.Mathematics.Vector2"/> struct.
            </summary>
            <param name="x">Initial value for the X component of the vector.</param>
            <param name="y">Initial value for the Y component of the vector.</param>
        </member>
        <member name="M:Spike.Mathematics.Vector2.#ctor(System.Single[])">
            <summary>
            Initializes a new instance of the <see cref="T:Spike.Mathematics.Vector2"/> struct.
            </summary>
            <param name="values">The values to assign to the X and Y components of the vector. This must be an array with two elements.</param>
            <exception cref="T:System.ArgumentNullException">Thrown when <paramref name="values"/> is <c>null</c>.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown when <paramref name="values"/> contains more or less than two elements.</exception>
        </member>
        <member name="M:Spike.Mathematics.Vector2.Length">
            <summary>
            Calculates the length of the vector.
            </summary>
            <returns>The length of the vector.</returns>
            <remarks>
            <see cref="M:Spike.Mathematics.Vector2.LengthSquared"/> may be preferred when only the relative length is needed
            and speed is of the essence.
            </remarks>
        </member>
        <member name="M:Spike.Mathematics.Vector2.LengthSquared">
            <summary>
            Calculates the squared length of the vector.
            </summary>
            <returns>The squared length of the vector.</returns>
            <remarks>
            This method may be preferred to <see cref="M:Spike.Mathematics.Vector2.Length"/> when only a relative length is needed
            and speed is of the essence.
            </remarks>
        </member>
        <member name="M:Spike.Mathematics.Vector2.Normalize">
            <summary>
            Converts the vector into a unit vector.
            </summary>
        </member>
        <member name="M:Spike.Mathematics.Vector2.ToArray">
            <summary>
            Creates an array containing the elements of the vector.
            </summary>
            <returns>A two-element array containing the components of the vector.</returns>
        </member>
        <member name="M:Spike.Mathematics.Vector2.Add(Spike.Mathematics.Vector2@,Spike.Mathematics.Vector2@,Spike.Mathematics.Vector2@)">
            <summary>
            Adds two vectors.
            </summary>
            <param name="left">The first vector to add.</param>
            <param name="right">The second vector to add.</param>
            <param name="result">When the method completes, contains the sum of the two vectors.</param>
        </member>
        <member name="M:Spike.Mathematics.Vector2.Add(Spike.Mathematics.Vector2,Spike.Mathematics.Vector2)">
            <summary>
            Adds two vectors.
            </summary>
            <param name="left">The first vector to add.</param>
            <param name="right">The second vector to add.</param>
            <returns>The sum of the two vectors.</returns>
        </member>
        <member name="M:Spike.Mathematics.Vector2.Subtract(Spike.Mathematics.Vector2@,Spike.Mathematics.Vector2@,Spike.Mathematics.Vector2@)">
            <summary>
            Subtracts two vectors.
            </summary>
            <param name="left">The first vector to subtract.</param>
            <param name="right">The second vector to subtract.</param>
            <param name="result">When the method completes, contains the difference of the two vectors.</param>
        </member>
        <member name="M:Spike.Mathematics.Vector2.Subtract(Spike.Mathematics.Vector2,Spike.Mathematics.Vector2)">
            <summary>
            Subtracts two vectors.
            </summary>
            <param name="left">The first vector to subtract.</param>
            <param name="right">The second vector to subtract.</param>
            <returns>The difference of the two vectors.</returns>
        </member>
        <member name="M:Spike.Mathematics.Vector2.Multiply(Spike.Mathematics.Vector2@,System.Single,Spike.Mathematics.Vector2@)">
            <summary>
            Scales a vector by the given value.
            </summary>
            <param name="value">The vector to scale.</param>
            <param name="scale">The amount by which to scale the vector.</param>
            <param name="result">When the method completes, contains the scaled vector.</param>
        </member>
        <member name="M:Spike.Mathematics.Vector2.Multiply(Spike.Mathematics.Vector2,System.Single)">
            <summary>
            Scales a vector by the given value.
            </summary>
            <param name="value">The vector to scale.</param>
            <param name="scale">The amount by which to scale the vector.</param>
            <returns>The scaled vector.</returns>
        </member>
        <member name="M:Spike.Mathematics.Vector2.Modulate(Spike.Mathematics.Vector2@,Spike.Mathematics.Vector2@,Spike.Mathematics.Vector2@)">
            <summary>
            Modulates a vector with another by performing component-wise multiplication.
            </summary>
            <param name="left">The first vector to modulate.</param>
            <param name="right">The second vector to modulate.</param>
            <param name="result">When the method completes, contains the modulated vector.</param>
        </member>
        <member name="M:Spike.Mathematics.Vector2.Modulate(Spike.Mathematics.Vector2,Spike.Mathematics.Vector2)">
            <summary>
            Modulates a vector with another by performing component-wise multiplication.
            </summary>
            <param name="left">The first vector to modulate.</param>
            <param name="right">The second vector to modulate.</param>
            <returns>The modulated vector.</returns>
        </member>
        <member name="M:Spike.Mathematics.Vector2.Divide(Spike.Mathematics.Vector2@,System.Single,Spike.Mathematics.Vector2@)">
            <summary>
            Scales a vector by the given value.
            </summary>
            <param name="value">The vector to scale.</param>
            <param name="scale">The amount by which to scale the vector.</param>
            <param name="result">When the method completes, contains the scaled vector.</param>
        </member>
        <member name="M:Spike.Mathematics.Vector2.Divide(Spike.Mathematics.Vector2,System.Single)">
            <summary>
            Scales a vector by the given value.
            </summary>
            <param name="value">The vector to scale.</param>
            <param name="scale">The amount by which to scale the vector.</param>
            <returns>The scaled vector.</returns>
        </member>
        <member name="M:Spike.Mathematics.Vector2.Negate(Spike.Mathematics.Vector2@,Spike.Mathematics.Vector2@)">
            <summary>
            Reverses the direction of a given vector.
            </summary>
            <param name="value">The vector to negate.</param>
            <param name="result">When the method completes, contains a vector facing in the opposite direction.</param>
        </member>
        <member name="M:Spike.Mathematics.Vector2.Negate(Spike.Mathematics.Vector2)">
            <summary>
            Reverses the direction of a given vector.
            </summary>
            <param name="value">The vector to negate.</param>
            <returns>A vector facing in the opposite direction.</returns>
        </member>
        <member name="M:Spike.Mathematics.Vector2.Barycentric(Spike.Mathematics.Vector2@,Spike.Mathematics.Vector2@,Spike.Mathematics.Vector2@,System.Single,System.Single,Spike.Mathematics.Vector2@)">
            <summary>
            Returns a <see cref="T:Spike.Mathematics.Vector2"/> containing the 2D Cartesian coordinates of a point specified in Barycentric coordinates relative to a 2D triangle.
            </summary>
            <param name="value1">A <see cref="T:Spike.Mathematics.Vector2"/> containing the 2D Cartesian coordinates of vertex 1 of the triangle.</param>
            <param name="value2">A <see cref="T:Spike.Mathematics.Vector2"/> containing the 2D Cartesian coordinates of vertex 2 of the triangle.</param>
            <param name="value3">A <see cref="T:Spike.Mathematics.Vector2"/> containing the 2D Cartesian coordinates of vertex 3 of the triangle.</param>
            <param name="amount1">Barycentric coordinate b2, which expresses the weighting factor toward vertex 2 (specified in <paramref name="value2"/>).</param>
            <param name="amount2">Barycentric coordinate b3, which expresses the weighting factor toward vertex 3 (specified in <paramref name="value3"/>).</param>
            <param name="result">When the method completes, contains the 2D Cartesian coordinates of the specified point.</param>
        </member>
        <member name="M:Spike.Mathematics.Vector2.Barycentric(Spike.Mathematics.Vector2,Spike.Mathematics.Vector2,Spike.Mathematics.Vector2,System.Single,System.Single)">
            <summary>
            Returns a <see cref="T:Spike.Mathematics.Vector2"/> containing the 2D Cartesian coordinates of a point specified in Barycentric coordinates relative to a 2D triangle.
            </summary>
            <param name="value1">A <see cref="T:Spike.Mathematics.Vector2"/> containing the 2D Cartesian coordinates of vertex 1 of the triangle.</param>
            <param name="value2">A <see cref="T:Spike.Mathematics.Vector2"/> containing the 2D Cartesian coordinates of vertex 2 of the triangle.</param>
            <param name="value3">A <see cref="T:Spike.Mathematics.Vector2"/> containing the 2D Cartesian coordinates of vertex 3 of the triangle.</param>
            <param name="amount1">Barycentric coordinate b2, which expresses the weighting factor toward vertex 2 (specified in <paramref name="value2"/>).</param>
            <param name="amount2">Barycentric coordinate b3, which expresses the weighting factor toward vertex 3 (specified in <paramref name="value3"/>).</param>
            <returns>A new <see cref="T:Spike.Mathematics.Vector2"/> containing the 2D Cartesian coordinates of the specified point.</returns>
        </member>
        <member name="M:Spike.Mathematics.Vector2.Clamp(Spike.Mathematics.Vector2@,Spike.Mathematics.Vector2@,Spike.Mathematics.Vector2@,Spike.Mathematics.Vector2@)">
            <summary>
            Restricts a value to be within a specified range.
            </summary>
            <param name="value">The value to clamp.</param>
            <param name="min">The minimum value.</param>
            <param name="max">The maximum value.</param>
            <param name="result">When the method completes, contains the clamped value.</param>
        </member>
        <member name="M:Spike.Mathematics.Vector2.Clamp(Spike.Mathematics.Vector2,Spike.Mathematics.Vector2,Spike.Mathematics.Vector2)">
            <summary>
            Restricts a value to be within a specified range.
            </summary>
            <param name="value">The value to clamp.</param>
            <param name="min">The minimum value.</param>
            <param name="max">The maximum value.</param>
            <returns>The clamped value.</returns>
        </member>
        <member name="M:Spike.Mathematics.Vector2.Distance(Spike.Mathematics.Vector2@,Spike.Mathematics.Vector2@,System.Single@)">
            <summary>
            Calculates the distance between two vectors.
            </summary>
            <param name="value1">The first vector.</param>
            <param name="value2">The second vector.</param>
            <param name="result">When the method completes, contains the distance between the two vectors.</param>
            <remarks>
            <see cref="M:Spike.Mathematics.Vector2.DistanceSquared(Spike.Mathematics.Vector2@,Spike.Mathematics.Vector2@,System.Single@)"/> may be preferred when only the relative distance is needed
            and speed is of the essence.
            </remarks>
        </member>
        <member name="M:Spike.Mathematics.Vector2.Distance(Spike.Mathematics.Vector2,Spike.Mathematics.Vector2)">
            <summary>
            Calculates the distance between two vectors.
            </summary>
            <param name="value1">The first vector.</param>
            <param name="value2">The second vector.</param>
            <returns>The distance between the two vectors.</returns>
            <remarks>
            <see cref="M:Spike.Mathematics.Vector2.DistanceSquared(Spike.Mathematics.Vector2,Spike.Mathematics.Vector2)"/> may be preferred when only the relative distance is needed
            and speed is of the essence.
            </remarks>
        </member>
        <member name="M:Spike.Mathematics.Vector2.DistanceSquared(Spike.Mathematics.Vector2@,Spike.Mathematics.Vector2@,System.Single@)">
            <summary>
            Calculates the squared distance between two vectors.
            </summary>
            <param name="value1">The first vector.</param>
            <param name="value2">The second vector</param>
            <param name="result">When the method completes, contains the squared distance between the two vectors.</param>
            <remarks>Distance squared is the value before taking the square root. 
            Distance squared can often be used in place of distance if relative comparisons are being made. 
            For example, consider three points A, B, and C. To determine whether B or C is further from A, 
            compare the distance between A and B to the distance between A and C. Calculating the two distances 
            involves two square roots, which are computationally expensive. However, using distance squared 
            provides the same information and avoids calculating two square roots.
            </remarks>
        </member>
        <member name="M:Spike.Mathematics.Vector2.DistanceSquared(Spike.Mathematics.Vector2,Spike.Mathematics.Vector2)">
            <summary>
            Calculates the squared distance between two vectors.
            </summary>
            <param name="value1">The first vector.</param>
            <param name="value2">The second vector.</param>
            <returns>The squared distance between the two vectors.</returns>
            <remarks>Distance squared is the value before taking the square root. 
            Distance squared can often be used in place of distance if relative comparisons are being made. 
            For example, consider three points A, B, and C. To determine whether B or C is further from A, 
            compare the distance between A and B to the distance between A and C. Calculating the two distances 
            involves two square roots, which are computationally expensive. However, using distance squared 
            provides the same information and avoids calculating two square roots.
            </remarks>
        </member>
        <member name="M:Spike.Mathematics.Vector2.Dot(Spike.Mathematics.Vector2@,Spike.Mathematics.Vector2@,System.Single@)">
            <summary>
            Calculates the dot product of two vectors.
            </summary>
            <param name="left">First source vector.</param>
            <param name="right">Second source vector.</param>
            <param name="result">When the method completes, contains the dot product of the two vectors.</param>
        </member>
        <member name="M:Spike.Mathematics.Vector2.Dot(Spike.Mathematics.Vector2,Spike.Mathematics.Vector2)">
            <summary>
            Calculates the dot product of two vectors.
            </summary>
            <param name="left">First source vector.</param>
            <param name="right">Second source vector.</param>
            <returns>The dot product of the two vectors.</returns>
        </member>
        <member name="M:Spike.Mathematics.Vector2.Normalize(Spike.Mathematics.Vector2@,Spike.Mathematics.Vector2@)">
            <summary>
            Converts the vector into a unit vector.
            </summary>
            <param name="value">The vector to normalize.</param>
            <param name="result">When the method completes, contains the normalized vector.</param>
        </member>
        <member name="M:Spike.Mathematics.Vector2.Normalize(Spike.Mathematics.Vector2)">
            <summary>
            Converts the vector into a unit vector.
            </summary>
            <param name="value">The vector to normalize.</param>
            <returns>The normalized vector.</returns>
        </member>
        <member name="M:Spike.Mathematics.Vector2.Lerp(Spike.Mathematics.Vector2@,Spike.Mathematics.Vector2@,System.Single,Spike.Mathematics.Vector2@)">
            <summary>
            Performs a linear interpolation between two vectors.
            </summary>
            <param name="start">Start vector.</param>
            <param name="end">End vector.</param>
            <param name="amount">Value between 0 and 1 indicating the weight of <paramref name="end"/>.</param>
            <param name="result">When the method completes, contains the linear interpolation of the two vectors.</param>
            <remarks>
            This method performs the linear interpolation based on the following formula.
            <code>start + (end - start) * amount</code>
            Passing <paramref name="amount"/> a value of 0 will cause <paramref name="start"/> to be returned; a value of 1 will cause <paramref name="end"/> to be returned. 
            </remarks>
        </member>
        <member name="M:Spike.Mathematics.Vector2.Lerp(Spike.Mathematics.Vector2,Spike.Mathematics.Vector2,System.Single)">
            <summary>
            Performs a linear interpolation between two vectors.
            </summary>
            <param name="start">Start vector.</param>
            <param name="end">End vector.</param>
            <param name="amount">Value between 0 and 1 indicating the weight of <paramref name="end"/>.</param>
            <returns>The linear interpolation of the two vectors.</returns>
            <remarks>
            This method performs the linear interpolation based on the following formula.
            <code>start + (end - start) * amount</code>
            Passing <paramref name="amount"/> a value of 0 will cause <paramref name="start"/> to be returned; a value of 1 will cause <paramref name="end"/> to be returned. 
            </remarks>
        </member>
        <member name="M:Spike.Mathematics.Vector2.SmoothStep(Spike.Mathematics.Vector2@,Spike.Mathematics.Vector2@,System.Single,Spike.Mathematics.Vector2@)">
            <summary>
            Performs a cubic interpolation between two vectors.
            </summary>
            <param name="start">Start vector.</param>
            <param name="end">End vector.</param>
            <param name="amount">Value between 0 and 1 indicating the weight of <paramref name="end"/>.</param>
            <param name="result">When the method completes, contains the cubic interpolation of the two vectors.</param>
        </member>
        <member name="M:Spike.Mathematics.Vector2.SmoothStep(Spike.Mathematics.Vector2,Spike.Mathematics.Vector2,System.Single)">
            <summary>
            Performs a cubic interpolation between two vectors.
            </summary>
            <param name="start">Start vector.</param>
            <param name="end">End vector.</param>
            <param name="amount">Value between 0 and 1 indicating the weight of <paramref name="end"/>.</param>
            <returns>The cubic interpolation of the two vectors.</returns>
        </member>
        <member name="M:Spike.Mathematics.Vector2.Hermite(Spike.Mathematics.Vector2@,Spike.Mathematics.Vector2@,Spike.Mathematics.Vector2@,Spike.Mathematics.Vector2@,System.Single,Spike.Mathematics.Vector2@)">
            <summary>
            Performs a Hermite spline interpolation.
            </summary>
            <param name="value1">First source position vector.</param>
            <param name="tangent1">First source tangent vector.</param>
            <param name="value2">Second source position vector.</param>
            <param name="tangent2">Second source tangent vector.</param>
            <param name="amount">Weighting factor.</param>
            <param name="result">When the method completes, contains the result of the Hermite spline interpolation.</param>
        </member>
        <member name="M:Spike.Mathematics.Vector2.Hermite(Spike.Mathematics.Vector2,Spike.Mathematics.Vector2,Spike.Mathematics.Vector2,Spike.Mathematics.Vector2,System.Single)">
            <summary>
            Performs a Hermite spline interpolation.
            </summary>
            <param name="value1">First source position vector.</param>
            <param name="tangent1">First source tangent vector.</param>
            <param name="value2">Second source position vector.</param>
            <param name="tangent2">Second source tangent vector.</param>
            <param name="amount">Weighting factor.</param>
            <returns>The result of the Hermite spline interpolation.</returns>
        </member>
        <member name="M:Spike.Mathematics.Vector2.CatmullRom(Spike.Mathematics.Vector2@,Spike.Mathematics.Vector2@,Spike.Mathematics.Vector2@,Spike.Mathematics.Vector2@,System.Single,Spike.Mathematics.Vector2@)">
            <summary>
            Performs a Catmull-Rom interpolation using the specified positions.
            </summary>
            <param name="value1">The first position in the interpolation.</param>
            <param name="value2">The second position in the interpolation.</param>
            <param name="value3">The third position in the interpolation.</param>
            <param name="value4">The fourth position in the interpolation.</param>
            <param name="amount">Weighting factor.</param>
            <param name="result">When the method completes, contains the result of the Catmull-Rom interpolation.</param>
        </member>
        <member name="M:Spike.Mathematics.Vector2.CatmullRom(Spike.Mathematics.Vector2,Spike.Mathematics.Vector2,Spike.Mathematics.Vector2,Spike.Mathematics.Vector2,System.Single)">
            <summary>
            Performs a Catmull-Rom interpolation using the specified positions.
            </summary>
            <param name="value1">The first position in the interpolation.</param>
            <param name="value2">The second position in the interpolation.</param>
            <param name="value3">The third position in the interpolation.</param>
            <param name="value4">The fourth position in the interpolation.</param>
            <param name="amount">Weighting factor.</param>
            <returns>A vector that is the result of the Catmull-Rom interpolation.</returns>
        </member>
        <member name="M:Spike.Mathematics.Vector2.Max(Spike.Mathematics.Vector2@,Spike.Mathematics.Vector2@,Spike.Mathematics.Vector2@)">
            <summary>
            Returns a vector containing the smallest components of the specified vectors.
            </summary>
            <param name="left">The first source vector.</param>
            <param name="right">The second source vector.</param>
            <param name="result">When the method completes, contains an new vector composed of the largest components of the source vectors.</param>
        </member>
        <member name="M:Spike.Mathematics.Vector2.Max(Spike.Mathematics.Vector2,Spike.Mathematics.Vector2)">
            <summary>
            Returns a vector containing the largest components of the specified vectors.
            </summary>
            <param name="left">The first source vector.</param>
            <param name="right">The second source vector.</param>
            <returns>A vector containing the largest components of the source vectors.</returns>
        </member>
        <member name="M:Spike.Mathematics.Vector2.Min(Spike.Mathematics.Vector2@,Spike.Mathematics.Vector2@,Spike.Mathematics.Vector2@)">
            <summary>
            Returns a vector containing the smallest components of the specified vectors.
            </summary>
            <param name="left">The first source vector.</param>
            <param name="right">The second source vector.</param>
            <param name="result">When the method completes, contains an new vector composed of the smallest components of the source vectors.</param>
        </member>
        <member name="M:Spike.Mathematics.Vector2.Min(Spike.Mathematics.Vector2,Spike.Mathematics.Vector2)">
            <summary>
            Returns a vector containing the smallest components of the specified vectors.
            </summary>
            <param name="left">The first source vector.</param>
            <param name="right">The second source vector.</param>
            <returns>A vector containing the smallest components of the source vectors.</returns>
        </member>
        <member name="M:Spike.Mathematics.Vector2.Reflect(Spike.Mathematics.Vector2@,Spike.Mathematics.Vector2@,Spike.Mathematics.Vector2@)">
            <summary>
            Returns the reflection of a vector off a surface that has the specified normal. 
            </summary>
            <param name="vector">The source vector.</param>
            <param name="normal">Normal of the surface.</param>
            <param name="result">When the method completes, contains the reflected vector.</param>
            <remarks>Reflect only gives the direction of a reflection off a surface, it does not determine 
            whether the original vector was close enough to the surface to hit it.</remarks>
        </member>
        <member name="M:Spike.Mathematics.Vector2.Reflect(Spike.Mathematics.Vector2,Spike.Mathematics.Vector2)">
            <summary>
            Returns the reflection of a vector off a surface that has the specified normal. 
            </summary>
            <param name="vector">The source vector.</param>
            <param name="normal">Normal of the surface.</param>
            <returns>The reflected vector.</returns>
            <remarks>Reflect only gives the direction of a reflection off a surface, it does not determine 
            whether the original vector was close enough to the surface to hit it.</remarks>
        </member>
        <member name="M:Spike.Mathematics.Vector2.Orthogonalize(Spike.Mathematics.Vector2[],Spike.Mathematics.Vector2[])">
            <summary>
            Orthogonalizes a list of vectors.
            </summary>
            <param name="destination">The list of orthogonalized vectors.</param>
            <param name="source">The list of vectors to orthogonalize.</param>
            <remarks>
            <para>Orthogonalization is the process of making all vectors orthogonal to each other. This
            means that any given vector in the list will be orthogonal to any other given vector in the
            list.</para>
            <para>Because this method uses the modified Gram-Schmidt process, the resulting vectors
            tend to be numerically unstable. The numeric stability decreases according to the vectors
            position in the list so that the first vector is the most stable and the last vector is the
            least stable.</para>
            </remarks>
            <exception cref="T:System.ArgumentNullException">Thrown when <paramref name="source"/> or <paramref name="destination"/> is <c>null</c>.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown when <paramref name="destination"/> is shorter in length than <paramref name="source"/>.</exception>
        </member>
        <member name="M:Spike.Mathematics.Vector2.Orthonormalize(Spike.Mathematics.Vector2[],Spike.Mathematics.Vector2[])">
            <summary>
            Orthonormalizes a list of vectors.
            </summary>
            <param name="destination">The list of orthonormalized vectors.</param>
            <param name="source">The list of vectors to orthonormalize.</param>
            <remarks>
            <para>Orthonormalization is the process of making all vectors orthogonal to each
            other and making all vectors of unit length. This means that any given vector will
            be orthogonal to any other given vector in the list.</para>
            <para>Because this method uses the modified Gram-Schmidt process, the resulting vectors
            tend to be numerically unstable. The numeric stability decreases according to the vectors
            position in the list so that the first vector is the most stable and the last vector is the
            least stable.</para>
            </remarks>
            <exception cref="T:System.ArgumentNullException">Thrown when <paramref name="source"/> or <paramref name="destination"/> is <c>null</c>.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown when <paramref name="destination"/> is shorter in length than <paramref name="source"/>.</exception>
        </member>
        <member name="M:Spike.Mathematics.Vector2.Transform(Spike.Mathematics.Vector2@,Spike.Mathematics.Quaternion@,Spike.Mathematics.Vector2@)">
            <summary>
            Transforms a 2D vector by the given <see cref="T:Spike.Mathematics.Quaternion"/> rotation.
            </summary>
            <param name="vector">The vector to rotate.</param>
            <param name="rotation">The <see cref="T:Spike.Mathematics.Quaternion"/> rotation to apply.</param>
            <param name="result">When the method completes, contains the transformed <see cref="T:Spike.Mathematics.Vector4"/>.</param>
        </member>
        <member name="M:Spike.Mathematics.Vector2.Transform(Spike.Mathematics.Vector2,Spike.Mathematics.Quaternion)">
            <summary>
            Transforms a 2D vector by the given <see cref="T:Spike.Mathematics.Quaternion"/> rotation.
            </summary>
            <param name="vector">The vector to rotate.</param>
            <param name="rotation">The <see cref="T:Spike.Mathematics.Quaternion"/> rotation to apply.</param>
            <returns>The transformed <see cref="T:Spike.Mathematics.Vector4"/>.</returns>
        </member>
        <member name="M:Spike.Mathematics.Vector2.Transform(Spike.Mathematics.Vector2[],Spike.Mathematics.Quaternion@,Spike.Mathematics.Vector2[])">
            <summary>
            Transforms an array of vectors by the given <see cref="T:Spike.Mathematics.Quaternion"/> rotation.
            </summary>
            <param name="source">The array of vectors to transform.</param>
            <param name="rotation">The <see cref="T:Spike.Mathematics.Quaternion"/> rotation to apply.</param>
            <param name="destination">The array for which the transformed vectors are stored.
            This array may be the same array as <paramref name="source"/>.</param>
            <exception cref="T:System.ArgumentNullException">Thrown when <paramref name="source"/> or <paramref name="destination"/> is <c>null</c>.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown when <paramref name="destination"/> is shorter in length than <paramref name="source"/>.</exception>
        </member>
        <member name="M:Spike.Mathematics.Vector2.Transform(Spike.Mathematics.Vector2@,Spike.Mathematics.Matrix@,Spike.Mathematics.Vector4@)">
            <summary>
            Transforms a 2D vector by the given <see cref="T:Spike.Mathematics.Matrix"/>.
            </summary>
            <param name="vector">The source vector.</param>
            <param name="transform">The transformation <see cref="T:Spike.Mathematics.Matrix"/>.</param>
            <param name="result">When the method completes, contains the transformed <see cref="T:Spike.Mathematics.Vector4"/>.</param>
        </member>
        <member name="M:Spike.Mathematics.Vector2.Transform(Spike.Mathematics.Vector2,Spike.Mathematics.Matrix)">
            <summary>
            Transforms a 2D vector by the given <see cref="T:Spike.Mathematics.Matrix"/>.
            </summary>
            <param name="vector">The source vector.</param>
            <param name="transform">The transformation <see cref="T:Spike.Mathematics.Matrix"/>.</param>
            <returns>The transformed <see cref="T:Spike.Mathematics.Vector4"/>.</returns>
        </member>
        <member name="M:Spike.Mathematics.Vector2.Transform(Spike.Mathematics.Vector2[],Spike.Mathematics.Matrix@,Spike.Mathematics.Vector4[])">
            <summary>
            Transforms an array of 2D vectors by the given <see cref="T:Spike.Mathematics.Matrix"/>.
            </summary>
            <param name="source">The array of vectors to transform.</param>
            <param name="transform">The transformation <see cref="T:Spike.Mathematics.Matrix"/>.</param>
            <param name="destination">The array for which the transformed vectors are stored.</param>
            <exception cref="T:System.ArgumentNullException">Thrown when <paramref name="source"/> or <paramref name="destination"/> is <c>null</c>.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown when <paramref name="destination"/> is shorter in length than <paramref name="source"/>.</exception>
        </member>
        <member name="M:Spike.Mathematics.Vector2.TransformCoordinate(Spike.Mathematics.Vector2@,Spike.Mathematics.Matrix@,Spike.Mathematics.Vector2@)">
            <summary>
            Performs a coordinate transformation using the given <see cref="T:Spike.Mathematics.Matrix"/>.
            </summary>
            <param name="coordinate">The coordinate vector to transform.</param>
            <param name="transform">The transformation <see cref="T:Spike.Mathematics.Matrix"/>.</param>
            <param name="result">When the method completes, contains the transformed coordinates.</param>
            <remarks>
            A coordinate transform performs the transformation with the assumption that the w component
            is one. The four dimensional vector obtained from the transformation operation has each
            component in the vector divided by the w component. This forces the wcomponent to be one and
            therefore makes the vector homogeneous. The homogeneous vector is often prefered when working
            with coordinates as the w component can safely be ignored.
            </remarks>
        </member>
        <member name="M:Spike.Mathematics.Vector2.TransformCoordinate(Spike.Mathematics.Vector2,Spike.Mathematics.Matrix)">
            <summary>
            Performs a coordinate transformation using the given <see cref="T:Spike.Mathematics.Matrix"/>.
            </summary>
            <param name="coordinate">The coordinate vector to transform.</param>
            <param name="transform">The transformation <see cref="T:Spike.Mathematics.Matrix"/>.</param>
            <returns>The transformed coordinates.</returns>
            <remarks>
            A coordinate transform performs the transformation with the assumption that the w component
            is one. The four dimensional vector obtained from the transformation operation has each
            component in the vector divided by the w component. This forces the wcomponent to be one and
            therefore makes the vector homogeneous. The homogeneous vector is often prefered when working
            with coordinates as the w component can safely be ignored.
            </remarks>
        </member>
        <member name="M:Spike.Mathematics.Vector2.TransformCoordinate(Spike.Mathematics.Vector2[],Spike.Mathematics.Matrix@,Spike.Mathematics.Vector2[])">
            <summary>
            Performs a coordinate transformation on an array of vectors using the given <see cref="T:Spike.Mathematics.Matrix"/>.
            </summary>
            <param name="source">The array of coordinate vectors to trasnform.</param>
            <param name="transform">The transformation <see cref="T:Spike.Mathematics.Matrix"/>.</param>
            <param name="destination">The array for which the transformed vectors are stored.
            This array may be the same array as <paramref name="source"/>.</param>
            <exception cref="T:System.ArgumentNullException">Thrown when <paramref name="source"/> or <paramref name="destination"/> is <c>null</c>.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown when <paramref name="destination"/> is shorter in length than <paramref name="source"/>.</exception>
            <remarks>
            A coordinate transform performs the transformation with the assumption that the w component
            is one. The four dimensional vector obtained from the transformation operation has each
            component in the vector divided by the w component. This forces the wcomponent to be one and
            therefore makes the vector homogeneous. The homogeneous vector is often prefered when working
            with coordinates as the w component can safely be ignored.
            </remarks>
        </member>
        <member name="M:Spike.Mathematics.Vector2.TransformNormal(Spike.Mathematics.Vector2@,Spike.Mathematics.Matrix@,Spike.Mathematics.Vector2@)">
            <summary>
            Performs a normal transformation using the given <see cref="T:Spike.Mathematics.Matrix"/>.
            </summary>
            <param name="normal">The normal vector to transform.</param>
            <param name="transform">The transformation <see cref="T:Spike.Mathematics.Matrix"/>.</param>
            <param name="result">When the method completes, contains the transformed normal.</param>
            <remarks>
            A normal transform performs the transformation with the assumption that the w component
            is zero. This causes the fourth row and fourth collumn of the matrix to be unused. The
            end result is a vector that is not translated, but all other transformation properties
            apply. This is often prefered for normal vectors as normals purely represent direction
            rather than location because normal vectors should not be translated.
            </remarks>
        </member>
        <member name="M:Spike.Mathematics.Vector2.TransformNormal(Spike.Mathematics.Vector2,Spike.Mathematics.Matrix)">
            <summary>
            Performs a normal transformation using the given <see cref="T:Spike.Mathematics.Matrix"/>.
            </summary>
            <param name="normal">The normal vector to transform.</param>
            <param name="transform">The transformation <see cref="T:Spike.Mathematics.Matrix"/>.</param>
            <returns>The transformed normal.</returns>
            <remarks>
            A normal transform performs the transformation with the assumption that the w component
            is zero. This causes the fourth row and fourth collumn of the matrix to be unused. The
            end result is a vector that is not translated, but all other transformation properties
            apply. This is often prefered for normal vectors as normals purely represent direction
            rather than location because normal vectors should not be translated.
            </remarks>
        </member>
        <member name="M:Spike.Mathematics.Vector2.TransformNormal(Spike.Mathematics.Vector2[],Spike.Mathematics.Matrix@,Spike.Mathematics.Vector2[])">
            <summary>
            Performs a normal transformation on an array of vectors using the given <see cref="T:Spike.Mathematics.Matrix"/>.
            </summary>
            <param name="source">The array of normal vectors to transform.</param>
            <param name="transform">The transformation <see cref="T:Spike.Mathematics.Matrix"/>.</param>
            <param name="destination">The array for which the transformed vectors are stored.
            This array may be the same array as <paramref name="source"/>.</param>
            <exception cref="T:System.ArgumentNullException">Thrown when <paramref name="source"/> or <paramref name="destination"/> is <c>null</c>.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown when <paramref name="destination"/> is shorter in length than <paramref name="source"/>.</exception>
            <remarks>
            A normal transform performs the transformation with the assumption that the w component
            is zero. This causes the fourth row and fourth collumn of the matrix to be unused. The
            end result is a vector that is not translated, but all other transformation properties
            apply. This is often prefered for normal vectors as normals purely represent direction
            rather than location because normal vectors should not be translated.
            </remarks>
        </member>
        <member name="M:Spike.Mathematics.Vector2.op_Addition(Spike.Mathematics.Vector2,Spike.Mathematics.Vector2)">
            <summary>
            Adds two vectors.
            </summary>
            <param name="left">The first vector to add.</param>
            <param name="right">The second vector to add.</param>
            <returns>The sum of the two vectors.</returns>
        </member>
        <member name="M:Spike.Mathematics.Vector2.op_UnaryPlus(Spike.Mathematics.Vector2)">
            <summary>
            Assert a vector (return it unchanged).
            </summary>
            <param name="value">The vector to assert (unchange).</param>
            <returns>The asserted (unchanged) vector.</returns>
        </member>
        <member name="M:Spike.Mathematics.Vector2.op_Subtraction(Spike.Mathematics.Vector2,Spike.Mathematics.Vector2)">
            <summary>
            Subtracts two vectors.
            </summary>
            <param name="left">The first vector to subtract.</param>
            <param name="right">The second vector to subtract.</param>
            <returns>The difference of the two vectors.</returns>
        </member>
        <member name="M:Spike.Mathematics.Vector2.op_UnaryNegation(Spike.Mathematics.Vector2)">
            <summary>
            Reverses the direction of a given vector.
            </summary>
            <param name="value">The vector to negate.</param>
            <returns>A vector facing in the opposite direction.</returns>
        </member>
        <member name="M:Spike.Mathematics.Vector2.op_Multiply(System.Single,Spike.Mathematics.Vector2)">
            <summary>
            Scales a vector by the given value.
            </summary>
            <param name="value">The vector to scale.</param>
            <param name="scale">The amount by which to scale the vector.</param>
            <returns>The scaled vector.</returns>
        </member>
        <member name="M:Spike.Mathematics.Vector2.op_Multiply(Spike.Mathematics.Vector2,System.Single)">
            <summary>
            Scales a vector by the given value.
            </summary>
            <param name="value">The vector to scale.</param>
            <param name="scale">The amount by which to scale the vector.</param>
            <returns>The scaled vector.</returns>
        </member>
        <member name="M:Spike.Mathematics.Vector2.op_Division(Spike.Mathematics.Vector2,System.Single)">
            <summary>
            Scales a vector by the given value.
            </summary>
            <param name="value">The vector to scale.</param>
            <param name="scale">The amount by which to scale the vector.</param>
            <returns>The scaled vector.</returns>
        </member>
        <member name="M:Spike.Mathematics.Vector2.op_Equality(Spike.Mathematics.Vector2,Spike.Mathematics.Vector2)">
            <summary>
            Tests for equality between two objects.
            </summary>
            <param name="left">The first value to compare.</param>
            <param name="right">The second value to compare.</param>
            <returns><c>true</c> if <paramref name="left"/> has the same value as <paramref name="right"/>; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:Spike.Mathematics.Vector2.op_Inequality(Spike.Mathematics.Vector2,Spike.Mathematics.Vector2)">
            <summary>
            Tests for inequality between two objects.
            </summary>
            <param name="left">The first value to compare.</param>
            <param name="right">The second value to compare.</param>
            <returns><c>true</c> if <paramref name="left"/> has a different value than <paramref name="right"/>; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:Spike.Mathematics.Vector2.op_Explicit(Spike.Mathematics.Vector2)~Spike.Mathematics.Vector3">
            <summary>
            Performs an explicit conversion from <see cref="T:Spike.Mathematics.Vector2"/> to <see cref="T:Spike.Mathematics.Vector3"/>.
            </summary>
            <param name="value">The value.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="M:Spike.Mathematics.Vector2.op_Explicit(Spike.Mathematics.Vector2)~Spike.Mathematics.Vector4">
            <summary>
            Performs an explicit conversion from <see cref="T:Spike.Mathematics.Vector2"/> to <see cref="T:Spike.Mathematics.Vector4"/>.
            </summary>
            <param name="value">The value.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="M:Spike.Mathematics.Vector2.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <returns>
            A <see cref="T:System.String"/> that represents this instance.
            </returns>
        </member>
        <member name="M:Spike.Mathematics.Vector2.ToString(System.String)">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <param name="format">The format.</param>
            <returns>
            A <see cref="T:System.String"/> that represents this instance.
            </returns>
        </member>
        <member name="M:Spike.Mathematics.Vector2.ToString(System.IFormatProvider)">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <param name="formatProvider">The format provider.</param>
            <returns>
            A <see cref="T:System.String"/> that represents this instance.
            </returns>
        </member>
        <member name="M:Spike.Mathematics.Vector2.ToString(System.String,System.IFormatProvider)">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <param name="format">The format.</param>
            <param name="formatProvider">The format provider.</param>
            <returns>
            A <see cref="T:System.String"/> that represents this instance.
            </returns>
        </member>
        <member name="M:Spike.Mathematics.Vector2.GetHashCode">
            <summary>
            Returns a hash code for this instance.
            </summary>
            <returns>
            A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table. 
            </returns>
        </member>
        <member name="M:Spike.Mathematics.Vector2.Equals(Spike.Mathematics.Vector2)">
            <summary>
            Determines whether the specified <see cref="T:Spike.Mathematics.Vector2"/> is equal to this instance.
            </summary>
            <param name="other">The <see cref="T:Spike.Mathematics.Vector2"/> to compare with this instance.</param>
            <returns>
            	<c>true</c> if the specified <see cref="T:Spike.Mathematics.Vector2"/> is equal to this instance; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Spike.Mathematics.Vector2.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object"/> is equal to this instance.
            </summary>
            <param name="value">The <see cref="T:System.Object"/> to compare with this instance.</param>
            <returns>
            	<c>true</c> if the specified <see cref="T:System.Object"/> is equal to this instance; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="P:Spike.Mathematics.Vector2.IsNormalized">
            <summary>
            Gets a value indicting whether this instance is normalized.
            </summary>
        </member>
        <member name="P:Spike.Mathematics.Vector2.Item(System.Int32)">
            <summary>
            Gets or sets the component at the specified index.
            </summary>
            <value>The value of the X or Y component, depending on the index.</value>
            <param name="index">The index of the component to access. Use 0 for the X component and 1 for the Y component.</param>
            <returns>The value of the component at the specified index.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown when the <paramref name="index"/> is out of the range [0, 1].</exception>
        </member>
        <member name="T:Spike.Mathematics.Vector3">
            <summary>
            Represents a three dimensional mathematical vector.
            </summary>
        </member>
        <member name="F:Spike.Mathematics.Vector3.SizeInBytes">
            <summary>
            The size of the <see cref="T:Spike.Mathematics.Vector3"/> type, in bytes.
            </summary>
        </member>
        <member name="F:Spike.Mathematics.Vector3.Zero">
            <summary>
            A <see cref="T:Spike.Mathematics.Vector3"/> with all of its components set to zero.
            </summary>
        </member>
        <member name="F:Spike.Mathematics.Vector3.UnitX">
            <summary>
            The X unit <see cref="T:Spike.Mathematics.Vector3"/> (1, 0, 0).
            </summary>
        </member>
        <member name="F:Spike.Mathematics.Vector3.UnitY">
            <summary>
            The Y unit <see cref="T:Spike.Mathematics.Vector3"/> (0, 1, 0).
            </summary>
        </member>
        <member name="F:Spike.Mathematics.Vector3.UnitZ">
            <summary>
            The Z unit <see cref="T:Spike.Mathematics.Vector3"/> (0, 0, 1).
            </summary>
        </member>
        <member name="F:Spike.Mathematics.Vector3.One">
            <summary>
            A <see cref="T:Spike.Mathematics.Vector3"/> with all of its components set to one.
            </summary>
        </member>
        <member name="F:Spike.Mathematics.Vector3.X">
            <summary>
            The X component of the vector.
            </summary>
        </member>
        <member name="F:Spike.Mathematics.Vector3.Y">
            <summary>
            The Y component of the vector.
            </summary>
        </member>
        <member name="F:Spike.Mathematics.Vector3.Z">
            <summary>
            The Z component of the vector.
            </summary>
        </member>
        <member name="M:Spike.Mathematics.Vector3.#ctor(System.Single)">
            <summary>
            Initializes a new instance of the <see cref="T:Spike.Mathematics.Vector3"/> struct.
            </summary>
            <param name="value">The value that will be assigned to all components.</param>
        </member>
        <member name="M:Spike.Mathematics.Vector3.#ctor(System.Single,System.Single,System.Single)">
            <summary>
            Initializes a new instance of the <see cref="T:Spike.Mathematics.Vector3"/> struct.
            </summary>
            <param name="x">Initial value for the X component of the vector.</param>
            <param name="y">Initial value for the Y component of the vector.</param>
            <param name="z">Initial value for the Z component of the vector.</param>
        </member>
        <member name="M:Spike.Mathematics.Vector3.#ctor(Spike.Mathematics.Vector2,System.Single)">
            <summary>
            Initializes a new instance of the <see cref="T:Spike.Mathematics.Vector3"/> struct.
            </summary>
            <param name="value">A vector containing the values with which to initialize the X and Y components.</param>
            <param name="z">Initial value for the Z component of the vector.</param>
        </member>
        <member name="M:Spike.Mathematics.Vector3.#ctor(System.Single[])">
            <summary>
            Initializes a new instance of the <see cref="T:Spike.Mathematics.Vector3"/> struct.
            </summary>
            <param name="values">The values to assign to the X, Y, and Z components of the vector. This must be an array with three elements.</param>
            <exception cref="T:System.ArgumentNullException">Thrown when <paramref name="values"/> is <c>null</c>.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown when <paramref name="values"/> contains more or less than three elements.</exception>
        </member>
        <member name="M:Spike.Mathematics.Vector3.Length">
            <summary>
            Calculates the length of the vector.
            </summary>
            <returns>The length of the vector.</returns>
            <remarks>
            <see cref="M:Spike.Mathematics.Vector3.LengthSquared"/> may be preferred when only the relative length is needed
            and speed is of the essence.
            </remarks>
        </member>
        <member name="M:Spike.Mathematics.Vector3.LengthSquared">
            <summary>
            Calculates the squared length of the vector.
            </summary>
            <returns>The squared length of the vector.</returns>
            <remarks>
            This method may be preferred to <see cref="M:Spike.Mathematics.Vector3.Length"/> when only a relative length is needed
            and speed is of the essence.
            </remarks>
        </member>
        <member name="M:Spike.Mathematics.Vector3.Normalize">
            <summary>
            Converts the vector into a unit vector.
            </summary>
        </member>
        <member name="M:Spike.Mathematics.Vector3.ToArray">
            <summary>
            Creates an array containing the elements of the vector.
            </summary>
            <returns>A three-element array containing the components of the vector.</returns>
        </member>
        <member name="M:Spike.Mathematics.Vector3.Add(Spike.Mathematics.Vector3@,Spike.Mathematics.Vector3@,Spike.Mathematics.Vector3@)">
            <summary>
            Adds two vectors.
            </summary>
            <param name="left">The first vector to add.</param>
            <param name="right">The second vector to add.</param>
            <param name="result">When the method completes, contains the sum of the two vectors.</param>
        </member>
        <member name="M:Spike.Mathematics.Vector3.Add(Spike.Mathematics.Vector3,Spike.Mathematics.Vector3)">
            <summary>
            Adds two vectors.
            </summary>
            <param name="left">The first vector to add.</param>
            <param name="right">The second vector to add.</param>
            <returns>The sum of the two vectors.</returns>
        </member>
        <member name="M:Spike.Mathematics.Vector3.Subtract(Spike.Mathematics.Vector3@,Spike.Mathematics.Vector3@,Spike.Mathematics.Vector3@)">
            <summary>
            Subtracts two vectors.
            </summary>
            <param name="left">The first vector to subtract.</param>
            <param name="right">The second vector to subtract.</param>
            <param name="result">When the method completes, contains the difference of the two vectors.</param>
        </member>
        <member name="M:Spike.Mathematics.Vector3.Subtract(Spike.Mathematics.Vector3,Spike.Mathematics.Vector3)">
            <summary>
            Subtracts two vectors.
            </summary>
            <param name="left">The first vector to subtract.</param>
            <param name="right">The second vector to subtract.</param>
            <returns>The difference of the two vectors.</returns>
        </member>
        <member name="M:Spike.Mathematics.Vector3.Multiply(Spike.Mathematics.Vector3@,System.Single,Spike.Mathematics.Vector3@)">
            <summary>
            Scales a vector by the given value.
            </summary>
            <param name="value">The vector to scale.</param>
            <param name="scale">The amount by which to scale the vector.</param>
            <param name="result">When the method completes, contains the scaled vector.</param>
        </member>
        <member name="M:Spike.Mathematics.Vector3.Multiply(Spike.Mathematics.Vector3,System.Single)">
            <summary>
            Scales a vector by the given value.
            </summary>
            <param name="value">The vector to scale.</param>
            <param name="scale">The amount by which to scale the vector.</param>
            <returns>The scaled vector.</returns>
        </member>
        <member name="M:Spike.Mathematics.Vector3.Modulate(Spike.Mathematics.Vector3@,Spike.Mathematics.Vector3@,Spike.Mathematics.Vector3@)">
            <summary>
            Modulates a vector with another by performing component-wise multiplication.
            </summary>
            <param name="left">The first vector to modulate.</param>
            <param name="right">The second vector to modulate.</param>
            <param name="result">When the method completes, contains the modulated vector.</param>
        </member>
        <member name="M:Spike.Mathematics.Vector3.Modulate(Spike.Mathematics.Vector3,Spike.Mathematics.Vector3)">
            <summary>
            Modulates a vector with another by performing component-wise multiplication.
            </summary>
            <param name="left">The first vector to modulate.</param>
            <param name="right">The second vector to modulate.</param>
            <returns>The modulated vector.</returns>
        </member>
        <member name="M:Spike.Mathematics.Vector3.Divide(Spike.Mathematics.Vector3@,System.Single,Spike.Mathematics.Vector3@)">
            <summary>
            Scales a vector by the given value.
            </summary>
            <param name="value">The vector to scale.</param>
            <param name="scale">The amount by which to scale the vector.</param>
            <param name="result">When the method completes, contains the scaled vector.</param>
        </member>
        <member name="M:Spike.Mathematics.Vector3.Divide(Spike.Mathematics.Vector3,System.Single)">
            <summary>
            Scales a vector by the given value.
            </summary>
            <param name="value">The vector to scale.</param>
            <param name="scale">The amount by which to scale the vector.</param>
            <returns>The scaled vector.</returns>
        </member>
        <member name="M:Spike.Mathematics.Vector3.Negate(Spike.Mathematics.Vector3@,Spike.Mathematics.Vector3@)">
            <summary>
            Reverses the direction of a given vector.
            </summary>
            <param name="value">The vector to negate.</param>
            <param name="result">When the method completes, contains a vector facing in the opposite direction.</param>
        </member>
        <member name="M:Spike.Mathematics.Vector3.Negate(Spike.Mathematics.Vector3)">
            <summary>
            Reverses the direction of a given vector.
            </summary>
            <param name="value">The vector to negate.</param>
            <returns>A vector facing in the opposite direction.</returns>
        </member>
        <member name="M:Spike.Mathematics.Vector3.Barycentric(Spike.Mathematics.Vector3@,Spike.Mathematics.Vector3@,Spike.Mathematics.Vector3@,System.Single,System.Single,Spike.Mathematics.Vector3@)">
            <summary>
            Returns a <see cref="T:Spike.Mathematics.Vector3"/> containing the 3D Cartesian coordinates of a point specified in Barycentric coordinates relative to a 3D triangle.
            </summary>
            <param name="value1">A <see cref="T:Spike.Mathematics.Vector3"/> containing the 3D Cartesian coordinates of vertex 1 of the triangle.</param>
            <param name="value2">A <see cref="T:Spike.Mathematics.Vector3"/> containing the 3D Cartesian coordinates of vertex 2 of the triangle.</param>
            <param name="value3">A <see cref="T:Spike.Mathematics.Vector3"/> containing the 3D Cartesian coordinates of vertex 3 of the triangle.</param>
            <param name="amount1">Barycentric coordinate b2, which expresses the weighting factor toward vertex 2 (specified in <paramref name="value2"/>).</param>
            <param name="amount2">Barycentric coordinate b3, which expresses the weighting factor toward vertex 3 (specified in <paramref name="value3"/>).</param>
            <param name="result">When the method completes, contains the 3D Cartesian coordinates of the specified point.</param>
        </member>
        <member name="M:Spike.Mathematics.Vector3.Barycentric(Spike.Mathematics.Vector3,Spike.Mathematics.Vector3,Spike.Mathematics.Vector3,System.Single,System.Single)">
            <summary>
            Returns a <see cref="T:Spike.Mathematics.Vector3"/> containing the 3D Cartesian coordinates of a point specified in Barycentric coordinates relative to a 3D triangle.
            </summary>
            <param name="value1">A <see cref="T:Spike.Mathematics.Vector3"/> containing the 3D Cartesian coordinates of vertex 1 of the triangle.</param>
            <param name="value2">A <see cref="T:Spike.Mathematics.Vector3"/> containing the 3D Cartesian coordinates of vertex 2 of the triangle.</param>
            <param name="value3">A <see cref="T:Spike.Mathematics.Vector3"/> containing the 3D Cartesian coordinates of vertex 3 of the triangle.</param>
            <param name="amount1">Barycentric coordinate b2, which expresses the weighting factor toward vertex 2 (specified in <paramref name="value2"/>).</param>
            <param name="amount2">Barycentric coordinate b3, which expresses the weighting factor toward vertex 3 (specified in <paramref name="value3"/>).</param>
            <returns>A new <see cref="T:Spike.Mathematics.Vector3"/> containing the 3D Cartesian coordinates of the specified point.</returns>
        </member>
        <member name="M:Spike.Mathematics.Vector3.Clamp(Spike.Mathematics.Vector3@,Spike.Mathematics.Vector3@,Spike.Mathematics.Vector3@,Spike.Mathematics.Vector3@)">
            <summary>
            Restricts a value to be within a specified range.
            </summary>
            <param name="value">The value to clamp.</param>
            <param name="min">The minimum value.</param>
            <param name="max">The maximum value.</param>
            <param name="result">When the method completes, contains the clamped value.</param>
        </member>
        <member name="M:Spike.Mathematics.Vector3.Clamp(Spike.Mathematics.Vector3,Spike.Mathematics.Vector3,Spike.Mathematics.Vector3)">
            <summary>
            Restricts a value to be within a specified range.
            </summary>
            <param name="value">The value to clamp.</param>
            <param name="min">The minimum value.</param>
            <param name="max">The maximum value.</param>
            <returns>The clamped value.</returns>
        </member>
        <member name="M:Spike.Mathematics.Vector3.Cross(Spike.Mathematics.Vector3@,Spike.Mathematics.Vector3@,Spike.Mathematics.Vector3@)">
            <summary>
            Calculates the cross product of two vectors.
            </summary>
            <param name="left">First source vector.</param>
            <param name="right">Second source vector.</param>
            <param name="result">When the method completes, contains he cross product of the two vectors.</param>
        </member>
        <member name="M:Spike.Mathematics.Vector3.Cross(Spike.Mathematics.Vector3,Spike.Mathematics.Vector3)">
            <summary>
            Calculates the cross product of two vectors.
            </summary>
            <param name="left">First source vector.</param>
            <param name="right">Second source vector.</param>
            <returns>The cross product of the two vectors.</returns>
        </member>
        <member name="M:Spike.Mathematics.Vector3.Distance(Spike.Mathematics.Vector3@,Spike.Mathematics.Vector3@,System.Single@)">
            <summary>
            Calculates the distance between two vectors.
            </summary>
            <param name="value1">The first vector.</param>
            <param name="value2">The second vector.</param>
            <param name="result">When the method completes, contains the distance between the two vectors.</param>
            <remarks>
            <see cref="M:Spike.Mathematics.Vector3.DistanceSquared(Spike.Mathematics.Vector3@,Spike.Mathematics.Vector3@,System.Single@)"/> may be preferred when only the relative distance is needed
            and speed is of the essence.
            </remarks>
        </member>
        <member name="M:Spike.Mathematics.Vector3.Distance(Spike.Mathematics.Vector3,Spike.Mathematics.Vector3)">
            <summary>
            Calculates the distance between two vectors.
            </summary>
            <param name="value1">The first vector.</param>
            <param name="value2">The second vector.</param>
            <returns>The distance between the two vectors.</returns>
            <remarks>
            <see cref="M:Spike.Mathematics.Vector3.DistanceSquared(Spike.Mathematics.Vector3,Spike.Mathematics.Vector3)"/> may be preferred when only the relative distance is needed
            and speed is of the essence.
            </remarks>
        </member>
        <member name="M:Spike.Mathematics.Vector3.DistanceSquared(Spike.Mathematics.Vector3@,Spike.Mathematics.Vector3@,System.Single@)">
            <summary>
            Calculates the squared distance between two vectors.
            </summary>
            <param name="value1">The first vector.</param>
            <param name="value2">The second vector.</param>
            <param name="result">When the method completes, contains the squared distance between the two vectors.</param>
            <remarks>Distance squared is the value before taking the square root. 
            Distance squared can often be used in place of distance if relative comparisons are being made. 
            For example, consider three points A, B, and C. To determine whether B or C is further from A, 
            compare the distance between A and B to the distance between A and C. Calculating the two distances 
            involves two square roots, which are computationally expensive. However, using distance squared 
            provides the same information and avoids calculating two square roots.
            </remarks>
        </member>
        <member name="M:Spike.Mathematics.Vector3.DistanceSquared(Spike.Mathematics.Vector3,Spike.Mathematics.Vector3)">
            <summary>
            Calculates the squared distance between two vectors.
            </summary>
            <param name="value1">The first vector.</param>
            <param name="value2">The second vector.</param>
            <returns>The squared distance between the two vectors.</returns>
            <remarks>Distance squared is the value before taking the square root. 
            Distance squared can often be used in place of distance if relative comparisons are being made. 
            For example, consider three points A, B, and C. To determine whether B or C is further from A, 
            compare the distance between A and B to the distance between A and C. Calculating the two distances 
            involves two square roots, which are computationally expensive. However, using distance squared 
            provides the same information and avoids calculating two square roots.
            </remarks>
        </member>
        <member name="M:Spike.Mathematics.Vector3.Dot(Spike.Mathematics.Vector3@,Spike.Mathematics.Vector3@,System.Single@)">
            <summary>
            Calculates the dot product of two vectors.
            </summary>
            <param name="left">First source vector.</param>
            <param name="right">Second source vector.</param>
            <param name="result">When the method completes, contains the dot product of the two vectors.</param>
        </member>
        <member name="M:Spike.Mathematics.Vector3.Dot(Spike.Mathematics.Vector3,Spike.Mathematics.Vector3)">
            <summary>
            Calculates the dot product of two vectors.
            </summary>
            <param name="left">First source vector.</param>
            <param name="right">Second source vector.</param>
            <returns>The dot product of the two vectors.</returns>
        </member>
        <member name="M:Spike.Mathematics.Vector3.Normalize(Spike.Mathematics.Vector3@,Spike.Mathematics.Vector3@)">
            <summary>
            Converts the vector into a unit vector.
            </summary>
            <param name="value">The vector to normalize.</param>
            <param name="result">When the method completes, contains the normalized vector.</param>
        </member>
        <member name="M:Spike.Mathematics.Vector3.Normalize(Spike.Mathematics.Vector3)">
            <summary>
            Converts the vector into a unit vector.
            </summary>
            <param name="value">The vector to normalize.</param>
            <returns>The normalized vector.</returns>
        </member>
        <member name="M:Spike.Mathematics.Vector3.Lerp(Spike.Mathematics.Vector3@,Spike.Mathematics.Vector3@,System.Single,Spike.Mathematics.Vector3@)">
            <summary>
            Performs a linear interpolation between two vectors.
            </summary>
            <param name="start">Start vector.</param>
            <param name="end">End vector.</param>
            <param name="amount">Value between 0 and 1 indicating the weight of <paramref name="end"/>.</param>
            <param name="result">When the method completes, contains the linear interpolation of the two vectors.</param>
            <remarks>
            This method performs the linear interpolation based on the following formula.
            <code>start + (end - start) * amount</code>
            Passing <paramref name="amount"/> a value of 0 will cause <paramref name="start"/> to be returned; a value of 1 will cause <paramref name="end"/> to be returned. 
            </remarks>
        </member>
        <member name="M:Spike.Mathematics.Vector3.Lerp(Spike.Mathematics.Vector3,Spike.Mathematics.Vector3,System.Single)">
            <summary>
            Performs a linear interpolation between two vectors.
            </summary>
            <param name="start">Start vector.</param>
            <param name="end">End vector.</param>
            <param name="amount">Value between 0 and 1 indicating the weight of <paramref name="end"/>.</param>
            <returns>The linear interpolation of the two vectors.</returns>
            <remarks>
            This method performs the linear interpolation based on the following formula.
            <code>start + (end - start) * amount</code>
            Passing <paramref name="amount"/> a value of 0 will cause <paramref name="start"/> to be returned; a value of 1 will cause <paramref name="end"/> to be returned. 
            </remarks>
        </member>
        <member name="M:Spike.Mathematics.Vector3.SmoothStep(Spike.Mathematics.Vector3@,Spike.Mathematics.Vector3@,System.Single,Spike.Mathematics.Vector3@)">
            <summary>
            Performs a cubic interpolation between two vectors.
            </summary>
            <param name="start">Start vector.</param>
            <param name="end">End vector.</param>
            <param name="amount">Value between 0 and 1 indicating the weight of <paramref name="end"/>.</param>
            <param name="result">When the method completes, contains the cubic interpolation of the two vectors.</param>
        </member>
        <member name="M:Spike.Mathematics.Vector3.SmoothStep(Spike.Mathematics.Vector3,Spike.Mathematics.Vector3,System.Single)">
            <summary>
            Performs a cubic interpolation between two vectors.
            </summary>
            <param name="start">Start vector.</param>
            <param name="end">End vector.</param>
            <param name="amount">Value between 0 and 1 indicating the weight of <paramref name="end"/>.</param>
            <returns>The cubic interpolation of the two vectors.</returns>
        </member>
        <member name="M:Spike.Mathematics.Vector3.Hermite(Spike.Mathematics.Vector3@,Spike.Mathematics.Vector3@,Spike.Mathematics.Vector3@,Spike.Mathematics.Vector3@,System.Single,Spike.Mathematics.Vector3@)">
            <summary>
            Performs a Hermite spline interpolation.
            </summary>
            <param name="value1">First source position vector.</param>
            <param name="tangent1">First source tangent vector.</param>
            <param name="value2">Second source position vector.</param>
            <param name="tangent2">Second source tangent vector.</param>
            <param name="amount">Weighting factor.</param>
            <param name="result">When the method completes, contains the result of the Hermite spline interpolation.</param>
        </member>
        <member name="M:Spike.Mathematics.Vector3.Hermite(Spike.Mathematics.Vector3,Spike.Mathematics.Vector3,Spike.Mathematics.Vector3,Spike.Mathematics.Vector3,System.Single)">
            <summary>
            Performs a Hermite spline interpolation.
            </summary>
            <param name="value1">First source position vector.</param>
            <param name="tangent1">First source tangent vector.</param>
            <param name="value2">Second source position vector.</param>
            <param name="tangent2">Second source tangent vector.</param>
            <param name="amount">Weighting factor.</param>
            <returns>The result of the Hermite spline interpolation.</returns>
        </member>
        <member name="M:Spike.Mathematics.Vector3.CatmullRom(Spike.Mathematics.Vector3@,Spike.Mathematics.Vector3@,Spike.Mathematics.Vector3@,Spike.Mathematics.Vector3@,System.Single,Spike.Mathematics.Vector3@)">
            <summary>
            Performs a Catmull-Rom interpolation using the specified positions.
            </summary>
            <param name="value1">The first position in the interpolation.</param>
            <param name="value2">The second position in the interpolation.</param>
            <param name="value3">The third position in the interpolation.</param>
            <param name="value4">The fourth position in the interpolation.</param>
            <param name="amount">Weighting factor.</param>
            <param name="result">When the method completes, contains the result of the Catmull-Rom interpolation.</param>
        </member>
        <member name="M:Spike.Mathematics.Vector3.CatmullRom(Spike.Mathematics.Vector3,Spike.Mathematics.Vector3,Spike.Mathematics.Vector3,Spike.Mathematics.Vector3,System.Single)">
            <summary>
            Performs a Catmull-Rom interpolation using the specified positions.
            </summary>
            <param name="value1">The first position in the interpolation.</param>
            <param name="value2">The second position in the interpolation.</param>
            <param name="value3">The third position in the interpolation.</param>
            <param name="value4">The fourth position in the interpolation.</param>
            <param name="amount">Weighting factor.</param>
            <returns>A vector that is the result of the Catmull-Rom interpolation.</returns>
        </member>
        <member name="M:Spike.Mathematics.Vector3.Max(Spike.Mathematics.Vector3@,Spike.Mathematics.Vector3@,Spike.Mathematics.Vector3@)">
            <summary>
            Returns a vector containing the smallest components of the specified vectors.
            </summary>
            <param name="left">The first source vector.</param>
            <param name="right">The second source vector.</param>
            <param name="result">When the method completes, contains an new vector composed of the largest components of the source vectors.</param>
        </member>
        <member name="M:Spike.Mathematics.Vector3.Max(Spike.Mathematics.Vector3,Spike.Mathematics.Vector3)">
            <summary>
            Returns a vector containing the largest components of the specified vectors.
            </summary>
            <param name="left">The first source vector.</param>
            <param name="right">The second source vector.</param>
            <returns>A vector containing the largest components of the source vectors.</returns>
        </member>
        <member name="M:Spike.Mathematics.Vector3.Min(Spike.Mathematics.Vector3@,Spike.Mathematics.Vector3@,Spike.Mathematics.Vector3@)">
            <summary>
            Returns a vector containing the smallest components of the specified vectors.
            </summary>
            <param name="left">The first source vector.</param>
            <param name="right">The second source vector.</param>
            <param name="result">When the method completes, contains an new vector composed of the smallest components of the source vectors.</param>
        </member>
        <member name="M:Spike.Mathematics.Vector3.Min(Spike.Mathematics.Vector3,Spike.Mathematics.Vector3)">
            <summary>
            Returns a vector containing the smallest components of the specified vectors.
            </summary>
            <param name="left">The first source vector.</param>
            <param name="right">The second source vector.</param>
            <returns>A vector containing the smallest components of the source vectors.</returns>
        </member>
        <member name="M:Spike.Mathematics.Vector3.Project(Spike.Mathematics.Vector3@,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,Spike.Mathematics.Matrix@,Spike.Mathematics.Vector3@)">
            <summary>
            Projects a 3D vector from object space into screen space. 
            </summary>
            <param name="vector">The vector to project.</param>
            <param name="x">The X position of the viewport.</param>
            <param name="y">The Y position of the viewport.</param>
            <param name="width">The width of the viewport.</param>
            <param name="height">The height of the viewport.</param>
            <param name="minZ">The minimum depth of the viewport.</param>
            <param name="maxZ">The maximum depth of the viewport.</param>
            <param name="worldViewProjection">The combined world-view-projection matrix.</param>
            <param name="result">When the method completes, contains the vector in screen space.</param>
        </member>
        <member name="M:Spike.Mathematics.Vector3.Project(Spike.Mathematics.Vector3,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,Spike.Mathematics.Matrix)">
            <summary>
            Projects a 3D vector from object space into screen space. 
            </summary>
            <param name="vector">The vector to project.</param>
            <param name="x">The X position of the viewport.</param>
            <param name="y">The Y position of the viewport.</param>
            <param name="width">The width of the viewport.</param>
            <param name="height">The height of the viewport.</param>
            <param name="minZ">The minimum depth of the viewport.</param>
            <param name="maxZ">The maximum depth of the viewport.</param>
            <param name="worldViewProjection">The combined world-view-projection matrix.</param>
            <returns>The vector in screen space.</returns>
        </member>
        <member name="M:Spike.Mathematics.Vector3.Unproject(Spike.Mathematics.Vector3@,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,Spike.Mathematics.Matrix@,Spike.Mathematics.Vector3@)">
            <summary>
            Projects a 3D vector from screen space into object space. 
            </summary>
            <param name="vector">The vector to project.</param>
            <param name="x">The X position of the viewport.</param>
            <param name="y">The Y position of the viewport.</param>
            <param name="width">The width of the viewport.</param>
            <param name="height">The height of the viewport.</param>
            <param name="minZ">The minimum depth of the viewport.</param>
            <param name="maxZ">The maximum depth of the viewport.</param>
            <param name="worldViewProjection">The combined world-view-projection matrix.</param>
            <param name="result">When the method completes, contains the vector in object space.</param>
        </member>
        <member name="M:Spike.Mathematics.Vector3.Unproject(Spike.Mathematics.Vector3,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,Spike.Mathematics.Matrix)">
            <summary>
            Projects a 3D vector from screen space into object space. 
            </summary>
            <param name="vector">The vector to project.</param>
            <param name="x">The X position of the viewport.</param>
            <param name="y">The Y position of the viewport.</param>
            <param name="width">The width of the viewport.</param>
            <param name="height">The height of the viewport.</param>
            <param name="minZ">The minimum depth of the viewport.</param>
            <param name="maxZ">The maximum depth of the viewport.</param>
            <param name="worldViewProjection">The combined world-view-projection matrix.</param>
            <returns>The vector in object space.</returns>
        </member>
        <member name="M:Spike.Mathematics.Vector3.Reflect(Spike.Mathematics.Vector3@,Spike.Mathematics.Vector3@,Spike.Mathematics.Vector3@)">
            <summary>
            Returns the reflection of a vector off a surface that has the specified normal. 
            </summary>
            <param name="vector">The source vector.</param>
            <param name="normal">Normal of the surface.</param>
            <param name="result">When the method completes, contains the reflected vector.</param>
            <remarks>Reflect only gives the direction of a reflection off a surface, it does not determine 
            whether the original vector was close enough to the surface to hit it.</remarks>
        </member>
        <member name="M:Spike.Mathematics.Vector3.Reflect(Spike.Mathematics.Vector3,Spike.Mathematics.Vector3)">
            <summary>
            Returns the reflection of a vector off a surface that has the specified normal. 
            </summary>
            <param name="vector">The source vector.</param>
            <param name="normal">Normal of the surface.</param>
            <returns>The reflected vector.</returns>
            <remarks>Reflect only gives the direction of a reflection off a surface, it does not determine 
            whether the original vector was close enough to the surface to hit it.</remarks>
        </member>
        <member name="M:Spike.Mathematics.Vector3.Orthogonalize(Spike.Mathematics.Vector3[],Spike.Mathematics.Vector3[])">
            <summary>
            Orthogonalizes a list of vectors.
            </summary>
            <param name="destination">The list of orthogonalized vectors.</param>
            <param name="source">The list of vectors to orthogonalize.</param>
            <remarks>
            <para>Orthogonalization is the process of making all vectors orthogonal to each other. This
            means that any given vector in the list will be orthogonal to any other given vector in the
            list.</para>
            <para>Because this method uses the modified Gram-Schmidt process, the resulting vectors
            tend to be numerically unstable. The numeric stability decreases according to the vectors
            position in the list so that the first vector is the most stable and the last vector is the
            least stable.</para>
            </remarks>
            <exception cref="T:System.ArgumentNullException">Thrown when <paramref name="source"/> or <paramref name="destination"/> is <c>null</c>.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown when <paramref name="destination"/> is shorter in length than <paramref name="source"/>.</exception>
        </member>
        <member name="M:Spike.Mathematics.Vector3.Orthonormalize(Spike.Mathematics.Vector3[],Spike.Mathematics.Vector3[])">
            <summary>
            Orthonormalizes a list of vectors.
            </summary>
            <param name="destination">The list of orthonormalized vectors.</param>
            <param name="source">The list of vectors to orthonormalize.</param>
            <remarks>
            <para>Orthonormalization is the process of making all vectors orthogonal to each
            other and making all vectors of unit length. This means that any given vector will
            be orthogonal to any other given vector in the list.</para>
            <para>Because this method uses the modified Gram-Schmidt process, the resulting vectors
            tend to be numerically unstable. The numeric stability decreases according to the vectors
            position in the list so that the first vector is the most stable and the last vector is the
            least stable.</para>
            </remarks>
            <exception cref="T:System.ArgumentNullException">Thrown when <paramref name="source"/> or <paramref name="destination"/> is <c>null</c>.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown when <paramref name="destination"/> is shorter in length than <paramref name="source"/>.</exception>
        </member>
        <member name="M:Spike.Mathematics.Vector3.Transform(Spike.Mathematics.Vector3@,Spike.Mathematics.Quaternion@,Spike.Mathematics.Vector3@)">
            <summary>
            Transforms a 3D vector by the given <see cref="T:Spike.Mathematics.Quaternion"/> rotation.
            </summary>
            <param name="vector">The vector to rotate.</param>
            <param name="rotation">The <see cref="T:Spike.Mathematics.Quaternion"/> rotation to apply.</param>
            <param name="result">When the method completes, contains the transformed <see cref="T:Spike.Mathematics.Vector4"/>.</param>
        </member>
        <member name="M:Spike.Mathematics.Vector3.Transform(Spike.Mathematics.Vector3,Spike.Mathematics.Quaternion)">
            <summary>
            Transforms a 3D vector by the given <see cref="T:Spike.Mathematics.Quaternion"/> rotation.
            </summary>
            <param name="vector">The vector to rotate.</param>
            <param name="rotation">The <see cref="T:Spike.Mathematics.Quaternion"/> rotation to apply.</param>
            <returns>The transformed <see cref="T:Spike.Mathematics.Vector4"/>.</returns>
        </member>
        <member name="M:Spike.Mathematics.Vector3.Transform(Spike.Mathematics.Vector3[],Spike.Mathematics.Quaternion@,Spike.Mathematics.Vector3[])">
            <summary>
            Transforms an array of vectors by the given <see cref="T:Spike.Mathematics.Quaternion"/> rotation.
            </summary>
            <param name="source">The array of vectors to transform.</param>
            <param name="rotation">The <see cref="T:Spike.Mathematics.Quaternion"/> rotation to apply.</param>
            <param name="destination">The array for which the transformed vectors are stored.
            This array may be the same array as <paramref name="source"/>.</param>
            <exception cref="T:System.ArgumentNullException">Thrown when <paramref name="source"/> or <paramref name="destination"/> is <c>null</c>.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown when <paramref name="destination"/> is shorter in length than <paramref name="source"/>.</exception>
        </member>
        <member name="M:Spike.Mathematics.Vector3.Transform(Spike.Mathematics.Vector3@,Spike.Mathematics.Matrix@,Spike.Mathematics.Vector4@)">
            <summary>
            Transforms a 3D vector by the given <see cref="T:Spike.Mathematics.Matrix"/>.
            </summary>
            <param name="vector">The source vector.</param>
            <param name="transform">The transformation <see cref="T:Spike.Mathematics.Matrix"/>.</param>
            <param name="result">When the method completes, contains the transformed <see cref="T:Spike.Mathematics.Vector4"/>.</param>
        </member>
        <member name="M:Spike.Mathematics.Vector3.Transform(Spike.Mathematics.Vector3,Spike.Mathematics.Matrix)">
            <summary>
            Transforms a 3D vector by the given <see cref="T:Spike.Mathematics.Matrix"/>.
            </summary>
            <param name="vector">The source vector.</param>
            <param name="transform">The transformation <see cref="T:Spike.Mathematics.Matrix"/>.</param>
            <returns>The transformed <see cref="T:Spike.Mathematics.Vector4"/>.</returns>
        </member>
        <member name="M:Spike.Mathematics.Vector3.Transform(Spike.Mathematics.Vector3[],Spike.Mathematics.Matrix@,Spike.Mathematics.Vector4[])">
            <summary>
            Transforms an array of 3D vectors by the given <see cref="T:Spike.Mathematics.Matrix"/>.
            </summary>
            <param name="source">The array of vectors to transform.</param>
            <param name="transform">The transformation <see cref="T:Spike.Mathematics.Matrix"/>.</param>
            <param name="destination">The array for which the transformed vectors are stored.</param>
            <exception cref="T:System.ArgumentNullException">Thrown when <paramref name="source"/> or <paramref name="destination"/> is <c>null</c>.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown when <paramref name="destination"/> is shorter in length than <paramref name="source"/>.</exception>
        </member>
        <member name="M:Spike.Mathematics.Vector3.TransformCoordinate(Spike.Mathematics.Vector3@,Spike.Mathematics.Matrix@,Spike.Mathematics.Vector3@)">
            <summary>
            Performs a coordinate transformation using the given <see cref="T:Spike.Mathematics.Matrix"/>.
            </summary>
            <param name="coordinate">The coordinate vector to transform.</param>
            <param name="transform">The transformation <see cref="T:Spike.Mathematics.Matrix"/>.</param>
            <param name="result">When the method completes, contains the transformed coordinates.</param>
            <remarks>
            A coordinate transform performs the transformation with the assumption that the w component
            is one. The four dimensional vector obtained from the transformation operation has each
            component in the vector divided by the w component. This forces the wcomponent to be one and
            therefore makes the vector homogeneous. The homogeneous vector is often prefered when working
            with coordinates as the w component can safely be ignored.
            </remarks>
        </member>
        <member name="M:Spike.Mathematics.Vector3.TransformCoordinate(Spike.Mathematics.Vector3,Spike.Mathematics.Matrix)">
            <summary>
            Performs a coordinate transformation using the given <see cref="T:Spike.Mathematics.Matrix"/>.
            </summary>
            <param name="coordinate">The coordinate vector to transform.</param>
            <param name="transform">The transformation <see cref="T:Spike.Mathematics.Matrix"/>.</param>
            <returns>The transformed coordinates.</returns>
            <remarks>
            A coordinate transform performs the transformation with the assumption that the w component
            is one. The four dimensional vector obtained from the transformation operation has each
            component in the vector divided by the w component. This forces the wcomponent to be one and
            therefore makes the vector homogeneous. The homogeneous vector is often prefered when working
            with coordinates as the w component can safely be ignored.
            </remarks>
        </member>
        <member name="M:Spike.Mathematics.Vector3.TransformCoordinate(Spike.Mathematics.Vector3[],Spike.Mathematics.Matrix@,Spike.Mathematics.Vector3[])">
            <summary>
            Performs a coordinate transformation on an array of vectors using the given <see cref="T:Spike.Mathematics.Matrix"/>.
            </summary>
            <param name="source">The array of coordinate vectors to trasnform.</param>
            <param name="transform">The transformation <see cref="T:Spike.Mathematics.Matrix"/>.</param>
            <param name="destination">The array for which the transformed vectors are stored.
            This array may be the same array as <paramref name="source"/>.</param>
            <exception cref="T:System.ArgumentNullException">Thrown when <paramref name="source"/> or <paramref name="destination"/> is <c>null</c>.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown when <paramref name="destination"/> is shorter in length than <paramref name="source"/>.</exception>
            <remarks>
            A coordinate transform performs the transformation with the assumption that the w component
            is one. The four dimensional vector obtained from the transformation operation has each
            component in the vector divided by the w component. This forces the wcomponent to be one and
            therefore makes the vector homogeneous. The homogeneous vector is often prefered when working
            with coordinates as the w component can safely be ignored.
            </remarks>
        </member>
        <member name="M:Spike.Mathematics.Vector3.TransformNormal(Spike.Mathematics.Vector3@,Spike.Mathematics.Matrix@,Spike.Mathematics.Vector3@)">
            <summary>
            Performs a normal transformation using the given <see cref="T:Spike.Mathematics.Matrix"/>.
            </summary>
            <param name="normal">The normal vector to transform.</param>
            <param name="transform">The transformation <see cref="T:Spike.Mathematics.Matrix"/>.</param>
            <param name="result">When the method completes, contains the transformed normal.</param>
            <remarks>
            A normal transform performs the transformation with the assumption that the w component
            is zero. This causes the fourth row and fourth collumn of the matrix to be unused. The
            end result is a vector that is not translated, but all other transformation properties
            apply. This is often prefered for normal vectors as normals purely represent direction
            rather than location because normal vectors should not be translated.
            </remarks>
        </member>
        <member name="M:Spike.Mathematics.Vector3.TransformNormal(Spike.Mathematics.Vector3,Spike.Mathematics.Matrix)">
            <summary>
            Performs a normal transformation using the given <see cref="T:Spike.Mathematics.Matrix"/>.
            </summary>
            <param name="normal">The normal vector to transform.</param>
            <param name="transform">The transformation <see cref="T:Spike.Mathematics.Matrix"/>.</param>
            <returns>The transformed normal.</returns>
            <remarks>
            A normal transform performs the transformation with the assumption that the w component
            is zero. This causes the fourth row and fourth collumn of the matrix to be unused. The
            end result is a vector that is not translated, but all other transformation properties
            apply. This is often prefered for normal vectors as normals purely represent direction
            rather than location because normal vectors should not be translated.
            </remarks>
        </member>
        <member name="M:Spike.Mathematics.Vector3.TransformNormal(Spike.Mathematics.Vector3[],Spike.Mathematics.Matrix@,Spike.Mathematics.Vector3[])">
            <summary>
            Performs a normal transformation on an array of vectors using the given <see cref="T:Spike.Mathematics.Matrix"/>.
            </summary>
            <param name="source">The array of normal vectors to transform.</param>
            <param name="transform">The transformation <see cref="T:Spike.Mathematics.Matrix"/>.</param>
            <param name="destination">The array for which the transformed vectors are stored.
            This array may be the same array as <paramref name="source"/>.</param>
            <exception cref="T:System.ArgumentNullException">Thrown when <paramref name="source"/> or <paramref name="destination"/> is <c>null</c>.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown when <paramref name="destination"/> is shorter in length than <paramref name="source"/>.</exception>
            <remarks>
            A normal transform performs the transformation with the assumption that the w component
            is zero. This causes the fourth row and fourth collumn of the matrix to be unused. The
            end result is a vector that is not translated, but all other transformation properties
            apply. This is often prefered for normal vectors as normals purely represent direction
            rather than location because normal vectors should not be translated.
            </remarks>
        </member>
        <member name="M:Spike.Mathematics.Vector3.op_Addition(Spike.Mathematics.Vector3,Spike.Mathematics.Vector3)">
            <summary>
            Adds two vectors.
            </summary>
            <param name="left">The first vector to add.</param>
            <param name="right">The second vector to add.</param>
            <returns>The sum of the two vectors.</returns>
        </member>
        <member name="M:Spike.Mathematics.Vector3.op_UnaryPlus(Spike.Mathematics.Vector3)">
            <summary>
            Assert a vector (return it unchanged).
            </summary>
            <param name="value">The vector to assert (unchange).</param>
            <returns>The asserted (unchanged) vector.</returns>
        </member>
        <member name="M:Spike.Mathematics.Vector3.op_Subtraction(Spike.Mathematics.Vector3,Spike.Mathematics.Vector3)">
            <summary>
            Subtracts two vectors.
            </summary>
            <param name="left">The first vector to subtract.</param>
            <param name="right">The second vector to subtract.</param>
            <returns>The difference of the two vectors.</returns>
        </member>
        <member name="M:Spike.Mathematics.Vector3.op_UnaryNegation(Spike.Mathematics.Vector3)">
            <summary>
            Reverses the direction of a given vector.
            </summary>
            <param name="value">The vector to negate.</param>
            <returns>A vector facing in the opposite direction.</returns>
        </member>
        <member name="M:Spike.Mathematics.Vector3.op_Multiply(System.Single,Spike.Mathematics.Vector3)">
            <summary>
            Scales a vector by the given value.
            </summary>
            <param name="value">The vector to scale.</param>
            <param name="scale">The amount by which to scale the vector.</param>
            <returns>The scaled vector.</returns>
        </member>
        <member name="M:Spike.Mathematics.Vector3.op_Multiply(Spike.Mathematics.Vector3,System.Single)">
            <summary>
            Scales a vector by the given value.
            </summary>
            <param name="value">The vector to scale.</param>
            <param name="scale">The amount by which to scale the vector.</param>
            <returns>The scaled vector.</returns>
        </member>
        <member name="M:Spike.Mathematics.Vector3.op_Division(Spike.Mathematics.Vector3,System.Single)">
            <summary>
            Scales a vector by the given value.
            </summary>
            <param name="value">The vector to scale.</param>
            <param name="scale">The amount by which to scale the vector.</param>
            <returns>The scaled vector.</returns>
        </member>
        <member name="M:Spike.Mathematics.Vector3.op_Equality(Spike.Mathematics.Vector3,Spike.Mathematics.Vector3)">
            <summary>
            Tests for equality between two objects.
            </summary>
            <param name="left">The first value to compare.</param>
            <param name="right">The second value to compare.</param>
            <returns><c>true</c> if <paramref name="left"/> has the same value as <paramref name="right"/>; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:Spike.Mathematics.Vector3.op_Inequality(Spike.Mathematics.Vector3,Spike.Mathematics.Vector3)">
            <summary>
            Tests for inequality between two objects.
            </summary>
            <param name="left">The first value to compare.</param>
            <param name="right">The second value to compare.</param>
            <returns><c>true</c> if <paramref name="left"/> has a different value than <paramref name="right"/>; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:Spike.Mathematics.Vector3.op_Explicit(Spike.Mathematics.Vector3)~Spike.Mathematics.Vector2">
            <summary>
            Performs an explicit conversion from <see cref="T:Spike.Mathematics.Vector3"/> to <see cref="T:Spike.Mathematics.Vector2"/>.
            </summary>
            <param name="value">The value.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="M:Spike.Mathematics.Vector3.op_Explicit(Spike.Mathematics.Vector3)~Spike.Mathematics.Vector4">
            <summary>
            Performs an explicit conversion from <see cref="T:Spike.Mathematics.Vector3"/> to <see cref="T:Spike.Mathematics.Vector4"/>.
            </summary>
            <param name="value">The value.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="M:Spike.Mathematics.Vector3.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <returns>
            A <see cref="T:System.String"/> that represents this instance.
            </returns>
        </member>
        <member name="M:Spike.Mathematics.Vector3.ToString(System.String)">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <param name="format">The format.</param>
            <returns>
            A <see cref="T:System.String"/> that represents this instance.
            </returns>
        </member>
        <member name="M:Spike.Mathematics.Vector3.ToString(System.IFormatProvider)">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <param name="formatProvider">The format provider.</param>
            <returns>
            A <see cref="T:System.String"/> that represents this instance.
            </returns>
        </member>
        <member name="M:Spike.Mathematics.Vector3.ToString(System.String,System.IFormatProvider)">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <param name="format">The format.</param>
            <param name="formatProvider">The format provider.</param>
            <returns>
            A <see cref="T:System.String"/> that represents this instance.
            </returns>
        </member>
        <member name="M:Spike.Mathematics.Vector3.GetHashCode">
            <summary>
            Returns a hash code for this instance.
            </summary>
            <returns>
            A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table. 
            </returns>
        </member>
        <member name="M:Spike.Mathematics.Vector3.Equals(Spike.Mathematics.Vector3)">
            <summary>
            Determines whether the specified <see cref="T:Spike.Mathematics.Vector3"/> is equal to this instance.
            </summary>
            <param name="other">The <see cref="T:Spike.Mathematics.Vector3"/> to compare with this instance.</param>
            <returns>
            	<c>true</c> if the specified <see cref="T:Spike.Mathematics.Vector3"/> is equal to this instance; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Spike.Mathematics.Vector3.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object"/> is equal to this instance.
            </summary>
            <param name="value">The <see cref="T:System.Object"/> to compare with this instance.</param>
            <returns>
            	<c>true</c> if the specified <see cref="T:System.Object"/> is equal to this instance; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="P:Spike.Mathematics.Vector3.IsNormalized">
            <summary>
            Gets a value indicting whether this instance is normalized.
            </summary>
        </member>
        <member name="P:Spike.Mathematics.Vector3.Item(System.Int32)">
            <summary>
            Gets or sets the component at the specified index.
            </summary>
            <value>The value of the X, Y, or Z component, depending on the index.</value>
            <param name="index">The index of the component to access. Use 0 for the X component, 1 for the Y component, and 2 for the Z component.</param>
            <returns>The value of the component at the specified index.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown when the <paramref name="index"/> is out of the range [0, 2].</exception>
        </member>
        <member name="T:Spike.Mathematics.Vector4">
            <summary>
            Represents a four dimensional mathematical vector.
            </summary>
        </member>
        <member name="F:Spike.Mathematics.Vector4.SizeInBytes">
            <summary>
            The size of the <see cref="T:Spike.Mathematics.Vector4"/> type, in bytes.
            </summary>
        </member>
        <member name="F:Spike.Mathematics.Vector4.Zero">
            <summary>
            A <see cref="T:Spike.Mathematics.Vector4"/> with all of its components set to zero.
            </summary>
        </member>
        <member name="F:Spike.Mathematics.Vector4.UnitX">
            <summary>
            The X unit <see cref="T:Spike.Mathematics.Vector4"/> (1, 0, 0, 0).
            </summary>
        </member>
        <member name="F:Spike.Mathematics.Vector4.UnitY">
            <summary>
            The Y unit <see cref="T:Spike.Mathematics.Vector4"/> (0, 1, 0, 0).
            </summary>
        </member>
        <member name="F:Spike.Mathematics.Vector4.UnitZ">
            <summary>
            The Z unit <see cref="T:Spike.Mathematics.Vector4"/> (0, 0, 1, 0).
            </summary>
        </member>
        <member name="F:Spike.Mathematics.Vector4.UnitW">
            <summary>
            The W unit <see cref="T:Spike.Mathematics.Vector4"/> (0, 0, 0, 1).
            </summary>
        </member>
        <member name="F:Spike.Mathematics.Vector4.One">
            <summary>
            A <see cref="T:Spike.Mathematics.Vector4"/> with all of its components set to one.
            </summary>
        </member>
        <member name="F:Spike.Mathematics.Vector4.X">
            <summary>
            The X component of the vector.
            </summary>
        </member>
        <member name="F:Spike.Mathematics.Vector4.Y">
            <summary>
            The Y component of the vector.
            </summary>
        </member>
        <member name="F:Spike.Mathematics.Vector4.Z">
            <summary>
            The Z component of the vector.
            </summary>
        </member>
        <member name="F:Spike.Mathematics.Vector4.W">
            <summary>
            The W component of the vector.
            </summary>
        </member>
        <member name="M:Spike.Mathematics.Vector4.#ctor(System.Single)">
            <summary>
            Initializes a new instance of the <see cref="T:Spike.Mathematics.Vector4"/> struct.
            </summary>
            <param name="value">The value that will be assigned to all components.</param>
        </member>
        <member name="M:Spike.Mathematics.Vector4.#ctor(System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Initializes a new instance of the <see cref="T:Spike.Mathematics.Vector4"/> struct.
            </summary>
            <param name="x">Initial value for the X component of the vector.</param>
            <param name="y">Initial value for the Y component of the vector.</param>
            <param name="z">Initial value for the Z component of the vector.</param>
            <param name="w">Initial value for the W component of the vector.</param>
        </member>
        <member name="M:Spike.Mathematics.Vector4.#ctor(Spike.Mathematics.Vector3,System.Single)">
            <summary>
            Initializes a new instance of the <see cref="T:Spike.Mathematics.Vector4"/> struct.
            </summary>
            <param name="value">A vector containing the values with which to initialize the X, Y, and Z components.</param>
            <param name="w">Initial value for the W component of the vector.</param>
        </member>
        <member name="M:Spike.Mathematics.Vector4.#ctor(Spike.Mathematics.Vector2,System.Single,System.Single)">
            <summary>
            Initializes a new instance of the <see cref="T:Spike.Mathematics.Vector4"/> struct.
            </summary>
            <param name="value">A vector containing the values with which to initialize the X and Y components.</param>
            <param name="z">Initial value for the Z component of the vector.</param>
            <param name="w">Initial value for the W component of the vector.</param>
        </member>
        <member name="M:Spike.Mathematics.Vector4.#ctor(System.Single[])">
            <summary>
            Initializes a new instance of the <see cref="T:Spike.Mathematics.Vector4"/> struct.
            </summary>
            <param name="values">The values to assign to the X, Y, Z, and W components of the vector. This must be an array with four elements.</param>
            <exception cref="T:System.ArgumentNullException">Thrown when <paramref name="values"/> is <c>null</c>.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown when <paramref name="values"/> contains more or less than four elements.</exception>
        </member>
        <member name="M:Spike.Mathematics.Vector4.Length">
            <summary>
            Calculates the length of the vector.
            </summary>
            <returns>The length of the vector.</returns>
            <remarks>
            <see cref="M:Spike.Mathematics.Vector4.LengthSquared"/> may be preferred when only the relative length is needed
            and speed is of the essence.
            </remarks>
        </member>
        <member name="M:Spike.Mathematics.Vector4.LengthSquared">
            <summary>
            Calculates the squared length of the vector.
            </summary>
            <returns>The squared length of the vector.</returns>
            <remarks>
            This method may be preferred to <see cref="M:Spike.Mathematics.Vector4.Length"/> when only a relative length is needed
            and speed is of the essence.
            </remarks>
        </member>
        <member name="M:Spike.Mathematics.Vector4.Normalize">
            <summary>
            Converts the vector into a unit vector.
            </summary>
        </member>
        <member name="M:Spike.Mathematics.Vector4.ToArray">
            <summary>
            Creates an array containing the elements of the vector.
            </summary>
            <returns>A four-element array containing the components of the vector.</returns>
        </member>
        <member name="M:Spike.Mathematics.Vector4.Add(Spike.Mathematics.Vector4@,Spike.Mathematics.Vector4@,Spike.Mathematics.Vector4@)">
            <summary>
            Adds two vectors.
            </summary>
            <param name="left">The first vector to add.</param>
            <param name="right">The second vector to add.</param>
            <param name="result">When the method completes, contains the sum of the two vectors.</param>
        </member>
        <member name="M:Spike.Mathematics.Vector4.Add(Spike.Mathematics.Vector4,Spike.Mathematics.Vector4)">
            <summary>
            Adds two vectors.
            </summary>
            <param name="left">The first vector to add.</param>
            <param name="right">The second vector to add.</param>
            <returns>The sum of the two vectors.</returns>
        </member>
        <member name="M:Spike.Mathematics.Vector4.Subtract(Spike.Mathematics.Vector4@,Spike.Mathematics.Vector4@,Spike.Mathematics.Vector4@)">
            <summary>
            Subtracts two vectors.
            </summary>
            <param name="left">The first vector to subtract.</param>
            <param name="right">The second vector to subtract.</param>
            <param name="result">When the method completes, contains the difference of the two vectors.</param>
        </member>
        <member name="M:Spike.Mathematics.Vector4.Subtract(Spike.Mathematics.Vector4,Spike.Mathematics.Vector4)">
            <summary>
            Subtracts two vectors.
            </summary>
            <param name="left">The first vector to subtract.</param>
            <param name="right">The second vector to subtract.</param>
            <returns>The difference of the two vectors.</returns>
        </member>
        <member name="M:Spike.Mathematics.Vector4.Multiply(Spike.Mathematics.Vector4@,System.Single,Spike.Mathematics.Vector4@)">
            <summary>
            Scales a vector by the given value.
            </summary>
            <param name="value">The vector to scale.</param>
            <param name="scale">The amount by which to scale the vector.</param>
            <param name="result">When the method completes, contains the scaled vector.</param>
        </member>
        <member name="M:Spike.Mathematics.Vector4.Multiply(Spike.Mathematics.Vector4,System.Single)">
            <summary>
            Scales a vector by the given value.
            </summary>
            <param name="value">The vector to scale.</param>
            <param name="scale">The amount by which to scale the vector.</param>
            <returns>The scaled vector.</returns>
        </member>
        <member name="M:Spike.Mathematics.Vector4.Modulate(Spike.Mathematics.Vector4@,Spike.Mathematics.Vector4@,Spike.Mathematics.Vector4@)">
            <summary>
            Modulates a vector with another by performing component-wise multiplication.
            </summary>
            <param name="left">The first vector to modulate.</param>
            <param name="right">The second vector to modulate.</param>
            <param name="result">When the method completes, contains the modulated vector.</param>
        </member>
        <member name="M:Spike.Mathematics.Vector4.Modulate(Spike.Mathematics.Vector4,Spike.Mathematics.Vector4)">
            <summary>
            Modulates a vector with another by performing component-wise multiplication.
            </summary>
            <param name="left">The first vector to modulate.</param>
            <param name="right">The second vector to modulate.</param>
            <returns>The modulated vector.</returns>
        </member>
        <member name="M:Spike.Mathematics.Vector4.Divide(Spike.Mathematics.Vector4@,System.Single,Spike.Mathematics.Vector4@)">
            <summary>
            Scales a vector by the given value.
            </summary>
            <param name="value">The vector to scale.</param>
            <param name="scale">The amount by which to scale the vector.</param>
            <param name="result">When the method completes, contains the scaled vector.</param>
        </member>
        <member name="M:Spike.Mathematics.Vector4.Divide(Spike.Mathematics.Vector4,System.Single)">
            <summary>
            Scales a vector by the given value.
            </summary>
            <param name="value">The vector to scale.</param>
            <param name="scale">The amount by which to scale the vector.</param>
            <returns>The scaled vector.</returns>
        </member>
        <member name="M:Spike.Mathematics.Vector4.Negate(Spike.Mathematics.Vector4@,Spike.Mathematics.Vector4@)">
            <summary>
            Reverses the direction of a given vector.
            </summary>
            <param name="value">The vector to negate.</param>
            <param name="result">When the method completes, contains a vector facing in the opposite direction.</param>
        </member>
        <member name="M:Spike.Mathematics.Vector4.Negate(Spike.Mathematics.Vector4)">
            <summary>
            Reverses the direction of a given vector.
            </summary>
            <param name="value">The vector to negate.</param>
            <returns>A vector facing in the opposite direction.</returns>
        </member>
        <member name="M:Spike.Mathematics.Vector4.Barycentric(Spike.Mathematics.Vector4@,Spike.Mathematics.Vector4@,Spike.Mathematics.Vector4@,System.Single,System.Single,Spike.Mathematics.Vector4@)">
            <summary>
            Returns a <see cref="T:Spike.Mathematics.Vector4"/> containing the 4D Cartesian coordinates of a point specified in Barycentric coordinates relative to a 4D triangle.
            </summary>
            <param name="value1">A <see cref="T:Spike.Mathematics.Vector4"/> containing the 4D Cartesian coordinates of vertex 1 of the triangle.</param>
            <param name="value2">A <see cref="T:Spike.Mathematics.Vector4"/> containing the 4D Cartesian coordinates of vertex 2 of the triangle.</param>
            <param name="value3">A <see cref="T:Spike.Mathematics.Vector4"/> containing the 4D Cartesian coordinates of vertex 3 of the triangle.</param>
            <param name="amount1">Barycentric coordinate b2, which expresses the weighting factor toward vertex 2 (specified in <paramref name="value2"/>).</param>
            <param name="amount2">Barycentric coordinate b3, which expresses the weighting factor toward vertex 3 (specified in <paramref name="value3"/>).</param>
            <param name="result">When the method completes, contains the 4D Cartesian coordinates of the specified point.</param>
        </member>
        <member name="M:Spike.Mathematics.Vector4.Barycentric(Spike.Mathematics.Vector4,Spike.Mathematics.Vector4,Spike.Mathematics.Vector4,System.Single,System.Single)">
            <summary>
            Returns a <see cref="T:Spike.Mathematics.Vector4"/> containing the 4D Cartesian coordinates of a point specified in Barycentric coordinates relative to a 4D triangle.
            </summary>
            <param name="value1">A <see cref="T:Spike.Mathematics.Vector4"/> containing the 4D Cartesian coordinates of vertex 1 of the triangle.</param>
            <param name="value2">A <see cref="T:Spike.Mathematics.Vector4"/> containing the 4D Cartesian coordinates of vertex 2 of the triangle.</param>
            <param name="value3">A <see cref="T:Spike.Mathematics.Vector4"/> containing the 4D Cartesian coordinates of vertex 3 of the triangle.</param>
            <param name="amount1">Barycentric coordinate b2, which expresses the weighting factor toward vertex 2 (specified in <paramref name="value2"/>).</param>
            <param name="amount2">Barycentric coordinate b3, which expresses the weighting factor toward vertex 3 (specified in <paramref name="value3"/>).</param>
            <returns>A new <see cref="T:Spike.Mathematics.Vector4"/> containing the 4D Cartesian coordinates of the specified point.</returns>
        </member>
        <member name="M:Spike.Mathematics.Vector4.Clamp(Spike.Mathematics.Vector4@,Spike.Mathematics.Vector4@,Spike.Mathematics.Vector4@,Spike.Mathematics.Vector4@)">
            <summary>
            Restricts a value to be within a specified range.
            </summary>
            <param name="value">The value to clamp.</param>
            <param name="min">The minimum value.</param>
            <param name="max">The maximum value.</param>
            <param name="result">When the method completes, contains the clamped value.</param>
        </member>
        <member name="M:Spike.Mathematics.Vector4.Clamp(Spike.Mathematics.Vector4,Spike.Mathematics.Vector4,Spike.Mathematics.Vector4)">
            <summary>
            Restricts a value to be within a specified range.
            </summary>
            <param name="value">The value to clamp.</param>
            <param name="min">The minimum value.</param>
            <param name="max">The maximum value.</param>
            <returns>The clamped value.</returns>
        </member>
        <member name="M:Spike.Mathematics.Vector4.Distance(Spike.Mathematics.Vector4@,Spike.Mathematics.Vector4@,System.Single@)">
            <summary>
            Calculates the distance between two vectors.
            </summary>
            <param name="value1">The first vector.</param>
            <param name="value2">The second vector.</param>
            <param name="result">When the method completes, contains the distance between the two vectors.</param>
            <remarks>
            <see cref="M:Spike.Mathematics.Vector4.DistanceSquared(Spike.Mathematics.Vector4@,Spike.Mathematics.Vector4@,System.Single@)"/> may be preferred when only the relative distance is needed
            and speed is of the essence.
            </remarks>
        </member>
        <member name="M:Spike.Mathematics.Vector4.Distance(Spike.Mathematics.Vector4,Spike.Mathematics.Vector4)">
            <summary>
            Calculates the distance between two vectors.
            </summary>
            <param name="value1">The first vector.</param>
            <param name="value2">The second vector.</param>
            <returns>The distance between the two vectors.</returns>
            <remarks>
            <see cref="M:Spike.Mathematics.Vector4.DistanceSquared(Spike.Mathematics.Vector4,Spike.Mathematics.Vector4)"/> may be preferred when only the relative distance is needed
            and speed is of the essence.
            </remarks>
        </member>
        <member name="M:Spike.Mathematics.Vector4.DistanceSquared(Spike.Mathematics.Vector4@,Spike.Mathematics.Vector4@,System.Single@)">
            <summary>
            Calculates the squared distance between two vectors.
            </summary>
            <param name="value1">The first vector.</param>
            <param name="value2">The second vector.</param>
            <param name="result">When the method completes, contains the squared distance between the two vectors.</param>
            <remarks>Distance squared is the value before taking the square root. 
            Distance squared can often be used in place of distance if relative comparisons are being made. 
            For example, consider three points A, B, and C. To determine whether B or C is further from A, 
            compare the distance between A and B to the distance between A and C. Calculating the two distances 
            involves two square roots, which are computationally expensive. However, using distance squared 
            provides the same information and avoids calculating two square roots.
            </remarks>
        </member>
        <member name="M:Spike.Mathematics.Vector4.DistanceSquared(Spike.Mathematics.Vector4,Spike.Mathematics.Vector4)">
            <summary>
            Calculates the squared distance between two vectors.
            </summary>
            <param name="value1">The first vector.</param>
            <param name="value2">The second vector.</param>
            <returns>The squared distance between the two vectors.</returns>
            <remarks>Distance squared is the value before taking the square root. 
            Distance squared can often be used in place of distance if relative comparisons are being made. 
            For example, consider three points A, B, and C. To determine whether B or C is further from A, 
            compare the distance between A and B to the distance between A and C. Calculating the two distances 
            involves two square roots, which are computationally expensive. However, using distance squared 
            provides the same information and avoids calculating two square roots.
            </remarks>
        </member>
        <member name="M:Spike.Mathematics.Vector4.Dot(Spike.Mathematics.Vector4@,Spike.Mathematics.Vector4@,System.Single@)">
            <summary>
            Calculates the dot product of two vectors.
            </summary>
            <param name="left">First source vector</param>
            <param name="right">Second source vector.</param>
            <param name="result">When the method completes, contains the dot product of the two vectors.</param>
        </member>
        <member name="M:Spike.Mathematics.Vector4.Dot(Spike.Mathematics.Vector4,Spike.Mathematics.Vector4)">
            <summary>
            Calculates the dot product of two vectors.
            </summary>
            <param name="left">First source vector.</param>
            <param name="right">Second source vector.</param>
            <returns>The dot product of the two vectors.</returns>
        </member>
        <member name="M:Spike.Mathematics.Vector4.Normalize(Spike.Mathematics.Vector4@,Spike.Mathematics.Vector4@)">
            <summary>
            Converts the vector into a unit vector.
            </summary>
            <param name="value">The vector to normalize.</param>
            <param name="result">When the method completes, contains the normalized vector.</param>
        </member>
        <member name="M:Spike.Mathematics.Vector4.Normalize(Spike.Mathematics.Vector4)">
            <summary>
            Converts the vector into a unit vector.
            </summary>
            <param name="value">The vector to normalize.</param>
            <returns>The normalized vector.</returns>
        </member>
        <member name="M:Spike.Mathematics.Vector4.Lerp(Spike.Mathematics.Vector4@,Spike.Mathematics.Vector4@,System.Single,Spike.Mathematics.Vector4@)">
            <summary>
            Performs a linear interpolation between two vectors.
            </summary>
            <param name="start">Start vector.</param>
            <param name="end">End vector.</param>
            <param name="amount">Value between 0 and 1 indicating the weight of <paramref name="end"/>.</param>
            <param name="result">When the method completes, contains the linear interpolation of the two vectors.</param>
            <remarks>
            This method performs the linear interpolation based on the following formula.
            <code>start + (end - start) * amount</code>
            Passing <paramref name="amount"/> a value of 0 will cause <paramref name="start"/> to be returned; a value of 1 will cause <paramref name="end"/> to be returned. 
            </remarks>
        </member>
        <member name="M:Spike.Mathematics.Vector4.Lerp(Spike.Mathematics.Vector4,Spike.Mathematics.Vector4,System.Single)">
            <summary>
            Performs a linear interpolation between two vectors.
            </summary>
            <param name="start">Start vector.</param>
            <param name="end">End vector.</param>
            <param name="amount">Value between 0 and 1 indicating the weight of <paramref name="end"/>.</param>
            <returns>The linear interpolation of the two vectors.</returns>
            <remarks>
            This method performs the linear interpolation based on the following formula.
            <code>start + (end - start) * amount</code>
            Passing <paramref name="amount"/> a value of 0 will cause <paramref name="start"/> to be returned; a value of 1 will cause <paramref name="end"/> to be returned. 
            </remarks>
        </member>
        <member name="M:Spike.Mathematics.Vector4.SmoothStep(Spike.Mathematics.Vector4@,Spike.Mathematics.Vector4@,System.Single,Spike.Mathematics.Vector4@)">
            <summary>
            Performs a cubic interpolation between two vectors.
            </summary>
            <param name="start">Start vector.</param>
            <param name="end">End vector.</param>
            <param name="amount">Value between 0 and 1 indicating the weight of <paramref name="end"/>.</param>
            <param name="result">When the method completes, contains the cubic interpolation of the two vectors.</param>
        </member>
        <member name="M:Spike.Mathematics.Vector4.SmoothStep(Spike.Mathematics.Vector4,Spike.Mathematics.Vector4,System.Single)">
            <summary>
            Performs a cubic interpolation between two vectors.
            </summary>
            <param name="start">Start vector.</param>
            <param name="end">End vector.</param>
            <param name="amount">Value between 0 and 1 indicating the weight of <paramref name="end"/>.</param>
            <returns>The cubic interpolation of the two vectors.</returns>
        </member>
        <member name="M:Spike.Mathematics.Vector4.Hermite(Spike.Mathematics.Vector4@,Spike.Mathematics.Vector4@,Spike.Mathematics.Vector4@,Spike.Mathematics.Vector4@,System.Single,Spike.Mathematics.Vector4@)">
            <summary>
            Performs a Hermite spline interpolation.
            </summary>
            <param name="value1">First source position vector.</param>
            <param name="tangent1">First source tangent vector.</param>
            <param name="value2">Second source position vector.</param>
            <param name="tangent2">Second source tangent vector.</param>
            <param name="amount">Weighting factor.</param>
            <param name="result">When the method completes, contains the result of the Hermite spline interpolation.</param>
        </member>
        <member name="M:Spike.Mathematics.Vector4.Hermite(Spike.Mathematics.Vector4,Spike.Mathematics.Vector4,Spike.Mathematics.Vector4,Spike.Mathematics.Vector4,System.Single)">
            <summary>
            Performs a Hermite spline interpolation.
            </summary>
            <param name="value1">First source position vector.</param>
            <param name="tangent1">First source tangent vector.</param>
            <param name="value2">Second source position vector.</param>
            <param name="tangent2">Second source tangent vector.</param>
            <param name="amount">Weighting factor.</param>
            <returns>The result of the Hermite spline interpolation.</returns>
        </member>
        <member name="M:Spike.Mathematics.Vector4.CatmullRom(Spike.Mathematics.Vector4@,Spike.Mathematics.Vector4@,Spike.Mathematics.Vector4@,Spike.Mathematics.Vector4@,System.Single,Spike.Mathematics.Vector4@)">
            <summary>
            Performs a Catmull-Rom interpolation using the specified positions.
            </summary>
            <param name="value1">The first position in the interpolation.</param>
            <param name="value2">The second position in the interpolation.</param>
            <param name="value3">The third position in the interpolation.</param>
            <param name="value4">The fourth position in the interpolation.</param>
            <param name="amount">Weighting factor.</param>
            <param name="result">When the method completes, contains the result of the Catmull-Rom interpolation.</param>
        </member>
        <member name="M:Spike.Mathematics.Vector4.CatmullRom(Spike.Mathematics.Vector4,Spike.Mathematics.Vector4,Spike.Mathematics.Vector4,Spike.Mathematics.Vector4,System.Single)">
            <summary>
            Performs a Catmull-Rom interpolation using the specified positions.
            </summary>
            <param name="value1">The first position in the interpolation.</param>
            <param name="value2">The second position in the interpolation.</param>
            <param name="value3">The third position in the interpolation.</param>
            <param name="value4">The fourth position in the interpolation.</param>
            <param name="amount">Weighting factor.</param>
            <returns>A vector that is the result of the Catmull-Rom interpolation.</returns>
        </member>
        <member name="M:Spike.Mathematics.Vector4.Max(Spike.Mathematics.Vector4@,Spike.Mathematics.Vector4@,Spike.Mathematics.Vector4@)">
            <summary>
            Returns a vector containing the smallest components of the specified vectors.
            </summary>
            <param name="left">The first source vector.</param>
            <param name="right">The second source vector.</param>
            <param name="result">When the method completes, contains an new vector composed of the largest components of the source vectors.</param>
        </member>
        <member name="M:Spike.Mathematics.Vector4.Max(Spike.Mathematics.Vector4,Spike.Mathematics.Vector4)">
            <summary>
            Returns a vector containing the largest components of the specified vectors.
            </summary>
            <param name="left">The first source vector.</param>
            <param name="right">The second source vector.</param>
            <returns>A vector containing the largest components of the source vectors.</returns>
        </member>
        <member name="M:Spike.Mathematics.Vector4.Min(Spike.Mathematics.Vector4@,Spike.Mathematics.Vector4@,Spike.Mathematics.Vector4@)">
            <summary>
            Returns a vector containing the smallest components of the specified vectors.
            </summary>
            <param name="left">The first source vector.</param>
            <param name="right">The second source vector.</param>
            <param name="result">When the method completes, contains an new vector composed of the smallest components of the source vectors.</param>
        </member>
        <member name="M:Spike.Mathematics.Vector4.Min(Spike.Mathematics.Vector4,Spike.Mathematics.Vector4)">
            <summary>
            Returns a vector containing the smallest components of the specified vectors.
            </summary>
            <param name="left">The first source vector.</param>
            <param name="right">The second source vector.</param>
            <returns>A vector containing the smallest components of the source vectors.</returns>
        </member>
        <member name="M:Spike.Mathematics.Vector4.Orthogonalize(Spike.Mathematics.Vector4[],Spike.Mathematics.Vector4[])">
            <summary>
            Orthogonalizes a list of vectors.
            </summary>
            <param name="destination">The list of orthogonalized vectors.</param>
            <param name="source">The list of vectors to orthogonalize.</param>
            <remarks>
            <para>Orthogonalization is the process of making all vectors orthogonal to each other. This
            means that any given vector in the list will be orthogonal to any other given vector in the
            list.</para>
            <para>Because this method uses the modified Gram-Schmidt process, the resulting vectors
            tend to be numerically unstable. The numeric stability decreases according to the vectors
            position in the list so that the first vector is the most stable and the last vector is the
            least stable.</para>
            </remarks>
            <exception cref="T:System.ArgumentNullException">Thrown when <paramref name="source"/> or <paramref name="destination"/> is <c>null</c>.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown when <paramref name="destination"/> is shorter in length than <paramref name="source"/>.</exception>
        </member>
        <member name="M:Spike.Mathematics.Vector4.Orthonormalize(Spike.Mathematics.Vector4[],Spike.Mathematics.Vector4[])">
            <summary>
            Orthonormalizes a list of vectors.
            </summary>
            <param name="destination">The list of orthonormalized vectors.</param>
            <param name="source">The list of vectors to orthonormalize.</param>
            <remarks>
            <para>Orthonormalization is the process of making all vectors orthogonal to each
            other and making all vectors of unit length. This means that any given vector will
            be orthogonal to any other given vector in the list.</para>
            <para>Because this method uses the modified Gram-Schmidt process, the resulting vectors
            tend to be numerically unstable. The numeric stability decreases according to the vectors
            position in the list so that the first vector is the most stable and the last vector is the
            least stable.</para>
            </remarks>
            <exception cref="T:System.ArgumentNullException">Thrown when <paramref name="source"/> or <paramref name="destination"/> is <c>null</c>.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown when <paramref name="destination"/> is shorter in length than <paramref name="source"/>.</exception>
        </member>
        <member name="M:Spike.Mathematics.Vector4.Transform(Spike.Mathematics.Vector4@,Spike.Mathematics.Quaternion@,Spike.Mathematics.Vector4@)">
            <summary>
            Transforms a 4D vector by the given <see cref="T:Spike.Mathematics.Quaternion"/> rotation.
            </summary>
            <param name="vector">The vector to rotate.</param>
            <param name="rotation">The <see cref="T:Spike.Mathematics.Quaternion"/> rotation to apply.</param>
            <param name="result">When the method completes, contains the transformed <see cref="T:Spike.Mathematics.Vector4"/>.</param>
        </member>
        <member name="M:Spike.Mathematics.Vector4.Transform(Spike.Mathematics.Vector4,Spike.Mathematics.Quaternion)">
            <summary>
            Transforms a 4D vector by the given <see cref="T:Spike.Mathematics.Quaternion"/> rotation.
            </summary>
            <param name="vector">The vector to rotate.</param>
            <param name="rotation">The <see cref="T:Spike.Mathematics.Quaternion"/> rotation to apply.</param>
            <returns>The transformed <see cref="T:Spike.Mathematics.Vector4"/>.</returns>
        </member>
        <member name="M:Spike.Mathematics.Vector4.Transform(Spike.Mathematics.Vector4[],Spike.Mathematics.Quaternion@,Spike.Mathematics.Vector4[])">
            <summary>
            Transforms an array of vectors by the given <see cref="T:Spike.Mathematics.Quaternion"/> rotation.
            </summary>
            <param name="source">The array of vectors to transform.</param>
            <param name="rotation">The <see cref="T:Spike.Mathematics.Quaternion"/> rotation to apply.</param>
            <param name="destination">The array for which the transformed vectors are stored.
            This array may be the same array as <paramref name="source"/>.</param>
            <exception cref="T:System.ArgumentNullException">Thrown when <paramref name="source"/> or <paramref name="destination"/> is <c>null</c>.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown when <paramref name="destination"/> is shorter in length than <paramref name="source"/>.</exception>
        </member>
        <member name="M:Spike.Mathematics.Vector4.Transform(Spike.Mathematics.Vector4@,Spike.Mathematics.Matrix@,Spike.Mathematics.Vector4@)">
            <summary>
            Transforms a 4D vector by the given <see cref="T:Spike.Mathematics.Matrix"/>.
            </summary>
            <param name="vector">The source vector.</param>
            <param name="transform">The transformation <see cref="T:Spike.Mathematics.Matrix"/>.</param>
            <param name="result">When the method completes, contains the transformed <see cref="T:Spike.Mathematics.Vector4"/>.</param>
        </member>
        <member name="M:Spike.Mathematics.Vector4.Transform(Spike.Mathematics.Vector4,Spike.Mathematics.Matrix)">
            <summary>
            Transforms a 4D vector by the given <see cref="T:Spike.Mathematics.Matrix"/>.
            </summary>
            <param name="vector">The source vector.</param>
            <param name="transform">The transformation <see cref="T:Spike.Mathematics.Matrix"/>.</param>
            <returns>The transformed <see cref="T:Spike.Mathematics.Vector4"/>.</returns>
        </member>
        <member name="M:Spike.Mathematics.Vector4.Transform(Spike.Mathematics.Vector4[],Spike.Mathematics.Matrix@,Spike.Mathematics.Vector4[])">
            <summary>
            Transforms an array of 4D vectors by the given <see cref="T:Spike.Mathematics.Matrix"/>.
            </summary>
            <param name="source">The array of vectors to transform.</param>
            <param name="transform">The transformation <see cref="T:Spike.Mathematics.Matrix"/>.</param>
            <param name="destination">The array for which the transformed vectors are stored.
            This array may be the same array as <paramref name="source"/>.</param>
            <exception cref="T:System.ArgumentNullException">Thrown when <paramref name="source"/> or <paramref name="destination"/> is <c>null</c>.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown when <paramref name="destination"/> is shorter in length than <paramref name="source"/>.</exception>
        </member>
        <member name="M:Spike.Mathematics.Vector4.op_Addition(Spike.Mathematics.Vector4,Spike.Mathematics.Vector4)">
            <summary>
            Adds two vectors.
            </summary>
            <param name="left">The first vector to add.</param>
            <param name="right">The second vector to add.</param>
            <returns>The sum of the two vectors.</returns>
        </member>
        <member name="M:Spike.Mathematics.Vector4.op_UnaryPlus(Spike.Mathematics.Vector4)">
            <summary>
            Assert a vector (return it unchanged).
            </summary>
            <param name="value">The vector to assert (unchange).</param>
            <returns>The asserted (unchanged) vector.</returns>
        </member>
        <member name="M:Spike.Mathematics.Vector4.op_Subtraction(Spike.Mathematics.Vector4,Spike.Mathematics.Vector4)">
            <summary>
            Subtracts two vectors.
            </summary>
            <param name="left">The first vector to subtract.</param>
            <param name="right">The second vector to subtract.</param>
            <returns>The difference of the two vectors.</returns>
        </member>
        <member name="M:Spike.Mathematics.Vector4.op_UnaryNegation(Spike.Mathematics.Vector4)">
            <summary>
            Reverses the direction of a given vector.
            </summary>
            <param name="value">The vector to negate.</param>
            <returns>A vector facing in the opposite direction.</returns>
        </member>
        <member name="M:Spike.Mathematics.Vector4.op_Multiply(System.Single,Spike.Mathematics.Vector4)">
            <summary>
            Scales a vector by the given value.
            </summary>
            <param name="value">The vector to scale.</param>
            <param name="scale">The amount by which to scale the vector.</param>
            <returns>The scaled vector.</returns>
        </member>
        <member name="M:Spike.Mathematics.Vector4.op_Multiply(Spike.Mathematics.Vector4,System.Single)">
            <summary>
            Scales a vector by the given value.
            </summary>
            <param name="value">The vector to scale.</param>
            <param name="scale">The amount by which to scale the vector.</param>
            <returns>The scaled vector.</returns>
        </member>
        <member name="M:Spike.Mathematics.Vector4.op_Division(Spike.Mathematics.Vector4,System.Single)">
            <summary>
            Scales a vector by the given value.
            </summary>
            <param name="value">The vector to scale.</param>
            <param name="scale">The amount by which to scale the vector.</param>
            <returns>The scaled vector.</returns>
        </member>
        <member name="M:Spike.Mathematics.Vector4.op_Equality(Spike.Mathematics.Vector4,Spike.Mathematics.Vector4)">
            <summary>
            Tests for equality between two objects.
            </summary>
            <param name="left">The first value to compare.</param>
            <param name="right">The second value to compare.</param>
            <returns><c>true</c> if <paramref name="left"/> has the same value as <paramref name="right"/>; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:Spike.Mathematics.Vector4.op_Inequality(Spike.Mathematics.Vector4,Spike.Mathematics.Vector4)">
            <summary>
            Tests for inequality between two objects.
            </summary>
            <param name="left">The first value to compare.</param>
            <param name="right">The second value to compare.</param>
            <returns><c>true</c> if <paramref name="left"/> has a different value than <paramref name="right"/>; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:Spike.Mathematics.Vector4.op_Explicit(Spike.Mathematics.Vector4)~Spike.Mathematics.Vector2">
            <summary>
            Performs an explicit conversion from <see cref="T:Spike.Mathematics.Vector4"/> to <see cref="T:Spike.Mathematics.Vector2"/>.
            </summary>
            <param name="value">The value.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="M:Spike.Mathematics.Vector4.op_Explicit(Spike.Mathematics.Vector4)~Spike.Mathematics.Vector3">
            <summary>
            Performs an explicit conversion from <see cref="T:Spike.Mathematics.Vector4"/> to <see cref="T:Spike.Mathematics.Vector3"/>.
            </summary>
            <param name="value">The value.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="M:Spike.Mathematics.Vector4.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <returns>
            A <see cref="T:System.String"/> that represents this instance.
            </returns>
        </member>
        <member name="M:Spike.Mathematics.Vector4.ToString(System.String)">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <param name="format">The format.</param>
            <returns>
            A <see cref="T:System.String"/> that represents this instance.
            </returns>
        </member>
        <member name="M:Spike.Mathematics.Vector4.ToString(System.IFormatProvider)">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <param name="formatProvider">The format provider.</param>
            <returns>
            A <see cref="T:System.String"/> that represents this instance.
            </returns>
        </member>
        <member name="M:Spike.Mathematics.Vector4.ToString(System.String,System.IFormatProvider)">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <param name="format">The format.</param>
            <param name="formatProvider">The format provider.</param>
            <returns>
            A <see cref="T:System.String"/> that represents this instance.
            </returns>
        </member>
        <member name="M:Spike.Mathematics.Vector4.GetHashCode">
            <summary>
            Returns a hash code for this instance.
            </summary>
            <returns>
            A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table. 
            </returns>
        </member>
        <member name="M:Spike.Mathematics.Vector4.Equals(Spike.Mathematics.Vector4)">
            <summary>
            Determines whether the specified <see cref="T:Spike.Mathematics.Vector4"/> is equal to this instance.
            </summary>
            <param name="other">The <see cref="T:Spike.Mathematics.Vector4"/> to compare with this instance.</param>
            <returns>
            <c>true</c> if the specified <see cref="T:Spike.Mathematics.Vector4"/> is equal to this instance; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Spike.Mathematics.Vector4.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object"/> is equal to this instance.
            </summary>
            <param name="value">The <see cref="T:System.Object"/> to compare with this instance.</param>
            <returns>
            <c>true</c> if the specified <see cref="T:System.Object"/> is equal to this instance; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="P:Spike.Mathematics.Vector4.IsNormalized">
            <summary>
            Gets a value indicting whether this instance is normalized.
            </summary>
        </member>
        <member name="P:Spike.Mathematics.Vector4.Item(System.Int32)">
            <summary>
            Gets or sets the component at the specified index.
            </summary>
            <value>The value of the X, Y, Z, or W component, depending on the index.</value>
            <param name="index">The index of the component to access. Use 0 for the X component, 1 for the Y component, 2 for the Z component, and 3 for the W component.</param>
            <returns>The value of the component at the specified index.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown when the <paramref name="index"/> is out of the range [0, 3].</exception>
        </member>
        <member name="T:Spike.Network.XdprPacket">
            <summary>
            Represents a cross-domain policy packet that can be used to respond to a cross-domain policy request issued by the Flash player. 
            </summary>
        </member>
        <member name="M:Spike.Network.XdprPacket.Configure">
            <summary>
            Performs the xml caching.
            </summary>
        </member>
        <member name="M:Spike.Network.XdprPacket.Acquire">
            <summary>
            Acquires cross-domain policy packet that can be used to respond to a cross-domain policy request issued by the Flash player. 
            </summary>
            <returns> A <see cref="T:Spike.Network.XdprPacket"/> that can be sent to the Flash player.</returns>
        </member>
        <member name="T:Spike.Network.PacketIndex">
            <summary>
            Provides operation metadata
            </summary>
        </member>
        <member name="M:Spike.Network.PacketIndex.GetMetadata(System.String)">
            <summary>
            Gets the available metadata for the requested operation.
            </summary>
            <param name="operationKey">The operation identifier to get information of</param>
            <returns>Returns the OperationInfo object or null if not found</returns>
        </member>
        <member name="M:Spike.Network.PacketIndex.GetMetadata(Spike.Network.PacketKey)">
            <summary>
            Gets the available metadata for the requested operation.
            </summary>
            <param name="operationKey">The operation identifier to get information of</param>
            <returns>Returns the OperationInfo object or null if not found</returns>
        </member>
        <member name="M:Spike.Network.PacketIndex.RegisterMetadata(Spike.Network.OperationInfo)">
            <summary>
            Registers the metadata required for handling a particular operation.
            </summary>
            <param name="metadata"></param>
        </member>
        <member name="M:Spike.Security.SecurityHandlers.Initialize">
            <summary>
            Wires-up the events when the server starts
            </summary>
        </member>
        <member name="M:Spike.Security.SecurityHandlers.OnPing(Spike.IClient)">
            <summary>
            Perofms a ping on the server.
            </summary>
            <param name="client">The client that have performed the request.</param>
        </member>
        <member name="M:Spike.Security.SecurityHandlers.OnGetServerTime(Spike.IClient)">
            <summary>
            Gets current universal time on the server.
            </summary>
            <param name="client">The client that have performed the request.</param>
        </member>
        <member name="M:Spike.Security.SecurityHandlers.OnSupplyCredentials(Spike.IClient,Spike.Network.SupplyCredentialsRequest)">
            <summary>
            Supplies the requesting channel with the specified client credentials.
            </summary>
            <param name="client">The client that have performed the request.</param>
            <param name="packet">The credentials supply request.</param>
        </member>
        <member name="M:Spike.Security.SecurityHandlers.OnRevokeCredentials(Spike.IClient,Spike.Network.RevokeCredentialsRequest)">
            <summary>
            Revokes the credentials from the requesting channel.
            </summary>
            <param name="client">The client that have performed the request</param>
            <param name="packet">The credentials revoke request.</param>
        </member>
        <member name="T:Spike.Collections.BufferPool">
            <summary>
            Class that represents a pool of byte[] available on request.
            </summary>
        </member>
        <member name="M:Spike.Collections.BufferPool.#ctor(System.Int32,System.Int32)">
            <summary>
            Constructs a <see cref="T:Spike.Collections.BufferPool"/> object with the specified initial capacity and buffer sizes.
            </summary>
            <param name="initialCapacity">The initial capacity of the pool.</param>
            <param name="bufferSize">The sizes of the buffers to allocate initially.</param>
        </member>
        <member name="M:Spike.Collections.BufferPool.Acquire(System.Byte[]@)">
            <summary>
            Acquires an instance of byte[] and returns the reference to the instance
            as well as the handle in the Pool
            </summary>
            <param name="item">Reference to the recently acquired instance of byte[]</param>
            <returns>The handle in the Pool (index in the internal array)</returns>
        </member>
        <member name="M:Spike.Collections.BufferPool.Acquire(System.Byte[]@,System.Int32)">
            <summary>
            Acquires an instance of byte[] and returns the reference to the instance
            as well as the handle in the Pool.
            </summary>
            <param name="buffer">Reference to the recently acquired instance of byte[].</param>
            <param name="minimumLength">Minimum lenght of the buffer to acquire.</param>
            <returns>The handle in the Pool (index in the internal array)</returns>
        </member>
        <member name="M:Spike.Collections.BufferPool.Release(System.Int32)">
            <summary>
            Releases the instance of T specified by the handle
            </summary>
            <param name="handle"></param>
        </member>
        <member name="M:Spike.Collections.BufferPool.GetBuffer(System.Int32)">
            <summary>
            Gets the buffer by a buffer handle.
            </summary>
            <param name="handle">The handle of the buffer to get.</param>
            <returns>Returns the buffer if one can be used, null otherwise.</returns>
        </member>
        <member name="M:Spike.Collections.BufferPool.Clear">
            <summary>
            Clears the buffer pool without deallocating the buffers.
            </summary>
        </member>
        <member name="M:Spike.Collections.BufferPool.Dispose(System.Boolean)">
            <summary>
            Frees the pool, deallocates the reserved memory
            </summary>
        </member>
        <member name="M:Spike.Collections.BufferPool.Dispose">
            <summary>
            Disposes the BufferPool object.
            </summary>
        </member>
        <member name="M:Spike.Collections.BufferPool.Finalize">
            <summary>
            Finalizes the BufferPool object.
            </summary>
        </member>
        <member name="T:Spike.Network.PacketDirection">
            <summary>
            Represents a direction of the packet.
            </summary>
        </member>
        <member name="F:Spike.Network.PacketDirection.Incoming">
            <summary>
            Incoming direction, the client is sending the packet to the server.
            </summary>
        </member>
        <member name="F:Spike.Network.PacketDirection.Outgoing">
            <summary>
            Outgoing direction, the server is sending the packet to the client.
            </summary>
        </member>
        <member name="T:Spike.Network.IComplexType">
            <summary>
            Represents a complex type for packet serialization.
            </summary>
        </member>
        <member name="M:Spike.Network.IComplexType.Read(Spike.Network.PacketReader)">
            <summary>
            Reads the complex type from the stream.
            </summary>
            <param name="reader">The deserialization reader.</param>
        </member>
        <member name="M:Spike.Network.IComplexType.Write(Spike.Network.PacketWriter)">
            <summary>
            Writes the complex type to the stream.
            </summary>
            <param name="writer">The serialization writer.</param>
        </member>
        <member name="T:Spike.Network.RequestHandler`1">
            <summary>
            Represents a handler for an incoming request.
            </summary>
            <typeparam name="T">The type of the packet.</typeparam>
            <param name="client">The client who issued the request.</param>
            <param name="packet">The packet instance received.</param>
        </member>
        <member name="T:Spike.Network.RequestHandler">
            <summary>
            Represents a handler for an incoming request.
            </summary>
            <param name="client">The client who issued the request.</param>
        </member>
        <member name="T:Spike.Network.CreatePacketInstance">
            <summary>
            Represents a packet constructor.
            </summary>
            <returns>A constructed packet.</returns>
        </member>
        <member name="T:Spike.Network.OnPacketReceive">
            <summary>
            Represents packet reception function.
            </summary>
            <param name="client">A client which receives the packet.</param>
            <param name="packet">An instance of the packet received.</param>
        </member>
        <member name="T:Spike.Network.ThrottlePacketCallback">
            <summary>
            Represents a throttling callback.
            </summary>
            <param name="channel">A channel which throttles the packet.</param>
            <returns>Whether packet was throttled or not.</returns>
        </member>
        <member name="T:Spike.Network.PacketHandler">
            <summary>
            Represents a packet handler.
            </summary>
        </member>
        <member name="M:Spike.Network.PacketHandler.#ctor(Spike.Network.PacketKey,Spike.Network.OnPacketReceive)">
            <summary>
            Constructs a new instance of <see cref="T:Spike.Network.PacketHandler"/> class.
            </summary>
            <param name="key">The key of the packet to handle.</param>
            <param name="onReceive">The OnReceive function to execute.</param>
        </member>
        <member name="P:Spike.Network.PacketHandler.Length">
            <summary>
            Gets the length of the packet.
            </summary>
        </member>
        <member name="P:Spike.Network.PacketHandler.OperationKey">
            <summary>
            Gets the key of the packet type.
            </summary>
        </member>
        <member name="P:Spike.Network.PacketHandler.OnReceive">
            <summary>
            Gets the reception handling function.
            </summary>
        </member>
        <member name="P:Spike.Network.PacketHandler.ThrottleCallback">
            <summary>
            Gets or sets throttling callback.
            </summary>
        </member>
        <member name="T:Spike.Network.PacketHandlers">
            <summary>
            Represents a registry for packet handlers.
            </summary>
        </member>
        <member name="M:Spike.Network.PacketHandlers.Register(System.String,Spike.Network.OnPacketReceive)">
            <summary>
            Registers a packet handler for a packetID, there can be only one handler
            per packetID
            </summary>
            <param name="operationKey">The operation identifier to register the handler for</param>
            <param name="onReceive">The handler to register</param>
        </member>
        <member name="T:Spike.Network.PacketReader">
            <summary>
            Represents a packet reader used for Spike deserialization.
            </summary>
        </member>
        <member name="M:Spike.Network.PacketReader.#ctor(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Constructs a new instance of <see cref="T:Spike.Network.PacketReader"/> class.
            </summary>
            <param name="data">The data stream to read.</param>
            <param name="length">The number of bytes in the stream to read.</param>
            <param name="offset">The starting offset.</param>
        </member>
        <member name="M:Spike.Network.PacketReader.Seek(System.Int32,System.IO.SeekOrigin)">
            <summary>
            Performs a seek in the underlying stream.
            </summary>
            <param name="offset">The offset to seek.</param>
            <param name="origin">The origin type to seek.</param>
            <returns>The current position.</returns>
        </member>
        <member name="M:Spike.Network.PacketReader.ReadInt64">
            <summary>
            Performs a read from the underlying stream.
            </summary>
            <returns>Returns value read.</returns>
        </member>
        <member name="M:Spike.Network.PacketReader.ReadUInt64">
            <summary>
            Performs a read from the underlying stream.
            </summary>
            <returns>Returns value read.</returns>
        </member>
        <member name="M:Spike.Network.PacketReader.ReadInt32">
            <summary>
            Performs a read from the underlying stream.
            </summary>
            <returns>Returns value read.</returns>
        </member>
        <member name="M:Spike.Network.PacketReader.ReadInt16">
            <summary>
            Performs a read from the underlying stream.
            </summary>
            <returns>Returns value read.</returns>
        </member>
        <member name="M:Spike.Network.PacketReader.ReadByte">
            <summary>
            Performs a read from the underlying stream.
            </summary>
            <returns>Returns value read.</returns>
        </member>
        <member name="M:Spike.Network.PacketReader.ReadUInt32">
            <summary>
            Performs a read from the underlying stream.
            </summary>
            <returns>Returns value read.</returns>
        </member>
        <member name="M:Spike.Network.PacketReader.ReadUInt16">
            <summary>
            Performs a read from the underlying stream.
            </summary>
            <returns>Returns value read.</returns>
        </member>
        <member name="M:Spike.Network.PacketReader.ReadSByte">
            <summary>
            Performs a read from the underlying stream.
            </summary>
            <returns>Returns value read.</returns>
        </member>
        <member name="M:Spike.Network.PacketReader.ReadBoolean">
            <summary>
            Performs a read from the underlying stream.
            </summary>
            <returns>Returns value read.</returns>
        </member>
        <member name="M:Spike.Network.PacketReader.ReadString">
            <summary>
            Performs a read from the underlying stream.
            </summary>
            <returns>Returns value read.</returns>
        </member>
        <member name="M:Spike.Network.PacketReader.ReadDateTime">
            <summary>
            Performs a read from the underlying stream.
            </summary>
            <returns>Returns value read.</returns>
        </member>
        <member name="M:Spike.Network.PacketReader.ReadSingle">
            <summary>
            Reads an IEEE 754 single-precision (32-bit) floating-point number from the buffer
            </summary>
        </member>
        <member name="M:Spike.Network.PacketReader.ReadDouble">
            <summary>
            Reads an IEEE 754 double-precision (64-bit) floating-point number from the buffer
            </summary>
        </member>
        <member name="M:Spike.Network.PacketReader.ReadComplexType``1">
            <summary>
            Reads a list of packets
            </summary>
        </member>
        <member name="M:Spike.Network.PacketReader.ReadByteArray">
            <summary>
            Reads a byte array 
            </summary>
        </member>
        <member name="M:Spike.Network.PacketReader.ReadDynamic">
            <summary>
            Reads a dynamic value (of the supported types)
            </summary>
        </member>
        <member name="M:Spike.Network.PacketReader.ReadListOfBoolean">
            <summary>
            Reads a list 
            </summary>
        </member>
        <member name="M:Spike.Network.PacketReader.ReadListOfByte">
            <summary>
            Reads a list 
            </summary>
        </member>
        <member name="M:Spike.Network.PacketReader.ReadListOfSByte">
            <summary>
            Reads a list 
            </summary>
        </member>
        <member name="M:Spike.Network.PacketReader.ReadListOfInt16">
            <summary>
            Reads a list 
            </summary>
        </member>
        <member name="M:Spike.Network.PacketReader.ReadListOfUInt16">
            <summary>
            Reads a list 
            </summary>
        </member>
        <member name="M:Spike.Network.PacketReader.ReadListOfInt32">
            <summary>
            Reads a list 
            </summary>
        </member>
        <member name="M:Spike.Network.PacketReader.ReadListOfUInt32">
            <summary>
            Reads a list 
            </summary>
        </member>
        <member name="M:Spike.Network.PacketReader.ReadListOfInt64">
            <summary>
            Reads a list 
            </summary>
        </member>
        <member name="M:Spike.Network.PacketReader.ReadListOfUInt64">
            <summary>
            Reads a list 
            </summary>
        </member>
        <member name="M:Spike.Network.PacketReader.ReadListOfDouble">
            <summary>
            Reads a list 
            </summary>
        </member>
        <member name="M:Spike.Network.PacketReader.ReadListOfSingle">
            <summary>
            Reads a list 
            </summary>
        </member>
        <member name="M:Spike.Network.PacketReader.ReadListOfDateTime">
            <summary>
            Reads a list 
            </summary>
        </member>
        <member name="M:Spike.Network.PacketReader.ReadListOfString">
            <summary>
            Reads a list 
            </summary>
        </member>
        <member name="M:Spike.Network.PacketReader.ReadListOfComplexType``1">
            <summary>
            Reads a list of packets
            </summary>
        </member>
        <member name="M:Spike.Network.PacketReader.ReadListOfDynamic">
            <summary>
            Reads a list of dynamic members
            </summary>
        </member>
        <member name="M:Spike.Network.PacketReader.Recycle">
            <summary>
            Recycles (resets) the object to the original state.
            </summary>
        </member>
        <member name="P:Spike.Network.PacketReader.Data">
            <summary>
            Gets or sets the byte array on which this <see cref="T:Spike.Network.PacketReader"/> operates on.
            </summary>
        </member>
        <member name="P:Spike.Network.PacketReader.IndexMax">
            <summary>
            Gets or sets the lenght of the byte array chunk on which this <see cref="T:Spike.Network.PacketReader"/> operates on.
            </summary>
        </member>
        <member name="P:Spike.Network.PacketReader.Index">
            <summary>
            Gets or sets the current position in the byte array.
            </summary>
        </member>
        <member name="T:Spike.Network.PacketWriter">
            <summary>
            Provides functionality for writing primitive binary data.
            </summary>
        </member>
        <member name="F:Spike.Network.PacketWriter.fStream">
            <summary>
            Internal stream which holds the entire packet.
            </summary>
        </member>
        <member name="F:Spike.Network.PacketWriter.fBuffer">
            <summary>
            Internal format buffer.
            </summary>
        </member>
        <member name="M:Spike.Network.PacketWriter.#ctor">
            <summary>
            Instantiates a new PacketWriter instance with a given capacity.
            </summary>
        </member>
        <member name="M:Spike.Network.PacketWriter.Seek(System.Int64,System.IO.SeekOrigin)">
            <summary>
            Offsets the current position from an origin.
            </summary>
        </member>
        <member name="M:Spike.Network.PacketWriter.Write(System.Boolean)">
            <summary>
            Writes a 1-byte boolean value to the underlying stream. False is represented by 0, true by 1.
            </summary>
        </member>
        <member name="M:Spike.Network.PacketWriter.Write(System.Byte)">
            <summary>
            Writes a 1-byte unsigned integer value to the underlying stream.
            </summary>
        </member>
        <member name="M:Spike.Network.PacketWriter.Write(System.SByte)">
            <summary>
            Writes a 1-byte signed integer value to the underlying stream.
            </summary>
        </member>
        <member name="M:Spike.Network.PacketWriter.Write(System.Int16)">
            <summary>
            Writes a 2-byte signed integer value to the underlying stream.
            </summary>
        </member>
        <member name="M:Spike.Network.PacketWriter.Write(System.UInt16)">
            <summary>
            Writes a 2-byte unsigned integer value to the underlying stream.
            </summary>
        </member>
        <member name="M:Spike.Network.PacketWriter.Write(System.Int32)">
            <summary>
            Writes a 4-byte signed integer value to the underlying stream.
            </summary>
        </member>
        <member name="M:Spike.Network.PacketWriter.Write(System.UInt32)">
            <summary>
            Writes a 4-byte unsigned integer value to the underlying stream.
            </summary>
        </member>
        <member name="M:Spike.Network.PacketWriter.Write(System.Int64)">
            <summary>
            Writes a 8-byte signed integer value to the underlying stream.
            </summary>
        </member>
        <member name="M:Spike.Network.PacketWriter.Write(System.UInt64)">
            <summary>
            Writes a 8-byte signed integer value to the underlying stream.
            </summary>
        </member>
        <member name="M:Spike.Network.PacketWriter.Write(System.DateTime)">
            <summary>
            Writes a DateTime to a sequence of bytes to the underlying stream
            </summary>
        </member>
        <member name="M:Spike.Network.PacketWriter.Write(System.Double)">
            <summary>
            Writes an IEEE 754 double-precision (64-bit) floating-point number to the buffer
            </summary>
        </member>
        <member name="M:Spike.Network.PacketWriter.Write(System.Single)">
            <summary>
            Writes an IEEE 754 single-precision (32-bit) floating-point number to the buffer
            </summary>
        </member>
        <member name="M:Spike.Network.PacketWriter.Write(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Writes a sequence of bytes to the underlying stream
            </summary>
        </member>
        <member name="M:Spike.Network.PacketWriter.Write(System.String)">
            <summary>
            Writes a fixed-length big-endian unicode string value to the underlying stream. To fit (size), the string content is either truncated or padded with null characters.
            </summary>
        </member>
        <member name="M:Spike.Network.PacketWriter.Write(Spike.Network.IComplexType)">
            <summary>
            Writes a IPartialEntity in the packet
            </summary>
        </member>
        <member name="M:Spike.Network.PacketWriter.Write(System.Byte[])">
            <summary>
            Writes a byte array
            </summary>
        </member>
        <member name="M:Spike.Network.PacketWriter.WriteDynamic(System.Object)">
            <summary>
            Writes a dynamic value (of the supported types)
            </summary>
        </member>
        <member name="M:Spike.Network.PacketWriter.Write(System.Collections.Generic.IList{System.Boolean})">
            <summary>
            Writes a list 
            </summary>
            <param name="list">The list instance to write</param>
        </member>
        <member name="M:Spike.Network.PacketWriter.Write(System.Collections.Generic.IList{System.Double})">
            <summary>
            Writes a list 
            </summary>
            <param name="list">The list instance to write</param>
        </member>
        <member name="M:Spike.Network.PacketWriter.Write(System.Collections.Generic.IList{System.Single})">
            <summary>
            Writes a list 
            </summary>
            <param name="list">The list instance to write</param>
        </member>
        <member name="M:Spike.Network.PacketWriter.Write(System.Collections.Generic.IList{System.Byte})">
            <summary>
            Writes a list 
            </summary>
            <param name="list">The list instance to write</param>
        </member>
        <member name="M:Spike.Network.PacketWriter.Write(System.Collections.Generic.IList{System.SByte})">
            <summary>
            Writes a list 
            </summary>
            <param name="list">The list instance to write</param>
        </member>
        <member name="M:Spike.Network.PacketWriter.Write(System.Collections.Generic.IList{System.Int16})">
            <summary>
            Writes a list 
            </summary>
            <param name="list">The list instance to write</param>
        </member>
        <member name="M:Spike.Network.PacketWriter.Write(System.Collections.Generic.IList{System.UInt16})">
            <summary>
            Writes a list 
            </summary>
            <param name="list">The list instance to write</param>
        </member>
        <member name="M:Spike.Network.PacketWriter.Write(System.Collections.Generic.IList{System.Int32})">
            <summary>
            Writes a list
            </summary>
            <param name="list">The list instance to write</param>
        </member>
        <member name="M:Spike.Network.PacketWriter.Write(System.Collections.Generic.IList{System.UInt32})">
            <summary>
            Writes a list
            </summary>
            <param name="list">The list instance to write</param>
        </member>
        <member name="M:Spike.Network.PacketWriter.Write(System.Collections.Generic.IList{System.DateTime})">
            <summary>
            Writes a list
            </summary>
            <param name="list">The list instance to write</param>
        </member>
        <member name="M:Spike.Network.PacketWriter.Write(System.Collections.Generic.IList{System.String})">
            <summary>
            Writes a list
            </summary>
            <param name="list">The list instance to write</param>
        </member>
        <member name="M:Spike.Network.PacketWriter.Write(System.Collections.Generic.IList{Spike.Network.IComplexType})">
            <summary>
            Writes a list of packets
            </summary>
            <param name="list">The list instance to write</param>
        </member>
        <member name="M:Spike.Network.PacketWriter.Write``1(System.Collections.Generic.IList{``0})">
            <summary>
            Writes a list of packets
            </summary>
            <param name="list">The list instance to write</param>
        </member>
        <member name="M:Spike.Network.PacketWriter.WriteDynamic(System.Collections.Generic.IList{System.Object})">
            <summary>
            Writes a list of dynamic members
            </summary>
            <param name="list">The list instance to write</param>
        </member>
        <member name="M:Spike.Network.PacketWriter.Recycle">
            <summary>
            Recycles (resets) the object to the original state.
            </summary>
        </member>
        <member name="P:Spike.Network.PacketWriter.Length">
            <summary>
            Gets the total stream length.
            </summary>
        </member>
        <member name="P:Spike.Network.PacketWriter.Position">
            <summary>
            Gets or sets the current stream position.
            </summary>
        </member>
        <member name="P:Spike.Network.PacketWriter.Stream">
            <summary>
            Gets or sets the target stream to use this PacketWriter on.
            </summary>
        </member>
        <member name="M:Spike.Providers.DefaultProviders.GetDefaultProvider(System.Type)">
            <summary>
            Gets default built-in provider
            </summary>
        </member>
        <member name="M:Spike.Providers.DefaultProviders.GetDefaultOrFistProviderFor(System.Type)">
            <summary>
            Gets first or default provider for a particular base provider
            If a default provider does not exists, it will try to search for an implementation
            </summary>
        </member>
        <member name="M:Spike.Providers.DefaultProviders.RegisterAllDefault">
            <summary>
            Registers all default providers, but does not overwrite the existing ones.
            Called when the configuration specified providers were already added.
            </summary>
        </member>
        <member name="P:Spike.Providers.DefaultProviders.Associations">
            <summary>
            Gets all default associations
            </summary>
        </member>
        <member name="T:Spike.TimerPriority">
            <summary>
            Represents the priority used to schedule different instances of <see cref="T:Spike.Timer"/> class.
            </summary>
        </member>
        <member name="F:Spike.TimerPriority.EveryTick">
            <summary>
            Specifies that the <see cref="T:Spike.Timer"/> should be checked on every tick.
            </summary>
        </member>
        <member name="F:Spike.TimerPriority.TenMilliseconds">
            <summary>
            Specifies that the <see cref="T:Spike.Timer"/> should be checked every 10 milliseconds.
            </summary>
        </member>
        <member name="F:Spike.TimerPriority.TwentyFiveMilliseconds">
            <summary>
            Specifies that the <see cref="T:Spike.Timer"/> should be checked every 25 milliseconds.
            </summary>
        </member>
        <member name="F:Spike.TimerPriority.FiftyMilliseconds">
            <summary>
            Specifies that the <see cref="T:Spike.Timer"/> should be checked every 50 milliseconds.
            </summary>
        </member>
        <member name="F:Spike.TimerPriority.TwoHundredFiftyMilliseconds">
            <summary>
            Specifies that the <see cref="T:Spike.Timer"/> should be checked every 250 milliseconds.
            </summary>
        </member>
        <member name="F:Spike.TimerPriority.OneSecond">
            <summary>
            Specifies that the <see cref="T:Spike.Timer"/> should be checked every second.
            </summary>
        </member>
        <member name="F:Spike.TimerPriority.FiveSeconds">
            <summary>
            Specifies that the <see cref="T:Spike.Timer"/> should be checked every 5 seconds.
            </summary>
        </member>
        <member name="F:Spike.TimerPriority.OneMinute">
            <summary>
            Specifies that the <see cref="T:Spike.Timer"/> should be checked every minute.
            </summary>
        </member>
        <member name="T:Spike.TimerCallback">
            <summary>
            Represents the method that will handle OnTick method of a <see cref="T:Spike.Timer"/> instance.
            </summary>
        </member>
        <member name="T:Spike.TimerStateCallback">
            <summary>
            Represents the method that will handle OnTick method of a <see cref="T:Spike.Timer"/> instance.
            </summary>
            <param name="state">The state that should be passed to the method.</param>
        </member>
        <member name="T:Spike.TimerStateCallback`1">
            <summary>
            Represents the method that will handle OnTick method of a <see cref="T:Spike.Timer"/> instance.
            </summary>
            <typeparam name="T">The type of the state that should be passed to the method.</typeparam>
            <param name="state">The state that should be passed to the method.</param>
        </member>
        <member name="T:Spike.ServerStartupEventHandler">
            <summary>
            Represents the method that will handle the Started event of a <see cref="T:Spike.Service"/>.
            </summary>
        </member>
        <member name="T:Spike.ServerShutdownEventHandler">
            <summary>
            Represents the method that will handle the Stopped event of a <see cref="T:Spike.Service"/>.
            </summary>
        </member>
        <member name="T:Spike.ClientConnectEventHandler">
            <summary>
            Represents the method that will handle the ClientConnect event of a <see cref="T:Spike.Service"/>.
            </summary>
        </member>
        <member name="T:Spike.ClientDisconnectEventHandler">
            <summary>
            Represents the method that will handle the ClientDisconnect event of a <see cref="T:Spike.Service"/>.
            </summary>
        </member>
        <member name="T:Spike.SocketConnectEventHandler">
            <summary>
            Represents the method that will handle the SocketConnect event of a <see cref="T:Spike.Service"/>.
            </summary>
        </member>
        <member name="T:Spike.ProviderRegisteredEventHandler">
            <summary>
            Represents the method that will handle the ProviderRegistered event of a <see cref="T:Spike.Service"/>.
            </summary>
        </member>
        <member name="T:Spike.TimerSliceEventHandler">
            <summary>
            Represents the method that will handle the TimeSlice event of a <see cref="T:Spike.Service"/>.
            </summary>
        </member>
        <member name="T:Spike.TimerExceptionHandler">
            <summary>
            Represents the method that will handle the UnhandledTimerException event of a <see cref="T:Spike.Service"/>.
            </summary>
        </member>
        <member name="T:Spike.SocketConnectEventArgs">
            <summary>
            Provides data for the SocketConnect event.
            </summary>
        </member>
        <member name="M:Spike.SocketConnectEventArgs.#ctor(System.Net.Sockets.Socket)">
            <summary>
            Creates a new instance of the <see cref="T:Spike.SocketConnectEventArgs"/> object.
            </summary>
            <param name="s">Socket that have just been connected.</param>
        </member>
        <member name="P:Spike.SocketConnectEventArgs.Socket">
            <summary>
            Gets the socket that have just been connected.
            </summary>
        </member>
        <member name="P:Spike.SocketConnectEventArgs.AllowConnection">
            <summary>
            Gets or sets whether the connection for the socket should be allowed or not.
            </summary>
        </member>
        <member name="T:Spike.ClientConnectEventArgs">
            <summary>
            Provides data for the ClientConnect event.
            </summary>
        </member>
        <member name="M:Spike.ClientConnectEventArgs.#ctor(Spike.IClient)">
            <summary>
            Creates a new instance of the <see cref="T:Spike.ClientConnectEventArgs"/> object.
            </summary>
            <param name="client">The <see cref="T:Spike.IClient"/> with whom the connection was established.</param>
        </member>
        <member name="P:Spike.ClientConnectEventArgs.Client">
            <summary>
            Gets the <see cref="T:Spike.IClient"/> with whom the connection was established.
            </summary>
        </member>
        <member name="T:Spike.ClientDisconnectEventArgs">
            <summary>
            Provides data for the ClientDisconnect event.
            </summary>
        </member>
        <member name="M:Spike.ClientDisconnectEventArgs.#ctor(Spike.IClient)">
            <summary>
            Creates a new instance of the <see cref="T:Spike.ClientDisconnectEventArgs"/> object.
            </summary>
            <param name="client">The <see cref="T:Spike.IClient"/> with whom the connection was broken.</param>
        </member>
        <member name="P:Spike.ClientDisconnectEventArgs.Client">
            <summary>
            Gets the <see cref="T:Spike.IClient"/> with whom the connection was broken.
            </summary>
        </member>
        <member name="T:Spike.ServerShutdownEventArgs">
            <summary>
            Provides data for the Stopped event.
            </summary>
        </member>
        <member name="M:Spike.ServerShutdownEventArgs.#ctor">
            <summary>
            Creates a new instance of the <see cref="T:Spike.ServerShutdownEventArgs"/> object.
            </summary>
        </member>
        <member name="M:Spike.ServerShutdownEventArgs.#ctor(System.Exception)">
            <summary>
            Creates a new instance of the <see cref="T:Spike.ServerShutdownEventArgs"/> object.
            </summary>
            <param name="e">The exception that caused the crash.</param>
        </member>
        <member name="P:Spike.ServerShutdownEventArgs.Exception">
            <summary>
            Gets the exception that caused the shutdown. Can be null.
            </summary>
        </member>
        <member name="P:Spike.ServerShutdownEventArgs.Close">
            <summary>
            Gets or sets whether the service must be closed.
            </summary>
        </member>
        <member name="P:Spike.ServerShutdownEventArgs.IsCrash">
            <summary>
            Gets whether the shutdown was due to a crash or not.
            </summary>
        </member>
        <member name="T:Spike.ProviderRegisteredEventArgs">
            <summary>
            Provides data for the ProviderRegistered event.
            </summary>
        </member>
        <member name="M:Spike.ProviderRegisteredEventArgs.#ctor(System.Type,Spike.Provider)">
            <summary>
            Creates a new instance of the <see cref="T:Spike.ProviderRegisteredEventArgs"/> object.
            </summary>
            <param name="providerBaseType">The type of the provider that was registered.</param>
            <param name="newProvider">The provider that performs the registration.</param>
        </member>
        <member name="P:Spike.ProviderRegisteredEventArgs.ProviderBaseType">
            <summary>
            Gets the type of the provider that was registered
            </summary>
        </member>
        <member name="P:Spike.ProviderRegisteredEventArgs.NewProvider">
            <summary>
            Gets the provider that performs the registration.
            </summary>
        </member>
        <member name="T:Spike.TimerExceptionEventArgs">
            <summary>
            Provides data for the UnhandledTimerException event.
            </summary>
        </member>
        <member name="M:Spike.TimerExceptionEventArgs.#ctor(Spike.Timer,System.Exception)">
            <summary>
            Creates a new instance of the <see cref="T:Spike.TimerExceptionEventArgs"/> object.
            </summary>
            <param name="t">The timer that has thrown the exception.</param>
            <param name="ex">The exception that occured on the timer.</param>
        </member>
        <member name="P:Spike.TimerExceptionEventArgs.Timer">
            <summary>
            Gets the timer object that have thrown the exception
            </summary>
        </member>
        <member name="P:Spike.TimerExceptionEventArgs.StopTimer">
            <summary>
            Gets os sets whether the timer should be stopped or not.
            </summary>
        </member>
        <member name="P:Spike.TimerExceptionEventArgs.Handled">
            <summary>
            Gets or sets whether the exception was handled or not
            </summary>
        </member>
        <member name="P:Spike.TimerExceptionEventArgs.Exception">
            <summary>
            Gets the exception that have been catched.
            </summary>
        </member>
        <member name="T:Spike.Service">
            <summary>
            The <see cref="T:Spike.Service"/> class represents the main entry point to Spike Engine.
            </summary>
        </member>
        <member name="M:Spike.Service.Listen">
            <summary>
            Begins running the main Spike Engine loop on the current thread.
            </summary>
        </member>
        <member name="M:Spike.Service.Set">
            <summary>
            Signal the threading mutex
            </summary>
        </member>
        <member name="M:Spike.Service.Listen(Spike.IBinding)">
            <summary>
            Begins running the main Spike Engine loop on the current thread.
            </summary>
            <param name="binding">Network binding configuration to use</param>
        </member>
        <member name="M:Spike.Service.Listen(Spike.IBinding[])">
            <summary>
            Begins running the main Spike Engine loop on the current thread.
            </summary>
            <param name="bindings">Network binding configuration to use</param>
        </member>
        <member name="M:Spike.Service.Shutdown">
            <summary>
            Stops the server without restarting
            </summary>
        </member>
        <member name="E:Spike.Service.Started">
            <summary>
            Occurs when the service was configured and started.
            </summary>
        </member>
        <member name="E:Spike.Service.Stopped">
            <summary>
            Occurs when the service was stopped.
            </summary>
        </member>
        <member name="E:Spike.Service.SocketConnect">
            <summary>
            Occurs when a socket connection was established.
            </summary>
        </member>
        <member name="E:Spike.Service.ClientConnect">
            <summary>
            Occurs when the service have established a connection with a remote <see cref="T:Spike.IClient"/>.
            </summary>
        </member>
        <member name="E:Spike.Service.ClientDisconnect">
            <summary>
            Occurs when the service have broken an established connection with a remote <see cref="T:Spike.IClient"/>.
            </summary>
        </member>
        <member name="E:Spike.Service.ProviderRegistered">
            <summary>
            Occurs when a provider have been registered (added to the service IoC container).
            </summary>
        </member>
        <member name="E:Spike.Service.TimeSlice">
            <summary>
            Occurs when the service performs a time slice.
            </summary>
        </member>
        <member name="E:Spike.Service.UnhandledTimerException">
            <summary>
            Occurs when the service have encountered an unhandled timer exception.
            </summary>
        </member>
        <member name="P:Spike.Service.SocketPump">
            <summary>
            Gets the network pump used by the service.
            </summary>
        </member>
        <member name="P:Spike.Service.SystemInfo">
            <summary>
            Gets the system information.
            </summary>
        </member>
        <member name="P:Spike.Service.Assembly">
            <summary>
            Gets the entry assembly.
            </summary>
        </member>
        <member name="P:Spike.Service.RuntimeAssembly">
            <summary>
            Gets the Spike Runtime assembly.
            </summary>
        </member>
        <member name="P:Spike.Service.Process">
            <summary>
            Gets the process where the kernel is running.
            </summary>
        </member>
        <member name="P:Spike.Service.Thread">
            <summary>
            Gets the thread where the kernel is running.
            </summary>
        </member>
        <member name="P:Spike.Service.ProcessorCount">
            <summary>
            Gets current processor count of the machine.
            </summary>
        </member>
        <member name="P:Spike.Service.IsUnix">
            <summary>
            Gets whether the process is running on a unix-type system or not.
            </summary>
        </member>
        <member name="P:Spike.Service.Is64Bit">
            <summary>
            Gets whether the operating system is 64bit or not.
            </summary>
        </member>
        <member name="P:Spike.Service.IsStopping">
            <summary>
            Gets whether the service is shutting down or not.
            </summary>
        </member>
        <member name="P:Spike.Service.IsRunning">
            <summary>
            Gets whether the service is running or not.
            </summary>
        </member>
        <member name="P:Spike.Service.IsMultiProcessor">
            <summary>
            Gets whether the host machine is a multi-procesor one or not.
            </summary>
        </member>
        <member name="P:Spike.Service.Logger">
            <summary>
            Gets the log provider (default: multi console output) can be used as error output.
            </summary>
        </member>
        <member name="P:Spike.Service.Http">
            <summary>
            Gets the http handlers provider which is used to handle different http requests.
            </summary>
        </member>
        <member name="P:Spike.Service.Hubs">
            <summary>
            Gets the provider allowing to interact with registered hubs.
            </summary>
        </member>
        <member name="P:Spike.Service.Providers">
            <summary>
            Gets providers container (an IoC container) for different providers of the server.
            </summary>
        </member>
        <member name="P:Spike.Service.Clients">
            <summary>
            Gets the collection of currently connected clients.
            </summary>
        </member>
        <member name="P:Spike.Service.Cloud">
            <summary>
            Gets the <see cref="T:Spike.Network.CloudConnector"/> for the service.
            </summary>
        </member>
        <member name="P:Spike.Service.MetadataProvider">
            <summary>
            Gets or setsthe metadata provider containing the registered module assemblies and 
            various metadata information for those assemblies. This provider is handled separately
            from the all other providers as it is used for bootstrapping the Service.
            </summary>
        </member>
        <member name="P:Spike.Service.ExePath">
            <summary>
            Gets the path of the executable which is currently running
            </summary>
        </member>
        <member name="P:Spike.Service.BaseDirectory">
            <summary>
            Gets or sets the base working directory of the executable
            </summary>
        </member>
        <member name="P:Spike.Service.DataDirectory">
            <summary>
            Gets or sets the data directory for the server
            </summary>
        </member>
        <member name="P:Spike.Service.CyclesPerSecond">
            <summary>
            Gets current cycles per second
            </summary>
        </member>
        <member name="P:Spike.Service.AverageCPS">
            <summary>
            Gets the average cycles per second
            </summary>
        </member>
        <member name="P:Spike.Service.IdleCycleInterval">
            <summary>
            Gets or sets the idle interval on which a new cycle should be forced
            </summary>
        </member>
        <member name="M:Spike.Exceptions.Log(System.Exception)">
            <summary>
            Logs the exception in the console
            </summary>
            <param name="e">Exception to log</param>
        </member>
        <member name="T:Spike.LogLevel">
            <summary>
            Represents the event log granularity
            </summary>
        </member>
        <member name="F:Spike.LogLevel.Info">
            <summary>
            Information only
            </summary>
        </member>
        <member name="F:Spike.LogLevel.Warning">
            <summary>
            Warnings, non-critical errors
            </summary>
        </member>
        <member name="F:Spike.LogLevel.Error">
            <summary>
            Critical errors
            </summary>
        </member>
        <member name="F:Spike.Network.Http.CometPacketType.Unknown">
            <summary>
            Unknown packet type, probably an error.
            </summary>
        </member>
        <member name="F:Spike.Network.Http.CometPacketType.Disconnect">
            <summary>
            Signals disconnection. If no endpoint is specified, disconnects the entire socket.
            </summary>
        </member>
        <member name="F:Spike.Network.Http.CometPacketType.Connect">
            <summary>
            Only used for multiple sockets. Signals a connection to the endpoint. Once the server receives it, it's echoed back to the client.
            </summary>
        </member>
        <member name="F:Spike.Network.Http.CometPacketType.Heartbeat">
            <summary>
            Sends a heartbeat. Heartbeats must be sent within the interval negotiated with the server. 
            It's up to the client to decide the padding (for example, if the heartbeat timeout negogiated
            with the server is 20s, the client might want to send a heartbeat evert 15s).
            </summary>
        </member>
        <member name="F:Spike.Network.Http.CometPacketType.Message">
            <summary>
            A regular message.
            </summary>
        </member>
        <member name="F:Spike.Network.Http.CometPacketType.JsonMessage">
            <summary>
            A JSON encoded message. (Not Used)
            </summary>
        </member>
        <member name="F:Spike.Network.Http.CometPacketType.Event">
            <summary>
            An event is like a json message, but has mandatory name and args fields. name is a string 
            and args an array. (Not Used)
            </summary>
        </member>
        <member name="F:Spike.Network.Http.CometPacketType.Acknowledgement">
            <summary>
            An acknowledgment contains the message id as the message data. If a + sign follows the message id, 
            it's treated as an event message packet.
            </summary>
        </member>
        <member name="F:Spike.Network.Http.CometPacketType.Error">
            <summary>
            For example, if a connection to a sub-socket is unauthorized.
            </summary>
        </member>
        <member name="F:Spike.Network.Http.CometPacketType.NoOperation">
            <summary>
            No operation. Used for example to close a poll after the polling duration times out.
            </summary>
        </member>
        <member name="T:Spike.Network.Http.CometConnectPacket">
            <summary>
            Defines a comet connect packet
            </summary>
        </member>
        <member name="M:Spike.Network.Http.CometConnectPacket.#ctor">
            <summary>
            Creates a new instance of a comet packet.
            </summary>
        </member>
        <member name="M:Spike.Network.Http.CometConnectPacket.Acquire">
            <summary>
            Acquires commet packet that can be used for a connection ACK. 
            </summary>
        </member>
        <member name="T:Spike.Network.Http.CometHeartbeatPacket">
            <summary>
            Defines a comet connect packet
            </summary>
        </member>
        <member name="M:Spike.Network.Http.CometHeartbeatPacket.#ctor">
            <summary>
            Creates a new instance of a comet packet.
            </summary>
        </member>
        <member name="M:Spike.Network.Http.CometHeartbeatPacket.Acquire">
            <summary>
            Acquires commet packet that can be used for sending a heartbeat. 
            </summary>
        </member>
        <member name="T:Spike.Network.Http.CometXhrAckPacket">
            <summary>
            Defines a comet connect packet
            </summary>
        </member>
        <member name="M:Spike.Network.Http.CometXhrAckPacket.#ctor">
            <summary>
            Creates a new instance of a comet packet.
            </summary>
        </member>
        <member name="M:Spike.Network.Http.CometXhrAckPacket.Acquire">
            <summary>
            Acquires commet packet that can be used for sending a heartbeat. 
            </summary>
        </member>
        <member name="T:Spike.Security.SecurityLicense">
            <summary>
            Represents a security license.
            </summary>
        </member>
        <member name="F:Spike.Security.SecurityLicense.PublicKey">
            <summary>
            Spike Public Key.
            </summary>
        </member>
        <member name="M:Spike.Security.SecurityLicense.CheckLicense">
            <summary>
            Checks the license.
            </summary>
        </member>
        <member name="M:Spike.Security.SecurityLicense.GetLicensePath">
            <summary>
            Gets the license file path.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Spike.Security.SecurityLicense.ReplaceLicense(System.String)">
            <summary>
            Attempts to replace the license xml.
            </summary>
            <param name="newLicenseXml">New license xml.</param>
        </member>
        <member name="M:Spike.Security.SecurityLicense.RunInDemo">
            <summary>
            Sets to the demo mode.
            </summary>
        </member>
        <member name="F:Spike.Security.SecurityLicense.Validity">
            <summary>
            The validity of the license.
            </summary>
        </member>
        <member name="M:Spike.Security.SecurityLicense.#ctor">
            <summary>
            New license object in demo mode.
            </summary>
        </member>
        <member name="M:Spike.Security.SecurityLicense.#ctor(System.String)">
            <summary>
            New license object.  Reads license file in and checks for validity +
            key values.  Does not assert Valid Licenseness!
            </summary>
            <param name="licenseFile"></param>
        </member>
        <member name="M:Spike.Security.SecurityLicense.AssertValid">
            <summary>
            Raise an exception if this license is not valid
            </summary>
        </member>
        <member name="M:Spike.Security.SecurityLicense.VerifyXmlDocument(System.Security.Cryptography.RSA,System.Xml.XmlDocument)">
            <summary>
            Verifies the xml document.
            </summary>
        </member>
        <member name="M:Spike.Security.SecurityLicense.ToString">
            <summary>
            Gets the string representation of the license.
            </summary>
            <returns>The string representation of the license.</returns>
        </member>
        <member name="P:Spike.Security.SecurityLicense.Default">
            <summary>
            Gets or sets the license.
            </summary>
        </member>
        <member name="P:Spike.Security.SecurityLicense.Name">
            <summary>
            Gets the name of the license.
            </summary>
        </member>
        <member name="P:Spike.Security.SecurityLicense.Organization">
            <summary>
            Gets the organization of the license.
            </summary>
        </member>
        <member name="P:Spike.Security.SecurityLicense.Type">
            <summary>
            Gets the type of the license.
            </summary>
        </member>
        <member name="P:Spike.Security.SecurityLicense.CCU">
            <summary>
            Gets the type of the license.
            </summary>
        </member>
        <member name="P:Spike.Security.SecurityLicense.Xml">
            <summary>
            Gets the raw xml representation of this license.
            </summary>
        </member>
        <member name="P:Spike.Security.SecurityLicense.IsValid">
            <summary>
            Return boolean as to wether this license is valid or not
            </summary>
        </member>
        <member name="P:Spike.Security.SecurityLicense.IsAcceptingClients">
            <summary>
            Gets whether the security license allows accepting clients or not
            </summary>
        </member>
        <member name="T:Spike.SecurityLicenseException">
            <summary>
            Represents a security license exception.
            </summary>
        </member>
        <member name="M:Spike.SecurityLicenseException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Spike.SecurityLicenseException"/> class.
            </summary>
            <param name="message">
            Message of the exception.
            </param>
        </member>
        <member name="T:Spike.Network.CloudRegistrationRequest">
            <summary>
            Represents a registration request into Spike-Cloud
            </summary>
        </member>
        <member name="T:Spike.Network.CloudRequestBase">
            <summary>
            Represents a request packet for Spike-Cloud, base class.
            </summary>
        </member>
        <member name="M:Spike.Network.CloudRequestBase.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Spike.Network.CloudRequestBase"/> class.
            </summary>
        </member>
        <member name="M:Spike.Network.CloudRegistrationRequest.#ctor">
            <summary>
            Constructs a new instance of <see cref="T:Spike.Network.CloudRegistrationRequest"/>
            </summary>
        </member>
        <member name="M:Spike.Network.CloudRegistrationRequest.CreateRequest">
            <summary>
            Creates a new <see cref="T:Spike.Network.CloudRegistrationRequest"/> for the current instance.
            </summary>
            <returns>The request to be sent to the cloud.</returns>
        </member>
        <member name="P:Spike.Network.CloudRegistrationRequest.MachineName">
            <summary>
            Gets the name of the current machine.
            </summary>
        </member>
        <member name="P:Spike.Network.CloudRegistrationRequest.ProcessName">
            <summary>
            Gets the name of the current spike process.
            </summary>
        </member>
        <member name="P:Spike.Network.CloudRegistrationRequest.ProcessFileName">
            <summary>
            Gets the path to the current process.
            </summary>
        </member>
        <member name="P:Spike.Network.CloudRegistrationRequest.License">
            <summary>
            Gets the license xml.
            </summary>
        </member>
        <member name="P:Spike.Network.CloudRegistrationRequest.Runtime">
            <summary>
            Gets or sets the version of the runtime.
            </summary>
        </member>
        <member name="T:Spike.Network.CloudRequest">
            <summary>
            Represents an identifiable request packet for Spike-Cloud, base class.
            </summary>
        </member>
        <member name="M:Spike.Network.CloudRequest.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Spike.Network.CloudRequest"/> class.
            </summary>
        </member>
        <member name="P:Spike.Network.CloudRequest.Identifier">
            <summary>
            Gets or sets the identification token.
            </summary>
        </member>
        <member name="T:Spike.Network.CloudSpmlRequest">
            <summary>
            Represents a request which contains SPML definitions.
            </summary>
        </member>
        <member name="M:Spike.Network.CloudSpmlRequest.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Spike.Network.CloudSpmlRequest"/> class.
            </summary>
        </member>
        <member name="P:Spike.Network.CloudSpmlRequest.Definitions">
            <summary>
            Gets or sets the protocol definitions.
            </summary>
        </member>
        <member name="T:Spike.Network.CloudRegistration">
            <summary>
            Represents a registration into Spike-Cloud.
            </summary>
        </member>
        <member name="M:Spike.Network.CloudRegistration.#ctor(System.String)">
            <summary>
            Constructs a new instance of <see cref="T:Spike.Network.CloudRegistration"/> class.
            </summary>
        </member>
        <member name="M:Spike.Network.CloudRegistration.GetValue(System.Collections.Generic.Dictionary{System.String,System.Object},System.String)">
            <summary>
            Gets a value from response JSON.
            </summary>
            <param name="keyName">The key to search for.</param>
            <param name="response">The parsed response.</param>
            <returns>The value found (or null)</returns>
        </member>
        <member name="P:Spike.Network.CloudRegistration.IsSuccessful">
            <summary>
            Gets whether the registration was successful or not.
            </summary>
        </member>
        <member name="P:Spike.Network.CloudRegistration.IsError">
            <summary>
            Gets whether the registration was erroneous or not.
            </summary>
        </member>
        <member name="P:Spike.Network.CloudRegistration.Message">
            <summary>
            Gets the message associated.
            </summary>
        </member>
        <member name="P:Spike.Network.CloudRegistration.Payload">
            <summary>
            Gets the payload associated.
            </summary>
        </member>
        <member name="P:Spike.Network.CloudRegistration.Identifier">
            <summary>
            Gets the identification token provided by spike-cloud.
            </summary>
        </member>
        <member name="P:Spike.Network.CloudRegistration.Monitor">
            <summary>
            Gets the variables to monitor.
            </summary>
        </member>
        <member name="T:Spike.Network.CloudMonitorVariable">
            <summary>
            Response to be serialized as JSON.
            </summary>
        </member>
        <member name="M:Spike.Network.CloudMonitorVariable.#ctor(System.String,System.Int32)">
            <summary>
            Constructs a new instance of <see cref="T:Spike.Network.CloudMonitorVariable"/>.
            </summary>
            <param name="name">Name of the variable to monitor</param>
            <param name="frequency">Frequency in secondes (0 = only once, 60 = one per minute, 120 = one every two minutes etc.)</param>
        </member>
        <member name="P:Spike.Network.CloudMonitorVariable.Name">
            <summary>
            Name of the variable to monitor
            </summary>
        </member>
        <member name="P:Spike.Network.CloudMonitorVariable.Frequency">
            <summary>
            Frequency in secondes (0 = only once, 60 = one per minute, 120 = one every two minutes etc.)
            </summary>
        </member>
        <member name="T:Spike.Network.CloudMonitorValue">
            <summary>
            Represents a variable value to be sent back to Spike-Cloud.
            </summary>
        </member>
        <member name="M:Spike.Network.CloudMonitorValue.#ctor(System.String,System.Object)">
            <summary>
            Constructs a new instance of <see cref="T:Spike.Network.CloudMonitorValue"/>
            </summary>
            <param name="name">Name of the variable.</param>
            <param name="value">Value of the variable.</param>
        </member>
        <member name="F:Spike.Network.CloudMonitorValue.Name">
            <summary>
            Gets the name of the value.
            </summary>
        </member>
        <member name="F:Spike.Network.CloudMonitorValue.Value">
            <summary>
            Gets the value of the variable.
            </summary>
        </member>
    </members>
</doc>
