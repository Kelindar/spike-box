// ------------------------------------------------------------------------------
//  <auto-generated>
//     This code was generated by a tool (Spike Build).
//     Generated on: 13:29:48
//     Runtime Version: 4.0.30319.34011
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
//  </auto-generated>
//------------------------------------------------------------------------------
using System;
using System.IO;
using System.Net;
using System.Linq;
using System.Runtime.Serialization;
using System.Collections.Generic;
using Spike;
using Spike.Hubs;
using Spike.Network;
using Spike.Network.Http;

namespace Spike.Network
{
   #region Class: AppProtocol
   ///<summary>
   /// Represents a static class that performs all the necessary initialization routines for AppProtocol.
   ///</summary>
   public static class AppProtocol
   {
      ///<summary>
      /// Performs the necessary configuration. This method is automatically invoked by Spike-Engine runtime.
      ///</summary>
      [InvokeAt(InvokeAtType.Configure)]
      public static void Configure()
      {

         // Signature: AppProtocol.Pull.Handshake.[Int32.Int32].[String.Int32]
         // Signature Digest: "645DFF24"
         PacketIndex.RegisterMetadata(new OperationInfo("645DFF24", true, null, CompressionTarget.Both, Direction.Pull, typeof(HandshakeRequest), HandshakeRequest.CreateInstance, typeof(HandshakeInform), HandshakeInform.CreateInstance));

         // Signature: AppProtocol.Pull.Query.[Int32.String].[String.Int32.Int32.String.ListOfString]
         // Signature Digest: "0EE3FF61"
         PacketIndex.RegisterMetadata(new OperationInfo("0EE3FF61", true, null, CompressionTarget.Both, Direction.Pull, typeof(QueryRequest), QueryRequest.CreateInstance, typeof(QueryInform), QueryInform.CreateInstance));

         // Signature: AppProtocol.Push.Event.[Byte.Int32.String.String].[]
         // Signature Digest: "3678B12B"
         PacketIndex.RegisterMetadata(new OperationInfo("3678B12B", true, null, CompressionTarget.Outgoing, Direction.Push, null, null, typeof(EventInform), EventInform.CreateInstance));

         // Signature: AppProtocol.Pull.Notify.[].[String.Byte.Int32.String.String]
         // Signature Digest: "F0C4718C"
         PacketIndex.RegisterMetadata(new OperationInfo("F0C4718C", true, null, CompressionTarget.Outgoing, Direction.Pull, typeof(NotifyRequest), NotifyRequest.CreateInstance, null, null));

         ProtocolInfo.Register("AppProtocol", "PD94bWwgdmVyc2lvbj0iMS4wIiBlbmNvZGluZz0iVVRGLTgiPz4NCjxQcm90b2NvbCBOYW1lPSJBcHBQcm90b2NvbCIgeG1sbnM9Imh0dHA6Ly93d3cuc3Bpa2UtZW5naW5lLmNvbS8yMDExL3NwbWwiIHhtbG5zOnhzaT0iaHR0cDovL3d3dy53My5vcmcvMjAwMS9YTUxTY2hlbWEtaW5zdGFuY2UiPg0KICA8T3BlcmF0aW9ucz4NCg0KICAgIDxPcGVyYXRpb24gTmFtZT0iSGFuZHNoYWtlIg0KICAgICAgICAgICAgICAgRGlyZWN0aW9uPSJQdWxsIg0KICAgICAgICAgICAgICAgU3VwcHJlc3NTZWN1cml0eT0idHJ1ZSINCiAgICAgICAgICAgICAgIENvbXByZXNzaW9uPSJCb3RoIj4NCiAgICAgIDxJbmNvbWluZz4NCiAgICAgICAgPE1lbWJlciBOYW1lPSJWYWx1ZSIgVHlwZT0iU3RyaW5nIiBEZXNjcmlwdGlvbj0iVGhlIGhhbmRzaGFrZSBwYXJhbWV0ZXJzLCBsb29zZWx5IGRlZmluZWQgaW4gYSBKU09OIG9iamVjdC4iIC8+DQogICAgICAgIDxNZW1iZXIgTmFtZT0iQ2FsbGJhY2siIFR5cGU9IkludDMyIiBEZXNjcmlwdGlvbj0iVGhlIGlkZW50aWZpZXIgb2YgdGhlIGNhbGxiYWNrIHJlcXVlc3QuIiAvPg0KICAgICAgPC9JbmNvbWluZz4NCg0KICAgICAgPE91dGdvaW5nPg0KICAgICAgICA8TWVtYmVyIE5hbWU9IkNhbGxiYWNrIiBUeXBlPSJJbnQzMiIgRGVzY3JpcHRpb249IlRoZSBpZGVudGlmaWVyIG9mIHRoZSBjYWxsYmFjayByZXF1ZXN0LiIgLz4NCiAgICAgICAgPE1lbWJlciBOYW1lPSJUYXJnZXQiIFR5cGU9IkludDMyIiBEZXNjcmlwdGlvbj0iVGhlIHRhcmdldCBpZGVudGlmaWVyLiIgLz4NCiAgICAgIDwvT3V0Z29pbmc+DQogICAgPC9PcGVyYXRpb24+DQogICAgDQogICAgPE9wZXJhdGlvbiBOYW1lPSJRdWVyeSIgDQogICAgICAgICAgICAgICBEaXJlY3Rpb249IlB1bGwiDQogICAgICAgICAgICAgICBTdXBwcmVzc1NlY3VyaXR5PSJ0cnVlIg0KICAgICAgICAgICAgICAgQ29tcHJlc3Npb249IkJvdGgiPg0KICAgICAgPEluY29taW5nPg0KICAgICAgICA8TWVtYmVyIE5hbWU9IlNlc3Npb24iIFR5cGU9IlN0cmluZyIgRGVzY3JpcHRpb249IlRoZSBpZGVudGlmaWVyIG9mIHRoZSBzZXNzaW9uLiIgLz4NCiAgICAgICAgPE1lbWJlciBOYW1lPSJDYWxsYmFjayIgVHlwZT0iSW50MzIiIERlc2NyaXB0aW9uPSJUaGUgaWRlbnRpZmllciBvZiB0aGUgY2FsbGJhY2sgcmVxdWVzdC4iIC8+DQogICAgICAgIDxNZW1iZXIgTmFtZT0iVGFyZ2V0IiBUeXBlPSJJbnQzMiIgRGVzY3JpcHRpb249IlRoZSB0YXJnZXQgaWRlbnRpZmllci4iIC8+DQogICAgICAgIDxNZW1iZXIgTmFtZT0iTWV0aG9kIiBUeXBlPSJTdHJpbmciIERlc2NyaXB0aW9uPSJUaGUgaWRlbnRpZmllciBvZiB0aGUgbWV0aG9kIHRvIGNhbGwuIiAvPg0KICAgICAgICA8TWVtYmVyIE5hbWU9IkFyZ3VtZW50cyIgVHlwZT0iTGlzdE9mU3RyaW5nIiBEZXNjcmlwdGlvbj0iVGhlIGxpc3Qgb2YgYXJndW1lbnRzIHRoYXQgc2hvdWxkIGJlIHBhc3NlZCB0byB0aGUgY2FsbC4iIC8+DQogICAgICA8L0luY29taW5nPg0KDQogICAgICA8T3V0Z29pbmc+DQogICAgICAgIDxNZW1iZXIgTmFtZT0iQ2FsbGJhY2siIFR5cGU9IkludDMyIiBEZXNjcmlwdGlvbj0iVGhlIGlkZW50aWZpZXIgb2YgdGhlIGNhbGxiYWNrIGluZm9ybS4iIC8+DQogICAgICAgIDxNZW1iZXIgTmFtZT0iUmVzdWx0IiBUeXBlPSJTdHJpbmciIERlc2NyaXB0aW9uPSJUaGUgY29tcHJlc3NlZCBKU09OIHBheWxvYWQgb2YgdGhlIGluZm9ybS4iIC8+DQogICAgICA8L091dGdvaW5nPg0KICAgIDwvT3BlcmF0aW9uPg0KDQogICAgPE9wZXJhdGlvbiBOYW1lPSJFdmVudCINCiAgICAgICAgICAgICAgIERpcmVjdGlvbj0iUHVzaCINCiAgICAgICAgICAgICAgIFN1cHByZXNzU2VjdXJpdHk9InRydWUiDQogICAgICAgICAgICAgICBDb21wcmVzc2lvbj0iT3V0Z29pbmciPg0KICAgICAgPE91dGdvaW5nPg0KICAgICAgICA8TWVtYmVyIE5hbWU9IlR5cGUiICAgVHlwZT0iQnl0ZSIgICBEZXNjcmlwdGlvbj0iVGhlIHR5cGUgb2YgdGhlIGV2ZW50LiIgLz4NCiAgICAgICAgPE1lbWJlciBOYW1lPSJUYXJnZXQiIFR5cGU9IkludDMyIiAgRGVzY3JpcHRpb249IlRoZSB0YXJnZXQgaWQgb2YgdGhlIGV2ZW50LiIgLz4NCiAgICAgICAgPE1lbWJlciBOYW1lPSJOYW1lIiAgIFR5cGU9IlN0cmluZyIgRGVzY3JpcHRpb249IlRoZSBuYW1lIG9mIHRoZSBldmVudC4iIC8+DQogICAgICAgIDxNZW1iZXIgTmFtZT0iVmFsdWUiICBUeXBlPSJTdHJpbmciIERlc2NyaXB0aW9uPSJUaGUgdmFsdWUgb2YgdGhlIGV2ZW50LCBjb21wcmVzc2VkIGluIEpTT04gaWYgbmVjZXNzYXJ5LiIgLz4NCiAgICAgIDwvT3V0Z29pbmc+DQogICAgICANCiAgICA8L09wZXJhdGlvbj4NCg0KICAgIDxPcGVyYXRpb24gTmFtZT0iTm90aWZ5Ig0KICAgICAgICAgICAgICAgRGlyZWN0aW9uPSJQdWxsIg0KICAgICAgICAgICAgICAgU3VwcHJlc3NTZWN1cml0eT0idHJ1ZSINCiAgICAgICAgICAgICAgIENvbXByZXNzaW9uPSJPdXRnb2luZyI+DQogICAgICA8SW5jb21pbmc+DQogICAgICAgIDxNZW1iZXIgTmFtZT0iU2Vzc2lvbiIgVHlwZT0iU3RyaW5nIiBEZXNjcmlwdGlvbj0iVGhlIGlkZW50aWZpZXIgb2YgdGhlIHNlc3Npb24uIiAvPg0KICAgICAgICA8TWVtYmVyIE5hbWU9IlR5cGUiICAgVHlwZT0iQnl0ZSIgICBEZXNjcmlwdGlvbj0iVGhlIHR5cGUgb2YgdGhlIGV2ZW50LiIgLz4NCiAgICAgICAgPE1lbWJlciBOYW1lPSJUYXJnZXQiIFR5cGU9IkludDMyIiAgRGVzY3JpcHRpb249IlRoZSB0YXJnZXQgaWQgb2YgdGhlIGV2ZW50LiIgLz4NCiAgICAgICAgPE1lbWJlciBOYW1lPSJOYW1lIiAgIFR5cGU9IlN0cmluZyIgRGVzY3JpcHRpb249IlRoZSBuYW1lIG9mIHRoZSBldmVudC4iIC8+DQogICAgICAgIDxNZW1iZXIgTmFtZT0iVmFsdWUiICBUeXBlPSJTdHJpbmciIERlc2NyaXB0aW9uPSJUaGUgdmFsdWUgb2YgdGhlIGV2ZW50LCBjb21wcmVzc2VkIGluIEpTT04gaWYgbmVjZXNzYXJ5LiIgLz4NCiAgICAgIDwvSW5jb21pbmc+DQoNCiAgICA8L09wZXJhdGlvbj4NCiAgICANCiAgPC9PcGVyYXRpb25zPg0KPC9Qcm90b2NvbD4=");
      }

      ///<summary>
      /// Performs the necessary initaliazation. This method is automatically invoked by Spike-Engine runtime.
      ///</summary>
      [InvokeAt(InvokeAtType.Initialize)]
      public static void Initialize()
      {

         // AppProtocol.Pull.Handshake.[Int32.Int32].[String.Int32]
         PacketHandlers.Register("645DFF24", InternalHandshake);

         // AppProtocol.Pull.Query.[Int32.String].[String.Int32.Int32.String.ListOfString]
         PacketHandlers.Register("0EE3FF61", InternalQuery);

         // AppProtocol.Pull.Notify.[].[String.Byte.Int32.String.String]
         PacketHandlers.Register("F0C4718C", InternalNotify);
      }
      ///<summary>
      /// Event that is invoked when a request for Handshake operation comes in.
      ///</summary>
      public static event RequestHandler<HandshakeRequest> Handshake;

      private static void InternalHandshake(IClient client, Packet requestPacket)
      {
         HandshakeRequest request = requestPacket as HandshakeRequest;
         if(Handshake != null)
            Handshake(client, request);
      }
      ///<summary>
      /// Event that is invoked when a request for Query operation comes in.
      ///</summary>
      public static event RequestHandler<QueryRequest> Query;

      private static void InternalQuery(IClient client, Packet requestPacket)
      {
         QueryRequest request = requestPacket as QueryRequest;
         if(Query != null)
            Query(client, request);
      }
      ///<summary>
      /// Event that is invoked when a request for Notify operation comes in.
      ///</summary>
      public static event RequestHandler<NotifyRequest> Notify;

      private static void InternalNotify(IClient client, Packet requestPacket)
      {
         NotifyRequest request = requestPacket as NotifyRequest;
         if(Notify != null)
            Notify(client, request);
      }
   }
   #endregion

   #region Class: AppProtocolExtensions
   ///<summary>
   /// Represents a static class that contains IClient extension methods for AppProtocol.
   ///</summary>
   public static class AppProtocolExtensions
   {
      /// <summary>
      /// Sents a reply to the operation: 
      /// </summary>
      public static void SendHandshakeInform(this IClient client, Int32 Callback, Int32 Target)
      {
         HandshakeInform packet = HandshakeInform.Metadata.AcquireInform() as HandshakeInform;
         packet.Callback = Callback;
         packet.Target = Target;
         client.Send(packet);
      }

      /// <summary>
      /// Sents a reply to the operation: 
      /// </summary>
      public static void SendHandshakeInform(this IClient client, HandshakeInform packet)
      {
         client.Send(packet);
      }
      /// <summary>
      /// Sents a reply to the operation: 
      /// </summary>
      public static void SendQueryInform(this IClient client, Int32 Callback, String Result)
      {
         QueryInform packet = QueryInform.Metadata.AcquireInform() as QueryInform;
         packet.Callback = Callback;
         packet.Result = Result;
         client.Send(packet);
      }

      /// <summary>
      /// Sents a reply to the operation: 
      /// </summary>
      public static void SendQueryInform(this IClient client, QueryInform packet)
      {
         client.Send(packet);
      }
      /// <summary>
      /// Sents a reply to the operation: 
      /// </summary>
      public static void SendEventInform(this IClient client, Byte Type, Int32 Target, String Name, String Value)
      {
         EventInform packet = EventInform.Metadata.AcquireInform() as EventInform;
         packet.Type = Type;
         packet.Target = Target;
         packet.Name = Name;
         packet.Value = Value;
         client.Send(packet);
      }

      /// <summary>
      /// Sents a reply to the operation: 
      /// </summary>
      public static void SendEventInform(this IClient client, EventInform packet)
      {
         client.Send(packet);
      }
   }
   #endregion

   #region Class: AppProtocolHubBase
   ///<summary>
   /// Represents an optional, abstract hub class for AppProtocol.
   ///</summary>
   public abstract class AppProtocolHubBase : Hub
   {
      /// <summary>
      /// Constructs a new instance of a <see cref="AppProtocolHubBase"/> class. The instance will be locked
      /// with a default randomly generated publish key.
      /// </summary>
      public AppProtocolHubBase() : base()
      {
      }

      /// <summary>
      /// Constructs a new instance of a <see cref="AppProtocolHubBase"/> class. The instance will be locked
      /// with a default randomly generated publish key.
      /// </summary>
      /// <param name="name">The name of the hub.</param>
      public AppProtocolHubBase(string name) : base(name)
      {
      }

      /// <summary>
      /// Constructs a new instance of a <see cref="AppProtocolHubBase"/> class. The instance will be locked with a 
      /// default randomly generated publish key.
      /// </summary>
      /// <param name="autoRegister">Whether the hub should be automatically registered in the provider or not.</param>
      /// <param name="name">The name of the hub.</param>
      public AppProtocolHubBase(string name, bool autoRegister)
          : base(name, autoRegister)
      {
      }

      /// <summary>
      /// Constructs a new instance of a <see cref="AppProtocolHubBase"/> class. 
      /// </summary>
      /// <param name="name">The name of the hub.</param>
      /// <param name="defaultPublishKey">The default publish key to apply to this hub.</param>
      /// <param name="defaultSubscribeKey">The default subscribe key to apply to this hub.</param>
      public AppProtocolHubBase(string name, string defaultPublishKey, string defaultSubscribeKey)
          : base(name, defaultPublishKey, defaultSubscribeKey)
      {
      }

      /// <summary>
      /// Constructs a new instance of a <see cref="AppProtocolHubBase"/> class.
      /// </summary>
      /// <param name="name">The name of the hub.</param>
      /// <param name="defaultPublishKey">The default publish key to apply to this hub.</param>
      public AppProtocolHubBase(string name, string defaultPublishKey)
          : base(name, defaultPublishKey)
      {
      }

      /// <summary>
      /// Constructs a new instance of a <see cref="AppProtocolHubBase"/> class.
      /// </summary>
      /// <param name="name">The name of the hub.</param>
      /// <param name="defaultPublishKey">The default publish key to apply to this hub.</param>
      /// <param name="autoRegister">Whether the hub should be automatically registered in the provider or not.</param>
      public AppProtocolHubBase(string name, string defaultPublishKey, bool autoRegister)
          : base(name, defaultPublishKey, autoRegister)
      {
      }

      /// <summary>
      /// Constructs a new instance of a <see cref="AppProtocolHubBase"/> class.
      /// </summary>
      /// <param name="name">The name of the hub.</param>
      /// <param name="defaultPublishKey">The default publish key to apply to this hub.</param>
      /// <param name="defaultSubscribeKey">The default subscribe key to apply to this hub.</param>
      /// <param name="autoRegister">Whether the hub should be automatically registered in the provider or not.</param>
      public AppProtocolHubBase(string name, string defaultPublishKey, string defaultSubscribeKey, bool autoRegister)
          : base(name, defaultPublishKey, defaultSubscribeKey,  autoRegister)
      {
      }

      /// <summary>
      /// Invoked when a new instance of a <see cref="Hub"/> is constructed.
      /// </summary>
      protected override void OnAfterConstruct()
      {
         // Call the base
         base.OnAfterConstruct();

         // Hook the handlers
         AppProtocol.Handshake += this.OnHandshake;
         AppProtocol.Query += this.OnQuery;
         AppProtocol.Notify += this.OnNotify;
      }

      /// <summary>
      /// Releases the unmanaged resources used by the ByteSTream class and optionally releases the managed resources.
      /// </summary>
      /// <param name="disposing">If set to true, release both managed and unmanaged resources, othewise release only unmanaged resources. </param>
      protected override void Dispose(bool disposing)
      {
         // Call the base
         base.Dispose(disposing);
         
         // Unhook the handlers.
         AppProtocol.Handshake -= this.OnHandshake;
         AppProtocol.Query -= this.OnQuery;
         AppProtocol.Notify -= this.OnNotify;
      }


      /// <summary>
      /// Invoked when an incoming request for Handshake operation comes in.
      /// </summary>
      public abstract void OnHandshake(IClient client, HandshakeRequest packet);

      /// <summary>
      /// Invoked when an incoming request for Query operation comes in.
      /// </summary>
      public abstract void OnQuery(IClient client, QueryRequest packet);

      /// <summary>
      /// Invoked when an incoming request for Notify operation comes in.
      /// </summary>
      public abstract void OnNotify(IClient client, NotifyRequest packet);
   }
   #endregion

   #region Packet: HandshakeRequest
   /// <summary>
   /// HandshakeRequest defines a packet container object for the Handshake operation.
   /// </summary>
   public sealed class HandshakeRequest: SecpPacket
   {

      /// <summary>
      /// Creates a new empty instance of the packet
      /// </summary>
      public HandshakeRequest() : base(PacketKey.Get("645DFF24"))
      {
      }

      /// <summary>
      /// Creates a new instance of the packet by initializing all its fields
      /// </summary>
      public HandshakeRequest(String Value, Int32 Callback) : base(PacketKey.Get("645DFF24"))
      {
         this.Value = Value;
         this.Callback = Callback;
      }


      /// <summary>
      /// Gets or sets the Value field. The handshake parameters, loosely defined in a JSON object.
      /// </summary>
      public String Value;

      /// <summary>
      /// Gets or sets the Callback field. The identifier of the callback request.
      /// </summary>
      public Int32 Callback;

      /// <summary>
      /// Gets the direction of the packet: whether the first 
      /// call is initiated on server (Push) or client (Pull)
      /// </summary>
      public sealed override PacketDirection Direction
      {
         get { return PacketDirection.Incoming; } 
      }

      /// <summary>
      /// Serializes this complex type to a binary stream.
      /// </summary>
      public override void Write(PacketWriter Writer)
      {
         Writer.Write(Value);
         Writer.Write(Callback);
      }

      /// <summary>
      /// Serializes this complex type to a binary stream.
      /// </summary>
      public override void Read(PacketReader Reader)
      {
         this.Value = Reader.ReadString();
         this.Callback = Reader.ReadInt32();
      }

      /// <summary>
      /// A factory method that constructs an instance of HandshakeRequest packet.
      /// </summary>
      public static Packet CreateInstance()
      {
         return new HandshakeRequest();
      }

      /// <summary>
      /// Gets the metadata for the operation which contains the given packet type.
      /// </summary>
      public static OperationInfo Metadata
      {
         get
         {
            if(OpInfo == null)
            {
               OpInfo = PacketIndex.GetMetadata("645DFF24");
            }
            return OpInfo;
         }
      }

      /// <summary>
      /// Cached metadata reference for faster access. 
      /// </summary>
      private static OperationInfo OpInfo = null;
   }
   #endregion

   #region Packet: QueryRequest
   /// <summary>
   /// QueryRequest defines a packet container object for the Query operation.
   /// </summary>
   public sealed class QueryRequest: SecpPacket
   {

      /// <summary>
      /// Creates a new empty instance of the packet
      /// </summary>
      public QueryRequest() : base(PacketKey.Get("0EE3FF61"))
      {
      }

      /// <summary>
      /// Creates a new instance of the packet by initializing all its fields
      /// </summary>
      public QueryRequest(String Session, Int32 Callback, Int32 Target, String Method, IList<String> Arguments) : base(PacketKey.Get("0EE3FF61"))
      {
         this.Session = Session;
         this.Callback = Callback;
         this.Target = Target;
         this.Method = Method;
         this.Arguments = Arguments;
      }


      /// <summary>
      /// Gets or sets the Session field. The identifier of the session.
      /// </summary>
      public String Session;

      /// <summary>
      /// Gets or sets the Callback field. The identifier of the callback request.
      /// </summary>
      public Int32 Callback;

      /// <summary>
      /// Gets or sets the Target field. The target identifier.
      /// </summary>
      public Int32 Target;

      /// <summary>
      /// Gets or sets the Method field. The identifier of the method to call.
      /// </summary>
      public String Method;

      /// <summary>
      /// Gets or sets the Arguments field. The list of arguments that should be passed to the call.
      /// </summary>
      public IList<String> Arguments;

      /// <summary>
      /// Gets the direction of the packet: whether the first 
      /// call is initiated on server (Push) or client (Pull)
      /// </summary>
      public sealed override PacketDirection Direction
      {
         get { return PacketDirection.Incoming; } 
      }

      /// <summary>
      /// Serializes this complex type to a binary stream.
      /// </summary>
      public override void Write(PacketWriter Writer)
      {
         Writer.Write(Session);
         Writer.Write(Callback);
         Writer.Write(Target);
         Writer.Write(Method);
         Writer.Write(Arguments);
      }

      /// <summary>
      /// Serializes this complex type to a binary stream.
      /// </summary>
      public override void Read(PacketReader Reader)
      {
         this.Session = Reader.ReadString();
         this.Callback = Reader.ReadInt32();
         this.Target = Reader.ReadInt32();
         this.Method = Reader.ReadString();
         this.Arguments = Reader.ReadListOfString();
      }

      /// <summary>
      /// A factory method that constructs an instance of QueryRequest packet.
      /// </summary>
      public static Packet CreateInstance()
      {
         return new QueryRequest();
      }

      /// <summary>
      /// Gets the metadata for the operation which contains the given packet type.
      /// </summary>
      public static OperationInfo Metadata
      {
         get
         {
            if(OpInfo == null)
            {
               OpInfo = PacketIndex.GetMetadata("0EE3FF61");
            }
            return OpInfo;
         }
      }

      /// <summary>
      /// Cached metadata reference for faster access. 
      /// </summary>
      private static OperationInfo OpInfo = null;
   }
   #endregion

   #region Packet: NotifyRequest
   /// <summary>
   /// NotifyRequest defines a packet container object for the Notify operation.
   /// </summary>
   public sealed class NotifyRequest: SecpPacket
   {

      /// <summary>
      /// Creates a new empty instance of the packet
      /// </summary>
      public NotifyRequest() : base(PacketKey.Get("F0C4718C"))
      {
      }

      /// <summary>
      /// Creates a new instance of the packet by initializing all its fields
      /// </summary>
      public NotifyRequest(String Session, Byte Type, Int32 Target, String Name, String Value) : base(PacketKey.Get("F0C4718C"))
      {
         this.Session = Session;
         this.Type = Type;
         this.Target = Target;
         this.Name = Name;
         this.Value = Value;
      }


      /// <summary>
      /// Gets or sets the Session field. The identifier of the session.
      /// </summary>
      public String Session;

      /// <summary>
      /// Gets or sets the Type field. The type of the event.
      /// </summary>
      public Byte Type;

      /// <summary>
      /// Gets or sets the Target field. The target id of the event.
      /// </summary>
      public Int32 Target;

      /// <summary>
      /// Gets or sets the Name field. The name of the event.
      /// </summary>
      public String Name;

      /// <summary>
      /// Gets or sets the Value field. The value of the event, compressed in JSON if necessary.
      /// </summary>
      public String Value;

      /// <summary>
      /// Gets the direction of the packet: whether the first 
      /// call is initiated on server (Push) or client (Pull)
      /// </summary>
      public sealed override PacketDirection Direction
      {
         get { return PacketDirection.Incoming; } 
      }

      /// <summary>
      /// Serializes this complex type to a binary stream.
      /// </summary>
      public override void Write(PacketWriter Writer)
      {
         Writer.Write(Session);
         Writer.Write(Type);
         Writer.Write(Target);
         Writer.Write(Name);
         Writer.Write(Value);
      }

      /// <summary>
      /// Serializes this complex type to a binary stream.
      /// </summary>
      public override void Read(PacketReader Reader)
      {
         this.Session = Reader.ReadString();
         this.Type = Reader.ReadByte();
         this.Target = Reader.ReadInt32();
         this.Name = Reader.ReadString();
         this.Value = Reader.ReadString();
      }

      /// <summary>
      /// A factory method that constructs an instance of NotifyRequest packet.
      /// </summary>
      public static Packet CreateInstance()
      {
         return new NotifyRequest();
      }

      /// <summary>
      /// Gets the metadata for the operation which contains the given packet type.
      /// </summary>
      public static OperationInfo Metadata
      {
         get
         {
            if(OpInfo == null)
            {
               OpInfo = PacketIndex.GetMetadata("F0C4718C");
            }
            return OpInfo;
         }
      }

      /// <summary>
      /// Cached metadata reference for faster access. 
      /// </summary>
      private static OperationInfo OpInfo = null;
   }
   #endregion

   #region Packet: HandshakeInform
   /// <summary>
   /// HandshakeInform defines a packet container object for the Handshake operation.
   /// </summary>
   public sealed class HandshakeInform: SecpPacket
   {

      /// <summary>
      /// Creates a new empty instance of the packet
      /// </summary>
      public HandshakeInform() : base(PacketKey.Get("645DFF24"))
      {
      }

      /// <summary>
      /// Creates a new instance of the packet by initializing all its fields
      /// </summary>
      public HandshakeInform(Int32 Callback, Int32 Target) : base(PacketKey.Get("645DFF24"))
      {
         this.Callback = Callback;
         this.Target = Target;
      }


      /// <summary>
      /// Gets or sets the Callback field. The identifier of the callback request.
      /// </summary>
      public Int32 Callback;

      /// <summary>
      /// Gets or sets the Target field. The target identifier.
      /// </summary>
      public Int32 Target;

      /// <summary>
      /// Gets the direction of the packet: whether the first 
      /// call is initiated on server (Push) or client (Pull)
      /// </summary>
      public sealed override PacketDirection Direction
      {
         get { return PacketDirection.Outgoing; } 
      }

      /// <summary>
      /// Serializes this complex type to a binary stream.
      /// </summary>
      public override void Write(PacketWriter Writer)
      {
         Writer.Write(Callback);
         Writer.Write(Target);
      }

      /// <summary>
      /// Serializes this complex type to a binary stream.
      /// </summary>
      public override void Read(PacketReader Reader)
      {
         this.Callback = Reader.ReadInt32();
         this.Target = Reader.ReadInt32();
      }

      /// <summary>
      /// A factory method that constructs an instance of HandshakeInform packet.
      /// </summary>
      public static Packet CreateInstance()
      {
         return new HandshakeInform();
      }

      /// <summary>
      /// Gets the metadata for the operation which contains the given packet type.
      /// </summary>
      public static OperationInfo Metadata
      {
         get
         {
            if(OpInfo == null)
            {
               OpInfo = PacketIndex.GetMetadata("645DFF24");
            }
            return OpInfo;
         }
      }

      /// <summary>
      /// Cached metadata reference for faster access. 
      /// </summary>
      private static OperationInfo OpInfo = null;
   }
   #endregion

   #region Packet: QueryInform
   /// <summary>
   /// QueryInform defines a packet container object for the Query operation.
   /// </summary>
   public sealed class QueryInform: SecpPacket
   {

      /// <summary>
      /// Creates a new empty instance of the packet
      /// </summary>
      public QueryInform() : base(PacketKey.Get("0EE3FF61"))
      {
      }

      /// <summary>
      /// Creates a new instance of the packet by initializing all its fields
      /// </summary>
      public QueryInform(Int32 Callback, String Result) : base(PacketKey.Get("0EE3FF61"))
      {
         this.Callback = Callback;
         this.Result = Result;
      }


      /// <summary>
      /// Gets or sets the Callback field. The identifier of the callback inform.
      /// </summary>
      public Int32 Callback;

      /// <summary>
      /// Gets or sets the Result field. The compressed JSON payload of the inform.
      /// </summary>
      public String Result;

      /// <summary>
      /// Gets the direction of the packet: whether the first 
      /// call is initiated on server (Push) or client (Pull)
      /// </summary>
      public sealed override PacketDirection Direction
      {
         get { return PacketDirection.Outgoing; } 
      }

      /// <summary>
      /// Serializes this complex type to a binary stream.
      /// </summary>
      public override void Write(PacketWriter Writer)
      {
         Writer.Write(Callback);
         Writer.Write(Result);
      }

      /// <summary>
      /// Serializes this complex type to a binary stream.
      /// </summary>
      public override void Read(PacketReader Reader)
      {
         this.Callback = Reader.ReadInt32();
         this.Result = Reader.ReadString();
      }

      /// <summary>
      /// A factory method that constructs an instance of QueryInform packet.
      /// </summary>
      public static Packet CreateInstance()
      {
         return new QueryInform();
      }

      /// <summary>
      /// Gets the metadata for the operation which contains the given packet type.
      /// </summary>
      public static OperationInfo Metadata
      {
         get
         {
            if(OpInfo == null)
            {
               OpInfo = PacketIndex.GetMetadata("0EE3FF61");
            }
            return OpInfo;
         }
      }

      /// <summary>
      /// Cached metadata reference for faster access. 
      /// </summary>
      private static OperationInfo OpInfo = null;
   }
   #endregion

   #region Packet: EventInform
   /// <summary>
   /// EventInform defines a packet container object for the Event operation.
   /// </summary>
   public sealed class EventInform: SecpPacket
   {

      /// <summary>
      /// Creates a new empty instance of the packet
      /// </summary>
      public EventInform() : base(PacketKey.Get("3678B12B"))
      {
      }

      /// <summary>
      /// Creates a new instance of the packet by initializing all its fields
      /// </summary>
      public EventInform(Byte Type, Int32 Target, String Name, String Value) : base(PacketKey.Get("3678B12B"))
      {
         this.Type = Type;
         this.Target = Target;
         this.Name = Name;
         this.Value = Value;
      }


      /// <summary>
      /// Gets or sets the Type field. The type of the event.
      /// </summary>
      public Byte Type;

      /// <summary>
      /// Gets or sets the Target field. The target id of the event.
      /// </summary>
      public Int32 Target;

      /// <summary>
      /// Gets or sets the Name field. The name of the event.
      /// </summary>
      public String Name;

      /// <summary>
      /// Gets or sets the Value field. The value of the event, compressed in JSON if necessary.
      /// </summary>
      public String Value;

      /// <summary>
      /// Gets the direction of the packet: whether the first 
      /// call is initiated on server (Push) or client (Pull)
      /// </summary>
      public sealed override PacketDirection Direction
      {
         get { return PacketDirection.Outgoing; } 
      }

      /// <summary>
      /// Serializes this complex type to a binary stream.
      /// </summary>
      public override void Write(PacketWriter Writer)
      {
         Writer.Write(Type);
         Writer.Write(Target);
         Writer.Write(Name);
         Writer.Write(Value);
      }

      /// <summary>
      /// Serializes this complex type to a binary stream.
      /// </summary>
      public override void Read(PacketReader Reader)
      {
         this.Type = Reader.ReadByte();
         this.Target = Reader.ReadInt32();
         this.Name = Reader.ReadString();
         this.Value = Reader.ReadString();
      }

      /// <summary>
      /// A factory method that constructs an instance of EventInform packet.
      /// </summary>
      public static Packet CreateInstance()
      {
         return new EventInform();
      }

      /// <summary>
      /// Gets the metadata for the operation which contains the given packet type.
      /// </summary>
      public static OperationInfo Metadata
      {
         get
         {
            if(OpInfo == null)
            {
               OpInfo = PacketIndex.GetMetadata("3678B12B");
            }
            return OpInfo;
         }
      }

      /// <summary>
      /// Cached metadata reference for faster access. 
      /// </summary>
      private static OperationInfo OpInfo = null;
   }
   #endregion
}
